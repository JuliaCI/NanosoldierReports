cset: moving following pidspec: 2393412
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.894329219 seconds)
loading group "array"... done (took 3.112822131 seconds)
loading group "misc"... done (took 0.411315305 seconds)
loading group "sort"... done (took 0.247952801 seconds)
loading group "frontend"... done (took 0.004569305 seconds)
loading group "shootout"... done (took 0.700681207 seconds)
loading group "sparse"... done (took 0.496896687 seconds)
loading group "scalar"... done (took 1.013026595 seconds)
loading group "dates"... done (took 0.136272139 seconds)
loading group "alloc"... done (took 0.016696983 seconds)
loading group "find"... done (took 1.205979503 seconds)
loading group "io"... done (took 1.188923943 seconds)
loading group "tuple"... done (took 0.770633247 seconds)
loading group "string"... done (took 0.212566941 seconds)
loading group "random"... done (took 2.192600533 seconds)
loading group "micro"... done (took 0.04665663 seconds)
loading group "broadcast"... done (took 0.567458879 seconds)
loading group "parallel"... done (took 0.020253703 seconds)
loading group "linalg"... done (took 2.527683838 seconds)
loading group "collection"... done (took 5.732875101 seconds)
loading group "simd"... done (took 0.894852952 seconds)
loading group "inference"... done (took 2.380136567 seconds)
loading group "union"... done (took 2.838527671 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.148438652 seconds)
  done (took 1.848500598 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.140274385 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.244496464 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.601991427 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.151616759 seconds)
  done (took 3.818947866 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.781667379 seconds)
  done (took 1.472251283 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.990128316 seconds)
  done (took 1.695402092 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.9741576 seconds)
  done (took 1.666840981 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.224276707 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.192693934 seconds)
  done (took 1.112388027 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.817077569 seconds)
  done (took 5.518438508 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.486058877 seconds)
  done (took 2.189207209 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.053264833 seconds)
  done (took 0.782060964 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.223213179 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.216152424 seconds)
  done (took 1.182138803 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233508822 seconds)
  done (took 0.945988005 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.620603859 seconds)
  done (took 1.332313081 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.370070569 seconds)
  done (took 1.085244079 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.342315695 seconds)
  done (took 2.059030275 seconds)
done (took 27.470779393 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.262483342 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123688643 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116262355 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.156702991 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000301448 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.157555039 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.092148079 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.315632163 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112316581 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.180218773 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.032758289 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.468067113 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027078469 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.250021735 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044638352 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028208563 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.160187426 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020400015 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.431730497 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020903889 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5045e-5 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015376484 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.195222729 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.307829364 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073689965 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068160738 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03650438 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039485282 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029639923 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063669194 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0204787 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.360471518 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054650416 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.574277468 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037149431 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059687243 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116754066 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120757591 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023424147 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023717471 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030962373 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072804448 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.029311774 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4494e-5 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06694033 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066028292 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046984444 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030279795 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.01761645 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059844826 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032220387 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071507208 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020217337 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 0.083179403 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044558788 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.0391788 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052431861 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085358689 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024656484 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028547393 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029320012 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047805838 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019883433 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058216943 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.044910279 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.074759868 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.121482335 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063622058 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027130202 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023554334 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11599266 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042666179 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.027699249 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04508053 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037647631 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042253872 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077760329 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055176586 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062913259 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082249859 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063751842 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092962905 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050551181 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072533175 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042299153 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033293928 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029047612 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.20235266 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.016564063 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028702813 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.04607508 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026133988 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047277714 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.015104391 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000305425 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026889971 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019477885 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029211522 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056459027 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.000188308 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038553726 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042641141 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049004731 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.01092303 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046054862 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000481464 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.02045045 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.022837127 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.1411e-5 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058568001 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.01112619 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.5108e-5 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023951738 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026379247 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.011004598 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064723039 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023866072 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052957933 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059561707 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014523689 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.017611474 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086597025 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056805474 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.022974914 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030323823 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047182628 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.014117161 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.0703e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077223192 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.015172862 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022099405 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050381043 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.04318593 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015531254 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052695356 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.021246258 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030367399 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.9046e-5 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027173071 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036652163 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010816983 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066778618 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059421282 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011900475 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072656699 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017719488 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047487496 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08640459 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048762665 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014360534 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.038865147 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.01144064 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.030639802 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041674214 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048893751 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031507964 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.9625e-5 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049889869 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014590983 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.063912645 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064868078 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055521961 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048203717 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024087211 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052462525 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043916723 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069532475 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.013959753 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049738379 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020212647 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020462851 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028111507 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019953707 seconds)
    (174/608) benchmarking "5d"...
    done (took 0.208326469 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015766085 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.6437e-5 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055188331 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014268672 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037371316 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018748491 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006756701 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000213331 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031023921 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010869607 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034694583 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0504e-5 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013154723 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070883214 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028448481 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053350654 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000302708 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074035674 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023132584 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08451084 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018602028 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035437882 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021927792 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6564e-5 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046043816 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062612782 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.049856105 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.55954239 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117647536 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064809974 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5387e-5 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034004333 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.026871568 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032735929 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.025105452 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.001395856 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044022043 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047067414 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006846011 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.035190604 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047747826 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014810584 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021821748 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.3564e-5 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.2887e-5 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020384299 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027970104 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006776213 seconds)
    (223/608) benchmarking "6d"...
    done (took 0.20072953 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.072300709 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036623902 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.2062e-5 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024361385 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066795549 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018014061 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.017560435 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085178574 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.028530401 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05002241 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.025917017 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048876202 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.069130606 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016142152 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077458856 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014781294 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047088356 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072157561 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045880572 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5243e-5 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050195946 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032378879 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042254996 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017562045 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046089375 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050595239 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000111187 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.6846e-5 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.037445734 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043074761 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.8294e-5 seconds)
    (255/608) benchmarking "3d"...
    done (took 0.06076009 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062416362 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020277801 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026176762 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04994399 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.021734056 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046399879 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020429513 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.063348846 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045799999 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020251604 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000194471 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.015390659 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074040709 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065891994 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000164862 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033534619 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.017540049 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054415132 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080377253 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.04392012 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066041268 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.017062532 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.038258372 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037136913 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.038195496 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000122686 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032048728 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038191221 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058001837 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028779764 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.035146855 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020342417 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032097885 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.014683862 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000156095 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027809972 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011664678 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014331668 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.026899557 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046073063 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014822732 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.7917e-5 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027830938 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.023067138 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03710517 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000433453 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.051812676 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.7859e-5 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.4038e-5 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042347322 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.052195034 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025490393 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049274293 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048388012 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029981758 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052547796 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018983323 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016264957 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068707765 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.071342383 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.026216126 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063616357 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.063283738 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.01419402 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020605065 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020320898 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019323174 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055544185 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047489241 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.037689747 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055424207 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050195595 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000114291 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.01831351 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016208004 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.020193464 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070327279 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072000532 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 0.297686408 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 3.9775e-5 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000146835 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01436838 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069488913 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.011746281 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028980286 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 9.4297e-5 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051013933 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000303926 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105403129 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 6.991e-5 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090587366 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000530254 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04450261 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07182198 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027860336 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026220108 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01867809 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015820402 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.9398e-5 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063291584 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.066402961 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032555515 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.204389097 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050746312 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.8933e-5 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038943281 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044077221 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011298912 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.0581e-5 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.021966286 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000483145 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 0.04643527 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029351496 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026434343 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052496572 seconds)
    (371/608) benchmarking "7d"...
    done (took 0.254376482 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05146027 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036396267 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5653e-5 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023942976 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.017837368 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032463138 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03201518 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.06065618 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017614075 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016887422 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025329412 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023273432 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064762952 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055023334 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031547605 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049182303 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061292283 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075131996 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.034291167 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011634087 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028927825 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046174814 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.202288175 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.015922136 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033857753 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05958644 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.011972885 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021720397 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058246071 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053393043 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000480078 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039323199 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043640814 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063156114 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073437808 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062417428 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028570307 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022391919 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.049376282 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.8751e-5 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02013533 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000304831 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000134254 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026664104 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.2172e-5 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000108069 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016094749 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012597357 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.01184215 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000153449 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027240877 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040436986 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016135297 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04935969 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017133669 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.0745e-5 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029748096 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.014755156 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01735135 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023690947 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088716031 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035518407 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012183606 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034725945 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062552099 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069024978 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027106444 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0143345 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.025428463 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.0634e-5 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.038962428 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010413827 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.6704e-5 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017359149 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04646566 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021826091 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.9477e-5 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033268676 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046554805 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024567369 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056340052 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065669357 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0443131 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065402139 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.0813e-5 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03012373 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073961375 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.014084687 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0459342 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024602987 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.02466564 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.021955389 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.0846e-5 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053944218 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011354061 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042811788 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040510882 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033818361 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041935078 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015951971 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065054911 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.021314279 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.020557211 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041403276 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071449638 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023873804 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026068868 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04879417 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048806935 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027701761 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065846257 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.071551676 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.03392697 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.034136585 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.014006833 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058635492 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076767704 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027750928 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015306688 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049127713 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063356244 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0112961 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040715003 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.3487e-5 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03764835 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000641508 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014611653 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072856205 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.057805505 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020017998 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.027891036 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079967165 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049189253 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016681113 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068195422 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9679e-5 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019762855 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011108023 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040552519 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059182911 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.432548108 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.0377e-5 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020196502 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025500518 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000320531 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051256667 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045065281 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049837234 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048464767 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012676921 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082939148 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011433847 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018512821 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038622454 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019933775 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030835802 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055168604 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059271935 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.0185e-5 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054590022 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.038938533 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026480612 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.013265479 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021710107 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.02645472 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000112777 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073558885 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048902311 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046419762 seconds)
    (541/608) benchmarking "2d"...
    done (took 0.046652253 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.031050871 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.3576e-5 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021381421 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014324821 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.9983e-5 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058403597 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.043068665 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06674573 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032386703 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.861e-5 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029313253 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.05757797 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02213196 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051298937 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040807663 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.04773485 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.3243e-5 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016391309 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062691188 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.0659e-5 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062111823 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045534996 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027876725 seconds)
    (565/608) benchmarking "4d"...
    done (took 0.094916868 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.685e-5 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.424e-5 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080277645 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046622759 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054574779 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012247963 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053729518 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027074858 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066311285 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035561442 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022135561 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040184268 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032456408 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034751644 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015723203 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073102626 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02902016 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014019676 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.022364812 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 6.9595e-5 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000110732 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040726521 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065019027 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019715593 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054247069 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041586101 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077876429 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048802281 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025973937 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026367025 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077535181 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027626233 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.01378194 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037558708 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060992697 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029313541 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.00034874 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044038 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.197685854 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.048663897 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000109282 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024407158 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07314329 seconds)
  done (took 28.121405491 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.060777602 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.224627903 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.039402068 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.054780974 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.056867408 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050785012 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.033100623 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.185481679 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.062237652 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.050388675 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.039492295 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.06751705 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.040086524 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.050098698 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.049072609 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.034651726 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.039711633 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.050320064 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.098700817 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.064842671 seconds)
  done (took 2.17570008 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.20165594 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.029357438 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.099488334 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.074714552 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.075266116 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.52482254 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.056035551 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 4.6177e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.283510688 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.056485669 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 1.892e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.006446457 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.2718e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.00697571 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.3285e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.008415303 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.1578e-5 seconds)
  done (took 2.28616941 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.167036149 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.34872088 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.109145288 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.18731372 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.13247323 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.296355107 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.487360994 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.280073011 seconds)
  done (took 2.845008843 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.12683698 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.034325922 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.111696172 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.097934554 seconds)
  done (took 1.202419245 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.056280779 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024697607 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.034372522 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024915359 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044126388 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024337996 seconds)
  done (took 1.040255396 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.04507667 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.05229582 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.205309842 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035729106 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.037115755 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.039094963 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.055747277 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045503927 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037327211 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.04045052 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.031832611 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026263305 seconds)
  done (took 1.517189028 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.055260494 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.043219321 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.04977233 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.042752915 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.037745091 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.0378083 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.048009677 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.041964263 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.037104322 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025010365 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030802728 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.044136078 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031466836 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031698442 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030282902 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.033140805 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.034597622 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.019946138 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.043302332 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.040837462 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.043106838 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.042483083 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.033615837 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.0433267 seconds)
  done (took 1.756783185 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.049614513 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.012937636 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.009269148 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.013268589 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.013546962 seconds)
  done (took 0.929913997 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.109658694 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.495920629 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.322216492 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142940953 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009341332 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005605115 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.550390068 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.641637489 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.336343489 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.753746185 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.602157648 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.095560147 seconds)
  done (took 26.895495733 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.050618824 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.04726115 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.05059044 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.04460575 seconds)
  done (took 1.031050956 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.031358543 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.4448e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.042727344 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.0038e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 9.536e-6 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.043388355 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.038026564 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.1801e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5283e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.2421e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.3366e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.9093e-5 seconds)
  done (took 0.999364637 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.033458968 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.041933318 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.031794621 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.037499197 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.043346917 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027618925 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026400489 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.038885239 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.037578183 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.037114367 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022898983 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.041901955 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.037174265 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.029043239 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.03700387 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022324703 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.032271507 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.037817871 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.027251009 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.032194856 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023521199 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.041420985 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.037335132 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022433093 seconds)
  done (took 1.641720857 seconds)
done (took 73.163769136 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.093100031 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.037011343 seconds)
  done (took 0.970553039 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.199727075 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.059931638 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.058915269 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.052214115 seconds)
  done (took 0.959949459 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.034338989 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035795295 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.039821632 seconds)
  done (took 0.954083858 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.046734785 seconds)
  done (took 0.904797777 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.146165669 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.228912393 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.09133345 seconds)
  done (took 1.309520925 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.165488909 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.055501794 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.054098433 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022528865 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.030963505 seconds)
  done (took 1.014254187 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.04485567 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.029207668 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.020265439 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.019808165 seconds)
  done (took 0.967089295 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.059351107 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.057176309 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.058830954 seconds)
  done (took 1.023307888 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.061299416 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022411172 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.022285186 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022151371 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.022118563 seconds)
  done (took 0.944615734 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.177514028 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.082639529 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.03617483 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.091565339 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093489061 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.6815e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.9814e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.6377e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.4411e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.07140814 seconds)
  done (took 1.402671075 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.135594698 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 3.3165e-5 seconds)
  done (took 0.996281178 seconds)
done (took 12.777925116 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.105609717 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.087453366 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.268826407 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.565358293 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.03641915 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.024926085 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.029095931 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.4044e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024342501 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.3374e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.893636423 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.02856783 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.582112696 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027042225 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.082546591 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030985454 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.281e-5 seconds)
  done (took 11.636603867 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.3264e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000911529 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000373698 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000947498 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000573198 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.1751e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.9944e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000349732 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000999577 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000369134 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000360833 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.00058317 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.02259164 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000536343 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.00041865 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000564794 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000388251 seconds)
  done (took 0.962036049 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.8168e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 8.349e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.098e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 7.283e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.197e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.647e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.511e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.642e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.9914e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.635e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.595e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.681e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.1924e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.44e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.0568e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.41e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.62e-6 seconds)
  done (took 0.903644259 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.728e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.2713e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.899e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.2748e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.8563e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.204e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.363e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.108e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.7157e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.859e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 9.686e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.3151e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000222751 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.3111e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4266e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.1264e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 8.742e-6 seconds)
  done (took 0.90405891 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.038235196 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.034432043 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.74439602 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.964042652 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 9.039461893 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.036900232 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.188798705 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 1.2209e-5 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.393700769 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.034215706 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.797158604 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.286371172 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.233395694 seconds)
  done (took 21.694679784 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.23471559 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.204967518 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.127864262 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.062539355 seconds)
  done (took 1.562256149 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.146823517 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.107303728 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.069749031 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.06079902 seconds)
  done (took 1.315820022 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.10349278 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.049543052 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.063535075 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.055180441 seconds)
  done (took 1.203508108 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.03803405 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.055902926 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.037369665 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.028615493 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.034304429 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.054534104 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.024928841 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.024350425 seconds)
  done (took 1.229155376 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.0631e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000154317 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.6839e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.9239e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.3005e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.267e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.0086e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.4728e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.7322e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.2416e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.3001e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.4834e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001878892 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.2085e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.2536e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.7843e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.5434e-5 seconds)
  done (took 0.930934993 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.7365e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.9349e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 8.356e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.856e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.532e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.2e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.809e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.359e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 9.235e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.023e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.45e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.905e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.0974e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.416e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.2304e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.466e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.406e-6 seconds)
  done (took 0.925194463 seconds)
done (took 44.123866615 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.027430132 seconds)
done (took 0.952044419 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.090927451 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074442516 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.050989842 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.121054752 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.070969464 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.107016953 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.089256562 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.522086444 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.072142336 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.070824925 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.375963445 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.899567027 seconds)
done (took 5.47914593 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.107812698 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.212512532 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.046955702 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.081309505 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.6908e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.041134231 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.079179806 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.038362497 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.106032818 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.055037038 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.090064121 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.051898918 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.1843e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.0394e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053711465 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082810671 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000748892 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.103674109 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.035465097 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.4687e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.6148e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000718085 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000714259 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.2481e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.032374349 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000739636 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.4479e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.00084475 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.061091966 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.3367e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000140991 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0954e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.4246e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2206e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.3782e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001087737 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 6.0295e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.065521216 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.3699e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000842885 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012428967 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.732e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.001006048 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.6355e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000140544 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001015379 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.0408e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.644e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.9309e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000742993 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.881e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.7277e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.8997e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 8.982e-6 seconds)
  done (took 2.388856874 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.544696005 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.443947045 seconds)
  done (took 1.935591246 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.060196079 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.107266386 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.151632407 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.123751574 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.104421155 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 4.5062e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 7.476e-6 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 1.0131e-5 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.201000311 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.4768e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 1.8283e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.2237e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 8.541e-6 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.0218e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 4.002e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 8.294e-6 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.7271e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.3828e-5 seconds)
  done (took 1.707400934 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.464709832 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.164096481 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07957975 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.295656747 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077844672 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076241989 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.123062834 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000144185 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074199534 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 6.5978e-5 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.080639101 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030868137 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.073501343 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.1457e-5 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.034189207 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.7065e-5 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.027904173 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002569656 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.091139121 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002917918 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.124596837 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002997124 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.092700305 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002057233 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.4938e-5 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033942082 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.033503545 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033525079 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.069337958 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 6.7081e-5 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002561912 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002704613 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000583388 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002363438 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.035540806 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.00010824 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001528088 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.035186116 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002439636 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001422461 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.031967939 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.00235735 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035251973 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.00300015 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000110224 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.006063541 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000226117 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000149559 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004699664 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.00017342 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.9146e-5 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018454395 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.9028e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.035307361 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.0899e-5 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.5976e-5 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.5399e-5 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002667917 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000129636 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.7762e-5 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003879653 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003987684 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000113118 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002296105 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033203021 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.5909e-5 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000215091 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004776395 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.8243e-5 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.046860855 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000113404 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006382095 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001684857 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.9504e-5 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.003042594 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000580472 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002446522 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00021593 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000162996 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002479299 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012569846 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.00018227 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000106552 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002985985 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031979102 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000101605 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.4263e-5 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.013566688 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000221345 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.013076097 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002271105 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000206282 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006304007 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009386191 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.00020371 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000105625 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000196476 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007986969 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000111116 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.045957334 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.00165259 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 7.7644e-5 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000223057 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001173503 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.8776e-5 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000792337 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000701098 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.799e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001446843 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000159 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000114371 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.001356838 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.3798e-5 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000128587 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.1454e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000209852 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008337355 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008412381 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.00141362 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000145353 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.00844603 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002027809 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011413007 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000125958 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001483802 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.9636e-5 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000121946 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000183095 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001535952 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007451787 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005157932 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000164179 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000232428 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013521781 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002306557 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000492972 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008158417 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000121638 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012716479 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008992933 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000259672 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.0007595 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000133737 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001623769 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002524669 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006523413 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 8.4363e-5 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.3029e-5 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000203398 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011706474 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.5899e-5 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 8.1055e-5 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.1175e-5 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.01572284 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.8706e-5 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000144283 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001464896 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000114573 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.9922e-5 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.1278e-5 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002424622 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.7456e-5 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002212952 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.2827e-5 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.1517e-5 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001216495 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004744362 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000711386 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000127856 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.9925e-5 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000224721 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 4.9534e-5 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000502632 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 6.8334e-5 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001711394 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005108943 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000181041 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008568532 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004037617 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.0021079 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000788486 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.2039e-5 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001745499 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.2662e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000226868 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.00013305 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002578622 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000137661 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.6368e-5 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001653817 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006943528 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014435736 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000148295 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.6197e-5 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002571772 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001485141 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000127678 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000187543 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0001323 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002073588 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000474 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.004011903 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000750336 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.2918e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002172623 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009236166 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.8282e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000114074 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.008584759 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003196453 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000136589 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000168225 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.4779e-5 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000110824 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000228206 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000945244 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.5991e-5 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007221298 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001226842 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000145282 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000153658 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005710051 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.9853e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001488636 seconds)
  done (took 3.795981558 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.059982339 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.15023545 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.237107777 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.031790363 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000184978 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.150475473 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000171967 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.268583604 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000123177 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.998194089 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.00010674 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.048699125 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000253167 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.485336124 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.261917992 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.223231994 seconds)
  done (took 3.861309437 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.712551243 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.887558776 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.258703065 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.412981362 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.133031741 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.452438168 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.128872903 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.107298062 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.111380228 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.101385863 seconds)
  done (took 5.275729295 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.058588114 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.187272793 seconds)
  done (took 1.211269236 seconds)
done (took 21.111981337 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020646795 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020535487 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.02007536 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022162241 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.019545219 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.036791502 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019928444 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.019559507 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.049641674 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020319072 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.027137401 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.033038286 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.020439159 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.019022242 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.019595217 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.019482993 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.020100351 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.019582206 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021734549 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.019675485 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.0203788 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020862015 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020480941 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020746279 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.020172531 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.026372582 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.020401729 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019512404 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.026054954 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.021161618 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020732094 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020679787 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.01938977 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.01944223 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.020133782 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.019173517 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.027109393 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020411622 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020879437 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021571239 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.020186625 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020963606 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020543823 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.021277896 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.019413156 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.019048982 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021421903 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.021321542 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.019284389 seconds)
  done (took 2.037711805 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035695141 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.8717e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.035275564 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.6385e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.2586e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.2532e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.1876e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 6.547e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.248e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.011e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.5003e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.465e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.689e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 6.004e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.247e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.124e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009151513 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 3.0993e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.4761e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 7.32e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 7.171e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 6.857e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.399e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 6.434e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.321e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.067e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 6.884e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 6.035e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 6.043e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 6.111e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.673e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.558e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.1498e-5 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 6.803e-6 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.172e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.041e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.607e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.949e-5 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 8.795e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.683e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.867e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.203e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.4657e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 8.854e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.853e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 5.797e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.835e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.974e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.094e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.615e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 7.025e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.773e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.919e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.873e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 8.007e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.672e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 7.019e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 6.391e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 6.239e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.2033e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.003e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 6.247e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.124e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.015e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.013e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.344e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 6.185e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.654e-6 seconds)
  done (took 1.159927148 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019660627 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.0148e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.547e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.173e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 7.148e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.329e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.077e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.51e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.965e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.925e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 7.921e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.548e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.075e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.656e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.768e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.507e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.779e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.01e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.9e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.414e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.235e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.01915654 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.1661e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.676e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.749e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.702e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.799e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.694e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.435e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.523e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.499e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.277e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.745e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.159e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.222e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.774e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.273e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2999e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.093e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.521e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.07e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.425e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.2427e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 6.809e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.568e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.084e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.517e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.615e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.001e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.274e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.432e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.356e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.704e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.291e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.7e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.176e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.49e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.275e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.569e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.719e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.257e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.437e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.407e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.008e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.6e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.027e-6 seconds)
  done (took 1.010871255 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.044146808 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026541828 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.046138942 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.042661065 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037280056 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.050180405 seconds)
  done (took 1.212627168 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.021717863 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.3781e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021150064 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.0995e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 9.698e-6 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.482e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.541e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.669e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.074e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.735e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.1783e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.167e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.0305e-5 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 5.493e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.421e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.038e-6 seconds)
  done (took 1.009884994 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019576188 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.4467e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.825e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017439717 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018728629 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.809e-6 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.7951e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000139878 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 7.154e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.649e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.278e-6 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.786e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.46e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.351e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.0307e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.973e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.005e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.504e-6 seconds)
  done (took 1.021974521 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019673098 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.4914e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018945074 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.3185e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 7.402e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 7.209e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.842e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.243e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.44e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.858e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.0404e-5 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.018e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.7e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.932e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.827e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.487e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.988e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.659e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.752e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.038e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.861e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.651e-6 seconds)
  done (took 1.006120203 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019137647 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0363e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019206387 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.2465e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.742e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.79e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.676e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.852e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.366e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.63e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 7.578e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.233e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.329e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.505e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.229e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.966e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.334e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.375e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.391e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.315e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.082e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.229e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.189e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.372e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.395e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.911e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.433e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.35e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1038e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.285e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.287e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.163e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.262e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.335e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.29e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.537e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.674e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.445e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.206e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.628e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.196e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.958e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.5054e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.242e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.473e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.966e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.371e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.759e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.105e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.021e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.295e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.362e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.254e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.44e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.312e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.317e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.344e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.351e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.943e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.388e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.367e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.174e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.479e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.347e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.461e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.071e-6 seconds)
  done (took 1.005210022 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.019466775 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018966988 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.2985e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 6.639e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.768e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 4.778e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.051e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.278e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.174e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.04e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 8.729e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.118e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 4.847e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.997e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.067e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.652e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 8.745e-6 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.768e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.096e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.088e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.281e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 8.898e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 6.103e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 4.956e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.179e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.876e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.602e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.979e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.282e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.179e-6 seconds)
  done (took 1.005626302 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.0194676 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.4378e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020740236 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.2791e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.909e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.195e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.409e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.324e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.186e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.088e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 9.248e-6 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.07e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 4.861e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.118e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.849e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.849e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.936e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 4.992e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 4.915e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.1449e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.336e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.256e-6 seconds)
  done (took 1.007321138 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.019513006 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.5016e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.798e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018941647 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.1381e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.842e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.39e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.077e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.453e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.032e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.4899e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.66e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.142e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 4.862e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.003e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.05e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.084e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.068e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.044e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.641e-6 seconds)
  done (took 1.006070995 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.021548944 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018917191 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 8.869e-6 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 9.449e-6 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.405e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.452e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 5.42e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 4.839e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.458e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.068e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0016e-5 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.717e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.939e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.706e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.997e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.133e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 4.773e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.165e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.394e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.566e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.962e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.212e-6 seconds)
  done (took 1.007875739 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019424584 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 9.622e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.301e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.995e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.252e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.333e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 4.719e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.672e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.86e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.631e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 7.406e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.133e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.075e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 4.752e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.867e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.279e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.259e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.824e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.396e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.097e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.137e-6 seconds)
  done (took 0.991234898 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019533888 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019625001 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021187119 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020299859 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015821589 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019597232 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015835203 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024089962 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015659169 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019288502 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.019100065 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.019073535 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.019802686 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023338505 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015894549 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019892075 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019877396 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021916788 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.020306519 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020318921 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020164231 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.015566131 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019358265 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019692679 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020433568 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02041291 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.020909009 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015714043 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015711109 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019692769 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019314277 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019220734 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.021009926 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.019310549 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.019853077 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028889818 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.020668126 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015876878 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015567752 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020597977 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019846739 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020410609 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019207906 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015594944 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019886326 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019222723 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.019278335 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015711765 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015613253 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019858706 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015776682 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019702243 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015562425 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019219265 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.019219264 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015500234 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015947193 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.019680071 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015595571 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019497966 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015624572 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015821245 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.02023159 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015716496 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.019193326 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015544079 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019744753 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019209757 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019305624 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019120835 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022906582 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020436251 seconds)
  done (took 2.329503468 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.0200993 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019791131 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.4611e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 7.774e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.705e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.291e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.89e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 7.106e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.121e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.835e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.358e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 6.475e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.901e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.927e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.132e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.728e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.915e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.431e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.602e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.735e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.998e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 6.055e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 6.299e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.86e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.837e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.626e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.873e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.717e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.767e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 7.424e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.301e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.529e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.816e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.16e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.88e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.919e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.632e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.631e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.714e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.482e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.851e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.226e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.4223e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.738e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.882e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.253e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.619e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.906e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.482e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.635e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.337e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.923e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.624e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.686e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.537e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.943e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.527e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.74e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.295e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.927e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.865e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.621e-6 seconds)
  done (took 1.011280804 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.019534195 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017353639 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017240439 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018764444 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017369085 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1416e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.0983e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.807e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.298e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.884e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017162564 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.4313e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.8382e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.9892e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0581e-5 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.763e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.146e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.704e-6 seconds)
  done (took 1.075614638 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.019375327 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018851892 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.3274e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.88e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.748e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 4.993e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.879e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.524e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.97e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.892e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.3801e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.459e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.228e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.758e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.435e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.247e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 5.405e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 4.827e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.819e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.164e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 5.177e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.821e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 4.898e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.061e-6 seconds)
  done (took 1.011038231 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.054679312 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.1253e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 7.431e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.4e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.575e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.887e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.921e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.993e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.181e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.885e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 7.795e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.603e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.537e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.23e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.604e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.436e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 9.729e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 6.179e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.265e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.521e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.639e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.635e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.955e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.515e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.849e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.406e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.987e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.867e-6 seconds)
  done (took 1.023925474 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.019131459 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.019257753 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.8331e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 7.41e-6 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.446e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.968e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.593e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.929e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.453e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.236e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.573e-6 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.31e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.126e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.793e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.246e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.752e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.352e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.455e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.405e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.631e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.376e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.225e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 6.143e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.672e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.174e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.586e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.524e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.558e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.287e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.206e-6 seconds)
  done (took 1.007921383 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.021173842 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018949191 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023759998 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.1065e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 6.057e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018896183 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.1491e-5 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019213048 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022428797 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.0222873 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.024101494 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.3658e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019134169 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.4187e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.107e-5 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.02112168 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.1763e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 9.349e-6 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.1228e-5 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 9.288e-6 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.056e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.997e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 5.874e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.0248e-5 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 6.092e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 5.997e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 5.823e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 6.008e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 5.801e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 7.051e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 6.767e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 6.043e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.068e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.721e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.998e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.557e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.288e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 6.716e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 6.064e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 6.129e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020761907 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.2475e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.9316e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.1223e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 6.674e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 7.109e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020767328 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 9.229e-6 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.0473e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 5.345e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 9.501e-6 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 6.91e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 5.232e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 6.51e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.653e-6 seconds)
  done (took 1.221946639 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.01945045 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.6209e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.896e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018804109 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.864e-6 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.8122e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 6.469e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 5.7e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.779e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.658e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.642e-6 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.959e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.953e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017293552 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.2492e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.0773e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.298e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.7156e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.911e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.698e-6 seconds)
  done (took 1.025106854 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019624835 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.2879e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021006553 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.2819e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 7.994e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 6.739e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.891e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.509e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.312e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.029e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.475e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.793e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.008e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.311e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.066e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.378e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 9.79e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.94e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.576e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.323e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.72e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.681e-6 seconds)
  done (took 1.012357532 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.018889902 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019135855 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.4366e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.639e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 9.926e-6 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.34e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.884e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.926e-6 seconds)
  done (took 1.008342814 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020487754 seconds)
    (2/2) benchmarking "in"...
    done (took 0.020268855 seconds)
  done (took 1.010236812 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.031902367 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020991183 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019555591 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.02333182 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024377308 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024350604 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020260062 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027644962 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021230218 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.022070335 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021094119 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020660386 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024591335 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020849779 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.02240767 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022152418 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020705412 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.021230246 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.023001767 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021195889 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021120549 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022609429 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020881248 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020302978 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02696227 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021069951 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021821457 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019998945 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022683877 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020415751 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021174357 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026022485 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.02070737 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020116921 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020111125 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021925799 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021267779 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021536192 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021963424 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.01966463 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019794346 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.021336148 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023495093 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020336154 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004487681 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023741241 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020361335 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019802982 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020100482 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022803075 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027142928 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022203588 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.02267375 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021242915 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.021644743 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020107527 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020950154 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021689152 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020515209 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021816056 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.026731725 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027108208 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021546179 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020446127 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021539291 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.026587435 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022046892 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020278843 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019623129 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021573755 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024519848 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.022137298 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022491196 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022415871 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020938215 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.021915465 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027536335 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020565934 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022611991 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020787808 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020876814 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021143266 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020732285 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024009787 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021375052 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026984056 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021358691 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022679177 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.0210025 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021547961 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020995115 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027299211 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022122472 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023244531 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021977391 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022558692 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020034309 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019245002 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019957442 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019932906 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01909189 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021461904 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026992269 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020839497 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020151927 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021206041 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028482764 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022801399 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003331354 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021417862 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022590737 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021415892 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.02137141 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026898859 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.0210613 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.026041202 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023599565 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020388587 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019830027 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020503259 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003455883 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019578963 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020093778 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020583986 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021584204 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023096251 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021399436 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.01944975 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.021157369 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021723772 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019641894 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020665569 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020945502 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.02043871 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020256704 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020187095 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.022190988 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021292679 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020945616 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.020491014 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022899261 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.022683621 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.02043041 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020910804 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021852961 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023289753 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020884275 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021831909 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021964807 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.0191808 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021526055 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022143608 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019572987 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020425492 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020923464 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022115301 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022334019 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.021686269 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019418203 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021447938 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019714891 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019454053 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027702076 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019579767 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021806215 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021946654 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020978356 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003280878 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002860774 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020549031 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022463097 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020940119 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020982462 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020475861 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020605783 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.02136211 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021941266 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020418069 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021059873 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022636349 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020817331 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019570063 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.020004904 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022464677 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.01916299 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.020933033 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022177851 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022494813 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004217383 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022203142 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018874166 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021476063 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020282933 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022098375 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020850903 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020608719 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019450801 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021994191 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026349713 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020371182 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021897736 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021593211 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020007372 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02064981 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020910888 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021519712 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021658507 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.02135109 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019671979 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022890031 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019266789 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021842447 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020036544 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020949016 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020881721 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020209162 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020112847 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.02140497 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.02056083 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02816904 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021579141 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.02037699 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026596058 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026196909 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019540709 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020319061 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026373 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020926711 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021035488 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.02148475 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026577417 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021842344 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020539016 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020762867 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023640151 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.022938069 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.021739536 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018740253 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.020813061 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021176715 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022242471 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019873113 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019099892 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021471096 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022605623 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023276328 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021673034 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021871785 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020524976 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.021950626 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020919089 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022936343 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021941608 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019587041 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021692916 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023787289 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022194575 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020436773 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021695445 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026155287 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019897753 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020559948 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020408665 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021099652 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021365758 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021549898 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021379486 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022277402 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021187757 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022899678 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020481193 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02742196 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019969027 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020674545 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.01911964 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.02797405 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020731869 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.018915898 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020612013 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021668222 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021252118 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.022315249 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019287131 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021294313 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019386756 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021804981 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026259432 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023699369 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021638985 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021685113 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020701976 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020817447 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.023023192 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.02085309 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021181436 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021415791 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021462766 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020164735 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.020972082 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020298144 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025260283 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019559703 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020749772 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019075227 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021708906 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019237134 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021833483 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021805882 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021093415 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020075895 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022201901 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.02166917 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020375412 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020687 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020576217 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021150103 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.0203263 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020134254 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.01940549 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019221131 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021561423 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021083403 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.0206635 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022767867 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022116225 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020036843 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021792627 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020146195 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.021593784 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022460531 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022688389 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023127517 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021848029 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021065982 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021104653 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020476808 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025429531 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021095528 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01978956 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020788366 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021144023 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020520937 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021338962 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019255682 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.021912651 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.009040118 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020219021 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021081478 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021027248 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.022810979 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021870956 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020567511 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021272798 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020406387 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019508582 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019953561 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020006816 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020375011 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019771086 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025074096 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.02014194 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020219669 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025506953 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022199504 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021654149 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021385948 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.019934655 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020244196 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02304536 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026218732 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020645896 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021608728 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021111421 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021753415 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020488521 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022606279 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019802733 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021984572 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021174059 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020750026 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019983331 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019080318 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021657287 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020532349 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020604257 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020535781 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021679148 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019264026 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020277205 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020696657 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021647822 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020107399 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020618436 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021407341 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.020863757 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.01996649 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020161044 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020212855 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020644926 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025847519 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019363271 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021534495 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020093272 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.01937178 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019616798 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.01966883 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022243036 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018882674 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01906829 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02585183 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021246596 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019976452 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019325946 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021602516 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020990884 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019840802 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021388713 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.02223464 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019750475 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020900753 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018838052 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022550229 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019329665 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022286378 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.019973132 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019911282 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021045484 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020953005 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018893171 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019413205 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020096343 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022474523 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021315783 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020504868 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021030005 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.02025026 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021435774 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018725372 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021403448 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021434776 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026199855 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022043237 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019780416 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020072509 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.025755178 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020353122 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.020970002 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021842587 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020039698 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019867447 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020228548 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003840236 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022426988 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020120966 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021030883 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020123529 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022221262 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022036154 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020147392 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018644308 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020142933 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019925298 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020026965 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02159074 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.021441214 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020292797 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020904096 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003102592 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.01899409 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019950981 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020227498 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020242552 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020334209 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020927251 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020932882 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.019755085 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018798807 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019668964 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003057289 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020085831 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021299291 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020372923 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020409218 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020580203 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019890325 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021099564 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020749799 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020655098 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025608129 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003569388 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019407734 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021706689 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022106518 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020117424 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020092257 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019807184 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020451503 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019784426 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019828736 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.01947389 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020269744 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020427229 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020283716 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.025855264 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021184179 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019189705 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019900853 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019822379 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020244564 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020917269 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022556896 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.019963349 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020810976 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.019852685 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019566516 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02160008 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025614047 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022254885 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022563787 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020417585 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018882709 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022058003 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020255619 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020142513 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.020791456 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027255073 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018787606 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.02007881 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020357458 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020175027 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019740353 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021119023 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019711512 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020115605 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019842448 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02135943 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020444589 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020689704 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019743883 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025088871 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.023405623 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020407029 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020060958 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021309091 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020296161 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020073454 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.02145367 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02632924 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021754997 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019020822 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02248513 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018704362 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021323257 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008447181 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022335718 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019421954 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021584299 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025747193 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.02048878 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019877925 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.020994445 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020251784 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019797419 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01979971 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.020631574 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019640535 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021415937 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019748481 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.018959399 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020072377 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.02584738 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019809414 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.01880366 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021615218 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.022877991 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020281647 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022375138 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022461091 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019094828 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020845244 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022326863 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024950057 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022751607 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020503934 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.01940653 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.01855978 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020047626 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.021832731 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003775878 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021391398 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.008916463 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019274667 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.01947702 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022218269 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020504084 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.003990502 seconds)
  done (took 13.459674634 seconds)
done (took 41.655719228 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019402319 seconds)
    (2/7) benchmarking "month"...
    done (took 0.01884515 seconds)
    (3/7) benchmarking "year"...
    done (took 0.018723374 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.020103571 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020809283 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.020665666 seconds)
    (7/7) benchmarking "second"...
    done (took 0.020742717 seconds)
  done (took 1.138872842 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021396915 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.470722772 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021686681 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026147329 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.279180861 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.192315094 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.198916889 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026008034 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.025663964 seconds)
  done (took 2.265767147 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020581224 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021521247 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021410961 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023048645 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039698244 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019980724 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022948669 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020077943 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.02103578 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027148647 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022027284 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020447337 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029001943 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025271056 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023701482 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021152781 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021172943 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022287651 seconds)
  done (took 1.441802811 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.042013046 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.022538187 seconds)
  done (took 1.080718809 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019720927 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020531537 seconds)
  done (took 1.057216752 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.019619575 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.159383212 seconds)
  done (took 1.196043535 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.037348296 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020820193 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021105879 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.021043668 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.030874102 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.033781165 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.033364598 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.020688947 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020844067 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020312163 seconds)
  done (took 1.280132104 seconds)
done (took 10.47918321 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.060624198 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.095932044 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.030486702 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.05278914 seconds)
done (took 1.259051768 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041953366 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039944227 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040463617 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028670331 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.055111482 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.037615532 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040689642 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.5102e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040612372 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.055968815 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.0743e-5 seconds)
  done (took 1.386255424 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041088922 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040525093 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040219592 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031126054 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.051625714 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027412907 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040683493 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7372e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040799923 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.051719634 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.5958e-5 seconds)
  done (took 1.386789322 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.084584531 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082889956 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082345734 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.088439168 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.0842066 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.027440349 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.6709e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081047719 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080074152 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.5043e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086304702 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.081348235 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019387518 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.083746615 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.3421e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.0116e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.1314e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 8.047e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.084661628 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08151061 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.3336e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.1831e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.0247e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4369e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 6.916e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.111e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 6.498e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.2902e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 8.749e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.080210489 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081542741 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.2508e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.5306e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 9.022e-6 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 8.186e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 6.661e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.1354e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.0571e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 9.334e-6 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.0196e-5 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.0319e-5 seconds)
  done (took 2.227759612 seconds)
done (took 6.014343126 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023829538 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032735401 seconds)
  done (took 1.077963473 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.238866602 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.870145809 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.762343541 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.916975589 seconds)
  done (took 4.570395313 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.863463929 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.105050276 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.050318826 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.042576862 seconds)
  done (took 2.119162702 seconds)
done (took 9.037771387 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.071389124 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022843219 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021168449 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021639953 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020824372 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021139787 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021033281 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022314225 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.0208625 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023081175 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021884285 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022266441 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020511861 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022687877 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.023155401 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020488755 seconds)
  done (took 1.46479264 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.135473412 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.225424347 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.840606745 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038747271 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.081853818 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027845114 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.143094975 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022750838 seconds)
  done (took 4.539250105 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022950998 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021640055 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024328019 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020277707 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022288509 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023388134 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021792186 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023325706 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020333989 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021444559 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021844483 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021735392 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023445135 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022587534 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022096633 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026078106 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.022679009 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022469075 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026510713 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.022667215 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02328885 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.022637129 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021949208 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027867352 seconds)
  done (took 1.581634982 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021416685 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044416231 seconds)
  done (took 1.100709938 seconds)
done (took 9.718025238 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023442079 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023275103 seconds)
  done (took 1.071141126 seconds)
  (2/7) benchmarking "join"...
  done (took 0.286973329 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.041122662 seconds)
    (2/4) benchmarking "different"...
    done (took 9.43e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021613088 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.9689e-5 seconds)
  done (took 1.126516634 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020786448 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.144929917 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000219913 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.179e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000900017 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 8.859e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.929e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000564078 seconds)
  done (took 1.181616874 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.022985223 seconds)
    (2/3) benchmarking "different"...
    done (took 7.415e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 3.822e-6 seconds)
  done (took 1.061191199 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.037809421 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024580406 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021147581 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02122979 seconds)
  done (took 1.137704744 seconds)
done (took 6.915830092 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02267484 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.02085545 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031535748 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.024171699 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021315157 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.023979675 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023560724 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.020482457 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.037983407 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.060578175 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.9215e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.033508032 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.020539755 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.033290117 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.021642678 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.023638935 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.020777229 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.0968e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.02037913 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.033e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.023611997 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.020708514 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.022156465 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.1757e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.1044e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025908834 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.0201e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.0303e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.145e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 8.396e-6 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.0556e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022551614 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.0675e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 9.799e-6 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.6629e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 6.845e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 6.043e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 5.306e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023862419 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 8.901e-6 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.522e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023869715 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.8252e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 8.251e-6 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.4552e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.036e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 8.954e-6 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 6.067e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.4073e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 9.52e-6 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.2219e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.602e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.2241e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.02082132 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.023723422 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.3985e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.4648e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.8117e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 8.781e-6 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 9.356e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025148094 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.020966163 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.2051e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.7867e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.4803e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 9.422e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5301e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 9.67e-6 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 9.423e-6 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034445594 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.03478317 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.1135e-5 seconds)
  done (took 1.817242484 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.038775474 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.044724841 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024371733 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023912584 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.023990727 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019672727 seconds)
  done (took 1.21512599 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022223613 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021388038 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025191974 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.03429692 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021438248 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.040760918 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021247489 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021463551 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024562068 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025671687 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020916014 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021308102 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020655395 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.03174728 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025002719 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022015035 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021852323 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024044966 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.051426477 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024038091 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021354396 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.023953523 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.0338073 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024184169 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022044981 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.039110744 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021111196 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.02384032 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020869733 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029224456 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.034856126 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.02397767 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.02500773 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.028185333 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022961766 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031235668 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.037166808 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.03320605 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.048170016 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.031487498 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021719965 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.04887719 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.061900978 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039016551 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.033390049 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.020312284 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02019627 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021389144 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024578214 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021493724 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020579383 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023708627 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032759071 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027199806 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019690587 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.032466789 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.0231074 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030743616 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022831346 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021545393 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021400852 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022154188 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.021810752 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022025425 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025111319 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029209422 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.03331022 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.02299981 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.021903132 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.023708054 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021306076 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032077788 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.020826021 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024506896 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021567092 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023584304 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.03462169 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021416776 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024508828 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.021801161 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033208668 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.040479046 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021310886 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024084392 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028664488 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018849588 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.027831596 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.034649833 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021459474 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.024988685 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.021265751 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.019752796 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.02183998 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.048519594 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.033672143 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033433281 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030162984 seconds)
  done (took 3.679247028 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.051668672 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035054508 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034100461 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031656008 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.020037133 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.0211725 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.02132617 seconds)
  done (took 1.268788647 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.03938605 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.053328285 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.035421335 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.051229033 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.047384701 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.045063111 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.051316851 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.051463034 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.036868584 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.6956e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.040771703 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.039427768 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036680264 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025428666 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002435479 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.049773571 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.034990375 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.039462503 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.8029e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.040748195 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.042479801 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.049617951 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.02477764 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.046355904 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.026280757 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039761028 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.6673e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.030310402 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.022245926 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 3.2791e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.00105843 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.028737329 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.8452e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.761e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.025751715 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035117876 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.02525622 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.5206e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.02874844 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.025549384 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.022963145 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.034772891 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 3.6706e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 8.651e-6 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.7075e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.035009409 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.1731e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 8.4983e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005402656 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 7.648e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 9.397e-6 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001055941 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.1466e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.052e-5 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.6169e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 7.098e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.2748e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.023168026 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.7867e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001072588 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.4424e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.0536e-5 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.6781e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.025368942 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 7.4541e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 9.757e-6 seconds)
  done (took 2.370132102 seconds)
done (took 11.388630462 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037477957 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.10011816 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.059381718 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.12513738 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.141319438 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.356101203 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.023505009 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.038389181 seconds)
done (took 1.93657646 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 0.045556194 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.026705925 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.032837193 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 0.025703884 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.020938671 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029285177 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.100775768 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 0.023573881 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.020626017 seconds)
  done (took 1.413125728 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.182802526 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.320654682 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.264633668 seconds)
  done (took 1.824355042 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 0.038196155 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.062532217 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.032912809 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.3877e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 6.434e-6 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 0.047568017 seconds)
  done (took 1.246000225 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.234789484 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071889279 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.113046529 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.094095948 seconds)
  done (took 1.578393025 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.170517997 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.143369195 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.279527909 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.101773621 seconds)
  done (took 1.766228114 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.059194773 seconds)
done (took 8.94393946 seconds)
(18/23) benchmarking "parallel"...
done (took 1.069453005 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.025542252 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.023491634 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.040367106 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.036451397 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.022652753 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.106472897 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.043109849 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.146152732 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.041731463 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.022922368 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.242357724 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.026581361 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.029777695 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.036522753 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.023444186 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.120409055 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.027656322 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.120030854 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.040477372 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.088123646 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.122448192 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.081183905 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.229709001 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.028989077 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.090975589 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.024811778 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.027658491 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.085436705 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.090142396 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.047495172 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.042975237 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.027864385 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.026615999 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.025877674 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.024261 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.035202047 seconds)
  done (took 3.337171562 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.030760734 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249803101 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.088366889 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.151732596 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.055440999 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.039021644 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.187310831 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.140995889 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.24992811 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.003958637 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000160635 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.166885775 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003546532 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.119734548 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.128558761 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.312360416 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170071464 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049489534 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.211598423 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039068077 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.494661038 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.023491949 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.668153098 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.9504e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003674323 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.9708e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.050836581 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.27172045 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227581205 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000576344 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.275308615 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.318984839 seconds)
  done (took 13.806352709 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.56450434 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.187385038 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.091841135 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.020892006 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.118055864 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.086991666 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020498798 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.092627636 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.086430625 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.044351735 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.202517066 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 3.1625e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071696128 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.239346274 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034203235 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.106345995 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.207621346 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.058612892 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.149109668 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.052179376 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.094384766 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068388976 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051439037 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.076009724 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.064441738 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059863198 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.034338257 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.065252182 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 8.371e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.663622274 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.053852812 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.110254183 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.17308268 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.051866468 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.219606971 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026042396 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.1231e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069399667 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.026733169 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.059754501 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000622037 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9738e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.02090511 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020283743 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.2085e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030720592 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.131783439 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.111854089 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.0051e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090736997 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.027146187 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020168284 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.012837447 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.061510218 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.8892e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069141033 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.791272627 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.091565304 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.019878823 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.049344482 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.391805773 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.6178531 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.2282e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.002626783 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.211337803 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.064303576 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.060255533 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.000105168 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.051035352 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.2116e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.054272551 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 7.9671e-5 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020285909 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.084960286 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069957925 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.1944e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001654036 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092907161 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026238337 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001762959 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.8724e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.9624e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.3703e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.237689674 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.504255806 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.00159975 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.3822e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 5.7591e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001203348 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053533972 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.00013459 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.9172e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021165898 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.1339e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.4838e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079679697 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.0685e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.7159e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000148812 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.78e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001774767 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.0116996 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000779979 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.170783849 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.6942e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 6.1305e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.724263999 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.818e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.00152661 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.8547e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.4716e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 7.2843e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.004907401 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001064599 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.565337805 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001743077 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.9451e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007552806 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.6309e-5 seconds)
  done (took 24.669163359 seconds)
done (took 43.439470242 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.090167006 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.059851415 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027567343 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.049155841 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.037552856 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.145877613 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.098072259 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.035903198 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019591599 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032357879 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.044579889 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036293821 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.02083745 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.051628317 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.041927903 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028759928 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032493905 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.030659153 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02089054 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025829305 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026509624 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022734956 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019849783 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020148676 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.03234744 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022677706 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027522445 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020321885 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026159226 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027235751 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029932716 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.030773796 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019093315 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040905464 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.052466856 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020059919 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026891386 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.9214e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032930977 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.066453991 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.326e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036420978 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019193296 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.100963954 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069603179 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.020761559 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.070172476 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.057029259 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039575363 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028296445 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.038717251 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039428109 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025722846 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025900208 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025486306 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030086671 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024412488 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.029594289 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.020755006 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049708975 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.020923777 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.055177946 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036785744 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.025801715 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.5965e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020689301 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.039384527 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028348852 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026068009 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027352961 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027170084 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019773474 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026393242 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031406512 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041563452 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030280245 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.047179952 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.02579457 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033197909 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.02690938 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.026796719 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039409228 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.042182362 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032665606 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.058378993 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020869524 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.03318177 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029306996 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.5222e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.036337931 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.9525e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.056053128 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034863928 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029197154 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031669492 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029388894 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.029060975 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037751518 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019469006 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035976844 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020343924 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031386851 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.02685075 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035152685 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.7067e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029091063 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024684216 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.611e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 8.24e-6 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.050171176 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026616895 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034467797 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.0311856 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020877281 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027739932 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020330852 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.036309737 seconds)
  done (took 4.98211692 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.032602616 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.05195347 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.133545807 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023459878 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.093096439 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.065404615 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.039149564 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.104570173 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040416921 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.162721318 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.040876312 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.140565003 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149046403 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.041475166 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.02645466 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.040926473 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021714777 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.090746954 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.02680078 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.023163246 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028293099 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.040670862 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022033199 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022843126 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021319665 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.021988682 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.043551928 seconds)
  done (took 2.673680571 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.035186222 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.034182518 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026934748 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.039834467 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.02362845 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.033767032 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.026500435 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031203088 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.037238519 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023684663 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036952285 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021744834 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018900538 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.062488019 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026818833 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026757538 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.027791229 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.01917335 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022806297 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.021534785 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.028111057 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028198667 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.054087944 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025226714 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.0956e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.02112344 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036632211 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033720756 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021012728 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.5371e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020942345 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019136792 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.02198752 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028736168 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020806033 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023641493 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.020619457 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.2251e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.018918646 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.020687529 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022184118 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038200492 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020168057 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026066412 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035157298 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.4587e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.034506848 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.032315268 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023428907 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041579952 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.03031168 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020384362 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 4.9877e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.2674e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023266167 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020259556 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 4.5972e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.03290679 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024324718 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019903102 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 4.4881e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.037783905 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021372737 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.038382136 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.032997956 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021697748 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 3.8487e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000124424 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.02689626 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.2308e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 8.808e-6 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.2452e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.041216541 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026816494 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.039222934 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023611324 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024689845 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026822531 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.5184e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035174377 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.02839108 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.5852e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020670344 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.4031e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.6663e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027170582 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023938968 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.032972087 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.6969e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.1411e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040740883 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 3.5395e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.02501582 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.1624e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021963301 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.3613e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.2943e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037369735 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.3954e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.2965e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.1441e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.038179438 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.4966e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.9953e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.1067e-5 seconds)
  done (took 3.307765499 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03404592 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032551685 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.056726831 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037180404 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.048270779 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037607602 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020831373 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032144025 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021334261 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.02512424 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.02127085 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021588747 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.043832739 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.038261226 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044927845 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034808509 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.03209145 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.050486314 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021506385 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.045227038 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.047548371 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.035073063 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.040185169 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.036835365 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.030944088 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.048067782 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037697625 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040966844 seconds)
  done (took 2.144052307 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027625879 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027626096 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024030564 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028485659 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029793238 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.030624841 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.030909493 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021663962 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026742023 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022047615 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.029194027 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027845045 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026172489 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.0233575 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031584731 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026157128 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.029352353 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022479661 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025984549 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027381562 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.02272683 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027262817 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030212311 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029081959 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029684472 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026096168 seconds)
  done (took 1.835463005 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023943376 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02806188 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.030383768 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031447318 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.037025384 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066264472 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.038084161 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.031968979 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020614779 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.029980625 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005656118 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.021512132 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.034736284 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.023909411 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021746183 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004858778 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.020905868 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.011983743 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027159584 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021409346 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022038745 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011817722 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005410141 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012804815 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012074501 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.5611e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.028407763 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026140844 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026346675 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.008777269 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003368044 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011741618 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.021464832 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011430336 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005354795 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.009924043 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.7002e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.00352783 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011231088 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.0080826 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008225292 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.2776e-5 seconds)
  done (took 1.918995099 seconds)
done (took 17.968011379 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.058078481 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.166989466 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.044802285 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.054767984 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.072146311 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.070903666 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.028685844 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.056709215 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.041319897 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.077590323 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.044852676 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.10654272 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.039937562 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.067087821 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.2598e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.052696604 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 6.4333e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.074219293 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.026450155 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.079991748 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.026701937 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 3.237e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.075003183 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.093050442 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.064368686 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.045811956 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.028311808 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.067870854 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.065809571 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.084372051 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.046562802 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.2352e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.061615903 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.066117089 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.062960373 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.037810441 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.076117799 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.0557e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.068661933 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.051726521 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.052651982 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.070223649 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.041984569 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.083553631 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.076105264 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.058901222 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.7334e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.088222058 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.058475288 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.8659e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.061481267 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.046299769 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.063082915 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.055169877 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.054881973 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.077617515 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.056939777 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.6682e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.084079615 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.030299728 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.073030801 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.03176856 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.7827e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.045541376 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.059144515 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.0302911 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.044301844 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.0876e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.073573419 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 3.596e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.0814e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.084137855 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.2157e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.041849496 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.060131035 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.045104493 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.085694933 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 4.4144e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.5483e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.056403188 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.062477186 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.06331863 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.040435094 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.2707e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.9823e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.069002736 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 3.9872e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.05212288 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.8179e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.4329e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.041316936 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.05506808 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.054182105 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.062578679 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.062222266 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.063409597 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.6377e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.031665851 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.047817265 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.061284502 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.073182811 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.069035649 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.4703e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.057048743 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.5485e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.062525838 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.065205024 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 3.9671e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.066678482 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 4.9912e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 3.1257e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.539e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.030358983 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 3.363e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.6638e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.063119973 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.062913769 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.048581965 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.055516362 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.6156e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.026742588 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.8478e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.027998154 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.055860186 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.3046e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.06943707 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031762129 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 3.082e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.6197e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.8269e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.063434694 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.4761e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.067306002 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.03200831 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.4166e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.060863684 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.066833675 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.052106496 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.058263786 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.9789e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.075173969 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.074319314 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.047866257 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.06712262 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.1401e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 3.1139e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.030455639 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.066115763 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.054590112 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.9526e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.5401e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.7722e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.1967e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.060819948 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 4.1252e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.051747711 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.4458e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.7425e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.6724e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.067406352 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.1854e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.7784e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.724e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.2754e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.063548673 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 3.1748e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.6232e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.04941312 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.3412e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.03440006 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 9.0938e-5 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.3507e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.3947e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.05710048 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.050501166 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.058488707 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.071193893 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.0583e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.057157725 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.060539925 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.9833e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.9277e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.9178e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.0735e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.1901e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.2337e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.544e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7744e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.3094e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.611e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.050800469 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.036e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.902e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.9459e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.04842888 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.038970772 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.8632e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.0013e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.027527219 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.055231133 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.5684e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.8222e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.035286116 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.7074e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.063236713 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.176e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.2563e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.038352144 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.4311e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.5841e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.027052574 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 3.0009e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.5146e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.03365814 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 4.0514e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.030835381 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.05722232 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.026253613 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 3.9949e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.8774e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.391e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.037322656 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.0415e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.106e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.063474645 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.2602e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.502e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.070393798 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.4931e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.8277e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.057606681 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.7903e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.2592e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.885e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03069592 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 3.8682e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.052702515 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.0548e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.3411e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.6132e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.436e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.03323608 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 3.0262e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.6327e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.055680063 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 4.6081e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.024609564 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.070222672 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 3.0013e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.9825e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.7195e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.2161e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.8317e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.941e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.057746316 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.1083e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.9874e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.3492e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.04220102 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 3.5696e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.2654e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.7221e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.3249e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.3753e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.0716e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.7692e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.1236e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.7621e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.3741e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.2465e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.026409472 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.063262862 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.5474e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.9965e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.037623267 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.5645e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.9369e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.7583e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03119318 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024593352 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 5.0312e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 3.0632e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.048267274 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.0766e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.8755e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.038e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.033887241 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.8642e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.6298e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 3.2677e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.9531e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.862e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.7938e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.8935e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.069915986 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.030192999 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.034905788 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.045969948 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.0174e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.8572e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.068153727 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.1725e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.8173e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.2684e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.9058e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.835e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.5148e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.6497e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.052254108 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 4.0805e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.1566e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.7818e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.6228e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.1182e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.6978e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.9147e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.075155379 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.062978568 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.6421e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.042790418 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.5773e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.2011e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.9629e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.935e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.5542e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3437e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.0372e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030916881 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 6.0726e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.6492e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.3813e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.2144e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 3.0268e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.8756e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.4759e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.4489e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.046162151 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.8795e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.7394e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.053604809 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.0199e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.06428663 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.604e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.1079e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.1e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.8566e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.057490292 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.6599e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.9267e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.1746e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.2353e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.4379e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.0923e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.9515e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 3.6061e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.1572e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.1157e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.1648e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.009654115 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.7152e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.3926e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.1096e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.7367e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.1252e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.144e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.4543e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.0733e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.2493e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.9946e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.7318e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.9549e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.8161e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.6653e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.8828e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.4267e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.0968e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6424e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.8501e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.6532e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.6726e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.009975262 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.4907e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.0294e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.7733e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 6.7333e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.7272e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.9467e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.0318e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.4428e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.7019e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.5479e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.6717e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7138e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.3768e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.7842e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.6573e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.552e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.8378e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7485e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.2775e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.5711e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 9.501e-6 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.080953302 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.1625e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.4093e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.3416e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.3131e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.632e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.8187e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.1771e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.3092e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.031696153 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 3.5769e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.2258e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 3.7624e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.9828e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.5397e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.4017e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.0629e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.4546e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.7446e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.7111e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.8822e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.028050868 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.02961715 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 3.2603e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.9278e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.055288703 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 3.5267e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.4624e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.8035e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.1988e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.9484e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.8518e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.5614e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.2517e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.3554e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.6374e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.196e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.6859e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.9714e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.1009e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.0329e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.1379e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.5276e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4713e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.0608e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.8049e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.4555e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.1024e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.4432e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.4951e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.0344e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.932e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3557e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 8.541e-6 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.4516e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.5989e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.9719e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.067162095 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.7899e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.494e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.8757e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 3.5069e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.4904e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.084537459 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.07264013 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.2406e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.213e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.8768e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.4976e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.7772e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.512e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.3258e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.5557e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.7907e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.1348e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.4249e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.4387e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.2325e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.2556e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.1877e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.6521e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.061943253 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 3.3147e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.2437e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.6421e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.0747e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.3942e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.0351e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.8557e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.9654e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.3459e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.2912e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.058032611 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.374e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.057851001 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.9632e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 4.0301e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.1971e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.9163e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.476e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.8644e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.028386711 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 3.5006e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.7372e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.8761e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.2772e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.1416e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.9169e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 5.0003e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.0386e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.8648e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.9084e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.4866e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.2598e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.9225e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.1497e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.8975e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.8166e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.3402e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.5253e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.747e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 9.088e-6 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.3647e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.3036e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.4789e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.2324e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.05633281 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.6068e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.4346e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.026218327 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 3.6473e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.434e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.9372e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.127e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 4.0368e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.4768e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.9124e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.3604e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.236e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.4516e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.6933e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 3.742e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.392e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.4421e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.7949e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.4558e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.6883e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.3515e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 9.828e-6 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.00983309 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.029932392 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.1462e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.1814e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 4.0694e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.7848e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.698e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.7853e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.1697e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.05444858 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.4594e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.037781717 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.3935e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.7176e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.4096e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.987e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.9786e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.7588e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.8235e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.3906e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.2712e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.1827e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.8663e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.969e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.1699e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5107e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.6834e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.6353e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.9878e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.9018e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.3571e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.3558e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.7361e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.9809e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.2688e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.358e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.1067e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.3418e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.0744e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.2546e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.009728044 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 3.7316e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.0209e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.2469e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.2832e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.5565e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.0673e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.8013e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.7121e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.1894e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.361e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.9326e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.4118e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.2679e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.0184e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.5757e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.2728e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.7058e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.777e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.1097e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.8673e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.7239e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.1893e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.5767e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.8205e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.2186e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.0249e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.3356e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.4162e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.3965e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3848e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.8268e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 8.186e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.843e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.9671e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.7371e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.9274e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.0759e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.3353e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.2901e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.8275e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.5289e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.3537e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.5532e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.5249e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.1667e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.5998e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.4657e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.0395e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.7383e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.377e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 8.872e-6 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.5848e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.0994e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.2085e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 5.9247e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.3598e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.4638e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.5401e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.6947e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6251e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.6168e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.2982e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.611e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.382e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.1298e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.7294e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.1464e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.383e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.0841e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.4241e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.9433e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5152e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.039e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.59e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.8388e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.8705e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.3632e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.2926e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.306e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.3781e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.355e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.0885e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.467e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.1331e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.1842e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.3141e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.7124e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.4114e-5 seconds)
done (took 11.334615888 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 25.476094026 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.253394338 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.371707762 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.171746265 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.286283799 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 1.017310337 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.374125556 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.396782708 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.394688405 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.106995369 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.574027618 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.079867623 seconds)
  done (took 39.651021184 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.035105891 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.240554991 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.36674365 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.110181912 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.285265785 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.684967771 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.108760315 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.397816201 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.419264153 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.108382063 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.581267907 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.082894272 seconds)
  done (took 23.108154031 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.652136 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.096236904 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.143448538 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.079398073 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.129053797 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.14060387 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.647825036 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.058018964 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.657773892 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.040747079 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.378340859 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.04510868 seconds)
  done (took 10.201824573 seconds)
done (took 74.137574435 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028501097 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.030856488 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.121200255 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.078827426 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.063925163 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.038959176 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.040188593 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.03683021 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.118115147 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.147529633 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.3647e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.047371864 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.031098848 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.122768982 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.032739527 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031975872 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026542028 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.034246667 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.061744955 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.04282352 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.039021774 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.251270804 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.030619477 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030369684 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024880545 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037818831 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033024934 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.113061516 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.170118644 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.03860153 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.027839782 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 7.0044e-5 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.029906563 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.09489461 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.057543612 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028184291 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.031211044 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.217836568 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.180942265 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.031986017 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.038118396 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.099702987 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.03794402 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.199330416 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.028106426 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.162297588 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.122772996 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030583845 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.028502902 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.046283858 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024934597 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.030078697 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.11368948 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.118090288 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.5578e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.507e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.197907152 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000225264 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 7.1478e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.036269633 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.067135677 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.030985128 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.020481761 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.027075716 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.034299227 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.041513007 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028164208 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.029525342 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.183384069 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.087141678 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.116369467 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.037311793 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029864716 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.053156596 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.037573359 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.068971424 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034380128 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000105074 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.029846525 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045567811 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027590106 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.092546842 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.109739214 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 8.5367e-5 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029791491 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.035633009 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027964247 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.135689118 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.2104e-5 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.026664991 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 4.6092e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028131274 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.143310012 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029763527 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028526954 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.027649637 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.029667203 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000241409 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.3676e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.144561546 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.199943295 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.091032229 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031511554 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030313645 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032496227 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.15884525 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028126689 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.076114261 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 7.8316e-5 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027069681 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.032932325 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001740401 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028055583 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 8.1878e-5 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.028863383 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028247384 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.115513929 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.029798351 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.036963616 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027637261 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.144706905 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.087938039 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.031952944 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.039477328 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.029023736 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.170169479 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.028447286 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038838913 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095976703 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.020201861 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000101819 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.028810106 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029515646 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031864469 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.037375327 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029030678 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029133578 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.027263485 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.088500282 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.115273627 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001193804 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.091007823 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.046536049 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029414009 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.110182068 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.033138764 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.051590055 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028028487 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.090374092 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.5301e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.223294502 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026944822 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029576107 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.3541e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.169857433 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.177404978 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.03656025 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.3519e-5 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.3749e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002588931 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.263076783 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000130568 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.032171197 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.044645674 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029232895 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.150500937 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.136484544 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.090857002 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002265524 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027503259 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.033687293 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000950338 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 4.7745e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.049590707 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.23702693 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001195821 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.02943982 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.145413396 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.036819543 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.1663e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.090861537 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.028704078 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033915147 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026592517 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.16176987 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.029292622 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.134507712 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032006649 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.033056625 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.030464844 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.112377006 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000101127 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028015981 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.177059658 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.026559081 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000105796 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024613372 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.030897494 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.9211e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.09198631 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027470405 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.037525459 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.097865348 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034003535 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000143727 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029317456 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.00012664 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.025167873 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.028093725 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.019994474 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.037642134 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 7.4834e-5 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.087309346 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029656707 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.110746918 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.268141486 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.152782872 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.8712e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.2687e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029727275 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.287124733 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 6.7198e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.027479099 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.031527151 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033498491 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000105883 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.3198e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.030715443 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001736469 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034405727 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 7.6892e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029493446 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.2476e-5 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.111512284 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.3887e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.6076e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036854339 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.034320218 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.042016781 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.089103946 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092349171 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 3.0126e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025438786 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.00116042 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 6.0072e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.033791248 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027510593 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.4395e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.035132416 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037492379 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 7.6363e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.14191144 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.5674e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.03117575 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042411509 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.1616e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 3.8193e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.026628625 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024539114 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065175655 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.043357964 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.3116e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 7.1466e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.2703e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.03082349 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029377716 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.0916e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 3.6484e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.3824e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.03326079 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.0805e-5 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002227103 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.088715676 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.029277994 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.028754331 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.034160534 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001647995 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.10828782 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 3.6275e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.028543206 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.06288026 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.9189e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.0505e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.03338474 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027127334 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025895345 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.035555586 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.263151792 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.110491083 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.3899e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 4.9801e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.029100762 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.030322974 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.027802046 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.029223974 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 7.8101e-5 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.845765125 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036804862 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.177218788 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001947495 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.044738978 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001731974 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.171070123 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 6.5788e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.035851121 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 3.9722e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029380891 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.026314034 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.026881411 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.035749043 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.036696415 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.6405e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026556887 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.026308303 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 3.7145e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.2124e-5 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.3941e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.03311535 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.00222519 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.4703e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000103791 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.033029011 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.03554677 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.217365843 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.033829485 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.05716304 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.043592309 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 8.3169e-5 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.001034557 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 5.6018e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031247623 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.0967e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.7733e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 6.9014e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 8.6007e-5 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.088304163 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 4.9334e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001792294 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.8356e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.9964e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.9578e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 6.2324e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.4913e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000743968 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033278251 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 8.5705e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033392745 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000127109 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.070148869 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.22334951 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.038281733 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041414256 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027259673 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045417107 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 8.9393e-5 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001142405 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.136497783 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.2837e-5 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.958601945 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.03244002 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.1289e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 6.7665e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.1215e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.9684e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.02932021 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.2206e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028469168 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.1301e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000119931 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.114618624 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025571474 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.034053656 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001807847 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.027791965 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029169178 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.2846e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000815791 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 3.8994e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037113023 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040473496 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001893565 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 4.6674e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002566174 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.026985551 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033192859 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000110272 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 8.9542e-5 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 7.7435e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.3306e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 4.8449e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.5717e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.031194109 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.3715e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001808835 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028041265 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 6.3405e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 3.8032e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.6818e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.03159086 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.2912e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066709925 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 7.3143e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.2489e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030808481 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.033183553 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000119209 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.2516e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.2591e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 4.8255e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.02548498 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.000977792 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 5.8595e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.7844e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000116374 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.0172e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.072658026 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.032169052 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 7.7878e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.028147049 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 6.6127e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.465268287 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.6527e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 3.4722e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.3667e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001834474 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.945e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029169985 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 6.5142e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.042620978 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.2556e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.03698375 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.308401116 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033690003 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035781049 seconds)
  done (took 22.838339307 seconds)
done (took 25.21702561 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.989086304 seconds)
  done (took 10.362147124 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.394697464 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.454440816 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.42857572 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.398184309 seconds)
  done (took 32.07460838 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 8.337430942 seconds)
  done (took 10.728882904 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.775595018 seconds)
  done (took 10.161952751 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.780060817 seconds)
  done (took 10.178079873 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.460006477 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.412988773 seconds)
  done (took 17.25305736 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.42354056 seconds)
  done (took 11.807914828 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.752185059 seconds)
  done (took 10.140353081 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.396809068 seconds)
  done (took 9.784941514 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.38535198 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.3877539 seconds)
  done (took 17.162067665 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.402454386 seconds)
  done (took 9.788972996 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.393211727 seconds)
  done (took 9.78032274 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.513007496 seconds)
  done (took 9.903517716 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.788063748 seconds)
  done (took 10.17371018 seconds)
done (took 181.754679355 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.392170162 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.389626903 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.386853048 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.917908345 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.787776099 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.390152602 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.392546927 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.392497454 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401047231 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394406406 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.396986278 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394201609 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.391791537 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.393077997 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393062733 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395797712 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396984996 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40150176 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.394353349 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.399647391 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.660619078 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.398553697 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.402536498 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.400504638 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.397376558 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.394874537 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.393474267 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397270577 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397879429 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.396964609 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397122972 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.39882927 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404351298 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404403396 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.408263258 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397439994 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404438877 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.406922927 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398278872 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.40820641 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403033951 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.40982323 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.964922793 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.677049444 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.405675909 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.405361039 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.404743661 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409116918 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.430700835 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.404325703 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40371553 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40550049 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.40686927 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 3.163468776 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.408928185 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.406252424 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.406787975 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420033322 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.408939569 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412365786 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.408105849 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.414335073 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411733465 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.690448979 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.410784249 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.417598577 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.416591303 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.418710814 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.407937665 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.417715539 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.410278163 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.407832056 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.416047561 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409401295 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.355190327 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.45975724 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415793968 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413540332 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.415226503 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.411470978 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411448903 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.412883407 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409975476 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.432063123 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.411684528 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.415842669 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.410901396 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413750944 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.445026484 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.415723432 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.413942787 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.410618814 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417883413 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.419775526 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.811707325 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412467142 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414247563 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.419934705 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415632962 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.61171667 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.414177351 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.417621167 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.413186273 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.411092105 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426405544 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.765966491 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.422716042 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.420542345 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.445923128 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.426922085 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 6.090882152 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.636721409 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.410596795 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.418443312 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 6.100104084 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.424645908 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.423149382 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428058505 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.421978624 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418235856 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.42204961 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.419207083 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417916418 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 6.141429005 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.417710324 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414866107 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 7.416636949 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.544888367 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.601177224 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.418307726 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.503948031 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.496196519 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 7.035720519 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.420567139 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426966906 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.418583892 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.427414817 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.296289621 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.431641309 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.426896597 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.553071686 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.428638981 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426322614 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.424925901 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.416141162 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418788257 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.425838075 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.419439196 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.425106002 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.525093589 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.42520865 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.55184425 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.377272315 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415983109 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428438275 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420253057 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.449085837 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420193565 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415073208 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.58969815 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.420885312 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.416234883 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.422510606 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.429400191 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.420531894 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.415765257 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420208243 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.427054859 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.421348639 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.556170299 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.416860552 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.415937185 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.421180488 seconds)
    (174/608) benchmarking "5d"...
    done (took 5.768167113 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416479521 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.802507619 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.435694061 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.413495877 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.431205238 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420329826 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.424835788 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.561457381 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.435879392 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.418770751 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42425877 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.589803289 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.431319053 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.430291807 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.423148259 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424666618 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.816467458 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.423656658 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.428171666 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421282154 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.420930987 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.420306964 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417420168 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.679945443 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41889845 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.426649104 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.438864705 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.421218167 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415742938 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.442078388 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.586308499 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416832994 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.42974969 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.432880629 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.420133693 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.421232106 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.418666979 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.416477991 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.418315661 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 6.199064951 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.427098613 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.418068058 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.424123185 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.532285127 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.536173714 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.426799181 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.425367905 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.424842604 seconds)
    (223/608) benchmarking "6d"...
    done (took 7.424893795 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.42980366 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.425299655 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.568564179 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.430783906 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.433298405 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.426959597 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.429542196 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.427267287 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.426528686 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.437470809 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.425633141 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42276573 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.433259651 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.436997035 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.436091963 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.431152949 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424813771 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.425624032 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424838979 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.690350906 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.427591097 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.430161301 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.433786755 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.425328537 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.431456707 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.423794375 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.91884845 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.913189755 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.470306934 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.427150072 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.839783031 seconds)
    (255/608) benchmarking "3d"...
    done (took 4.109751838 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.433542145 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.42195889 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.436753342 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.424699511 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.41441031 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424853425 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.427928417 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.930881414 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.436566505 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423576486 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.20839541 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.68600551 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.452914792 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.427900091 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.717159704 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.425079608 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.045094854 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.425894438 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.447528166 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.434137218 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.428182024 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.425009194 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.426983588 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.428980247 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.423071838 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.971765697 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.427452375 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.427356633 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.423353304 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.426126431 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.419162533 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.431573707 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.430062523 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.387261466 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.745042479 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.426460103 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.428886835 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.521738938 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.533696973 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.426224484 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.431616135 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.839302494 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.433420333 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.426027689 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.427909775 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.532811345 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.42927402 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.571988482 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.887285043 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.428928374 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.432364299 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.439788351 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.426619477 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.427196724 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.434067099 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424373473 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426082712 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.425189706 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.436669778 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.433066855 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.515236339 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424793994 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.406518901 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.439780424 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.437153722 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.42359745 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.428414517 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.430626619 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.434643793 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.428508353 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.435263557 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.428528448 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.997383685 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.440878026 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.429418351 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.440288498 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42795915 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.429219921 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 7.561373636 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.676917118 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.70343559 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.437035576 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.43542926 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.421396 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.372808667 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.852862516 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.430551905 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.370159197 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.424880496 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.707452967 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.456342192 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.768896144 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.428168913 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424874461 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.433246619 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.430496543 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.431076918 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428412688 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.570120891 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.435325651 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.423658047 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.435662756 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.434605854 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.439705975 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.758688644 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.456464484 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.428456645 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.43250271 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.348069868 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.441203427 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.766597355 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 3.552569061 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.42611662 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.422475282 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.427495446 seconds)
    (371/608) benchmarking "7d"...
    done (took 5.683218504 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.429838606 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.429942399 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.626384262 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.428284302 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.435921639 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42559891 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42293153 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.431625696 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.425845099 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.426618492 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.426325629 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426909653 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.43860891 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.424256129 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.433882647 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426113248 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.422146592 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.439014438 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.422139812 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.427847576 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.423140789 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.427881549 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.432285128 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.442264377 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.421738562 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423653751 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 6.065733845 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.778896541 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.432860321 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.453520947 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 5.008013696 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.483261124 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.548514856 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.443262124 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.432745023 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420848311 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.432339023 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.428561576 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.429414817 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.667906575 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.42793461 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.395728127 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.011701385 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.445412095 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.551070196 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.001157515 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.429918598 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.425781559 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 6.050523063 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.740168514 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418934406 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.423830455 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.432652221 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.432273167 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.44195197 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.453605072 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428268201 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.052354435 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.444134094 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.442727133 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.433191319 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.444345066 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.421407688 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.721418648 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.434063728 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.431272262 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.430967925 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.423808896 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.561029356 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.972422516 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.468603059 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.561771137 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.536465574 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.432301381 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.425653267 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.4282539 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.462902662 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.435473317 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.437037167 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.431865148 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.426978061 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.434460918 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.439085567 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.429459115 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.463926987 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.429635299 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.432353176 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.43096855 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.425291414 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.424959895 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.426683294 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.92590878 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.903382489 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.463664752 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.566814532 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.43869003 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.425679003 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.425649718 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.434675086 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.435718984 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426392825 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.423327345 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.430157144 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.425460251 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.434086959 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.429364235 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.421266828 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.425369234 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.437850368 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.429064613 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.439907286 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.433193565 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.434187582 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.43009395 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.423085233 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.424488431 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.430265437 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424343523 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.437985723 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.43666312 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.425334695 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.437475872 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.422752349 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.157758196 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.437824655 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.159935182 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.423935908 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426590376 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.41378145 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.436322074 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.436925473 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.442219058 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.430515089 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.434753009 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.426299554 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.594930782 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.432719752 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.424825976 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.428095529 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.436428503 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.43842418 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.536065895 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.472184818 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.42736534 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.927054649 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.444855075 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.428810918 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.429197086 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.428050419 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.435054598 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.426408554 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.444265106 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.444145046 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.432579239 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428303356 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.441864395 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426730977 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.439618723 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.106679823 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.499952242 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 6.217779731 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 6.144727332 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.424882137 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.558557013 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.442379609 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.994099699 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.439045958 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421983982 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.439697958 seconds)
    (541/608) benchmarking "2d"...
    done (took 3.913381764 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.446829846 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.135778314 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.609174728 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.531127074 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.668041943 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.427310089 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.429242426 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.443077997 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.445135485 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.496976585 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.432634215 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.930663668 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.446147919 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426490209 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.436143689 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.439052793 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.727338167 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426779439 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424051668 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.203742179 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.530800649 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.446689141 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.436584548 seconds)
    (565/608) benchmarking "4d"...
    done (took 4.2636632 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.890610481 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.548653943 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.427745584 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.432660804 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.432006001 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.433495394 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.43068536 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.423569104 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.438029248 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.434298249 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.43691599 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.447612224 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.543321165 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.439074788 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.438654764 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.429149478 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.429949124 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428548198 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.441934807 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.713520401 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.98485958 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.442104728 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.430097887 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.433303879 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.440462179 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.265536231 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.427467149 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.453874191 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.43172227 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.428242697 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.433184884 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.428799973 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.424469079 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.43042594 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.424289386 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428284712 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.116410021 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.438129903 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.426639538 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 7.072035868 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.916851069 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.438233351 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.426810516 seconds)
  done (took 4029.139946166 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.65920141 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.50605129 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.325883168 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.405298011 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.83613395 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 2.993329138 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.351012612 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.859078955 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.251317311 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.290615218 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.305278125 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.339785406 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.161372382 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.249895538 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.301594451 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.601624864 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.305506527 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.540069384 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.53226335 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.954478159 seconds)
  done (took 65.192171339 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 2.440755952 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.608913603 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 7.458606823 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 7.43681928 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 7.446280416 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 7.437906796 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.442553251 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 2.474453477 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 4.933774116 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 4.156550114 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 4.349588461 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.43432802 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 4.257558958 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 7.442599925 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 4.909059104 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.436705813 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.364673707 seconds)
  done (took 96.455796564 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.461790706 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.672315738 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.464694106 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.473056807 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.449938051 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.591547761 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.741536668 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.548596531 seconds)
  done (took 62.842574509 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 3.002909874 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 3.043469424 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.500453835 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.216424992 seconds)
  done (took 15.195253267 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.46089457 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.572916599 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.429416258 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.788685453 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.443406398 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.671435839 seconds)
  done (took 34.799072688 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.335196333 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.578259931 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.455209786 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.427011931 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.440449928 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.263452899 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.592341221 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 3.048306194 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.051533897 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.430963779 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.548666168 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.567860286 seconds)
  done (took 56.178858787 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.792576765 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.929183287 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.646499455 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.611575588 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.83502618 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.956363779 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.550684465 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.722874362 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.434092937 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.464540074 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.650180006 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.480259536 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.678547033 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.490506399 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.675525339 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.810661816 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.850873737 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.478518006 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.748772624 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.827072942 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.639113021 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.738646127 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.835033719 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.07009177 seconds)
  done (took 72.360738639 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 2.648534808 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 2.670156865 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 2.669202534 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.713934639 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.647801073 seconds)
  done (took 15.774801212 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.482907415 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.552990848 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.511428076 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.512162352 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.668268269 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.583052496 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.527020553 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 8.000675073 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.794288888 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.925425409 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.035514848 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.51022663 seconds)
  done (took 107.526660291 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.445502446 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.438761407 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.44509967 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.441579954 seconds)
  done (took 32.207625568 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 2.493038476 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.514965121 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 2.849546083 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 2.614430266 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 2.503163447 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.69579142 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.679425264 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 3.700075987 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.508466702 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.530275201 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 2.52390814 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.985982253 seconds)
  done (took 37.023136772 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.787809293 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.760637399 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.785181345 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.79098281 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.758643245 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.740146807 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.73892459 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.805187972 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.787280817 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.806512645 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.677444677 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.754474446 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.787190251 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 3.129801046 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.810556768 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.676970528 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.779779619 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.788400428 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.131319283 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.786884602 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.679086125 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.75960331 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.804171375 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.680862583 seconds)
  done (took 69.442073761 seconds)
done (took 4696.664683099 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.06354275 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.207795132 seconds)
  done (took 8.704871367 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.817554107 seconds)
  (3/15) benchmarking "20517"...
  done (took 3.046352472 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.269364639 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.295740699 seconds)
  done (took 8.995465719 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.495613938 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.046283884 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.082111374 seconds)
  done (took 11.048816087 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.596905235 seconds)
  done (took 5.02205815 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.961656608 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.917711891 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.62082077 seconds)
  done (took 10.925001844 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.458535806 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.208913709 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.607573383 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.675235253 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.948718348 seconds)
  done (took 15.891311291 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.434264001 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.508704019 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.444590429 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.815327741 seconds)
  done (took 24.643331524 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.453882648 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.433750982 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.441735664 seconds)
  done (took 24.756489726 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.668182579 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.461380384 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.465888702 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.470844087 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.465758261 seconds)
  done (took 12.287247339 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.011400061 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.868987709 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.890923082 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.989850587 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.2793663 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.706784176 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.901142421 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.794527567 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.560244398 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.757241967 seconds)
  done (took 31.183917967 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.940670742 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.786283093 seconds)
  done (took 8.152635357 seconds)
done (took 180.037327125 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.432726312 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.448400342 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.441143378 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.448644921 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.445986981 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.437985248 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.435131813 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.439919478 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.446484157 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.442515554 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.439286844 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.443407672 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.583412511 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.441973355 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.447154919 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.440395317 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.450442422 seconds)
  done (took 44.091901048 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.466132352 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.87677058 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.249884293 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.783007636 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.319056448 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.469659785 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.649161448 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.158128506 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.349408532 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.228978013 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.245808602 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.107217409 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.44977046 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.088240953 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.446059091 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.222700222 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.432403252 seconds)
  done (took 84.967327382 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.446541657 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.44794816 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.446112376 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.448897626 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.445798472 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.444374333 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.444326695 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.447395785 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.447923039 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.445859875 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.446833938 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.451008543 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.472500394 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.448485822 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.450900577 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.443650055 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.452279251 seconds)
  done (took 44.067783188 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.445140593 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.489903039 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.456837948 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.485345999 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.476402651 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.448139805 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.448878071 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.458912004 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.477380343 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.458978705 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.459954048 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.466702495 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.334080031 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.465569873 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.464102027 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.474787853 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.464571084 seconds)
  done (took 45.212337709 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.45637113 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.441221431 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 8.012352548 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.484960582 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.54984356 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.426587136 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.92474458 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.442660028 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.843103571 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.614829886 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.652201768 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 3.01195076 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.852048194 seconds)
  done (took 85.146892911 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.433591872 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.438636578 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.4301312 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.442504232 seconds)
  done (took 32.172858284 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.443047181 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.444585829 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.439312716 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.445289057 seconds)
  done (took 32.217523282 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.462330176 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.45619612 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.472247276 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.457207605 seconds)
  done (took 12.288149731 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.650033054 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.192494119 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.188456996 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.142868243 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.970902499 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.384893752 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.134489137 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.596972185 seconds)
  done (took 28.686592892 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.446357935 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.787443386 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.61955096 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.787205899 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.649540218 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.457820417 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.468827195 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.673188422 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.827748984 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.684028552 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.6641773 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.671537048 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.442741509 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.601955112 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.640208538 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.63908184 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.698176009 seconds)
  done (took 52.194487955 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.447646932 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.455507909 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.449411317 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.448034074 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.44807093 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.445721223 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.444147154 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.455265503 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.450578357 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.453073402 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.450286348 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.452455436 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.53484481 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.446975272 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.455989861 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.446436609 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.456201913 seconds)
  done (took 44.180769505 seconds)
done (took 507.665135327 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.438052426 seconds)
done (took 9.871206884 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.452514857 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.547757201 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.43247908 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.760600224 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.431469886 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.45357871 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.45797104 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.453244374 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.457516398 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.450006341 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.27219716 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.197639055 seconds)
done (took 75.80158171 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.681552496 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.442504686 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.616523809 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.307292184 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.113567519 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.607885666 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.51769552 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.685005862 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 2.887480462 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.393213644 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.551315618 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.619236519 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 4.121425495 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.648244195 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.214083531 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.599774606 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.433105217 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.889155522 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.765128335 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.810058491 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.146951399 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.481448576 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.451419453 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.613619158 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.428855718 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.735455117 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.264692377 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.457323885 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.65104556 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.524714732 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 2.959909804 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.19404176 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.656484522 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.746436333 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 2.5361668 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.435282371 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.800302273 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.111370297 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.820674832 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.412735642 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.447708848 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.788075518 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.428354716 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.179078173 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.106975602 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.440740543 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.349232651 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.575215898 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.599106382 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.432873047 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.5887365 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.395317383 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.681992008 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.0810928 seconds)
  done (took 239.858921211 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.700011469 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.771641437 seconds)
  done (took 17.975681689 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 2.708654956 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.484362761 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 4.794262933 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.368015109 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.639164855 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 2.889618273 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.803092546 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 3.056290904 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 2.889251613 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.59223958 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.963936218 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.671537931 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.993585379 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.028952422 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.967973268 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 3.060798396 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 2.705835415 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.068312034 seconds)
  done (took 63.121301884 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.87720841 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 3.021143042 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.433100819 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.83851023 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.442966701 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.426932943 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.427580254 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.079536127 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.731766073 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.848292745 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.934185755 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.432460345 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.441005683 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.971646766 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.950912377 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.224534533 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.45645823 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.426248377 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.448832881 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.443955991 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.868902163 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.43555113 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.741023653 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.466378215 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.63484137 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.451406143 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 3.006993406 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.879662049 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.446766616 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.685750823 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.444885665 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.441467436 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.452537453 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.427427309 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.452238013 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.954166435 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.434732914 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.693712876 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.442057465 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.243135558 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.447273857 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.4369645 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.793217163 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.437175501 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.87678235 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.451826637 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.289263801 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.967776532 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.451932818 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.224327224 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.785674547 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.445478519 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.975903495 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.030630136 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.609762993 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.663507731 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.988186959 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.444373237 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.007601807 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.896593701 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.45818014 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.432084254 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.947540855 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.433380511 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.893684864 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.880029797 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.402449985 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.428580614 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.932076142 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.455016166 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.818895553 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.440090194 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.42957442 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 3.034863314 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.458056651 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.386169941 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.44202178 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.411578068 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.158203169 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.441142278 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.4363857 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.189720157 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.960286703 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.434204391 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.4289491 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.797526152 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.850826281 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.459982673 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.428492848 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.448680854 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.43898293 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.303204582 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.439790045 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.443266657 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.301788253 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.101166065 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.601461558 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.536223865 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 3.041505744 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.577119581 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.435118376 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.816977232 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.319199144 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.42951743 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.670417141 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.361881621 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.772471929 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.915408521 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.447446463 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.910993072 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.985894209 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.429948747 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.718849684 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.056326066 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.992933436 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.437699835 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.43255224 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.434373547 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.439334255 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.929329504 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.455083758 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.426530197 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.450651874 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.912953745 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.431851559 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.967963092 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.975591955 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.245771642 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.441393518 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.443365263 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.431288032 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.085689046 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.398937981 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.468133414 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.43939576 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.943855528 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.44518016 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.921230436 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.454690015 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.446529654 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.521147597 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.147992095 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.800342565 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.456166673 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.443666077 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.436914179 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.915614202 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.662382926 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.613730784 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.437334338 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.65750127 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.698498349 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.906811063 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.452388118 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.654949493 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.119727028 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.442393451 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.826253795 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.889749906 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.712035684 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.447425835 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.812554506 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.449218833 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.731764292 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.936466476 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.439577084 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.430468891 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.879766317 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.821291619 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.621313525 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.213684191 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 3.008169858 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.224183253 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 3.008692097 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.435605586 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.42974349 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.139549833 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.448780085 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.433192136 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.43130777 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.215630048 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.910610532 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.459833022 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.886167261 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.418558145 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.933078304 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.440473318 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.975491975 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.748523772 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.450721052 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.433210691 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.464358627 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.782788479 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.918176542 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.43163424 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.430071724 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.929507281 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.181633993 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.969436605 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.443309313 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.225912289 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.450655026 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.441196361 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.926174884 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.44543838 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.445647901 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.607523206 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.967434177 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.449135383 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.430060082 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.979367637 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.10800829 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.68191415 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.928680752 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.405988372 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.428059308 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.963185908 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.446845037 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.441683777 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.99363731 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.812635938 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.443157672 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.953449459 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.44232294 seconds)
  done (took 1145.347607867 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.974712038 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.497714116 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.826675431 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.310797866 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.265963297 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.528302757 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 3.012397134 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.628519857 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.881999181 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 8.04133936 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.739854224 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.461827076 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.383282006 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.746554405 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.602805904 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.56198159 seconds)
  done (took 88.90053237 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.517541861 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.506006198 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.49087441 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.47960496 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.522877936 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.490462956 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.513541965 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.505467104 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.528840007 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.479025245 seconds)
  done (took 77.471138489 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.930524521 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.574376131 seconds)
  done (took 12.944680461 seconds)
done (took 1648.066310579 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.479108743 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.894187632 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.549779681 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.489268209 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 4.066191337 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.472002124 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.479756654 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.475121272 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 4.024228343 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.288508442 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.585617239 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.041664433 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 3.032003913 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.543103089 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.475723828 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.476526621 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.929335903 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.308468842 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.620453155 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.473427926 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.471041214 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.461813012 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.463904469 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.469526494 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.936355729 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 4.140988916 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.96672357 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.47754132 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.907403132 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.553858098 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.484142298 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.47945575 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.479198892 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.473732784 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.206805539 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.296959809 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.515225702 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.476019662 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.487268282 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.462186227 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.474340048 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.469592895 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.463105222 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.468608893 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.462913231 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.462167241 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.404912032 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.914599254 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.507523656 seconds)
  done (took 145.983790211 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.496303023 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.491821818 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.565480328 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.620041588 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.489116389 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.484049904 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.489619568 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.615677638 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.491414159 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.493050234 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.550027819 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.493304508 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.488648525 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.486489592 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.485444552 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.620023297 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.488175865 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.480197064 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.485804193 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.484919738 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.564551901 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.492803605 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.492931269 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.499424983 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.485889743 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.482702993 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.554965218 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.492697781 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.566323696 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.48663403 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.489819561 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.489591137 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.484873327 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.49217708 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.493046345 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.506850737 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.481501256 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.619841474 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.488025487 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.549849416 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.612322825 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.4807448 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.489120371 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.489793765 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.484257376 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.477870008 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.496082223 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.476943479 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.487116587 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.550162261 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.49074744 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.55420397 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.478621383 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.61817208 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.491819026 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.486765264 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.555416677 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.500636939 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.616825574 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.575242683 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.478555262 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.563452838 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.489493969 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.611661865 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.519825754 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.487673606 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.479335043 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.490319932 seconds)
  done (took 173.475042577 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.511010887 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.515531412 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.508944625 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.509519293 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.719602781 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.516032109 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.710044593 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.571810979 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.513042318 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.512708368 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.712668629 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.513526953 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.56783638 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.510805384 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.509521262 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.567399057 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.723941308 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.511307536 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.567546959 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.509797466 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.515125492 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.501448189 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.516336245 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.717530919 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.508138832 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.512258187 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.491766819 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.511250716 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.508344813 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.491878836 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.565032936 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.513979437 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.508042545 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.507315899 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.49999893 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.711963656 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.714352582 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.487102645 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.498289768 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.486354326 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.5662559 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.511306961 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.509217075 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.4899578 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.564949543 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.566241251 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.507962487 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.568340051 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.508003293 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.508716017 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.565129803 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.513060818 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.530694126 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.513328487 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.500123131 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.705688807 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.563280817 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.514342205 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.490086903 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.564467573 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.507688376 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.564707037 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.570671319 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.513195439 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.507739538 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.532894274 seconds)
  done (took 170.434780107 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.435717146 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.437116862 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.45548409 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.451254502 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.437467822 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.449831424 seconds)
  done (took 17.091814935 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.496183585 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.585871718 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.573267194 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.564519825 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.585894909 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.278509106 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.563386212 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.352758038 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.279736605 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.613090115 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.575904749 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.612959073 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.497361489 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.497044918 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.494514708 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.349193545 seconds)
  done (took 46.356459624 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.514974863 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.48836679 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.477418161 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.285084304 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.484901081 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.485235407 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.515719182 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.288195405 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.547028106 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.499992667 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.487581914 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.485297701 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.489192875 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.486241916 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.482600887 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.480229645 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.483292519 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.483553294 seconds)
  done (took 48.894954908 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.572120511 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.47849995 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.61658172 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.664130206 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.512196887 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.570737463 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.486954606 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.657929461 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.664446336 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.658776766 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.608712441 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.614309541 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.482966257 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.607648841 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.553497719 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.483571529 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.551663505 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.54620833 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.487882966 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.545555317 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.481848572 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.508250019 seconds)
  done (took 58.78082095 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.485485742 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.502718371 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.717248067 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.499155655 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.707746007 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.502066911 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.716339277 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.569235226 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.497549697 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.503182299 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.723051883 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.514786838 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.510642759 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.499362942 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.500165137 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.505914687 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.516929633 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.720638405 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.498703393 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.572580375 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.498287802 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.570699118 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.502852591 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.510565345 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.724717564 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.512129321 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.532725038 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.715776297 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.484061184 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.484934981 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.501627502 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.504489752 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.499789155 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.514573029 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.511410605 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.497729426 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.511562836 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.563528067 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.502413898 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.500397521 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.501094503 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.502443998 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.53289496 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.502413412 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.569470953 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.573466502 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.514195898 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.487069341 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.511134763 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.492311699 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.51241671 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.501823725 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.723398886 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.497190765 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.511233509 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.500334325 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.569991212 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.505479687 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.509144133 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.501047312 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.503011748 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.564106213 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.496854527 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.511979589 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.502566283 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.516030477 seconds)
  done (took 169.947346809 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.52323012 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.505919615 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.50500537 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.503973622 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.503878674 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.481166006 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.504122357 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.483794886 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.9668343 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.506831128 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.480629463 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.426292762 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.476321889 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.506891968 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.964545262 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.523295962 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.502140559 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.479092078 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.504005066 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.475243422 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.507648893 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.477486517 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.506768963 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.505077357 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.425802133 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.507336614 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.479291696 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.507611549 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.475789585 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.505914596 seconds)
  done (took 94.148253008 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.487330364 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.528876412 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.532360604 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.530315986 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.529659862 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.480570428 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.484089719 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.533985175 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.485302042 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.528217414 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.535823209 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.483051472 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.537393322 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.524694459 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.752037604 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.768659534 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.586218483 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.490117503 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.624412231 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.589309429 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.599141404 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.576609957 seconds)
  done (took 58.612322894 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.498063707 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.591323935 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.578283701 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.395542142 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.578173182 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.643655873 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.485503947 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.565879039 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.393166713 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.567815972 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.552814052 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.475676108 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.475030609 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.545064013 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.546384192 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.566228962 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.648293377 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.545908711 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.580397893 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.545257688 seconds)
  done (took 57.282651736 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.515186577 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.553518616 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.545178979 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.535682704 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.532603613 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.878187204 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.49173608 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.547742013 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.490147178 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.536942953 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.033733015 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.545241195 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.523361505 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.528368512 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.882180664 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.532063701 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.518125973 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.496289143 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.489236851 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.497349805 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.03689748 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.525466206 seconds)
  done (took 59.661524962 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.481050482 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.484099896 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.489163605 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.690044689 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.487007541 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.478189269 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.48843227 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.487950951 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.48166742 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.481249015 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.539406678 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.523629996 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.509588822 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.50243835 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.488871219 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.682736116 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.509157473 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.479076647 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.509293768 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.489305907 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.493409957 seconds)
  done (took 55.205092111 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.466931923 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.462287923 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.511707663 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.473261029 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.4479716 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.459826944 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.451863231 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.528069411 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.451031216 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.465160264 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.466278877 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.459344139 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.469978359 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.549410206 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.451024385 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.463244729 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.469620115 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.511480164 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.471317531 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.46678153 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.468069494 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.45158263 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.464685948 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.466811615 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.468905133 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.499102039 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.467318182 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.449685542 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.44892989 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.462648795 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.461839703 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.463698765 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.464950368 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.472983269 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.464071754 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.624392412 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.490723463 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.451887888 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.45159261 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.469552697 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.470137716 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.478536886 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.460490659 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.453419903 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.466984136 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.466345133 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.464256291 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.453731395 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.451206027 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.477302758 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.455487643 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.465401325 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.454281216 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.465185345 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.47160229 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.451202166 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.453602153 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.463224546 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.451446004 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.463449337 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.453833824 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.45032704 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.465636575 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.451516211 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.463028229 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.451396707 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.468400765 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.46782659 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.46192098 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.466322384 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.551748786 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.470182853 seconds)
  done (took 180.247425354 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.567452973 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.537275119 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.623546257 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.775975324 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.620629887 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.567758861 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.563651186 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.537086542 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.565313352 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.626597422 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.621977843 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.563884201 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.621979546 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.565313837 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.563016373 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.567060031 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.56388228 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.569692234 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.626833689 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.562381132 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.529044893 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.570167004 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.77456972 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.568048118 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.536312124 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.628579815 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.581742439 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.528259227 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.568912234 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.567232767 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.62637034 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.523465461 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.540752818 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.566146604 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.566988538 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.534592597 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.565006453 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.565947582 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.569556122 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.573153959 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.539212435 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.562888817 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.542150166 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.627121984 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.776873943 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.630722946 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.624650368 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.569709996 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.566480721 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.584174762 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.565554407 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.544893681 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.564380676 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.567505655 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.623320622 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.62888263 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.624524097 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.773232109 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.561142256 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.56940097 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.566552387 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.565455008 seconds)
  done (took 162.904923899 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.493690525 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.293306009 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.309691002 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.484745673 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.375444287 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.488208335 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.277722687 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.49249461 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.483913871 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.488345298 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.293571332 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.482141666 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.28870965 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.294430113 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.486835538 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.483980942 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.292260262 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.483691953 seconds)
  done (took 53.7235821 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.494495032 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.496925137 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.496199085 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.299256944 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.501515218 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.476572949 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.819175271 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.500805513 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.303391841 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.49519397 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.496405007 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.500739022 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.50192524 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.437023843 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.4418823 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.438148461 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.497768788 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.436947174 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.816158511 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.501691917 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.496654196 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.496009953 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.476271859 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.495946508 seconds)
  done (took 72.353609555 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.488529304 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.483590681 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.48681891 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.488232006 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.482837643 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.516312298 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.492200012 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.520484748 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.67605632 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.484782498 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.518189044 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.496927388 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.51728634 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.517457976 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.516644861 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.516122667 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.678595196 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.492586585 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.487798941 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.490757877 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.493870473 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.490159076 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.483050552 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.514880652 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.485756613 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.491210697 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.485126276 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.483415587 seconds)
  done (took 72.707151006 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.511941496 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.482250898 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.515624766 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.561759154 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.558767971 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.516882017 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.488320315 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.503767736 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.489046769 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.505777384 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.563524903 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.566327907 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.553032732 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.508364444 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.487973683 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.483450593 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.523016802 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.479587711 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.479306931 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.48510242 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.518305658 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.489813476 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.486806208 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.569477527 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.482593888 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.485033195 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.550930872 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.514941341 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.561509562 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.515189689 seconds)
  done (took 77.866025448 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.470529179 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.506220039 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.477008448 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.479885468 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.504628067 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.480876818 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.48268231 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.494127124 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.481385688 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.474362259 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.849994929 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.476842687 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.491993834 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.504628041 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.478154505 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.47389637 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.499163856 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.470902111 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.470840612 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.953268413 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.485979554 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.49596906 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.494881772 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.471606949 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.483250944 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.4719067 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.498396268 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.495295812 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.496241563 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.846206186 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.506123322 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.480153294 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.472954906 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.471793155 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.483190093 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.505484628 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.83368922 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.947958403 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.499871343 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.479089581 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.599602948 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.509754419 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.473466676 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.495051591 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.473376138 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.470576657 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.46808905 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.465841349 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.499969007 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.495183759 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.473408987 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.503565717 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.508705696 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.475933181 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.836393389 seconds)
  done (took 141.619471781 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.510094038 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.487330455 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.484632837 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.484459341 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.481857795 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.50575668 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.50318422 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.552064197 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.534467767 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.485566684 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.487825645 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.537967177 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.483502675 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.299857665 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.487896148 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.483807705 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.4882054 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.313847407 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.482724155 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.48272941 seconds)
  done (took 54.005852295 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.503720954 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.507925098 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.489284938 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.501354751 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.540221928 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.490328931 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.900703168 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.543398245 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.54401688 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.543228149 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.9578344 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.482867346 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.478760234 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.899330411 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.501654266 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.476663119 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.487502876 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.49364479 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.486869868 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.476824734 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.957379259 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.50050655 seconds)
  done (took 59.194530684 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.486374364 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.666407901 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.596264016 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.607095606 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.482893508 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.544128471 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.551407997 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.617128012 seconds)
  done (took 22.979663324 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.464157294 seconds)
    (2/2) benchmarking "in"...
    done (took 2.466589796 seconds)
  done (took 7.357647839 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.794338089 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.593385622 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.466975346 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.574970835 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.492825153 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.201116197 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.494711266 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.139967398 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.475779432 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.470823162 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.473022457 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.089990677 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.57095749 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 4.02194683 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.665333346 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.478844557 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.44143067 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.537288101 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.656646764 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.84004041 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.871285208 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.609616613 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.474517274 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.898030532 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.120209227 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.666797304 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.68793406 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.468842643 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.572331658 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 4.021027741 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.339728826 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.353630032 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.857309554 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.908301715 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.534628655 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.95727836 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.534732788 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.477373228 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.601052516 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.300697874 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.786889942 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.297004635 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.706193261 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.585399576 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.496245828 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.36807619 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 4.075308851 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.464952865 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.465951658 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.460258502 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.459336534 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.036948798 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.774566284 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.521966401 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.936491893 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.303928522 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.470752022 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.034585543 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.716407855 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.323773917 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.200206089 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.359913786 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.364871243 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.295689263 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.98280869 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.502977758 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.636007901 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.471718194 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.465051818 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.469430817 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.332271964 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.362128354 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.41936914 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.367787523 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.325504644 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.668530712 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.61229524 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.516998939 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.239373088 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.613755311 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.39417733 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.013456427 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.534779853 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.236599874 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.39256612 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.790327218 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.720843492 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.590833568 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.47070277 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.476678066 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.304879052 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.626015702 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.296609786 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.214290771 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.906960448 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.944566813 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.650874587 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.46445882 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.479236732 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.895362431 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.297597406 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.158254782 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.73669109 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.588800704 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.470592811 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.792482511 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.115004437 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.587192746 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.6253124 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.100068574 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.956189814 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.619494323 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.605056663 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.392016065 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 5.00349668 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.184459771 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.08149776 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.640872583 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.471546124 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.885099414 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.570311819 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.478074145 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.469527256 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.476382165 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.380529007 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.643231157 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.350851635 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.49507582 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.437172989 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.773410952 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.675036654 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.597588363 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.59483528 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.468954276 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.470749585 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.46663669 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.188006722 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.392126669 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.50856543 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.464485735 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.873587018 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.153815545 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.61800312 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.951441853 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.159737139 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.037393101 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.636758009 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.223439271 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.398077924 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.60082635 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.501157232 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.859937052 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.593703904 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.46783229 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.476861338 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.972992599 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.629351176 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.538028398 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.467474067 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.377782945 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.532077233 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.468525776 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.771693695 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.122291388 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.656495953 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.317766468 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.930541639 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.544906329 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.48226432 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.472812232 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.720747527 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.605811528 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.469485514 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.466052065 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.463860877 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.503961743 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.784878464 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.614571435 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.474517525 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.325883038 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.597081708 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.19719674 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.285153289 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.175908828 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.29236395 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.153914532 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.404168768 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.456658244 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.633731281 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.595727973 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 4.003359249 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.480637412 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.467014166 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.076445571 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.606729526 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.811260662 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.532319266 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.344647809 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.466746749 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.486893266 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.724564027 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.316451284 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 3.028251625 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.055199167 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.537406823 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.345756845 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.509542309 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.264320473 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.611166502 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.12871714 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.684558846 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.991278063 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.491044004 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.311661174 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.601972538 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.607525867 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.557750884 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.618114785 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.432384886 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.834955885 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.588723203 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.865102941 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.920184185 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.874704566 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.628705165 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.473829502 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.327099299 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.881175941 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.441275865 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.133248917 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.976926136 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.592789963 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.522016419 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.474662523 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.750151037 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.192324328 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.441509681 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.607311723 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.502249519 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.480758836 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.327161472 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.525340601 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.467310461 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.383746313 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.148030532 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.966569636 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.714735256 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.887983045 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.923507883 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.73942172 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.595230524 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.588922753 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.087064689 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.605776976 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.930043389 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.833326231 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 4.089135189 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.47195466 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.331145298 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.887797487 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.717207548 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.476205955 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.470929256 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.181486213 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.334741418 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.31767396 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.015336038 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.967960235 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.677325414 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.482982272 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.9113669 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.45948508 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 4.054009101 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.515247826 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.463073401 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.021120732 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.304258317 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.468939907 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.469546068 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.824114338 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.294850919 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.900299489 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.675650005 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.389985023 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.535795852 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.684323709 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.873159678 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.904796024 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.352795663 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.127228455 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.734108975 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.762717149 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.606519279 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.468993989 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.271432381 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.735512951 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 4.007382583 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.280355717 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.058424899 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.618371619 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.978130336 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.759158516 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.466554102 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.468646538 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.362460776 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 4.070019684 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.828832012 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.821139241 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.904324919 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 4.061265507 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.896162353 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.069776165 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.208194926 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.212563014 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.617287617 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.910457587 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.30055028 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.472620549 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.468146859 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.471607874 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.540193649 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.815737815 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.543116282 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.639703748 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.970325954 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.741761575 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.368352419 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 4.074720921 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.52652697 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.210071038 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.063070001 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.641085125 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.791211742 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.048038288 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.017018128 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.014846053 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.643114199 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.390144837 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.593546342 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.319451426 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.339110959 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.300913413 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.965815493 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.532750557 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.197748751 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.669134719 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.818038041 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.542519071 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.607282002 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.616544369 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.344290088 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.604540158 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.714671623 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.949350797 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.586050611 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.475584999 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.467797315 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.476889811 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.902042485 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.554676266 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.553437908 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.59732805 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.706149414 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.052195854 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.078634092 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.130211864 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.611006964 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.471568838 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.774543296 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.231882199 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.805429945 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.939325751 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.798866858 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.333089723 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.957136949 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.198968241 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.729730831 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.883591995 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.539825945 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.539751313 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.464827348 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.463148608 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.19763267 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.611796218 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.468441442 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.4346043 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.59746685 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.60772987 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.472149465 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.408992406 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.151630615 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 4.018608952 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.441837158 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.261851132 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.612530815 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.469320854 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.470668259 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.378644475 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.481803858 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.507709085 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.725592576 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.372669789 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.521524814 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.167649024 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.289945511 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.174435702 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.231373075 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.289013114 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.46783423 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.890231221 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.805091321 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.906335845 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.530439008 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.657763663 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.587811943 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.465354038 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.184130408 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.184128864 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.742843197 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.473166557 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.465992756 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.880931566 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.598266969 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.919869151 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.600228523 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.469886757 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.670669755 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.983246614 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.670088814 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.466274248 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.468200794 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.877150858 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.733539619 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.388291865 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.683917129 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.609090012 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.804834444 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.668886772 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.199568424 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.098004298 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.697818101 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.086256766 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.743461417 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.469092869 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.463495882 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.94072482 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.375780493 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.075955495 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.262935721 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.537601835 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.134395771 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.676389072 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.859293513 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.628123344 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.356243748 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.600971948 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.066293826 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.169513786 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.574122006 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.468496375 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.81467582 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.53930145 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.82974764 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.5947305 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.649984514 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.614875062 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.482780785 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.457503025 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.477732317 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.478331124 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.810934435 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.549770117 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.310075444 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.879272209 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.481966747 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.473573709 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.468585424 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.47799268 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.546503658 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.476419126 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.605772034 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.378900921 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.866822079 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.371542782 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.618955913 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.590397861 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.8947391 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.422384302 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.340669149 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.879867116 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.475624764 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.781588571 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.912930691 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.491021301 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 3.045604196 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.082100854 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.552219891 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.470924843 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.476488745 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.191181431 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.420914464 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.478499037 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.471915703 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.893702054 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.114108041 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.605870813 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.471882654 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.467431851 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.470068624 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.588446398 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 4.02937283 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.486410802 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.291465683 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.611764667 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.469043498 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.318517957 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.860788236 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.792527372 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 4.09956106 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.477695495 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.470097021 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.992802847 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.731660233 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.137512434 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.669747314 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.305348661 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.675461558 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.459915026 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.489138928 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.470086676 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.463369916 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.076614573 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.606083424 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.482422448 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.474231391 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.017232526 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.750000214 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.541487625 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.503575537 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.516934744 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.659369387 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.353521948 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.53787044 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.806875298 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.497981756 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.874395432 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.771719027 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.849656742 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.679251657 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.611390413 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.859548952 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.629672021 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.517721103 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.50124801 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.584892612 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.5208841 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.513656151 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.498561536 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.644802437 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.472213105 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.581072344 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 4.022833869 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.470648722 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.47650443 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.982410845 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.661963391 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.219614871 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.616768346 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.478292647 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.48248665 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.445742001 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.552232354 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.468259637 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.740981001 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.913673638 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.631793491 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.88913793 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.988095916 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.628828325 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.484942337 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.011241648 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.130905634 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.783604012 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.541788354 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.473328455 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.472379765 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.450325429 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.779423297 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.652086729 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.592448487 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 5.047986082 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.161304389 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.990737824 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.662226988 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.153439688 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.169679102 seconds)
  done (took 1976.714401085 seconds)
done (took 4039.993657138 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.665287242 seconds)
    (2/7) benchmarking "month"...
    done (took 2.573733103 seconds)
    (3/7) benchmarking "year"...
    done (took 2.562310442 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.478479594 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.48865881 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.485506542 seconds)
    (7/7) benchmarking "second"...
    done (took 2.48369168 seconds)
  done (took 20.170513049 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 3.080931959 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.923223853 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.964847089 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.59650511 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.495765423 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.288817138 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.476090673 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.199058828 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.288300571 seconds)
  done (took 29.748300578 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.569219142 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.483811637 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.491432872 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.499719919 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.689017144 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.61909353 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.503347476 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.612596095 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.651714486 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.680472229 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.640471428 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.482899251 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.657632354 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.68224549 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.612424766 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.642507292 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.488973117 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.641931042 seconds)
  done (took 49.085661211 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.466933675 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.462558347 seconds)
  done (took 7.368083234 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.474472782 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.481350381 seconds)
  done (took 7.394982425 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.617395523 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.609474644 seconds)
  done (took 9.668175214 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.980736496 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.480697832 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.477705727 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.484342702 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.738023207 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.915112213 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.8003316 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.477463513 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.483055917 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.481442989 seconds)
  done (took 28.825119129 seconds)
done (took 155.459700637 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.471017516 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.555112067 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.914484781 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.576615484 seconds)
done (took 32.959039555 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.614371614 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.619758591 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.712850186 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.742992034 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.711374001 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.014480059 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.708916724 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.588654144 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.709286857 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.622273848 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.601798835 seconds)
  done (took 32.087843599 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.610765993 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.625521965 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.711679004 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.067637677 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.709525216 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.350498519 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.711687989 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.658646794 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.713623832 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.614466396 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.734075666 seconds)
  done (took 32.951881801 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.518083225 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.544269659 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.554990446 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.623398981 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.555612154 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.56874124 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.554791067 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.577092313 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.581914455 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.511761305 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.557725269 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.490936998 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.979790361 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.818357612 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.508786978 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 5.119568586 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.986088584 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.577895471 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.579744092 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.569927984 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.512833917 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.550117956 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.512804779 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.595537167 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.493818698 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.493726779 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.488186422 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.60355194 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.564522165 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.539452045 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.579262116 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.506084551 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.616700162 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.491198707 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.553915224 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.493518736 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.556937679 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 2.732866127 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.540491737 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.507599484 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.598421004 seconds)
  done (took 112.754322802 seconds)
done (took 180.288981289 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.903063313 seconds)
    (2/2) benchmarking "read"...
    done (took 2.967746285 seconds)
  done (took 8.309305341 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.571088156 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.645357068 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.864965059 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.667542408 seconds)
  done (took 25.624444309 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.451950146 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.839091294 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.635802857 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.560469252 seconds)
  done (took 27.925881978 seconds)
done (took 71.872875137 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.45002724 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.450188787 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.447499864 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.44649618 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.445990313 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.446238975 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.445750312 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.447267603 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.447675318 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.448164083 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.448941582 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.448233663 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.446499182 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.44681504 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.452151637 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.445075902 seconds)
  done (took 41.607435031 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.445235336 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.449354809 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.462376799 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.445079058 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.441643105 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.444589633 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.445717409 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.445978737 seconds)
  done (took 22.014937678 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.445098877 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.444620854 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.451950637 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.443921121 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.445219067 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.474604061 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.59966983 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.648540019 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.719337223 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.462131174 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.495523024 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.604416184 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.541665209 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.57328353 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.542286092 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.529745154 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.446775457 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.452714325 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.446289356 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.448124458 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.444726612 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.446763365 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.445829196 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.449738021 seconds)
  done (took 62.437609438 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.471718562 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.853656888 seconds)
  done (took 7.760375364 seconds)
done (took 136.257896837 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.56115981 seconds)
    (2/2) benchmarking "String"...
    done (took 2.635630807 seconds)
  done (took 7.631252766 seconds)
  (2/7) benchmarking "join"...
  done (took 7.476449614 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.605793123 seconds)
    (2/4) benchmarking "different"...
    done (took 2.543750318 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.741196685 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.607773507 seconds)
  done (took 12.932963306 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.461433024 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.233497952 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.427954465 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.030398777 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.874102092 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.638599388 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.069564385 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.231944557 seconds)
  done (took 33.942635797 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.754481121 seconds)
    (2/3) benchmarking "different"...
    done (took 2.499267643 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.485967284 seconds)
  done (took 10.18153307 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.663793037 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.604817334 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.277093427 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.698872197 seconds)
  done (took 16.677926199 seconds)
done (took 94.761070943 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.494696893 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.477368553 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.486900119 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.988233042 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.266340897 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.488193685 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.539869974 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.475131686 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.571112716 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.71359038 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.692612532 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.347484048 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.474538546 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.437807759 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 4.757442498 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.490938759 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.472537846 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.542978054 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.472775691 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.609275266 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.489094583 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.476183539 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.501139877 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.49192211 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.55600192 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.504653565 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.476597098 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.497459417 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.472478725 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.476963385 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.561729742 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.489067179 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.989373726 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.280446131 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.785881477 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.264079582 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.240465159 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.494544813 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.503160969 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.507877606 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.455098703 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 3.065476803 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.616761547 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.542718851 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.497664047 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.501817815 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.476692952 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.49499306 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.83465618 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.079719612 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.419287106 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.224312449 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.492512159 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.710797557 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.489953676 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.501407689 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.556659539 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.986810007 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.279368463 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.475080924 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.500711423 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.480994825 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.497926123 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.54443116 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.983348787 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.263514322 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.790622755 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.206163595 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.546284924 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.481792735 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.204519554 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.991155157 seconds)
  done (took 214.491241058 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.868099011 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.532828705 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.103164086 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.886234151 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.109328147 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.609320615 seconds)
  done (took 21.332245099 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.493487035 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.486931017 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.481363024 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.783874466 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.570392572 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.509988084 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.481271368 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.485245011 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.53797487 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.520927183 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.50314282 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.491485861 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.484094793 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.439863321 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.748712733 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.504413565 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.483281093 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.49994795 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.782782793 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.500670069 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.483186397 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.502517343 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.734226007 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.493036755 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.495320686 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.548531063 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.568888164 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.541106878 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.508575237 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.770636194 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.493156228 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.621266514 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.516603977 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.488548429 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.498511219 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.77994384 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.670924407 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.732990034 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.437660165 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.447321077 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.680349062 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.323329205 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.348753807 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.911143309 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.734260717 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.554351196 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.504686564 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.667938065 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.439869082 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.330005498 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.478459008 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.495323292 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.639737504 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.44257166 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.652165807 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.612548922 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.497542236 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.440601442 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.492978888 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.483145925 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.486682188 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.513931506 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.66557834 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.50613571 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.478433457 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.701828001 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.729472741 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.437967628 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.199454811 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.499432432 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.484341521 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.646133235 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.6331325 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.515348001 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.632317452 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.499318338 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.543376356 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.439459082 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.609451958 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.385563535 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.728359606 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.436666135 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.49373673 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.504168589 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.440950348 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.506488393 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.773167999 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.495384022 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.340555863 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.513181963 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.438007561 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.556515198 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.171020327 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.497200744 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.780501475 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.735754496 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.797830064 seconds)
  done (took 314.173745884 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.695952139 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.788474771 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.056981848 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.796573855 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.585816046 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.787008971 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.117058768 seconds)
  done (took 22.26325123 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.645437433 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.845125691 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.43780251 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.445805476 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.437240688 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.645500756 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.438707344 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.750992961 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.667982675 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.84236085 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.713626991 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.877826458 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.438611281 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.438719587 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.439755693 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.664542521 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.54128931 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.718844167 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.441339843 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.439562372 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.649099583 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.64514416 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.670992438 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.444917532 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.505329368 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.444079114 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.438136106 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.738033913 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.640125602 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.688084808 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.447439414 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.799057699 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.749588585 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.671611149 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.446314419 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.606266967 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.827994024 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.810246831 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.686123538 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.490307539 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.621859386 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.547281275 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.746323202 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.640189827 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.736966969 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.618358595 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.60565371 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.914083748 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.445133545 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.487736007 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.644012914 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.442638516 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.6453183 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.505531286 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.670254888 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.822856477 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.644541225 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.439879527 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.61684793 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.444360433 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.77485812 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.43991918 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.438712327 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.439660147 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.694381625 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.440956247 seconds)
  done (took 284.215565154 seconds)
done (took 859.35397262 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.348899311 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.868295653 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.471162782 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.504985242 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.439247705 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.82513593 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.835033456 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.390747643 seconds)
done (took 48.121684006 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 2.481701804 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.479299484 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.48487491 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 2.479737884 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.480845618 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.484389877 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.439322478 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 2.931010912 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.474594876 seconds)
  done (took 30.172784214 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.436772215 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.312738528 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.438264991 seconds)
  done (took 23.625495541 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 2.584017811 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.787637969 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.588553957 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.725798867 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.953797016 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 2.881380754 seconds)
  done (took 18.961850906 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.447376505 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.441836671 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.441241137 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.439952642 seconds)
  done (took 32.205820242 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 2.833232232 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.518817636 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.558188267 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 2.84047008 seconds)
  done (took 13.187454327 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.564849865 seconds)
done (took 124.169554529 seconds)
(18/23) benchmarking "parallel"...
done (took 2.831462588 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 5.42542278 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 3.310943514 seconds)
    (3/36) benchmarking "trsv"...
    done (took 3.794479503 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 4.974085105 seconds)
    (5/36) benchmarking "asum"...
    done (took 3.219741748 seconds)
    (6/36) benchmarking "trsm"...
    done (took 7.489656462 seconds)
    (7/36) benchmarking "symv!"...
    done (took 3.692492194 seconds)
    (8/36) benchmarking "symm!"...
    done (took 7.527031003 seconds)
    (9/36) benchmarking "trmv"...
    done (took 3.782074217 seconds)
    (10/36) benchmarking "dot"...
    done (took 3.472151656 seconds)
    (11/36) benchmarking "herk"...
    done (took 7.558260622 seconds)
    (12/36) benchmarking "dotu"...
    done (took 3.457424488 seconds)
    (13/36) benchmarking "scal"...
    done (took 2.570764473 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 4.742102596 seconds)
    (15/36) benchmarking "dotc"...
    done (took 3.462200962 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 7.522838508 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.384871422 seconds)
    (18/36) benchmarking "symm"...
    done (took 7.524769736 seconds)
    (19/36) benchmarking "ger!"...
    done (took 7.440221398 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 7.485389264 seconds)
    (21/36) benchmarking "gemm"...
    done (took 7.507093649 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 7.465085124 seconds)
    (23/36) benchmarking "herk!"...
    done (took 7.570618142 seconds)
    (24/36) benchmarking "scal!"...
    done (took 3.364520192 seconds)
    (25/36) benchmarking "syrk"...
    done (took 7.479861242 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.674875483 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 4.885069785 seconds)
    (28/36) benchmarking "trmm"...
    done (took 7.469001935 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 7.481299872 seconds)
    (30/36) benchmarking "her!"...
    done (took 7.439223133 seconds)
    (31/36) benchmarking "syr!"...
    done (took 7.438517684 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 4.660751233 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 3.754226705 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 3.734531116 seconds)
    (35/36) benchmarking "symv"...
    done (took 3.741536613 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 3.651757628 seconds)
  done (took 197.592572619 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.507317749 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.569464255 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.448700645 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.501487041 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.472189021 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.43870432 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.600839829 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.445481964 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.450374257 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.443778876 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.48846735 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.535975033 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.443001759 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.465038675 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.466195579 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.465042956 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.55321243 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.477748371 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.517634847 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.480635376 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.681756967 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.324084073 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.910914687 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.464791192 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.447511339 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.497917895 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.470736497 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.45020513 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.561783003 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.154624177 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.466632585 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.687791765 seconds)
  done (took 221.328025141 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.580463647 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.438606176 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.44004013 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.442969687 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.443678231 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.445177545 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.437886207 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.592188189 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.440746367 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.43615617 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.939267905 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.437993901 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.436187512 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.438001598 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.441264551 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.435329387 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.44363597 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.438188136 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.008576264 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.457985995 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.437944074 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.444444054 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.509964974 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.82841577 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.816435689 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.487174902 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.440353718 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.438181702 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.438827558 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 5.043489889 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.495210427 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.43687233 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.441205538 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.455717378 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.43896762 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.4369621 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.437149801 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.437023648 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.517216846 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.493417693 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.452104379 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.437986754 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.445044499 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.436250838 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.441565223 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.494970205 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.65409387 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 5.043195188 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.436880602 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.51042741 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.644128443 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.438641374 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.077279271 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.556723795 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.440040654 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.434944628 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.82716963 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.659724088 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.683013231 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.585425053 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.480799494 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 25.028484266 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.440293507 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.560066419 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.393083885 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.437936161 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.179401843 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.442077303 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 5.041932677 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.442134661 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.184439972 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.441944279 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.4416808 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.507680212 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.148221906 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.438049929 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.513973142 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.126686402 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.440138235 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.523275929 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.439030234 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.437615617 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.438661155 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.476851662 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.867919278 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.506082465 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.438089903 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.445144648 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.490794419 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.133953754 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.445444035 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.434916152 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.437932234 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.437122693 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.441078237 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.441684169 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.442082189 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.435983623 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.442981159 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.438317886 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.509482004 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.477054703 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.453364826 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.062491491 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.437258228 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.44144392 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 24.26834261 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.438370294 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.500849966 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.456832606 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.442596795 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.442243808 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.67388665 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.466424949 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 24.262145056 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.512852288 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.435508607 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.81384487 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.445835487 seconds)
  done (took 490.031141927 seconds)
done (took 913.969323302 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.640636744 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.718748165 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.712385124 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.543773466 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.628737784 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.999735008 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.038012595 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.361582402 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.683925629 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.6308467 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.72229518 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.848892832 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.601561062 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.567779867 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.480287712 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.584591732 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.636326801 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.594980677 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.584836507 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.552787335 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.077348856 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.71690673 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.195930368 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.842151754 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.527399183 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.540820135 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.696585514 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.601025955 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.110294321 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.346739544 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.081139755 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.558380516 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.512382804 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.689984688 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.549218653 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.575747041 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.630281503 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.509864496 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.554297223 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.559665998 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.482470291 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.974075354 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.674196883 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.412061645 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.442585686 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.968915297 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.484313515 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.491665633 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.46302696 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.552695667 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.502388358 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.952252492 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.040736958 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.701200864 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.726086719 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.648983386 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.780906429 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.63718122 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.639620367 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.639987238 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.590280875 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.305057623 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.776292884 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.72982669 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.606511006 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.606354457 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.584723718 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.952052546 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.500468099 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.595377565 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.607900498 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.533157234 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.14692726 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.873148783 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.541605986 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.694186536 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.65714362 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.716057542 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.324814634 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.941344795 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.999563575 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.933754978 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.735138868 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.665590981 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.905603076 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.53824133 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.635934628 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.592638213 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.505191781 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.59482724 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.501764593 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.008245062 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.778989023 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.818727166 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.765748504 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.704288393 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.738518928 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.839149998 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.684098274 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.635093851 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.371014724 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.773494507 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.72730509 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.511298653 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.57743621 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.54216813 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.631152674 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.538584741 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.505668136 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.97215451 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.526083598 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.400207625 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.867304619 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.777845504 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.943357171 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.719906 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.376728241 seconds)
  done (took 350.288931112 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.783118657 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.460418624 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.599923379 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.445875092 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.442455308 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.445391257 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.457135988 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.571167731 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.536259114 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.440922018 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.447869235 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.444829673 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.440749374 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.44369118 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.684351426 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.458013511 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.445476662 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.444811469 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.445943275 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.450942489 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.447907858 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.447131314 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.115437102 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.528247608 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.441650699 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.444232812 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.152907917 seconds)
  done (took 185.049519176 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.534628543 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.93672916 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.700057912 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.782193753 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.872456951 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.777798539 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.516918214 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.514284228 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.574534034 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.739116224 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.446004848 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.897785855 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.480913371 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.826351569 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.505591148 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.511757514 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.526779556 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.47751131 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.550121395 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.689368949 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.576737268 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.511406753 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.761447818 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.517507822 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.508047557 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.669420463 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.679454834 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.675662619 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.611167729 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.832245987 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 3.021159874 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.493506526 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.48458479 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.527975315 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.587608756 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.648558489 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.558785894 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.853528099 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.495194301 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.681503178 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.489261368 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.875156476 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.485435553 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.524043159 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.659749783 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.578046415 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.921696419 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 3.034166122 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.740677783 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.508801466 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.510892594 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.587921229 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.872903907 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.713538529 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.879500202 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.480163737 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.911514766 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.765416237 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.734877724 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.478287798 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.728187 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.505619945 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.502512153 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.584641695 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.952977926 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.672886534 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.860883229 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.776605119 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.516662205 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.955391887 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.522016463 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.716705737 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.172001726 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.62466553 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.204789864 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.646171714 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.485193109 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.526980952 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.519597839 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.791516021 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.514493811 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.583548878 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.544441035 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.610552134 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.660128525 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.610121297 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.819487393 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.96012161 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.560380119 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.858472713 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.090910075 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.786218245 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.496476449 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.574578301 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.48075874 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.576794206 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.656304092 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.817576123 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.910059789 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.773166362 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.303028465 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.978419288 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.485051999 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.560709842 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.508364463 seconds)
  done (took 292.738155605 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.607092226 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.691416519 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.010207911 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.83139778 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.943144789 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.624051723 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.57443817 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.515360868 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.628684046 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.616414388 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.598258329 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.555706139 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.747499392 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.965344407 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.693322355 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.111844234 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.523387305 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.977397001 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.576443032 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.594195009 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.036788945 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.516617199 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.771485338 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.675641565 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.46515518 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.764218524 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.812856514 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.652863324 seconds)
  done (took 85.526535233 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.524334037 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.584650808 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.486389121 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.5959261 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.592214705 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.590965387 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.545520936 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.986214677 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.566506216 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.557265292 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.580792881 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.485067956 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 3.027333427 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.490912253 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.524359352 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.581660331 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.577802949 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.976980486 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.588983157 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 3.032181206 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.543517434 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.595702674 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.53944825 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.501439488 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.543468109 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.489638321 seconds)
  done (took 70.566421907 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.582455549 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.470802783 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.665260711 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.724318644 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.003852745 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.645200417 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.859049328 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.516369521 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.67022472 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.552536431 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.184955265 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.005648765 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.652693445 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.008771029 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.594400735 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.536984774 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.959847113 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.575183445 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.864772728 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.624428008 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.099992039 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.598373186 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.71004995 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.712703268 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.597817538 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.652354994 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.567533038 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.004381753 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.58939863 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.618420596 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.722078227 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.571081458 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.104049014 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.561435771 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.579192984 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.882139109 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.6668902 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.988276212 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.601582269 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.446309187 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.586752244 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.665488142 seconds)
  done (took 124.66434895 seconds)
done (took 1111.279170283 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.618505583 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.517888026 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.458101075 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.479994438 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.496077625 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.479129429 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.461219682 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.661519036 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.472545433 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.478106 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.48804515 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.479788848 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.472122299 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.475689478 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.492146683 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.469381955 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.618220517 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.501817365 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.45195664 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.46444222 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.46992038 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.462768324 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.473164711 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.464786177 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.5584287 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.466370916 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.451522568 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.487620472 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.466687436 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.496525685 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.472924059 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.479576956 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.475807175 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.476666179 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.497033979 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.470952246 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.460636966 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.468855825 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.462796219 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.463363512 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.465014335 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.478422075 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.495410268 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.565818362 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.493325616 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.473797353 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.475095029 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.488054982 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.591738556 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.48314852 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.501622642 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.469763246 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.470125781 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.473588459 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.463140336 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.497705552 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.465923997 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.46668362 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.505959114 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.468055422 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.492143271 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.455352362 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.528116375 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.469063401 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.460176291 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.461779074 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.472739019 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.468527528 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.472896126 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.456069658 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.467399956 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.498719721 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.47365413 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.465048059 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.474335815 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.481618317 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.500320532 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.522002347 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.462496124 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.468280725 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.468359681 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.487167629 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.49079346 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.576843698 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.48796343 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.464406215 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.498459546 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.4666973 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.491373212 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.486281759 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.465523319 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.468170788 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.464271984 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.467034071 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.461034199 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.47570642 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.499009249 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.486377491 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.495734612 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.471271388 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.494225344 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.479923823 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.514833502 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.471091557 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.453698438 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.49666553 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.484037023 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.494210133 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.483706216 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.576843331 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.48073903 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.491864055 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.46910559 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.461868335 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.458486697 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.46206031 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.46865709 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.459135437 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.66107723 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.465393847 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.45803869 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.469361545 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.451668118 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.465803456 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.459218366 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.466666286 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.45498571 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.470298032 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.525510219 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.560553533 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.475992378 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.476233701 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.519233269 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.471431132 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.466866523 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.478469818 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.486664053 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.465352437 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.474169888 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.492249901 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.476055803 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.472179357 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.531775067 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.511076765 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.460172775 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.483036357 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.452908003 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.457773943 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.512851951 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.469537347 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.462735233 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.475493778 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.469478937 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.45843074 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.516903374 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.457260065 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.499964753 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.646039403 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.706523335 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.704060354 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.493543839 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.61010016 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.580137353 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.548903004 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.574517715 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.55588137 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.486052366 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.470521476 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.482122175 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.46161061 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.500070159 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.484839389 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.467272424 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.492558248 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.467962653 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.465435373 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.504336666 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.488328942 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.500988088 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.469956484 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.53574808 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.498021522 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.46796474 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.491978749 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.47701732 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.493222359 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.456901334 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.460408416 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.464367828 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.464789965 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.46570369 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.485552075 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.467568158 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.468001569 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.490712838 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.474365911 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.477697994 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.482250571 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.468359428 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.472208925 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.46839738 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.50017181 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.46153512 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.483404877 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.460425084 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.460019997 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.481693874 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.469382027 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.480144214 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.489167251 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.456157084 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.475632422 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.493418158 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.468865368 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.48995494 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.469880834 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.478420504 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.454749622 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.558331476 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.474387768 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.469753796 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.473102911 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.464288108 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.470148049 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.468978918 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.460799302 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.486906902 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.499550665 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.490066396 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.463520849 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.611498248 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.469087293 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.475951324 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.462558454 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.474973012 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.475876767 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.470062969 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.462720041 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.491615628 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.468625761 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.460723121 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.457012738 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.485234494 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.458080213 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.498717391 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.532076453 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.464343872 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.468279261 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.469480819 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.470184201 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.473756822 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.478431934 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.467508895 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.468110931 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.46830473 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.49003508 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.466265851 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.4594955 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.463624612 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.478590432 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.476865254 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.619275466 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.506793229 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.457493539 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.490894347 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.469250877 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.475461014 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.476795271 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.455694882 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.485495983 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.453678298 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.464314406 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.46621394 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.506430791 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.460677923 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.483336795 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.519659272 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.463598112 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.46085633 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.451928638 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.575846691 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.467259259 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.520874059 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.47036415 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.461295934 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.492043662 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.4620763 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.491861418 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.468401024 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.502970779 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.465015088 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.472859461 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.465072121 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.463284563 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.476898486 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.468094923 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.456691546 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.46893216 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.466173709 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.46854806 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.472779898 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.47019846 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.52032593 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.478599926 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.460211971 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.491923932 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.50550802 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.458259636 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.464790498 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.461677911 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.516132198 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.462238491 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.456155147 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.477321063 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.50914912 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.467117635 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.472367325 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.467393205 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.514030311 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.467221156 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.473945642 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.480547014 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.449449679 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.475666715 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.512046115 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.493764201 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.473192084 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.458144495 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.587506235 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.475834981 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.497104972 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.470004002 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.532838514 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.465605945 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.458703876 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.4624788 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.469234267 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.558974036 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.465121462 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.463797984 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.464782415 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.497823945 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.48512548 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.450582812 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.462091752 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.469263257 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.460537856 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.488399034 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.480550775 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.457761268 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.466446143 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.458572021 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.451956323 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.474691401 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.556186969 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.463415964 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.476732868 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.5063302 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.467810408 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.468428716 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.469003555 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.578707853 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.463416716 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.467007612 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.486331271 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.516577248 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.471543218 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.482548199 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.474442907 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.459927234 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.461623167 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.477012872 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.470952725 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.573836032 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.497529206 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.487180025 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.465646933 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.464229505 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.481956401 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.469252522 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.467973829 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.477185791 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.472487555 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.464139712 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.668903331 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.473230465 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.488812203 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.583575143 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.462682383 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.473162812 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.461377617 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.478266952 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.469486048 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.465181567 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.477205704 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.475569431 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.493598225 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.480435624 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.480771913 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.523042648 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.477300594 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.463405125 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.506790193 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.469447711 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.473351507 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.50109558 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.475917197 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.533006503 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.478211012 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.467858009 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.498778386 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.469151246 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.472296734 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.467457994 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.468135191 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.475655267 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.494824203 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.469932604 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.506939491 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.472026071 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.502840737 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.472060412 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.480804991 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.455349674 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.470674599 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.503442413 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.478062288 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.475951956 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.480638823 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.465942206 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.474772581 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.466063234 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.470929819 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.468345995 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.481958673 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.463116829 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.474440561 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.488065893 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.484176715 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.464425012 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.470251427 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.45764827 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.492737663 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.470925728 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.472538134 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.466937171 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.486610376 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.469613646 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.465094419 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.509796144 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.46789468 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.506863926 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.53979609 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.484210329 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.465637773 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.4576415 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.477925323 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.481092102 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.539831834 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.495519437 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.503207934 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.494086236 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.480127243 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.562166556 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.528604181 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.510778447 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.507443518 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.486454355 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.495270616 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.481822305 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.466187591 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.486101146 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.499173681 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.506523232 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.46266592 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.472934502 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.484092079 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.471775022 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.503702378 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.560077687 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.508531967 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.504667018 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.531017195 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.58755687 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.479374407 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.50326431 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.503701968 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.457053534 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.46602337 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.483376749 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.47532772 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.496810919 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.464551078 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.486821137 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.59669072 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.477546053 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.629883725 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.467831759 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.500163116 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.496835949 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.485062283 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.467196438 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.520384686 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.457547626 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.470453796 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.526030704 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.486508554 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.463870336 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.482840221 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.46848608 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.60119617 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.535467966 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.486410396 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.464281285 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.476893618 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.46353655 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.482484725 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.482696705 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.4781796 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.48654967 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.498271437 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.475364419 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.485412992 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.455738617 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.463429512 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.473682294 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.520251681 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.629922263 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.629045216 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.464990602 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.463083467 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.46531998 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.479861273 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.470319322 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.473540021 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.478978777 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.551225514 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.464640725 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.474731993 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.502284479 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.548922871 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.466389328 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.479494622 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.583479827 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.467908105 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.47176495 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.472462414 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.463111329 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.471199545 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.466619094 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.466943869 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.467915358 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.462434908 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.497837795 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.473849652 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.575611261 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.464209233 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.502913461 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.470171778 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.46460996 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.473287316 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.481839268 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.509941086 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.470095218 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.493209795 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.514076347 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.480201405 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.465602862 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.510618749 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.472088534 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.471825451 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.494844031 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.468268696 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.478927935 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.535024914 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.497256845 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.471084557 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.472583582 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.480145946 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.584745395 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.540509013 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.468690831 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.481378234 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.513546621 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.483941412 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.494361331 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.502690587 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.469007777 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.471308251 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.479172076 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.521222663 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.466435743 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.477499997 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.479863538 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.492365601 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.466748769 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.47336272 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.483510438 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.478999365 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.479608824 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.48021864 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.464018488 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.477541193 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.47150833 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.459445499 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.483585299 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.463242453 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.470730747 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.498123173 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.478017814 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.468095893 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.480139595 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.476477078 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.47668435 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.47493071 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.504630025 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.487850294 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.463267591 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.46615598 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.470791943 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.480359578 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.497522329 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.474207163 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.4614184 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.493051098 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.479452377 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.475693921 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.488580635 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.51773673 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.478568204 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.465458842 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.503142232 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.477858104 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.469521604 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.500489146 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.485125718 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.511282339 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.49373538 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.47425603 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.510853316 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.492795697 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.474309991 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.458726502 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.477918207 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.469563451 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.464992762 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.67146368 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.497387444 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.535373544 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.523869839 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.477755286 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.479250096 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.469828115 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.478229524 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.528637556 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.499423452 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.519091555 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.486361823 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.528500239 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.473754247 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.541115887 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.473341281 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.507211162 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.525797505 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.474921798 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.482708532 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.635624149 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.545346119 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.482354976 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.476640024 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.628868207 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.47904429 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.483355705 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.467708535 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.475671724 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.469800756 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.478902775 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.473965035 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.506754503 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.522987149 seconds)
done (took 1693.931275348 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 40.157922885 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.897890606 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.063756996 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.687756233 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.065929471 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.555227421 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.527581914 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 33.822660714 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.354481662 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.794231556 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.741131463 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.617629488 seconds)
  done (took 435.737014872 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 44.081094189 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 34.614065085 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.490439177 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.446770442 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 38.370961986 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.001232276 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 44.352922174 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 38.361778373 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.422821396 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.947819111 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.166771835 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.833318787 seconds)
  done (took 459.720321754 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 40.71342188 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 39.986017357 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.210020702 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.722363423 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.48338484 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.437528193 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.15861243 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.231629232 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.731188932 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.260876502 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.730242281 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.469971368 seconds)
  done (took 458.83408057 seconds)
done (took 1356.741955858 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.429706937 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.556828571 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.437098277 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.416401352 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.744382835 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.574286478 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.6940484 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.4220529 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.717810852 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.845195489 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 9.491966472 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.662532239 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.367598387 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 12.425761824 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.949719144 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.383900017 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 13.373692769 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.42193042 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.86278278 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.360014363 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.696057958 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.951042565 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.859291752 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.348820387 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.418378861 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.710641318 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.35789197 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.463298182 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.860241642 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.542573794 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.367155136 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.496181294 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.600568902 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.416993277 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.764512512 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.376364353 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.784515183 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.589011383 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.797049287 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.617165677 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.71142697 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.621456652 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.594633588 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.355285665 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.359639413 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.54708495 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.363209939 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.837968451 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.379217862 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 6.040520396 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.431306225 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.594521566 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.581100688 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.537352065 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.413825619 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.379618091 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.583407277 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.352992155 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.617155394 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.48985643 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.444085947 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.607480971 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.887653696 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.437903021 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.353098914 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 12.874594542 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.360042033 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.597819247 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.349255173 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.806886272 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.558778973 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.714218909 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.43236917 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.99610065 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.561469152 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.441823724 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.415608798 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.674244134 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.358771762 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 16.877428126 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 11.993577999 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.59144795 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.44785831 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.60912653 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.613628364 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.578620654 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.436052332 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.359614162 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 10.119794791 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.383094539 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.418126768 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.533299497 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 10.316544973 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.637665588 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.391860543 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.594635782 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.963403177 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.371633236 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.435645589 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.739413578 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.702263208 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.446719212 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.608697794 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.432635563 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.13470481 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.778239085 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.387021261 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.699717076 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.498724716 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.415751861 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.49080028 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.345247476 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.80272535 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.593751917 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.368486952 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.596519584 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.545809927 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.605862869 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.365598827 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.377881642 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.680795773 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.390562256 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.345752871 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.43254142 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.970118964 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.728698955 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.463318848 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.666637098 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.985398487 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 11.985946945 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.647150647 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.364381848 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 12.853436086 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.894373424 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.360459976 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 9.958609114 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.810799892 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.627036781 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.430760462 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.481986119 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.360620884 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 12.951697748 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.408713026 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.601294115 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.46809278 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.529813414 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.38803522 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.62951592 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.438822451 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.41766856 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.350898565 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.452090303 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.58860549 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.464100481 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.942131115 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.408110269 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 10.14903411 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.566221508 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.548457594 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.356170083 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 18.003365759 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.836874948 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.971744708 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.669848697 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.605260212 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.594084306 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.737964261 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.423375296 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.36169099 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 10.005615643 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 5.996991091 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.358599422 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 6.132084306 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.860740264 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.357336602 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.359578485 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 12.966659292 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.734528039 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.677148891 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.537202391 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.60474351 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.785977066 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.497069833 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.376611599 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.784521424 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.609399903 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.744103454 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.553854469 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.919371398 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.612869567 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.665640093 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.731482916 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.50189643 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.581604976 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.361429002 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.719028361 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.408113357 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.601447233 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.544315503 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.561725349 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.390620994 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 6.278129928 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 10.175826308 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 11.303021274 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 6.622309271 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.447859825 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.739263621 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.427056267 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.52369842 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.33196749 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.772021108 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.583708438 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.423049517 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.433079611 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.5531758 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.356371728 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.593359975 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.379069442 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.371317464 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.540636566 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.369850196 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.685768038 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.372706769 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.719059044 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.486674271 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.651072159 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.599086527 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.493344601 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.368093215 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.956292306 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.587696562 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.617161615 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.569462761 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.54423752 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.561132421 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.435691784 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.707254123 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 6.046870714 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.847761479 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.429155028 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.470073104 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.418105797 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.41619304 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.557644422 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 9.149816379 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.642375827 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.462699835 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.437241471 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.2884737 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.362756991 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.590432862 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.68378498 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.638125264 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.6047773 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.725870185 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.476690181 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.443556016 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.385029301 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.439147797 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.413165975 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.370333815 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.469415454 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.574473154 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.448026236 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.733810179 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.624768683 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.386354202 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.442912931 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.538806885 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.587994668 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.610547372 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.35612623 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 9.860950167 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.60026446 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.612546254 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 6.209169111 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.356109959 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 12.747347663 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.440028098 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.490155149 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.35041817 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 13.044882897 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.365126314 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.48373965 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.581248922 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.459468304 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.686297578 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 10.204854924 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.603421202 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.357440734 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.466872383 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.606535912 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.385356535 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.338946344 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.50998888 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.509124697 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 6.054911487 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.69199036 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.581764121 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.337915481 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 14.384876544 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 11.035585016 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 14.883146015 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.634958295 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.705665691 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.370617653 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.331403007 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 12.548986004 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.359615438 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.707210658 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.852734036 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.544882782 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.4840832 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.449896326 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.412487984 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.621066978 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.368384156 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.702507473 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.369006743 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 9.38230474 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.805954075 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.53881888 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.697179447 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 8.263641005 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.228427732 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.396780927 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.683099969 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.551328748 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.33116904 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.182487228 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.548646631 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.435228406 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.580059123 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.563238082 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.637620045 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.361000168 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.44360348 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.33178358 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 6.276466325 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.393532271 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.398483547 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.545172179 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.405438673 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 9.338558966 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 7.297552111 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.556009022 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.417406718 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.735646311 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.429775223 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.260845015 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.430275641 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.57722023 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.344836271 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.91747906 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.625973365 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.333041005 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 11.005042068 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 6.110275685 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.504935992 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.441766909 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.347666312 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.594722131 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.523198347 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.432307546 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.581435218 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.354231229 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.835703867 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.346483042 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.809368301 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.57050212 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.459566171 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.693538855 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.335176226 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 5.996908678 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.58833408 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.35594678 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 9.277698269 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 6.231187837 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.666243399 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.354129653 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.322019625 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.942926649 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.342667115 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 10.348761452 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.690940146 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.760151969 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.676630677 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.619910974 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.703176496 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.50906445 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.349738383 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.47260244 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.351002028 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.326125782 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.78738167 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.523413272 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.411665977 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.526551279 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.956742316 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.414026866 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.321410456 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.264993313 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.511356277 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.580704126 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.541034767 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.716275315 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.417930262 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.845348157 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.923933591 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.640506561 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.534158101 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 9.422889052 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.343600453 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.828916818 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.563971038 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.345395584 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 16.924435452 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 11.655682905 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.58151076 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.680305036 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.685727396 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.378228735 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.453850309 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.404525324 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.345333115 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.786320833 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.507670913 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.55504157 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.639251811 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.404860651 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.835434847 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.412404172 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 6.060138233 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.695538384 seconds)
  done (took 2921.49679217 seconds)
done (took 2926.86612971 seconds)
SAVING RESULT...
DONE!
