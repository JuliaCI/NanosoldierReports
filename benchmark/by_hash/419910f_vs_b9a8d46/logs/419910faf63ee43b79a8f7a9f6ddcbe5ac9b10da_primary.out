cset: moving following pidspec: 2329229
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 2.621472995 seconds)
loading group "string"... done (took 0.278172369 seconds)
loading group "linalg"... done (took 3.319188328 seconds)
loading group "parallel"... done (took 0.019901578 seconds)
loading group "find"... done (took 1.126851014 seconds)
loading group "tuple"... done (took 0.772715547 seconds)
loading group "dates"... done (took 0.149177365 seconds)
loading group "micro"... done (took 0.064937924 seconds)
loading group "io"... done (took 1.298830258 seconds)
loading group "frontend"... done (took 0.018924971 seconds)
loading group "scalar"... done (took 1.034505006 seconds)
loading group "sparse"... done (took 0.41425645 seconds)
loading group "alloc"... done (took 0.016939555 seconds)
loading group "broadcast"... done (took 0.306530194 seconds)
loading group "union"... done (took 2.793066096 seconds)
loading group "simd"... done (took 0.984531884 seconds)
loading group "random"... done (took 2.204760757 seconds)
loading group "inference"... done (took 2.425159025 seconds)
loading group "problem"... done (took 1.107632765 seconds)
loading group "array"... done (took 2.321500664 seconds)
loading group "misc"... done (took 0.386893055 seconds)
loading group "sort"... done (took 0.243676122 seconds)
loading group "collection"... done (took 5.480777421 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.631062408 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124295614 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.082786962 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076728652 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.113761976 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.091635325 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.067939723 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.050439432 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.75340495 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.064709102 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.121071288 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.414170968 seconds)
done (took 5.368482966 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.3560446 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.02410979 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023728988 seconds)
  done (took 0.723472633 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.023430151 seconds)
    (2/3) benchmarking "different length"...
    done (took 7.061e-6 seconds)
    (3/3) benchmarking "different"...
    done (took 3.537e-6 seconds)
  done (took 0.696607389 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021472263 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.154138733 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.142e-5 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.000977025 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000903652 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000214537 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.817e-6 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 3.321e-6 seconds)
  done (took 0.829969956 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.038113972 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025005623 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.02166277 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021637706 seconds)
  done (took 0.780356241 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022178742 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.040811066 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.7794e-5 seconds)
    (4/4) benchmarking "different"...
    done (took 3.907e-6 seconds)
  done (took 0.734927638 seconds)
done (took 4.819707105 seconds)
(3/22) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.042958884 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.341924397 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.217185084 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.185464808 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.270479485 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.505638663 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123173853 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.216576346 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.040544465 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.01184094 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.068304553 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040168901 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.167250826 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.359357274 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.003970803 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.248899725 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.258900633 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.055843525 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.129697761 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.693650344 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000595091 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.032885973 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.03259981 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 3.2823e-5 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.479880707 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.1844855 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.317115455 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.002407517 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.7533e-5 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.052765062 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003731553 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.008288749 seconds)
  done (took 13.820215457 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.04085622 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.039058638 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.026003728 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.121519494 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.05142319 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025292244 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030340217 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.026444005 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.043357659 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.107129472 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.042745711 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.047492277 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.026677019 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.022404812 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.024444804 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.246614114 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.041477663 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.041488427 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.023430314 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035568358 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106463404 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.037640221 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.027794795 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.02685166 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.144520115 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.227253522 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.090617793 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.093014653 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023420165 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.026297933 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.124411417 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.1216463 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.030855962 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023303103 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.100146401 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.0871067 seconds)
  done (took 3.045310757 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.619267581 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.228139479 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.117638956 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100361003 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.121066265 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.118628515 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.052339358 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.0867789 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.113093463 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000105366 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.146367345 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.226888304 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.061144611 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 4.573138216 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.046818005 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.171664726 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.253428093 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.946614012 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 5.1388e-5 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5399e-5 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.035063924 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001281632 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.064065414 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.210486619 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.139073631 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.198863895 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072389209 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079748103 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.090232094 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.045044464 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.022892408 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.114371895 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.098188422 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001447598 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.328265853 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.001652104 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000116924 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.065277248 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.032794887 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.4518e-5 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 5.1126e-5 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.095632611 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.02081613 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.127749578 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078647718 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.173689081 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.045361341 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.08683633 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.003140832 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 8.8474e-5 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.2933e-5 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069015284 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020356311 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025926312 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.072248689 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.3275e-5 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.04595142 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.338191397 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.034992139 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.1632e-5 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.9594e-5 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.141158894 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 6.6859e-5 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.000100211 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.000749006 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053796882 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.689873105 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007903789 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.054125929 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.9102e-5 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.7904e-5 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.5101e-5 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.517620592 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.005432909 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.115030591 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020637 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.00161304 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021163417 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.5861e-5 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.060603044 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.0518156 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.058628366 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070033325 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 7.8459e-5 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.973e-5 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.197728467 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 4.274953113 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 4.6438e-5 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000677765 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.214483757 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.2487e-5 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021524131 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.000127753 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.050774489 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 3.8247e-5 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.3264e-5 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.060542883 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.0261842 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021454018 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.334762241 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.004385573 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.6715e-5 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.877713115 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.004850494 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.06304055 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.108287828 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.8099e-5 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001136121 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.6762e-5 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020215865 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 6.0326e-5 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.0581e-5 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.7099e-5 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 7.0214e-5 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.6194e-5 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.6975e-5 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.4142e-5 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000612523 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5345e-5 seconds)
  done (took 28.226531478 seconds)
done (took 46.389989147 seconds)
(4/22) benchmarking "parallel"...
done (took 0.79810396 seconds)
(5/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.092740013 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049977217 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020117731 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082491699 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.3606e-5 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.081217838 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.08839584 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.083795386 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.5265e-5 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 9.957e-6 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.3961e-5 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.085692236 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.084508037 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.6195e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080195217 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.085114377 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.2394e-5 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.7266e-5 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.1352e-5 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 7.146e-6 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 8.315e-6 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.6761e-5 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.89e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 8.033e-6 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080190868 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.36e-5 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1732e-5 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081545229 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.5473e-5 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.080655166 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.8876e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.1023e-5 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.1866e-5 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081457235 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.404e-5 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080350891 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.6389e-5 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.4049e-5 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 8.288e-6 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.4104e-5 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.153e-5 seconds)
  done (took 2.009799307 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.02883805 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.041956342 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.061066119 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6429e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.03210232 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041729521 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.2217e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041871288 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.062386827 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.042202944 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.042199117 seconds)
  done (took 1.132334574 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03818597 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036034194 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.063636577 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6286e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029623977 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040964987 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.8504e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041011595 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.065502636 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040486508 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041188846 seconds)
  done (took 1.130607492 seconds)
done (took 5.00489271 seconds)
(6/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.044022469 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.021529212 seconds)
  done (took 0.795733917 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.363117024 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.133094537 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.028986603 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.081325741 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022877758 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038575129 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.121610532 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.038008805 seconds)
  done (took 5.610977241 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.074711756 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.023203159 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023530427 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020985575 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021256254 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021171756 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.022140329 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021353921 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020660515 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022308278 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022347072 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020830062 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022791271 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.02213045 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020679425 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020931322 seconds)
  done (took 1.201793495 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.023179617 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02383052 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021589472 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020751228 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023329355 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.022556871 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024212595 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028759133 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.023116885 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022879882 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022238079 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.022324474 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.023221729 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022304167 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022302494 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020335447 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.024809134 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021979257 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021764124 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.023469176 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.022713721 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022216725 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026879677 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023437115 seconds)
  done (took 1.295753954 seconds)
done (took 9.644291686 seconds)
(7/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.168851265 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019754811 seconds)
  done (took 0.925042619 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.03645574 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.030712839 seconds)
  done (took 0.813326472 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.034666593 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020725964 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.036905073 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.03130927 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.021117565 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.020879566 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.033916273 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.021213717 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021004908 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.02111461 seconds)
  done (took 1.00467761 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.022150227 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022599819 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022479982 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020863456 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023216716 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.02184402 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022940007 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021960076 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027142018 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020770966 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024585375 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029696086 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020147791 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.030520541 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022841043 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021825652 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025820673 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020474062 seconds)
  done (took 1.163923456 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020313231 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020935159 seconds)
  done (took 0.785019314 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019519469 seconds)
    (2/7) benchmarking "second"...
    done (took 0.021225543 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019290343 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019297559 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.021234824 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.020391464 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.021259913 seconds)
  done (took 0.885681006 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.491117462 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.203458734 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.27809664 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.021938683 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026317289 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.229211825 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.022286202 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.026036777 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026215359 seconds)
  done (took 2.068726135 seconds)
done (took 8.392823395 seconds)
(8/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038473722 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.139764372 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.03876951 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.75788102 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.060096612 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.023984853 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.130033749 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.090060115 seconds)
done (took 2.036209503 seconds)
(9/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.240409727 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.899417468 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.899204702 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.745292288 seconds)
  done (took 4.298207471 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.918050254 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.141090351 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.040093493 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022578109 seconds)
  done (took 1.908687077 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024103739 seconds)
    (2/2) benchmarking "read"...
    done (took 0.030646892 seconds)
  done (took 0.816162411 seconds)
done (took 8.029941109 seconds)
(10/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.02299099 seconds)
done (took 0.788275331 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.523916366 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.452868834 seconds)
  done (took 1.732393803 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.026744842 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.216737707 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.18888243 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.301002656 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.373064762 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.755576674 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.697304549 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000102955 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.093153338 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000172789 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000212469 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000185264 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000237205 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.043502938 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.283277311 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.09458939 seconds)
  done (took 3.850757613 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.125706557 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.144523022 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.131976867 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.5348e-5 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105199284 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 4.6476e-5 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.05803993 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.3937e-5 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.8423e-5 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.2195e-5 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107477543 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.147209766 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.2381e-5 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.0585e-5 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 3.8639e-5 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.8219e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.0175e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.2671e-5 seconds)
  done (took 1.597268847 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.226159071 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.027316111 seconds)
  done (took 1.021524163 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.632249179 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.201386546 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.158202788 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.389088682 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.143611068 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.830680534 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.113218398 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.127888317 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.100319354 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.114210367 seconds)
  done (took 3.585552665 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.078680676 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.066457373 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.297329063 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.071335919 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.056563718 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.1458e-5 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.040816755 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.027368232 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.041623637 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.038416539 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.087436935 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.000108544 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.055157305 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.081162157 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.030237588 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.080207184 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.052323968 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.026846621 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.053498569 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.1357e-5 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.1678e-5 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.4044e-5 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.203120634 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000837783 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.00260297 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.9806e-5 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.78e-5 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.4123e-5 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 7.123e-6 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.1008e-5 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.00069859 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.001735313 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 9.851e-6 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012900226 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.4427e-5 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.1184e-5 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000132391 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.7781e-5 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.3593e-5 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.4057e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000723961 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.5177e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001090322 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.6691e-5 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 3.4938e-5 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.2232e-5 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000825164 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000880237 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000696067 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000733222 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000947143 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.1193e-5 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000724968 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000731186 seconds)
  done (took 2.181912793 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.333295429 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.2996124 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.034816524 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.089357252 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.087707854 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.033622217 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.107264582 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.080228966 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.129327151 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.034637182 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.032268843 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.7179e-5 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031827135 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012413259 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.096400558 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079921829 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.035903444 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.033203664 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083146871 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.076190282 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.6581e-5 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.088064241 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.131740638 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.098209724 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.6837e-5 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.035154611 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.8225e-5 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.0455e-5 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001158667 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.003354889 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.2443e-5 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.031303299 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013227364 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.00202085 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.2725e-5 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.2629e-5 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.2063e-5 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002184042 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.031710554 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002659435 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000927825 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000128364 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 6.3972e-5 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000117878 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.033514331 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000110508 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000731838 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002521206 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000736772 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000105654 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000170282 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000147236 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 4.4127e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001666691 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028777196 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003329439 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002533581 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.00010771 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.9104e-5 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.035407449 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004899046 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008087057 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002303828 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.033482909 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002435369 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 8.0442e-5 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006682748 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.01224508 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.927e-5 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 4.5799e-5 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.436e-5 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 9.8113e-5 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 4.9487e-5 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.002547661 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.002892843 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000166832 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 6.9115e-5 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000170043 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006217891 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002620588 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 6.4724e-5 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002484849 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000172532 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.00026063 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000210884 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.00011173 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001484157 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.004185737 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 9.9992e-5 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.000153101 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000291699 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000224457 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 6.0697e-5 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.002949186 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.028859086 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002633816 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.001531789 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000119583 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001916102 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000701691 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000109521 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000636318 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 6.8893e-5 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000223303 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.8099e-5 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001750391 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000774244 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008733105 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000129596 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.868e-5 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.001967103 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.009465534 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.6564e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000465413 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004675837 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001497955 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 7.5196e-5 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013274927 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000144228 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.00407797 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000146421 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002316332 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.00015626 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001562203 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.7139e-5 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000197726 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000134121 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001092022 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000222412 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000129713 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 4.7318e-5 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000204445 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001828628 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007425906 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.00012857 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002563124 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002756299 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000183638 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.001922999 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 7.6387e-5 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004637029 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000259598 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.5033e-5 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.4986e-5 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006332527 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000222761 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.8683e-5 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.3505e-5 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007061037 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.9267e-5 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.009427851 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000353667 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000105779 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005550288 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007527966 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.00144951 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.012545703 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000108348 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 9.4294e-5 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.5243e-5 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.9532e-5 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000772037 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001831224 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.4048e-5 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.4276e-5 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000677688 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.009657947 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000249598 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002154202 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001415486 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002854465 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000209646 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000194036 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013679863 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005028381 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.000355978 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.001543024 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003480349 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000180635 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001326823 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001822011 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000117268 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011891787 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 9.3514e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008696029 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001412026 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000715676 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002606587 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002431863 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.003738625 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.00944781 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009193308 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000231504 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.7606e-5 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.00052387 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000196427 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000123935 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000192317 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000162095 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.2565e-5 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014083783 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000253405 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.005756145 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 6.0504e-5 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002998475 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.5756e-5 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000128126 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011181926 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000238826 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000212162 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000353032 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.7e-5 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.0020165 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008167735 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001563866 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000187067 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.7223e-5 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.001938823 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001727978 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.2343e-5 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000108636 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000136616 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001374426 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001485907 seconds)
  done (took 3.454290014 seconds)
done (took 18.188194147 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.096704767 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.054482125 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.061684474 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.031803639 seconds)
done (took 1.031285542 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.117812149 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.073319081 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.234898722 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093702718 seconds)
  done (took 1.296370125 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.061711499 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.1165e-5 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.043010665 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.049851593 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.4133e-5 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.033593155 seconds)
  done (took 0.973897608 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.304158784 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.167458787 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.257569273 seconds)
  done (took 1.516303478 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.117726722 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.166386221 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.277829551 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.160912435 seconds)
  done (took 1.519818159 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.03739094 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.03064758 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.024298762 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.033103233 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.026422344 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.020869487 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.100656306 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021184785 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.029423965 seconds)
  done (took 1.172570052 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.059117379 seconds)
done (took 7.326276503 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.168375689 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029860916 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.031296187 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.031108945 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.116454533 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.031202726 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 6.9955e-5 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.113687514 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.033065593 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.03889824 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029244874 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.110527138 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.202770475 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.155437835 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.046324904 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.039824005 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.064014153 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.031530812 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.041194915 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.114699885 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.028598654 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028559404 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.02561019 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.23085031 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.108794553 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.031320505 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.126186014 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.029749615 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.896638719 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.028144189 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.179342151 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.07778867 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.18508297 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.18998177 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.137136479 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.027760615 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.110250198 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.039968349 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.206819727 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.111857298 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030812944 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 4.3363e-5 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.038615134 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.045039311 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.4299e-5 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.128193448 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03280332 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.049025677 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.091534425 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.154547404 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.133217455 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.029951601 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024863714 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.136036631 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027179704 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.3281e-5 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.028967424 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.03083494 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027615252 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.059378842 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029533844 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.03895179 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.2833e-5 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.114520599 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.4596e-5 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.088418311 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000817802 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.037423898 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.038718329 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.160368496 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.090861157 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027178248 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.034631135 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.02762916 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.147581912 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.041287087 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027070427 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.038991 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.031225669 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030432838 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.2383e-5 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 7.2397e-5 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.032527243 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000107856 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.034383321 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.027607305 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.0002e-5 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.087394598 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.050246064 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.058744195 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030662744 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.247809764 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.091376239 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026870642 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.041969527 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.042839644 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.026525911 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029198783 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.026480444 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.1101e-5 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.032175599 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.182259166 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 4.5147e-5 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033546703 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 3.4343e-5 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045990427 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.033920329 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032189439 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.03822805 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 7.8387e-5 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.03030274 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036228893 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.21060479 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.145938343 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.076203165 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.001752379 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.181203975 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001635021 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.041652082 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002499128 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000110102 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.180343658 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.2328e-5 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000103377 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.027265019 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.4803e-5 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000106761 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.134492957 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.17670929 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.7628e-5 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029293559 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.000950427 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.032750513 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 3.7164e-5 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.002030523 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000852214 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 6.7648e-5 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.204693467 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.028999614 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.028486488 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032561296 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.7674e-5 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.030452233 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.030321371 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.243045184 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.030608578 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.11081155 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035972866 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.030910674 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.02954519 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.046871943 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.075775968 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.2649e-5 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.029334778 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.029490489 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.118825148 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.029015549 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.11697057 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.00291158 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.040105702 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.269853341 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.090736302 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.033657092 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.226819512 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 9.0602e-5 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.027341243 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 6.1307e-5 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.111602844 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046443955 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.028245528 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.027523274 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.028227959 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 3.8022e-5 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.110555299 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.038014816 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.6283e-5 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.271183823 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 6.4056e-5 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.240992406 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.091453687 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.114068022 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027070155 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031495843 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.088641404 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041977137 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046051087 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.040551662 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.1377e-5 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.033204571 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000116932 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.2112e-5 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029333379 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.037899703 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.02854404 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 9.4345e-5 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 6.2542e-5 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030626134 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.030933453 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030824885 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.030195341 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.034530453 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.480319155 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.5259e-5 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028853793 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024682614 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.033113921 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.295239869 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.03121812 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.091626142 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039771991 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.036315221 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.030260025 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.000106698 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.032661164 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.178355577 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.0204984 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.034135411 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.072920385 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 9.4698e-5 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.092898266 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.002275982 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.9517e-5 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.038959012 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.032759403 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.033265277 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.029024135 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 8.5576e-5 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028407114 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032789142 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.00176311 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.038254797 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.031220579 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.030551223 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.6716e-5 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.0979e-5 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.039140245 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.235737244 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 8.8151e-5 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.15669564 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.188672251 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093076655 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 6.6173e-5 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.03583961 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.036980173 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 8.0562e-5 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.120761821 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000106618 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.070035119 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.185247313 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.03349996 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.036628702 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.034810503 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002475265 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092758739 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038351102 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.031046393 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 7.8186e-5 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.08967524 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.032085655 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.115397845 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.091537894 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.029031493 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.495406798 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.039152894 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.03075703 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.000943088 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028562329 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.038269644 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.1609e-5 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001676284 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.032781163 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095452824 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.3968e-5 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 9.6573e-5 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.0766e-5 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 8.4571e-5 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.5357e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.039907189 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000205408 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.028492436 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 3.4643e-5 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 6.7362e-5 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034277736 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.038163539 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.411e-5 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.028744814 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000193801 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 4.7177e-5 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.4926e-5 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036899239 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.090780842 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.111148304 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.8445e-5 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031790066 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032025219 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035816602 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.064724634 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.0591e-5 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.133380354 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.9915e-5 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.027530353 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.04056471 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 7.9751e-5 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.029854411 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.855e-5 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.7647e-5 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038461645 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 4.0028e-5 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001759479 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.5626e-5 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.000105043 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 7.543e-5 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000206333 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.000113037 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.185e-5 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.001668221 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 6.187e-5 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 6.7073e-5 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 3.1591e-5 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 3.5158e-5 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.027953168 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.030061759 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.028215008 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000101376 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.032266667 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.977351159 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001572807 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000138617 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.038753909 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.4016e-5 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 4.6433e-5 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 9.4984e-5 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.002360117 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 6.1265e-5 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039032966 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 7.7425e-5 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029817062 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.000116245 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030098412 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 7.9354e-5 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.045462284 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 4.9326e-5 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027096796 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001167338 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.029792496 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029860801 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.03039833 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 7.1068e-5 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.027553221 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.038921071 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.107113737 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029907757 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.035135611 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.033829916 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029851138 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 3.5039e-5 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 3.3073e-5 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.262514882 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.083944687 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.038980022 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039046392 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.8175e-5 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.027284356 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 7.136e-5 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.000965536 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.6987e-5 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.042151362 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.4651e-5 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.024971338 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 7.2886e-5 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.1621e-5 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 6.3262e-5 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.12745628 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.5791e-5 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.000678656 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.5917e-5 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.032415599 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.026739919 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.036601528 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 4.0163e-5 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.047049864 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.001337467 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000687512 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.037097558 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.7063e-5 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.033769581 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039085031 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.030793018 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.047966286 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031422665 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.0215e-5 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.065632152 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 4.0086e-5 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 7.2818e-5 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.031696549 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.036167129 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.0236e-5 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.036490973 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.036086664 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.032598721 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.226365551 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.03583978 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001653551 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 7.182e-5 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027392919 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032704774 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.2299e-5 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.069079979 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034145999 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.026475182 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.9778e-5 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002317053 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.035735086 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.1815e-5 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 4.1589e-5 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 7.6112e-5 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044076363 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043763632 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.000943038 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.3431e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.024779083 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 3.9359e-5 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 5.2923e-5 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.871764168 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.6288e-5 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.02904033 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.323998637 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000133866 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 3.8971e-5 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.8618e-5 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.1723e-5 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.955262943 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 8.8225e-5 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.025450438 seconds)
  done (took 24.355165748 seconds)
done (took 25.158358778 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.116942715 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.03159133 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.086347485 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.037773803 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.027792433 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033812624 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.038658962 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.066320594 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.11324392 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.056007847 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.126877497 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.046656345 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.04091489 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.108939288 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.031536633 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.8553e-5 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.096395481 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.049131557 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.086198072 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.059914756 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.040998696 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.048861001 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.087606717 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.049631627 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.066139101 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.093596655 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.058600766 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.089923453 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.9709e-5 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.059109115 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.035005044 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.027269 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.036320402 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.05510735 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.038809448 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.2559e-5 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.092378562 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.028996357 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.049331409 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.071945292 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.042808657 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.053327368 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.029203768 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.069992483 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.059332232 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.059968537 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.040468383 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.070598542 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.07559963 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.032490254 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.047478799 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.051501079 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.034326262 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.070910276 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.063500895 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.068875762 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.062164318 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.063894842 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.031542048 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.073770344 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.1263e-5 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.065495406 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 3.761e-5 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.046701492 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032942413 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.075558318 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.075161852 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.071157897 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 3.0626e-5 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.061004769 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.068562478 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.064660884 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.058468253 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.4282e-5 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.070710383 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.071051467 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.07431054 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.027952838 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.073243361 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.075570752 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.042935161 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.029623042 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.056535092 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.083856056 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.9391e-5 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.395e-5 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.027703856 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.881e-5 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.068671396 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.1292e-5 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7899e-5 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.075467 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.074372969 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.1764e-5 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.4235e-5 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.052442382 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.9649e-5 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.070658537 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.084536544 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.9881e-5 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.045210331 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.053074551 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.056762561 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.067749916 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.077168903 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.052251954 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 3.9994e-5 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.03111423 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.038918207 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 3.1908e-5 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.02704978 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.06068793 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.057401713 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.0675067 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.8723e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.0028e-5 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6047e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.5042e-5 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.298e-5 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.5644e-5 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.4382e-5 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.3062e-5 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.5984e-5 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.1185e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.059414721 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.057355462 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032156859 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.029272925 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.058787334 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 3.4239e-5 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.428e-5 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.07365629 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.053879478 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.5687e-5 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 3.7112e-5 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.052663081 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.1979e-5 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.062336533 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 3.9974e-5 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.047272335 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.6352e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.1293e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.064388454 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.031433259 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.8037e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.054573958 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.052640981 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.9702e-5 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.4797e-5 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.7474e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.6106e-5 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.050646244 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.428e-5 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.05342992 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.045913095 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.062955086 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.7024e-5 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.6975e-5 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.5069e-5 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6383e-5 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.055321104 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.075791278 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.067618019 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 3.1758e-5 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.064114943 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.7364e-5 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.00010711 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.439e-5 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010043763 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.061386647 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.035241863 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 3.5745e-5 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.054861396 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.05793075 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.085322532 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.1727e-5 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.028883773 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.238e-5 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.061152111 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 3.4278e-5 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.064662651 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.054099322 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.029107359 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 3.8608e-5 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.053489993 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.061952574 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 5.6087e-5 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.9588e-5 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.059597761 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.6545e-5 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.1766e-5 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.1338e-5 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.03117506 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.038185455 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 5.4289e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.3636e-5 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.3339e-5 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.4153e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.06362797 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.4036e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.1609e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.0235e-5 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.9645e-5 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.6049e-5 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.3599e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.5558e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.9694e-5 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.6424e-5 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.070996605 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.02528742 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.2884e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.1604e-5 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.7012e-5 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.064283816 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.074137119 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.6856e-5 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.8066e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.7253e-5 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 3.0257e-5 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.9856e-5 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.8576e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.6225e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.1292e-5 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.873e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.063975411 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.0252e-5 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.9417e-5 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.7831e-5 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.4908e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.957e-5 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.0556e-5 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.0128e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.056929498 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 3.7489e-5 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.5297e-5 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.374e-5 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.1253e-5 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.0372e-5 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.4621e-5 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.4956e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.6416e-5 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.4365e-5 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.02728946 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.010000908 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 3.2479e-5 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 3.1098e-5 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.532e-5 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.052253877 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.055690283 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.9739e-5 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 3.1606e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 3.2678e-5 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.9414e-5 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.063229953 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.036392383 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.064637428 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.9877e-5 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.055751724 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 4.034e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.5547e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.3134e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.6099e-5 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.2135e-5 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.063485588 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.042755866 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.6978e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.2678e-5 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.6711e-5 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.0179e-5 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.0101e-5 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.063335836 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.106e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.052964113 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.2781e-5 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.083554193 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.032383725 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.030906632 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.9073e-5 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.7416e-5 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.029265949 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.027481176 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 3.5094e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.4361e-5 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.0571e-5 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.292e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.2495e-5 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.060489805 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.51e-5 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.4615e-5 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 3.0043e-5 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.7238e-5 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.5804e-5 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.057136827 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.7959e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.060929062 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.7052e-5 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.1582e-5 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.7988e-5 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.7983e-5 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5362e-5 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 3.0448e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.414e-5 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.6908e-5 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.8398e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.063201999 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.028654394 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 3.1026e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.4057e-5 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.5547e-5 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.4184e-5 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.8181e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.8157e-5 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.9189e-5 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.1322e-5 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.0600082 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.5728e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 3.3432e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3162e-5 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.6689e-5 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.7872e-5 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.055120864 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.2377e-5 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.7473e-5 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.058864484 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 3.7406e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.063641308 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.6087e-5 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.2952e-5 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.7856e-5 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.050359827 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 4.5466e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.8783e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.716e-5 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.6077e-5 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.3562e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.8802e-5 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.798e-5 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.8491e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.083060472 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 3.5756e-5 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.043456494 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.0664e-5 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.2637e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.025061552 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.4265e-5 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.1755e-5 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.032834397 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.8391e-5 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 3.1582e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.3254e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.0229e-5 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.0007e-5 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.8676e-5 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.0545e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.2036e-5 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.059319853 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 3.1688e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.9414e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.6116e-5 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.2393e-5 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.0647e-5 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.1812e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.5375e-5 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.7879e-5 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.828e-5 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.8904e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.8207e-5 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.057808389 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.4633e-5 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.3408e-5 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.0667e-5 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.5353e-5 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.2986e-5 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.2873e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.2714e-5 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.069770058 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 3.5768e-5 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.0946e-5 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.1763e-5 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.9014e-5 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.81e-5 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032197151 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 4.2718e-5 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.969e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.2427e-5 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.3445e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.2803e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.691e-5 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.7654e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.2957e-5 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.8733e-5 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.1439e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.064358461 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.9959e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.2515e-5 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.8428e-5 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.05629639 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 3.6367e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.0064e-5 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.046265828 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.01042343 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 3.618e-5 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.6974e-5 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010119594 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 3.3161e-5 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.5574e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.8592e-5 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.5625e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.8797e-5 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.769e-5 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.6462e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.8894e-5 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.8228e-5 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.1948e-5 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 4.1889e-5 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 4.7129e-5 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.413e-5 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.7583e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.8875e-5 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.9201e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.5294e-5 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.2497e-5 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.2903e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.4727e-5 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.9401e-5 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.3151e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.5126e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.4951e-5 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.6947e-5 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.8426e-5 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.031316101 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.7027e-5 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8515e-5 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 5.6552e-5 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.8174e-5 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.6961e-5 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.1871e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.1042e-5 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.2813e-5 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.9735e-5 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.0241e-5 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.8935e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.4705e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.2533e-5 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.9996e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.7546e-5 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.1498e-5 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.4768e-5 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.9145e-5 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.8785e-5 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.4658e-5 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.0948e-5 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.3831e-5 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.2154e-5 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.8271e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.4401e-5 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.6993e-5 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.075088385 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.2234e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.5999e-5 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.8621e-5 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.4325e-5 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.046659898 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.3922e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.3187e-5 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.0145e-5 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.0179e-5 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.203e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.057751188 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.7601e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.061502766 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.0424e-5 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.1942e-5 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.4267e-5 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.4951e-5 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.2502e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.5926e-5 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.8917e-5 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.4366e-5 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.03288879 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.8587e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.987e-5 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.6786e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.0729e-5 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.3549e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.6652e-5 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.9371e-5 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.6893e-5 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.7342e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.597e-5 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.4193e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.419e-5 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.6098e-5 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.9822e-5 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.9157e-5 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.034893352 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 4.3894e-5 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.8997e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 6.0919e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.8266e-5 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.8628e-5 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.1491e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.8551e-5 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.9269e-5 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.5368e-5 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.8399e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.818e-5 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.2193e-5 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.0085e-5 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.5955e-5 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.7666e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.7378e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.2733e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.4849e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.8358e-5 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.2377e-5 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4544e-5 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 5.0853e-5 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.9409e-5 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.169e-5 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.5231e-5 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.2211e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.1323e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.0395e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.2523e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.8156e-5 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.6352e-5 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.3559e-5 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 9.861e-6 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.1149e-5 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.5363e-5 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.9462e-5 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.45e-5 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.5351e-5 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.1296e-5 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.4225e-5 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.2568e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.2266e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.8744e-5 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.7738e-5 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.2282e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.5781e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.2375e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.504e-5 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.5775e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.0432e-5 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.0111e-5 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.4739e-5 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.3322e-5 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.9028e-5 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.6217e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.5389e-5 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.7681e-5 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.8678e-5 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.1913e-5 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.4575e-5 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.5417e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.5908e-5 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.5398e-5 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.2232e-5 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.7373e-5 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.6891e-5 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.5866e-5 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.1365e-5 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.0334e-5 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.9931e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.5564e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.6221e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.8019e-5 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.6434e-5 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.1056e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.4758e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.4875e-5 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.3835e-5 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.2197e-5 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.2286e-5 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.7847e-5 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.6533e-5 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.8081e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.2845e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.585e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.3411e-5 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.6465e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.3823e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.3959e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.4235e-5 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.0608e-5 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.7249e-5 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.3368e-5 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.0485e-5 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.0962e-5 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.9723e-5 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.0374e-5 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.8143e-5 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.5035e-5 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.2402e-5 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 3.6248e-5 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.4847e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.6539e-5 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.8303e-5 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 9.897e-6 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.8618e-5 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.9529e-5 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.0542e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.0814e-5 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.8707e-5 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.1622e-5 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 9.481e-6 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.3351e-5 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.8028e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.7217e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.6126e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 8.729e-6 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.8019e-5 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.2389e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.7307e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.8156e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.9706e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.4805e-5 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.0338e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.6355e-5 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.5212e-5 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.5702e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 9.052e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.6513e-5 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.0548e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.6174e-5 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.7892e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.9325e-5 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.0605e-5 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 9.873e-6 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 8.611e-6 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.6744e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.1077e-5 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.6819e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 9.06e-6 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.3667e-5 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.5679e-5 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.5803e-5 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.334e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.3456e-5 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.172e-5 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.4879e-5 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.46e-5 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.4231e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.2761e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.0408e-5 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.2919e-5 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.8203e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.3835e-5 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.4979e-5 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 9.276e-6 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.0655e-5 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.2436e-5 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.494e-5 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.2217e-5 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.0136e-5 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.1781e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.122e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.8603e-5 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.1026e-5 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 3.2389e-5 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.384e-5 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.3082e-5 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.0374e-5 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.524e-5 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 4.6669e-5 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.7069e-5 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.3411e-5 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 9.042e-6 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.1332e-5 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.5099e-5 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.2239e-5 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.3386e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.3402e-5 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.3281e-5 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.3094e-5 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.4611e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.636e-5 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.8435e-5 seconds)
done (took 11.407683176 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.045787165 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.05497366 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.048175005 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.032639429 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.03561425 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.035735988 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025269757 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.034078491 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.025365978 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.037364888 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.042733881 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041825799 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.040285367 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.042370876 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 3.0471e-5 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.031108637 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.6055e-5 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.038445979 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.034104548 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.048220335 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.05016618 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.4372e-5 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.024171284 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.037391342 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.005836453 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.036827011 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.047286701 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.5487e-5 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037067882 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.0313569 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.049133449 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 6.1416e-5 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.798e-5 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.03345389 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.032015001 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.025548782 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 3.9085e-5 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.1508e-5 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.029552536 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.6434e-5 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.048797129 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.03418248 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001108327 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001066659 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 9.841e-6 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.033982536 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.5731e-5 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.4643e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005466387 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.0179e-5 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 6.2871e-5 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.025284079 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.6598e-5 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.033139722 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.4456e-5 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.2411e-5 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 6.812e-6 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 7.703e-6 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.8656e-5 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 7.852e-6 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.8354e-5 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 9.791e-5 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 7.0697e-5 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.025020746 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001068945 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.1563e-5 seconds)
  done (took 2.264870535 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.041150443 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.075341594 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035698006 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035565057 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.021066752 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.022241155 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.022328966 seconds)
  done (took 1.188417793 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022844153 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.025051951 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.035360701 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.035300179 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.023344995 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.026536539 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.022300242 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.053374796 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.05822973 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.025750386 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.041276461 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.035445191 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.033187823 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.031459349 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021780404 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.037507592 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.022517285 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026922204 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.036395241 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.036453541 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02313432 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.0504079 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.034491854 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023156036 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.033288281 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.025160927 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025098419 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065150888 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023678114 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022354853 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022088536 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.051232631 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024680481 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.033256261 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021403641 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020726378 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022956946 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02120742 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.023244464 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.025955915 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022354771 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.025220811 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024540756 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022910054 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022821037 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.022387184 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023178387 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021979678 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022432179 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024947182 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.033299184 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.024857679 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.026386195 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.032766107 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.03139406 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025284232 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.026796235 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.023164913 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.025103758 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.032737888 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023916372 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.035426115 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.034861545 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022302861 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.035093634 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031325357 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024629246 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022331536 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.022173827 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.030705068 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.023217784 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034506551 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025018886 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023986557 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019877216 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.03077992 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022888062 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022501814 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022817261 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.031935406 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022368656 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022012977 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.022389101 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.022794115 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023488834 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021931119 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021601734 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.0407284 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.050897302 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024378522 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025417663 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022199633 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032429776 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.02416911 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.026363407 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.036031773 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.033186637 seconds)
  done (took 3.705880436 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.033709956 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022669892 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.022499762 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.02031475 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.020650268 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020377694 seconds)
  done (took 1.079428744 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.058154454 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020749673 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.020716135 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.012e-5 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.038828935 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.022316303 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.022718477 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.5729e-5 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035273816 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.031194923 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.02244983 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.023882604 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.023368388 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.1284e-5 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.02254867 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030797536 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.022767784 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.023421531 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.030909361 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.5616e-5 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.027530069 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.3022e-5 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.118e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.026159619 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.5657e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.031031556 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02732343 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031101934 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.030865975 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.9696e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.0252e-5 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.6921e-5 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.1446e-5 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 8.155e-6 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.022637652 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.4646e-5 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.6206e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.1212e-5 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022371168 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.9712e-5 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.023729423 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.0986e-5 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.021860194 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.0641e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.9946e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.2708e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.0945e-5 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027370131 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.022665984 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.2568e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.0191e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.7538e-5 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 9.838e-6 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 9.679e-6 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.7946e-5 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.8676e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 6.02e-6 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.022792131 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.9226e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.2799e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.0352e-5 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.0119e-5 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.8503e-5 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.1152e-5 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.02298165 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.0044e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.3919e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.1338e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 5.958e-6 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 9.466e-6 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 9.777e-6 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 6.989e-6 seconds)
  done (took 1.750726761 seconds)
done (took 10.943772451 seconds)
(17/22) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 13.131184183 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.131766786 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.388673754 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.063638821 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.272568489 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 2.090519642 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.044431543 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.314959326 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.151530401 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.09280559 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.045966023 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.391044196 seconds)
  done (took 19.060541614 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 17.337145283 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.36453775 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.574778606 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.361795889 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 3.909359247 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.160386714 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.099839865 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.627632991 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.467612433 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.241654483 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.080523627 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.294772623 seconds)
  done (took 26.744133903 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.95971475 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.240640933 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.569554453 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.495432 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 3.768379685 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.232951325 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.098852547 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.615063521 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.358584048 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.236993497 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.077071365 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.341528479 seconds)
  done (took 18.58949233 seconds)
done (took 65.342795434 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.962815162 seconds)
  done (took 2.803836802 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.94306809 seconds)
  done (took 2.80540861 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.058307896 seconds)
  done (took 1.910866804 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.709261368 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.023933606 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.005695204 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.123954683 seconds)
  done (took 4.705880787 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.973660824 seconds)
  done (took 2.871012887 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.243227449 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.192398127 seconds)
  done (took 2.335276531 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.673870216 seconds)
  done (took 2.529203087 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.552826208 seconds)
  done (took 3.419978431 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.200831578 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160791661 seconds)
  done (took 2.227267257 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.761728323 seconds)
  done (took 2.627706344 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.516031026 seconds)
  done (took 7.381332791 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.241558682 seconds)
  done (took 2.10386526 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.330449065 seconds)
  done (took 2.192118595 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.895537576 seconds)
  done (took 2.758969045 seconds)
done (took 44.58970874 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.05191447 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052960042 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.052889623 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.049508947 seconds)
  done (took 2.064267785 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045774379 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.043978766 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.035089549 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.041145724 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024129582 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.024573125 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.044054348 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02890624 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024274961 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.03897138 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.027966442 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038836536 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.040605494 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.033720406 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.034410869 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.04112045 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.039479734 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.043956825 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023950889 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033530613 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.039458463 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.039784936 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.028953832 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.030614969 seconds)
  done (took 2.711119511 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.214718827 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.094245606 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.03380563 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.036356868 seconds)
  done (took 2.244956852 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.041215222 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.045106714 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.056761148 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.039622685 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.033012943 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.045655832 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.04540211 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.0508019 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.052338103 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.047637866 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.032813201 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.046346908 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.035722114 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.035508037 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.036057622 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.044585471 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.021524632 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.026451414 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.045015332 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.045466329 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.032662146 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.03905327 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.032146032 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.04442458 seconds)
  done (took 2.847780609 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.060219803 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.039373423 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.064633939 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.059552646 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.057160196 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.026411441 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.062171506 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.0523633 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.095882095 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.036210697 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.042950086 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.091103257 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.068458902 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.036230124 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.051199462 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.119124445 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.161027439 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.043014085 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.056685091 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.090749117 seconds)
  done (took 3.192423586 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.036702704 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025923573 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025675284 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.026277011 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.059448279 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.046199136 seconds)
  done (took 2.104091724 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.045889646 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.034511352 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.045410711 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.04169118 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.859e-5 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 6.515e-6 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.3622e-5 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5009e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 5.923e-6 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.2605e-5 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.4787e-5 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 6.175e-6 seconds)
  done (took 2.047236689 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.19131746 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.034305212 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.037948675 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.027824139 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.040214766 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.039902236 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.048049918 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.034242506 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.05277557 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.0294683 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.029288811 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.032904029 seconds)
  done (took 2.479462307 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.202389003 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.159107611 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.33561119 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.24096178 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.314942895 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114995301 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049806414 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.086699473 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.413380072 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068774567 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052324216 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027137122 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118074938 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.108195552 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028347152 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137673887 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.300043357 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013209085 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055571784 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104265031 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044417357 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135132785 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067020122 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054976312 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1705e-5 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067528693 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0291206 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018284846 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056151686 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038637818 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058353051 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.244747781 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.102328645 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.000101479 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093510809 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.018984846 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041045874 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.039399854 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.160391562 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.023169949 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029285462 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.012197267 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.00141989 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 1.9432e-5 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9411e-5 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050201242 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.014854379 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042740237 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024926096 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.349003099 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038733737 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028277098 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.017914206 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051065406 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.589768714 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029206091 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038468009 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052167009 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020660113 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.068682009 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.02580339 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068744014 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027463954 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02077794 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088922492 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030174259 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.1606e-5 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035252484 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000307651 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027813906 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046219346 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075311051 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041583578 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.0986e-5 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040922236 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.034714633 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087691746 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006819809 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.059119553 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032728922 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.098857812 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037502437 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.071448737 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020945725 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04687141 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039355916 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.022102121 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015341825 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.4612e-5 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.068017788 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.012170277 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.3479e-5 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.6399e-5 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.060089873 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03987088 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017596417 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050881125 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038934763 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014440035 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067820519 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048758978 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012815899 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056157005 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034468189 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120619668 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02555823 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.051724559 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04610773 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02428626 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.213210651 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019295639 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015770633 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043617056 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037863563 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033642395 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101586441 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041990903 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070665288 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037711312 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069777052 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012940955 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.036039708 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032602932 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046461828 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077645387 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054866874 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020659097 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030712388 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053234075 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.022875181 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016816102 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0834435 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.5991e-5 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.4717e-5 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019507369 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.017571342 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056291513 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.038470421 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067426121 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066390815 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000127802 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06694146 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.032169796 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050509032 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.037739518 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062048081 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037410903 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000330233 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020125638 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.1236e-5 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048565806 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 7.21e-5 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059360698 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0211092 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.035979024 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052150411 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054090679 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.026516244 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045162191 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.023990416 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046960645 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029712573 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073697072 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081818831 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028937576 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.036163857 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026926042 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.073485896 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015061302 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09217207 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024525454 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058386038 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023285923 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073229873 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 4.2109e-5 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017791791 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020268816 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059790827 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000305836 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053472484 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07372637 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.040105 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.011207403 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016462367 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07803331 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.4069e-5 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051251619 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.027868663 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.039478309 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04880947 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006767823 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039197856 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011435382 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032080229 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078978595 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.016398326 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052724118 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000107635 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019949808 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.5837e-5 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.3259e-5 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044567831 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09280683 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055117889 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047677773 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.209305573 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035150684 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04973894 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.4371e-5 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.7525e-5 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.024571587 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.069191071 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087608047 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015415392 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062678636 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033401459 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05029248 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000129424 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.5278e-5 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052263807 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000325589 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037110657 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021021657 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.018662012 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0724068 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077345641 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.072459366 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021868493 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043972822 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046726751 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.034109837 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026511538 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060749388 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000308995 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033871096 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000479326 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056440675 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000140552 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 6.9156e-5 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088487538 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046406384 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011994988 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.2026e-5 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075568906 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.4137e-5 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021251043 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017468279 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000131511 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072492846 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000105146 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.043425521 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039015291 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038355514 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033799051 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049499808 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.017118207 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037356426 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04636025 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.015295335 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.5156e-5 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.7403e-5 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023860143 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056243448 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012002033 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012252415 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092693545 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040352616 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013913957 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036132365 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024829412 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.087570984 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026029536 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069465382 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047359946 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054698316 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073213021 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.026511973 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.041616601 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060045284 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.016090618 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.053507685 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.011120384 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.031074098 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.014201518 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.0388e-5 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.01096063 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053951965 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012360655 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062479923 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 7.7189e-5 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.042598157 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037854213 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03331082 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072405965 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.026799434 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071429542 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038383656 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036550589 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048167876 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021893013 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0239981 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040883149 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036707115 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054784059 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.040725853 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034727573 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090266865 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028320863 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076377305 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032626113 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057552631 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065995876 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047698863 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063894851 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.208335314 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066133616 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050506062 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053376389 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015708544 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024307897 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040494978 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.034023852 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107150546 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.031219366 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.015086745 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029576184 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027999438 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.032485805 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044115896 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018573092 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097381689 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041610358 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.023275425 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05552636 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000226933 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033752575 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016741788 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023448767 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000173488 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.022682112 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029990024 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060166322 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067601792 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061420307 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076823406 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.062878638 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.049587543 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.062092633 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049578643 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070167304 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017412231 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01685111 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06850271 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036810407 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000230726 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.045346699 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030670642 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033847054 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02127642 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072117402 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031134894 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000129727 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01776452 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000489869 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.011010232 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.011397863 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.059669326 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046500786 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027942867 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051041274 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.01575825 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038868157 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044314592 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012057925 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05677519 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.013701368 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043018162 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.4208e-5 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024753527 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 8.1157e-5 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.04407317 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045391729 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043997321 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057054148 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.050593871 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022865596 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073390531 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09065462 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016422065 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016149603 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.015082684 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011534035 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053173568 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113961317 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040915281 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.00056102 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.020957787 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.017690804 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.01501686 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.012653814 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.038505746 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040376416 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055128109 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030368018 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.063580387 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049047187 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014817736 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04549449 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035249802 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042810621 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.031876647 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035745519 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035632892 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000131016 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033499415 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042970626 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018128424 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.4148e-5 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0120186 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.012409932 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043612444 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.014931639 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020650592 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094262634 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.028569456 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043114051 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046449387 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.019973293 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013295474 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063802764 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011389333 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06653147 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.014570893 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03827559 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.017933727 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013603522 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.013180373 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.441140979 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034502965 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054250099 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053569591 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040329957 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.209455168 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111964241 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 7.5877e-5 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075552359 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014815909 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 7.0225e-5 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.010999555 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058491687 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015253738 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047261303 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047183356 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098210432 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02728154 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.7111e-5 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070805011 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.020870155 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.044991605 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018044454 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015463877 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070472753 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.066952311 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.3714e-5 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022297483 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051672759 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.012611573 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040005167 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042496628 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011178131 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.210760096 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.308355831 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037132517 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000121336 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025949986 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.075077198 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054566506 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022642902 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047885375 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.059068585 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059740752 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027275307 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043773136 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.203506345 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011887053 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.013588763 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000152914 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04033769 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040970634 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.03105238 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.014289305 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.035567219 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.02214216 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045869376 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043908622 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027627508 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02369804 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034303085 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016997615 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006816458 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062055594 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000161381 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000481668 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.012622076 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000109386 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025545272 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045210532 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.034891433 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044152298 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029134055 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034719084 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.017950886 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043518492 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083332441 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071376011 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055645286 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.8085e-5 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054383797 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020479003 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000436888 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03096582 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000298859 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013468642 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057940174 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000115684 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.1613e-5 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041833696 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.02707887 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061039849 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060046169 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06383993 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038965224 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041030853 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017834496 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.442e-5 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.5331e-5 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6694e-5 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.4638e-5 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.011468963 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045606748 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 7.5193e-5 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.022357722 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.051531706 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01799488 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040839497 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000193997 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05464388 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035856097 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037515429 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065396928 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029948005 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029233015 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052136719 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062119039 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085387311 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16460172 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065553763 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063973687 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000484529 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.505e-5 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.015554548 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07360935 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01533512 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.020630263 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016485125 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063518853 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.049507315 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026821884 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.253768991 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012021829 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016016896 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015938544 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.015326355 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03855853 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047927997 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020265219 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014693745 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023037655 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020864996 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066924674 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0581176 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021040252 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044510813 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017513538 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021699354 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000476089 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050745022 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.031394286 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.4684e-5 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.553394292 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039179595 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068808674 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.016044014 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020493648 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061742956 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028236887 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.458653755 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.015720378 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063002828 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074182224 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038677049 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063684377 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011789275 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016445604 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04183637 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.049309902 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3682e-5 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021573508 seconds)
  done (took 30.141746583 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.238887486 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.474539659 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.266909921 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108475013 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.153973001 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.166072138 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.317703776 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.117046833 seconds)
  done (took 3.832077053 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.041506967 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.029295278 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.076921639 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203323906 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.066145324 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 1.4037e-5 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.5252e-5 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.054454946 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.007174533 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.034697425 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.082202899 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 1.4798e-5 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.009326104 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.521476148 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.7363e-5 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 3.662e-5 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.007206284 seconds)
  done (took 3.160001305 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.429260415 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.385611261 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.878536806 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.17464906 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.102348747 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.757155625 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009352531 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.007747913 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.800953452 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.600571441 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.096070929 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170572041 seconds)
  done (took 29.416708891 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.195427123 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.014364093 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.014998014 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.009855642 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.013859453 seconds)
  done (took 2.247324635 seconds)
done (took 90.36016536 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.06240833 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.150633856 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 7.2491e-5 seconds)
  done (took 2.176887524 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.057917222 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033500073 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.026057346 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.05723981 seconds)
  done (took 2.184821346 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.098318382 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.037831099 seconds)
  done (took 2.145058787 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.205007253 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.173459887 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.061880569 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.064454744 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.046884873 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.054872921 seconds)
  done (took 2.182322373 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.023088026 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.022827981 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022842063 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022637019 seconds)
  done (took 2.103376265 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.021336429 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020428121 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.030873266 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.047988968 seconds)
  done (took 2.130396009 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.231671398 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.091675017 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.150020256 seconds)
  done (took 2.484670718 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040887446 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.036007235 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.036726957 seconds)
  done (took 2.133898299 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.058467849 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.054545844 seconds)
  done (took 2.127937978 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039828029 seconds)
  done (took 2.052937231 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.098991494 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.073804691 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.154442949 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.036637332 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.116456179 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.085602582 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 4.0039e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.1441e-5 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 5.908e-6 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.8738e-5 seconds)
  done (took 2.581227424 seconds)
done (took 26.822886179 seconds)
(21/22) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.138404881 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.059053687 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.07557124 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.060600152 seconds)
  done (took 2.345440223 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.234852308 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.198814106 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.048452826 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.068164959 seconds)
  done (took 2.581388155 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.02568425 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.68852198 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.030039526 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.101692125 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.002225851 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025521314 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.6064299 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.7329e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 0.029954709 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.1866e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.134148892 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.031792173 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.488e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.036620092 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.099830455 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.076e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027791204 seconds)
  done (took 10.86722366 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.3203e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.0475e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 9.282e-6 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 8.223e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.6941e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.15e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.000937564 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.912e-6 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.787e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.53e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.237e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 6.346e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.0098e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 6.298e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.06e-6 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.861e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.685e-6 seconds)
  done (took 2.073747686 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.00015039 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.0522e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.8997e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.825e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.5246e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.19e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.007857138 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.4251e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 1.4388e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.1427e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 9.8248e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 4.8147e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.6592e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 4.5996e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.1957e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.929e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.3198e-5 seconds)
  done (took 2.059678435 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.415031627 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 8.618739753 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.036745501 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 0.040182788 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.546784302 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 1.4896e-5 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 0.03526754 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.188263621 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.378930642 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.741177635 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.041978614 seconds)
    (12/13) benchmarking "Float16"...
    done (took 1.029963277 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.179726149 seconds)
  done (took 23.303760382 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.8542e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.1635e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.2159e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.836e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.7272e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.414e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.007640419 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.3416e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 9.704e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.838e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.5202e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 8.219e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.8751e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 8.163e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.2993e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.114e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 9.122e-6 seconds)
  done (took 2.111853591 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.037014236 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.039506154 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.051367823 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.059888553 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.026763768 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.03626225 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.031181799 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.026416624 seconds)
  done (took 2.362213914 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.142772411 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.118933431 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.046842339 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.067283238 seconds)
  done (took 2.437188346 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001378724 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.0004227 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.000726071 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.3489e-5 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000557574 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.2067e-5 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.017811782 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000432867 seconds)
    (9/17) benchmarking "all same"...
    done (took 8.8235e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000398489 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.001118446 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.000718121 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000536544 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.000801658 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.001076935 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000464021 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.00068388 seconds)
  done (took 2.090596047 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.9746e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.2232e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.7978e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.961e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.8779e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.098e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.000219725 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 8.093e-6 seconds)
    (9/17) benchmarking "all same"...
    done (took 6.04e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.687e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 2.2127e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 1.3676e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.1661e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 1.2717e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.0013e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.732e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.2188e-5 seconds)
  done (took 2.056988194 seconds)
done (took 56.321457658 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.043697737 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.025205842 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.031251168 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.082554767 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033470786 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.022375067 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.021670304 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.033432068 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.038125233 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.029650565 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.032083579 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.0901e-5 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027816919 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.4388e-5 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.029511937 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.030418187 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.025856815 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.011149465 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.023367091 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025790318 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008735802 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.018872158 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.013610079 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003748508 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023387588 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.00348207 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.022128475 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.014147296 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.4544e-5 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.009253837 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.02610965 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.005696273 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.012404205 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012464163 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.030516358 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.01170985 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.005555689 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.029312754 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005674996 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.008994905 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.009449715 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.008878099 seconds)
  done (took 2.956732243 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.025561247 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.032006727 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024271557 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030878346 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028712486 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.033482809 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.029743284 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029039172 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.030855309 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.028568731 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.027231116 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027275916 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030921755 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022650494 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030874441 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.028643396 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.02856585 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023654794 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030682258 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027549987 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.027150826 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.023262695 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029036737 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.03177758 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024486135 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.03225775 seconds)
  done (took 2.80364997 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.034845769 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.050966311 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.060977367 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.063061806 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026595726 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.04078155 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.04899421 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043060546 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.058646719 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.026725736 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.047607548 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.020371082 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.088791717 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.033610005 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020648969 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.043003788 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.032957775 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030843223 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.039168678 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.123919145 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043482097 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.045540455 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.056646063 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.072340042 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026930338 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.048705489 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.034036206 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.031537852 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.037296048 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.031014715 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.028251597 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.021184561 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026939041 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.034268559 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.028318449 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.5896e-5 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.040684209 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032751708 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040912613 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.028005778 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.025556741 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.028442996 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.054297464 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.101939769 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.027433262 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.021097489 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027904214 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.032546934 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.028660535 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.070500987 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037684288 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.02822493 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.021203683 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.032482893 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.0281678 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038946017 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026772381 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.026613363 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037808495 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.025113486 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043970573 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.032425729 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035526642 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.027987922 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.030684533 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.032452872 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.021010881 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020594073 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.058189767 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041898775 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.068397422 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023733055 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020047243 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.031195331 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031904372 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.036153035 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.02279071 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.04123198 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029960606 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.021171018 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.040856036 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.027093702 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021789154 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10291217 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.4469e-5 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 8.441e-6 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 8.52e-6 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.021259916 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020925057 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.031105727 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037133955 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021166746 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021825166 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.040580616 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.035987361 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.026532153 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.6016e-5 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 9.239e-6 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021702176 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037007471 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023528639 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.021257997 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.029309492 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.028078001 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02171161 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.058407878 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.032460584 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026943291 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 3.9299e-5 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.0418e-5 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022811999 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.033880642 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021727528 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.03013306 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026726844 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.040818325 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030750183 seconds)
  done (took 6.05996089 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.098520234 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.094914589 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.090777324 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.167669936 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.022639016 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.033088182 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.096427715 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.096490691 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.02718572 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.042421411 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.024139911 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.047836993 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041311851 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.056848412 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.05214816 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022992823 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 0.046682555 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040542636 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.097525204 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.16143361 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.023029381 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.042581359 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.041582519 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027656119 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.025764667 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.037236773 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.023294392 seconds)
  done (took 3.665312797 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029081311 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.037139874 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028800363 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.038521712 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.036595737 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02501466 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.035854424 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.030885436 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.036787126 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027936301 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025520308 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.041454944 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025137613 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.036496491 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.029733225 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.039863622 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.04021159 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029584526 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026933258 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026042849 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.035877273 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.042626672 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.040667188 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022044224 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.022051908 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.358e-5 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.0198e-5 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029657928 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021380843 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021646745 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019695712 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.033177087 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036571886 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027970732 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.296e-5 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.034010752 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.3956e-5 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.034282772 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.02439154 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021207196 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020926823 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027876886 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.022018679 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.5471e-5 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.041219836 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.033556536 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022477009 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.4786e-5 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025208741 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019831283 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.0332595 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.032029971 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.1893e-5 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.035939022 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02270201 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.9065e-5 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.9295e-5 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.03837993 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.029608382 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.034289121 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.02258144 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.02195891 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024409779 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023528654 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.044866599 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.4629e-5 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02180085 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.2832e-5 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.033768246 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.6992e-5 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 6.6468e-5 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.037107786 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019749173 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023987702 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.9496e-5 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.040442489 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.3173e-5 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.4717e-5 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.4311e-5 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.028164813 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023879272 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022148597 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.282e-5 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.021654387 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020879822 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 6.0328e-5 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 6.0826e-5 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.0644e-5 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 8.082e-6 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 8.061e-6 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024615114 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.029241306 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 4.58e-5 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.8914e-5 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.039091249 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 3.334e-5 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.038808379 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.5546e-5 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.027480141 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019678708 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.042248814 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.7817e-5 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.026132414 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000131508 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.039823877 seconds)
  done (took 4.366521978 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.059037581 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.033418625 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.038893899 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.064508979 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.042163972 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.026602727 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.034093332 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.034008864 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043136697 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.022235673 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.039262029 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.022060531 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.032280862 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.03692139 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.033393732 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.042710363 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.022389045 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.04027545 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.050644885 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022347985 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03433182 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.046435312 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.045145445 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.046214602 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.042664156 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039379253 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.052465154 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.022522631 seconds)
  done (took 3.162217799 seconds)
done (took 25.080825937 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.155996388 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.204481667 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.085989185 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.326574988 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.178368704 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.114806808 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.129664843 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.08608236 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.577410451 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.095139215 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.485042509 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.807064997 seconds)
done (took 71.411176001 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.185917113 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.192101306 seconds)
    (2/2) benchmarking "String"...
    done (took 2.278506249 seconds)
  done (took 6.560374577 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.396457459 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.1255151 seconds)
    (3/3) benchmarking "different"...
    done (took 2.147847115 seconds)
  done (took 8.750260018 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.055266167 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 4.948430104 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.284412217 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.898392971 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.595560551 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.108988608 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.790503383 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.790178836 seconds)
  done (took 31.498309063 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.468322709 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.217025345 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.431704163 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.352990753 seconds)
  done (took 15.552249448 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.393916238 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.256384975 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.255843187 seconds)
    (4/4) benchmarking "different"...
    done (took 2.192017088 seconds)
  done (took 11.186857328 seconds)
done (took 85.902406246 seconds)
(3/22) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.090676264 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.297866336 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.157770383 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.238244801 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.221035646 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.203999196 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.10344156 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.175999317 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.086555166 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.098834667 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.263847081 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.118450627 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.356040907 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.090399615 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.087719455 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.180724888 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.253525113 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.102886104 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.180255715 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.635272051 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.078040633 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.109690967 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.108416584 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.141834111 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.381087603 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.217950517 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.873623304 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.095699524 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.107837929 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.118516199 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.100347145 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.08744944 seconds)
  done (took 210.4503979 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.087338525 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.536216553 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.579066811 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.15765456 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.942359423 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.303967727 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.005350967 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.005585139 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.091309212 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.121937483 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.414807218 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.086853786 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.421335561 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.044725828 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.105089236 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.211140297 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.482092527 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.393070382 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.105751637 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.295423038 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.128021342 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.313330372 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.231041053 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.323198951 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.136990035 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.241708543 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.136781525 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.123800939 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.843778652 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.470286892 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.166461839 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.154048545 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.234755137 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.952936428 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.129538799 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.119050485 seconds)
  done (took 184.189863898 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.198103116 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.089813571 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.14158402 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.223904943 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.958373796 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.044041276 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.096755191 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.16285402 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.167121281 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.13817171 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.151945543 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.204452618 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.143369469 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 25.63648624 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.104167787 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.086161697 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.092095882 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 24.197712876 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.090443091 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.087015368 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.089217886 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.147555043 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.465208785 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.288992577 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.093304378 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.085725077 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.247073961 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.101491551 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.087356979 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.090032562 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.289644241 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.095384874 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.163322247 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.227827029 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.098905025 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.16485679 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.095748887 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.698167831 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.097585083 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.081659352 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.088249274 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.140743668 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.083204832 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.233254705 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.183742093 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.091645959 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.104070454 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.468642755 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.715838615 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.090812572 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.089776389 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.08714987 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.090627345 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.092212757 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.224053352 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.099113173 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.116079557 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.822875277 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.085522008 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.084720536 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.085120127 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.086849527 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.085983214 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.091723383 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.223537235 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.886314138 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.444877888 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.473632217 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.909478226 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.098246706 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.092207446 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.086955981 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.713098646 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.227963823 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.098275092 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.088344761 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.162378719 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.091596541 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.087473184 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.698456246 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.696404707 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.08675278 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.252050273 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.097189451 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.084844377 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.198330158 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 25.279023244 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.085131706 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.103112556 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.22919835 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.107198043 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.087093053 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.091116298 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.696684159 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.088329125 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.098039136 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.225772051 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.103307994 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.08506366 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.793116405 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.315472235 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.086191864 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.294131766 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.325495946 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.323417325 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.101572711 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.088698216 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.146932032 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.089414422 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.095515381 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.089776212 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.084665821 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.086494883 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.089809623 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.086615791 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.085561851 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.085313034 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.105523198 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.08319893 seconds)
  done (took 453.488466593 seconds)
done (took 852.414201854 seconds)
(4/22) benchmarking "parallel"...
done (took 2.085055658 seconds)
(5/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.163578457 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.464657581 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 4.536838672 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.180494555 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.154429458 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.121213819 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.252887226 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.2097831 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.199413196 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.138884408 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.185764373 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.147756829 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.144586926 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.206170216 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.210434836 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.173395663 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.148526565 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.816400754 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.195307584 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.14731987 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.124052758 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.180334033 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.145204705 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.196975856 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.225107719 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.134172873 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.522313872 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.20900556 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.161599324 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.185204315 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.280451898 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.153904866 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.264268923 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.212036868 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.206236124 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.221028249 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.223922183 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.261979052 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.135756991 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.272106676 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.208587172 seconds)
  done (took 96.406370054 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.989651799 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.261137129 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.365671635 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.30717694 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.70829952 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.367951463 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.382405497 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.256312339 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.258200053 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.369236017 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.372204981 seconds)
  done (took 28.73841225 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.65913161 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.266862727 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.36050319 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.235643287 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.32705288 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.360450668 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.252021367 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.264793715 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.261511917 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.360908925 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.380927152 seconds)
  done (took 27.821648628 seconds)
done (took 155.051991867 seconds)
(6/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.501314796 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.203816633 seconds)
  done (took 6.79678805 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.100065005 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.097165497 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.098084221 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.102006933 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.098817729 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.098350437 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.114638678 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.101697915 seconds)
  done (took 18.899452567 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.098392357 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.103271859 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.099133031 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.097267804 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.096831591 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.096836421 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.10134293 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.09783162 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.097600255 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.101398113 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.098534885 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.100805749 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.097706197 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.097797891 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.098620165 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.097453058 seconds)
  done (took 35.670345771 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.097202766 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.097834242 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.098129947 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.106331202 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.101910269 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 2.099569737 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.103499189 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.100678347 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 2.100413216 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.101142819 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.098303534 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.098908682 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.098216163 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.098103672 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 2.103564139 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 2.097789921 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.099949806 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 2.098366377 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 2.1002236 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 2.102688383 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 2.098092908 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.103716104 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.099531061 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.100212433 seconds)
  done (took 52.498994676 seconds)
done (took 115.957035926 seconds)
(7/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.187772715 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.347140252 seconds)
  done (took 8.624994926 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.110873025 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.110673215 seconds)
  done (took 6.309450077 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.446117307 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.126297185 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.622827753 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.376885299 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.129920062 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.128026822 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.540153891 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.130593941 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.127998548 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.127223029 seconds)
  done (took 24.845962803 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.138173576 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.300240022 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.282636588 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.22566451 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.290090111 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.145272139 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.155056918 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.142582174 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.330332598 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.133186295 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.264894036 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.306568133 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.268669354 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.341848852 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.154286231 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.285878865 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.321644338 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.257392415 seconds)
  done (took 42.434154459 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.128761562 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.131279079 seconds)
  done (took 6.347242817 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.250840188 seconds)
    (2/7) benchmarking "second"...
    done (took 2.14455569 seconds)
    (3/7) benchmarking "month"...
    done (took 2.234092001 seconds)
    (4/7) benchmarking "year"...
    done (took 2.220251626 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.145372202 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.13158445 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.143736426 seconds)
  done (took 17.362814551 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.595456209 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.130711479 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.154987261 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.587471712 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.76589137 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.96623983 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.751289535 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.958352705 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.881828042 seconds)
  done (took 25.88370948 seconds)
done (took 133.899074727 seconds)
(8/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.004712517 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.095330668 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.036437288 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.137837281 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.12986346 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.498821295 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.144152196 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.437366538 seconds)
done (took 44.587637106 seconds)
(9/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.237771248 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.580051593 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.600204105 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.610541625 seconds)
  done (took 24.885379375 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.105638959 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.581424842 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.10921283 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.540108533 seconds)
  done (took 26.453432343 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.555151777 seconds)
    (2/2) benchmarking "read"...
    done (took 2.684546039 seconds)
  done (took 7.336624213 seconds)
done (took 68.01091635 seconds)
(10/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.092493871 seconds)
done (took 9.186233854 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.366917334 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.295011632 seconds)
  done (took 16.752631691 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.509038768 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.67908951 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.519141266 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.239407525 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.282377647 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.748987953 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.498182936 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.380803745 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.139403002 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.648860138 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.961956989 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.947560987 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.007143267 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.141475728 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.346529545 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.156075017 seconds)
  done (took 83.300101138 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 3.931943633 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.48359153 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.832650179 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.683471926 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.144971635 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.6676137 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.702087933 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.707460419 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.227456193 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.366030978 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.26288462 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.451071938 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.32222688 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.014458764 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.384500223 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.534532236 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.676710634 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.718240425 seconds)
  done (took 56.208871796 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.168057543 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.593466313 seconds)
  done (took 11.848278032 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.133091405 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.14015847 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.152108826 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.141282643 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.155527051 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.146006282 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.135012885 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.135885425 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.179324238 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.142314105 seconds)
  done (took 73.550251561 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.186130197 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.874914851 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.162645607 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.876517149 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.318218679 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.466425396 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.282081419 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.484353754 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.214203448 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.093128695 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.097628718 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.434254696 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.940487108 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.955268633 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.602116349 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.87890237 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.122952794 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.5217809 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.335607272 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.336075274 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.062859036 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 3.738918017 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.218869573 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.774386165 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.083078673 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.162557613 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.01907445 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.22128551 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.180748266 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.947964768 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.130950136 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.096728318 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.768848713 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.10492905 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.380387469 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.285971802 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.652078261 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.201772916 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.292166058 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.474210262 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.1692362 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.198600335 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.094150476 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.204930803 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.332705393 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.050136788 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 6.794594687 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.01512555 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 5.869867347 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 5.934481265 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.08635928 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.245367984 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 5.906137649 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 5.897782094 seconds)
  done (took 218.867837583 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.091972826 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 4.859416561 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.479547336 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.107366384 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.638165532 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.599026553 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.106479167 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.607975493 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.094444863 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.676182366 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.719643659 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.306184803 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.088053678 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.096737407 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.109340449 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.088912516 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.715838144 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.69059906 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.092285625 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.092150696 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.576464041 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.574856759 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.595671905 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.099210811 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.411421744 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.59321188 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.504322673 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.353465415 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.093114561 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.08879242 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.626476729 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.097114084 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.099226842 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.099905755 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.534661297 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.591908223 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.609036829 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.096320198 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.096792365 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.088102 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.085787945 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.608060159 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.526301551 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.599073034 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.495666963 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.570817003 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.543423459 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.09659305 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 6.694239475 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.552960291 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.916369858 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.82512696 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.375505383 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.088830026 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.097116571 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.098528434 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.097437455 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.577283665 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.391445942 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.353012397 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.096681652 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.101034437 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.098114162 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.177194929 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.096724565 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.351690943 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.092492474 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.097915757 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.290711931 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.298403811 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.29349717 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.573496296 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.509794239 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.123449863 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.094341049 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.532438879 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.718255012 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.619908465 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.093977147 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.230210706 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.689056039 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.15465667 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.568359653 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.808782274 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.644230699 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.575248163 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.766164256 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.087497375 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.381971301 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.53217091 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.993956551 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.715681148 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.468226992 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.102630443 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.100796083 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.099636083 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.086908061 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.469845758 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.099244365 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.086765649 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.583725948 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.49340135 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.404540006 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.152486591 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.325757323 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.096139604 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 6.733465313 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.101444658 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.589425755 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.680329924 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.094674067 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.108137811 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.406806332 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.608418165 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.105923522 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.100426381 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.718916412 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.098965877 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.568225774 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.103194737 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.664558 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.09610657 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.67955096 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.093549444 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.674346725 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.955266741 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.604326872 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.097078392 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.078448034 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.647419216 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.492993153 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.049505918 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.098048833 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.095032572 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.606468493 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.101966508 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.096238375 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.878051799 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.098268027 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.38064217 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.099358935 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.081441147 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.312540387 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.615376774 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.096841461 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.060103898 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.678425077 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.571926253 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.100914214 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.482967703 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.097410442 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.035337717 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.554857994 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.103899796 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.106790494 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.087853416 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.099622496 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.494611859 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.513202718 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.917272625 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.566909013 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.431705835 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.095613661 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.584094678 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.385536096 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.46099279 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.091739023 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.62180183 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.093307854 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.095329282 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.095716677 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.965025763 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.940518887 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.108494247 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.101067019 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.126794228 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.091260129 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.087990642 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.864430311 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.098019657 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.094757971 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.602265158 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.101894335 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.593109831 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.106713089 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.098901891 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.086786762 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.088909908 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.088278777 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.097111336 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.106115507 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.094242843 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.043702309 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.538435691 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.924180722 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.872344676 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.609698224 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.291493223 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.790942613 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.68540758 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.118550884 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.061665787 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.098387475 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.617099804 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.098628608 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.356224495 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.611284772 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.11161775 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.041032846 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.025814382 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.061115461 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.655949566 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.09776435 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.09391889 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.087990509 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.743680381 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.616291762 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.092873593 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.163870795 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.486538908 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.480785305 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.508721994 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.095490712 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.088656395 seconds)
  done (took 1067.60685269 seconds)
done (took 1530.239323485 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.117358635 seconds)
  (2/4) benchmarking "arrays"...
  done (took 7.097937393 seconds)
  (3/4) benchmarking "structs"...
  done (took 7.137621449 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 7.092790186 seconds)
done (took 30.547615514 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.100932949 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.099012203 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.100406902 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.104328621 seconds)
  done (took 30.500328075 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.435519715 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.419456359 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.273623456 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.328880756 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.67368949 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.233043944 seconds)
  done (took 16.460834119 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.068480757 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.089148174 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.08958911 seconds)
  done (took 22.335026161 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.489085604 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.584505526 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.20168122 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.169480044 seconds)
  done (took 11.532538139 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.131225703 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.134795301 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.126105853 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.135523405 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.130221695 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.125122104 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.089652239 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.139169375 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.143177476 seconds)
  done (took 26.24756467 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.708452335 seconds)
done (took 112.881931557 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.345627181 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.28127483 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.097274305 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.177993334 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.21561018 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.409285001 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.279249619 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.168411115 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.186535721 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.097337771 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.118901187 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.289994077 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.321708094 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.344699528 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.522311595 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.538483022 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.560434366 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.458082879 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.311247475 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.293500319 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.120183031 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.114896643 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.157713591 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.629407046 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.266878288 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 2.444578942 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.319615168 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.190527044 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 2.818142841 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.116579649 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.347588856 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.168360462 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.24648028 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.100866444 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.939727564 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.112285494 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.169885798 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.327103507 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.650962614 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.304632926 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.381928611 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.157343026 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.470116575 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.336601051 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.304078981 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.089579176 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 2.396234365 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.10019081 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.185785932 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.484311621 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.332151319 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.181292584 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.148924674 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.098415058 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.120138996 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.314962714 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.115501913 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.398465432 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.123991473 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.615720523 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.186381853 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.281192496 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.108439736 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.454069189 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.164731651 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.167597895 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.780884758 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.537267143 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.7147379 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.539764605 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.060676184 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.126447931 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.266203947 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.107462558 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.09089009 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.476616131 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.132312349 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.031988773 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.410988191 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.699689992 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 2.510832785 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.326510115 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.166025986 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.518001452 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 2.227369621 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.122203532 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.107180001 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.125893382 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.237118155 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.149479733 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.102326594 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.643503805 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.297817414 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.187336837 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.628592343 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.089506578 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.186140266 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.769929883 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.433795986 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.205722834 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.401805005 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.089922175 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.20361674 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.313302675 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.17772839 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.684781584 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.646643381 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 2.385892485 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.472770437 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.352913255 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.529045526 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.33525444 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.447068165 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.347722634 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.261710802 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.204897989 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 7.145975287 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.090843567 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.099074057 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.583661123 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.793155265 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.370954784 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.201860667 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.539226338 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.119953525 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.108715701 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.48653068 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.330986996 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.295306133 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.118166212 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.139112036 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.101163081 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.462143292 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.177126384 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.092235985 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 8.608164576 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.349950181 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.101733747 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.623113154 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.379741934 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.091386533 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.734289093 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.608240667 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.51340204 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.106703703 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 2.4291902 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.275889537 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.172239968 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.407850879 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.966043547 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.774081492 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.094972281 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.122935388 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.101239385 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.155021636 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.032685961 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.298243985 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.292807347 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.586830531 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.616247439 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.008611248 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.289803245 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.686362632 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.102154825 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.391272788 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.127443505 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.251895767 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.382507596 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.100031937 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.19989533 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.214927268 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.226364473 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.180494263 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.277497415 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.204294914 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.173214537 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.091855021 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.267808251 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 4.743002311 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.281831645 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.274485939 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.114621966 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.266399374 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.15588231 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.114506649 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.378634088 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.311447439 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.452261149 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.238341568 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.550395407 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.2513132 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.397870199 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.500366759 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.230932916 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.372592876 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.332174429 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.38872175 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 2.402433854 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.304326087 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.128092631 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.597029585 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.457484119 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.197974082 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.103898029 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.151566466 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.39569427 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.110189444 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.276172473 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.140180721 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.393983557 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.721750085 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.595140118 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.51698188 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.411405397 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.313650233 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.630632484 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.30618512 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.191930771 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.427325318 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.371025807 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.146924795 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.327627328 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.493475576 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.418367272 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.258819789 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.376859636 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.506559265 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.14384896 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.098381987 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.094339324 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.524452301 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.262697546 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 2.412152085 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.135555955 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.275859831 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.485830495 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.548205203 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.43177689 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.333436856 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.547340521 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.136375482 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.290717828 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.292568173 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.72695864 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.332402073 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.305826708 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.488151487 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.169715155 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.625111736 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.590099704 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.756573504 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.33334118 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 8.699687902 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.288693866 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.479976659 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.401479218 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.384684044 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.282878134 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.669003536 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.239693853 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.133249814 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.244932831 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.066484592 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.501951053 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 8.226438994 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.61061445 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.28151502 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.493995319 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.12546763 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 8.218134846 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 3.091078754 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 8.467754998 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.537290093 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.524591843 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.184047701 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.418503745 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.181748496 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.047918369 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.05156245 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.3924071 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.127421051 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.258604039 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.235511204 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.495544775 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.126623279 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.387085059 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.037458483 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.230885018 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.127844854 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.486646275 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.216326115 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.223682006 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.124055667 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.246848611 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.840023438 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.193431491 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 8.873185341 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.936744174 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.386120291 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.679222708 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.244430395 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.279587278 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.430748066 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.504918855 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.368944624 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.338643467 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.747418911 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.204234183 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.144285723 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.155961815 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.503782027 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.401479339 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.034205259 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.650825917 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.118803006 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.118546689 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.329606881 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.325774413 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.202175988 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.163760521 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.107899386 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.394343091 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.147963395 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.369564155 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.276900427 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.282502064 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.106318499 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.780723531 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.043953959 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.248339764 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.279396677 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.473610104 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 9.672361207 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.376409162 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.09383685 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.439449783 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 9.012014669 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 3.102758887 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.402976215 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.351598198 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.156811094 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.206087834 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.188713646 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 8.997084169 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 3.170623315 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.397490658 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.534789337 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.295211697 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.111580048 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.171876461 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.204166357 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.410807333 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.112999321 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.288915728 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.401591219 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.219602658 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.174852452 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.103181424 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.131605469 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.781400491 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.417125157 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.350822043 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.124829388 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.312288667 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 8.073814957 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.550664994 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.113635311 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.16066472 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.178982193 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.293404582 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.19242129 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.330399347 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.09373702 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.143701881 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.333437514 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.123477032 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.344964135 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.117338179 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.766310367 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.201519286 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 9.819238277 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.930878238 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 13.534081763 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.425760571 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.283845964 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.718778218 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.514033891 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.36965409 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.137727083 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.109088487 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 10.176989945 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.191768421 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.179658087 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.39287247 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.108302482 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 9.460367658 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.343270065 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.969012155 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.446023383 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.268506322 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.060497641 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.299453204 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.100933936 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.769941559 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.125522013 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.101049557 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.184993013 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.180499629 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.250397844 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.112877924 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.140708091 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.099626014 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 11.318037182 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.125430457 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.192975373 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.345544887 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.42159744 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.346487202 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.187835565 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.994923179 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.14557941 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.187093872 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.271905182 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.227495165 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.109471554 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.343762167 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.1768896 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.57428112 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.182522038 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.114568303 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.287064683 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 4.684999809 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.392440179 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.15619562 seconds)
  done (took 1418.09074292 seconds)
done (took 1420.189010815 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.115725719 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.108239293 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.125703591 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.113659386 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.106280231 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.125630979 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.173166365 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.147108595 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.130199642 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.120871672 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.211124447 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.121213072 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.127049996 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.234334319 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.109653517 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.12225439 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.113202601 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.119871267 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.141186797 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.126187448 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.127923366 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.11511497 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.144297606 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.124327252 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.117789409 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.116187814 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.13306063 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.1205298 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.188581125 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.140289645 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.116525058 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.106974338 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.125679053 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.123835919 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.14771289 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.169863809 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.146455982 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.10488693 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.132372843 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.124061047 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.208554519 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.122541652 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.104517432 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.118842969 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.129921419 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.111109007 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.157127704 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.112817733 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.127437351 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.111244043 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.110475518 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.169506229 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.109740031 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.248596949 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.123503146 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.112717618 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.142690346 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.120471798 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.118812935 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.120295687 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.120519809 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.134890322 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.14083182 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.120575904 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.111016375 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.145632755 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.165749982 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.15395851 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.147247122 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.132509017 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.129245668 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.111621965 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.186646291 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.122739402 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.111213945 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.125568342 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.165146739 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.123684975 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.178066571 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.142541102 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.115085153 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.11617402 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.133992051 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.208978509 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.121301313 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.131554184 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.11215262 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.129002837 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.120107413 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.108282468 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.117956332 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.131638691 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.156307663 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.106387399 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.113052458 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.131258473 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.151967718 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.138105055 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.153488674 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.140806452 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.131566957 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.129480763 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.124653358 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.13552713 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.13521207 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.144882887 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.146812116 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.1092503 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.130249524 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.127778513 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.105505874 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.159082703 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.140119608 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.12606499 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.131171637 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.182938351 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.154816069 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.113485895 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.128218743 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.151625589 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.115693206 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.153458307 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.114796393 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.144909341 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.116042135 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.121063508 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.11082869 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.105788852 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.272667942 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.156449231 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.144002677 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.178134387 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.125227696 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.125563217 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.143409287 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.118843403 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.117645234 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.234048301 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.175198309 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.116420999 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.125806018 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.128936036 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.135800243 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.121028625 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.113564022 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.125827202 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.114982851 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.112555037 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.117687263 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.162622342 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.154266985 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.112233421 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.128806404 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.120257907 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.123672914 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.129799898 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.131208162 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.114424677 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.115555425 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.120408435 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.146221014 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.156990709 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.143974112 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.125056429 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.131833137 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.136143794 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.153377499 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.119819695 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.116692 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.240860263 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.162104056 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.151590399 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.117829333 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.121992614 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.135632692 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.12055592 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.107229681 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.131603372 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.279254369 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.121235636 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.118511452 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.128192411 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.112976254 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.12240139 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.129124801 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.123451898 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.186384146 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.127259441 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.120056487 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.18186102 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.119956029 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.113763342 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.127074869 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.116591332 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.231207162 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.123550114 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.117358347 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.118567671 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.133820602 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.124509391 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.121283328 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.131229424 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.214639135 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.120651529 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.118186725 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.166368487 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.127947969 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.117269707 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.138445148 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.112460548 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.142929336 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.129993828 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.120937983 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.121113744 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.157207204 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.111854499 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.119293058 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.116465638 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.154853575 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.122978505 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.118126705 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.155328294 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.148306946 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.121625591 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.122820299 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.117351787 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.116887144 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.114739592 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.178113793 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.123358754 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.143903998 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.232945281 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.157303509 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.143302206 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.109390442 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.131147314 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.163310992 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.169774094 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.12345901 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.124090402 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.159509308 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.12399912 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.104589494 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.116696914 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.133707456 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.16764021 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.150557759 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.120960347 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.133983061 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.112569871 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.121761644 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.189410083 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.118383519 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.127520975 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.234509589 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.118170649 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.14367096 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.13369222 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.211387577 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.117700845 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.128906402 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.114401347 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.143680131 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.127174791 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.130678563 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.11229468 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.126397991 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.112581508 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.13636959 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.12155472 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.176095219 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.118606606 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.118109349 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.129689029 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.125510663 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.11701943 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.120853909 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.109882024 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.125026082 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.107361046 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.108995816 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.134553761 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.138157196 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.129533375 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.149874048 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.133687159 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.245086303 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.12504328 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.115467765 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.142355966 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.128094977 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.151827085 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.121083327 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.122167816 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.145821911 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.129665236 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.123893573 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.145297121 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.128271821 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.152690019 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.151386478 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.121615023 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.111764086 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.122575066 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.207734233 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.120975376 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.114541729 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.120184691 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.148791018 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.145968689 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.132698316 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.173668155 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.167851328 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.112427034 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.276511136 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.120770366 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.13168324 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.140327092 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.118114227 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.135888272 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.123757819 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.12174882 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.124693371 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.273988263 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.175303125 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.144818655 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.1354699 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.13500388 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.119931754 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.118469962 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.168737707 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.121771157 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.123955261 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.111494103 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.117705676 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.12914622 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.120414525 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.122590334 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.156407154 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.136375825 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.123408168 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.128378889 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.111940432 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.111344087 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.114745819 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.16976834 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.12322227 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.11937898 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.125037735 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.127294924 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.134414699 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.128149736 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.148169595 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.129339755 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.114705615 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.320248281 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.133490654 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.121464676 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.149654398 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.10520649 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.120762194 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.115469731 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.173127123 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.153007331 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.128247182 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.127417862 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.12507723 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.130031358 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.123084202 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.108570935 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.123121817 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.208872092 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.112945223 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.119327121 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.149734535 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.124294127 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.152399863 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.131859718 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.108793239 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.127837317 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.119007438 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.121916856 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.1806408 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.12064276 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.137396239 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.272883883 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.14131427 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.123993456 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.121641507 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.121569892 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.120349265 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.129745579 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.148224517 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.111929664 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.124120584 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.117997811 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.131228249 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.153341013 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.133867882 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.132908067 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.120542919 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.113151842 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.12050093 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.118019268 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.152746697 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.121265543 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.125450312 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.152553857 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.119525556 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.120268072 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.180469386 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.231851217 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.122100992 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.140905589 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.234076623 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.245633324 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.141603627 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.119291726 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.124659661 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.153406998 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.128932561 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.114255755 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.121481625 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.111500305 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.121962096 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.174596567 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.128149474 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.121958087 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.119712365 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.128031613 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.11313984 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.121142977 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.122092338 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.280439631 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.181768983 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.116291925 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.132809845 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.185830795 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.156424629 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.147567612 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.148495139 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.117097709 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.15029344 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.117683268 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.189871073 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.124654377 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.112229303 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.123965734 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.12515746 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.157579129 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.130686184 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.115492988 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.119618152 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.111343543 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.121271844 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.143176566 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.124972633 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.147361461 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.124561828 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.150698509 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.124446718 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.158336032 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.12609036 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.129846275 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.144948875 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.120457834 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.113030804 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.137586569 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.321001388 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.135241885 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.118268846 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.113564955 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.1273165 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.129002754 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.157618305 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.143350065 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.117059489 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.124898869 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.120994068 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.145852382 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.129892163 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.158600633 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.113082657 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.177634453 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.117414705 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.130764762 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.24664518 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.140701945 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.119115455 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.133457446 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.11638477 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.165467645 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.132846437 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.127000047 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.127552669 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.118634025 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.15677352 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.120271419 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.32031596 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.131657887 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.117132489 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.109121753 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.127498215 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.130862817 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.125424542 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.119869732 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.145122808 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.123573093 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.134605692 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.115554695 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.125551906 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.129311679 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.124239639 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.118152401 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.154299676 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.121017714 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.122991203 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.321462979 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.149780405 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.146732153 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.125740566 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.125883901 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.114074444 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.118110804 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.150395999 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.124713937 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.122256083 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.116616004 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.111490637 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.154239776 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.140076755 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.137388089 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.118063776 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.173428277 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.114781293 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.128755497 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.120649378 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.123592784 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.135536498 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.130910274 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.149524785 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.132937622 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.161308627 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.131018802 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.174689496 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.137338417 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.108522662 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.124433857 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.130558182 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.146895224 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.126472873 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.133786874 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.142449943 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.133121139 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.12424409 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.13796524 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.158233618 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.117901709 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.173652034 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.27655207 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.130301409 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.122440845 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.124212334 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.124749438 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.115182342 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.20049103 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.167473374 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.182968077 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.152089209 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.123402934 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.149026608 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.229489477 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.136936516 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.122076303 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.125033638 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.123792786 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.135165145 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.141244248 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.154077697 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.116436814 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.169811704 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.134554961 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.126236738 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.16645788 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.137025112 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.165552886 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.16127936 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.203095403 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.127670123 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.167822577 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.124022277 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.192472055 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.13791788 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.155870528 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.134492164 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.126677911 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.23456099 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.13018049 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.133918914 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.153681498 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.112518243 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.142019717 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.158855463 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.123184989 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.121174742 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.121007867 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.126254109 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.109557252 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.124052761 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.128435742 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.150929774 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.137530846 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.109682239 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.138318518 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.176029155 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.137860193 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.140260446 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.1442177 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.132792278 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.115496195 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.135995975 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.13222561 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.165373989 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.218298393 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.263427936 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.299562806 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.220601696 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.147534764 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.304327639 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.185200262 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.187513048 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.180098987 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.18543501 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.159907628 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.148869189 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.1267729 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.127462482 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.139590239 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.116902883 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.129685657 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.128624133 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.179901732 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.138004767 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.12907 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.133876412 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.13488916 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.120913521 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.122454638 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.149889687 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.138826905 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.132692923 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.125441656 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.118350947 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.128421286 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.13883031 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.120335313 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.126064329 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.125784066 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.117941783 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.195285503 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.118659695 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.219341161 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.13534191 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.125243693 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.118063095 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.129258511 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.278495079 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.152249181 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.124476992 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.117277682 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.123040748 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.141996542 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.128519008 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.125904072 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.180390991 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.133402057 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.132279411 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.195445637 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.154598253 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.162912514 seconds)
done (took 1457.036415448 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.478206005 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.100361529 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.39949902 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.295263551 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.463149584 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.373467323 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.190845783 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.56931994 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.17154527 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.523959489 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.295363786 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.098135949 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.102272156 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.311119076 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.494247809 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.330566218 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.175038927 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.29359775 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.644653765 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.493671445 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.102169861 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.268949225 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.315313636 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.420760223 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.102485899 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.105666158 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.366687509 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.231104136 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.356992122 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.099471315 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.099847646 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.297926463 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.36528149 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.09942702 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.10270285 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.099243522 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.371950682 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.104514886 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.348083351 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.482739583 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.337086492 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.103086246 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.09937035 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.099498632 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.21089912 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.377291527 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.190427613 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.099798903 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.102061068 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.099910779 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.350611555 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.09984113 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.099165636 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.35350508 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.284423222 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.098714535 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.477663471 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.514177604 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.492119725 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.42787323 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.345992927 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.529501304 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.418022099 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.298938782 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.100000044 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.393468932 seconds)
  done (took 262.649563234 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.42553696 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.247732294 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.444411856 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.69544455 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.40259991 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.44729931 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.747989054 seconds)
  done (took 19.510714956 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.055529327 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.158942759 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.39966103 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.396273069 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.166386435 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.267344423 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.230254227 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.103448417 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.332877046 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.197792931 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.434833036 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.395133162 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.098653908 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.09976033 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.235470884 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.439817196 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.00796213 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.175211911 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.155846431 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.43883657 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.100637175 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.100074689 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.283784248 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.148691734 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.175246964 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.196940125 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.229409099 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.01786261 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.151445192 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.150259316 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.174899982 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.160304267 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.161318058 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.10126802 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.137825102 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.444857298 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.161193874 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.165883729 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.288200685 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.109185683 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.148895021 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.167168797 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.286168676 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.174578201 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.148528355 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.328008428 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.149789881 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.171751999 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.149926438 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.158636996 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.30679432 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.160028078 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.144121771 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.102122283 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.351431564 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.10390344 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.178852866 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.160758612 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.159004326 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.213057281 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.157000957 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.44275913 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.394968333 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.14654141 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.396899563 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.458473192 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.163281945 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.14933015 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.148979386 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.428383877 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.158883758 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.401029994 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.164033442 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.206732937 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.165157905 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.268900282 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.331147571 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.868366824 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.836594295 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.101471448 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.340968121 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.150743395 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.302855761 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.994673715 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.099879595 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.151183267 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.16823872 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.548918954 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.996682201 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.1654814 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.496607412 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.150696347 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.280535901 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.205110082 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.147687569 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.159355646 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.302385784 seconds)
  done (took 281.202856138 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.231774424 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.399404005 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.306473738 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.656485673 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.659118553 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.23386788 seconds)
  done (took 19.588458583 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.495300286 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.744971201 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.179295758 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.185380893 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.204722724 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.145284096 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.144693688 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.242663019 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.009555667 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.171708325 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.144487858 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.168095054 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.145943001 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.274796049 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.146252632 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.166372415 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.149313214 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.190276016 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.163994328 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.221259881 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.226443081 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.204030034 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.222201019 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.679939303 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.921621831 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.166033907 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.891812301 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.168230699 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.170644728 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.248855092 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.445593653 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.144424656 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.653030615 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.913297555 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.697786265 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.678644628 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.015798187 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.167492098 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.175783598 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.14634188 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.170642353 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.221372818 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.181528479 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.16771453 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.397458701 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.374647368 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.945277115 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.458211836 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.149001898 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.167715607 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.168175245 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.197889223 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.147081838 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.169652783 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.690448407 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 4.168571501 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.865378842 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.146581533 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.209489202 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.678685014 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.955263155 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.146169908 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.472037209 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.836764228 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.100787045 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.168594697 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.685082364 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.006965454 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.221341819 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.180771616 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.168508265 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.18088343 seconds)
  done (took 187.151571302 seconds)
done (took 772.206979732 seconds)
(17/22) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 37.202926697 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 34.292794533 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 33.225235556 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 33.536442246 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 33.646360167 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 36.289290835 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 33.42527326 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 34.212405744 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 34.562762216 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 34.589741261 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 34.221376384 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 34.312420187 seconds)
  done (took 415.618947178 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 43.167151644 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 34.007788369 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 35.552206502 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 34.606971127 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 35.944114918 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 35.578091534 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 35.579883792 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 38.333896292 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 37.446071853 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 37.126901592 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 36.323241323 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 38.073876208 seconds)
  done (took 444.6715133 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.101438716 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 38.847487673 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 39.365726874 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 38.527229724 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 42.159340612 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 39.218022235 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 39.260259821 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 36.64868779 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 35.747607396 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 35.43376513 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 39.711515271 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 40.0340039 seconds)
  done (took 469.189444525 seconds)
done (took 1331.584518312 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 10.569416858 seconds)
  done (took 15.601098138 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 10.273815345 seconds)
  done (took 15.513209722 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.026255902 seconds)
  done (took 15.061098121 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 10.088825647 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 10.094617023 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 10.040965441 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 10.037053789 seconds)
  done (took 45.463526999 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 10.568707361 seconds)
  done (took 15.595075934 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 10.023270084 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 10.122802772 seconds)
  done (took 25.620913272 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 10.346718405 seconds)
  done (took 15.383983 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 10.715995044 seconds)
  done (took 15.855786017 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 10.069015966 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 10.094394232 seconds)
  done (took 25.212562961 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 10.032118079 seconds)
  done (took 15.069637981 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 13.014495628 seconds)
  done (took 18.129760722 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 10.059110928 seconds)
  done (took 15.309881835 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 10.177146975 seconds)
  done (took 15.226561551 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 10.45613962 seconds)
  done (took 15.497835757 seconds)
done (took 273.608444809 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 10.03944638 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 10.031168147 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 10.127313501 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 10.115474021 seconds)
  done (took 45.354617578 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 5.350596612 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 5.349186457 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 5.377010299 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 5.384279196 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 5.27224703 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 5.265175394 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 5.34962273 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 5.331939241 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 5.268397708 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 5.395145216 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 5.335316283 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 5.393902322 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 5.384483582 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 5.379251437 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 5.376556267 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 5.395162502 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 5.378641773 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 5.346725736 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 5.272335971 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 5.379038655 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 5.39676357 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 5.38041081 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 5.71688809 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 5.712606311 seconds)
  done (took 134.221128371 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 5.699310607 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 5.959734786 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 5.506219603 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 5.557855433 seconds)
  done (took 27.756751504 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 10.026663281 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 5.434446847 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 5.385789926 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 5.439862946 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 5.272461897 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 5.253122077 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 5.255157116 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 5.130792328 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 5.242619534 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 5.097132018 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 5.094325169 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 5.665461002 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 5.364797275 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 5.36611582 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 5.444043064 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 5.239897006 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 5.06585882 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 5.061326128 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 5.224987599 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 5.425076057 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 5.244738305 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 5.483802478 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 5.278321149 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 5.216226388 seconds)
  done (took 136.744143685 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 5.840467345 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 5.378064785 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 5.935056236 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 6.011533814 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 6.262537 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 6.142725737 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 5.899874473 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 5.894288603 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 5.182795413 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 5.929540965 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 5.768135343 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 5.900686707 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 5.555463425 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 5.958579716 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 5.84917442 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 5.105783917 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 5.112745519 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 5.906892879 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 5.90556006 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 5.466265677 seconds)
  done (took 120.037943852 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 10.030463118 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.120405548 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 6.201006023 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 5.469804653 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 10.039629185 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 10.123467419 seconds)
  done (took 53.019591905 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 6.363664216 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 5.148940441 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 5.217397183 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 5.132190279 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 5.139461582 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 5.112223108 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 5.717533798 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 5.129940767 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 5.25801481 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 5.283818686 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 6.0366401 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 5.25650765 seconds)
  done (took 69.836166623 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 10.042678778 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 10.03749088 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 10.028292034 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 5.164442465 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 5.658055324 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 5.724428472 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 5.941587962 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 10.038573921 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 5.833574036 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 5.273224262 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 5.652530131 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 5.17525899 seconds)
  done (took 89.615035318 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.099749007 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.757343293 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.03372685 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.031899433 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.027520697 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.033779554 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.041273505 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.705323327 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 8.508461949 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.813022258 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.024670525 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.03191596 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042082917 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 9.84748634 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.030156433 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.030899607 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.030489484 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.114056923 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.039497318 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.050170308 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.031422126 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 5.137350124 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.044621755 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.027353194 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.201987991 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.043815566 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.138081398 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.029841005 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.038565571 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.023674636 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.03069655 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 10.041915354 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 7.86350653 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 5.339003279 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.029566766 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 8.498744177 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.042013075 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 9.949516426 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.034734267 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.135318568 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.156334632 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 5.165084078 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 10.031578717 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 5.746549976 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 5.294534733 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.035580172 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 8.687684822 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.212365303 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.190900463 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.034809952 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.050433491 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.029266671 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.148773398 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.039118984 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.037776624 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.033835303 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.02608728 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.025425897 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.062211452 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 8.938089024 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 10.035645672 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.029076105 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.033310038 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.031064923 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.02822275 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.040051693 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 5.9530045 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.126768993 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 6.426164635 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.779502649 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.446211539 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.026611172 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.029917013 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 5.117372543 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.038743319 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.041774347 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.040470708 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 10.037817277 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 10.037178644 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.039801097 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 10.034302591 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.072940917 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.037575678 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.038097246 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.033294428 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037530845 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.030756684 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.034366156 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 5.068687249 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 10.036085847 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.035880405 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 5.108942618 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.151527596 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 5.194506903 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.038851566 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.036092641 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.034517891 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.036900312 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.038921055 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.041670888 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.040194761 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.062480495 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.036937947 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.064484358 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.044429231 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041650093 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 10.039915969 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.037315817 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.038721485 seconds)
    (110/608) benchmarking "5d"...
    done (took 7.96801557 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037991827 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.034134622 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.033919982 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.040415413 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.03358595 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.037635595 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.033845987 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.088292137 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.052519354 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.039817124 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.035501034 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 8.096778745 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.035270288 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.024962866 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039255781 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.035133601 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 10.028641425 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.03535186 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.057047052 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.037164618 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.038163847 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.037671209 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 5.745385577 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 5.284605694 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.037839077 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 10.032849178 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.039777373 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 10.041332253 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.04370598 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.043161931 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.546075763 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.045571624 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.036727637 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.038431879 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 8.067411581 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.043576434 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042034066 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 6.553450855 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.087750416 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 5.071867678 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.05244072 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.1695461 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.059269944 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.036493951 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 10.041828492 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.043056551 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.037677717 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.137372797 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.044863574 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.034383491 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.033286466 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.13228091 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.02812768 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.057101802 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.032542428 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.123063303 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042371242 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 5.774890661 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.041581174 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042296521 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.033576795 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.0442784 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.038411338 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.044314207 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 5.307369741 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.38556749 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.159811423 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.212446499 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 6.6372754 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.061753312 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.047462803 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 9.970622983 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 10.03367803 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.0633096 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.040599668 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 5.300305631 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.032763592 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 10.036855609 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 10.032975493 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.074085149 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 10.041309142 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.038332648 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 9.869886341 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.042202714 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.044455933 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 10.04604401 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.039273708 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 5.452482762 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.038757775 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 5.496400759 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 5.188507793 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.037514829 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.040445692 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.037889039 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.037650221 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.037660671 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039372664 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.04230956 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 5.573471337 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 5.846720716 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.132815407 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 10.064237737 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.014626856 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.038642886 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.040015801 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042008868 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.052314551 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 5.547801748 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 5.505588092 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.030026364 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 6.648430421 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.050757065 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.033711467 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.919197357 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.040634267 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.034190672 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 9.175139244 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.043187528 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.030073055 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.032802488 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.034330147 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.031168401 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.083055419 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 6.442737319 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.993790026 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 7.395963202 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.044027358 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.540325389 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 5.320540228 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.058868284 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.031584238 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 5.179518396 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 5.1975129 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.125928224 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 5.761877252 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.254986032 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.117153353 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 5.538563319 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.064742441 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.460384052 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.393138898 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.047651855 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.355417531 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042073861 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.041412168 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 5.084584098 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.033845851 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.033976139 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.786992204 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 5.064358975 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.311161133 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.038783317 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.043658249 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.038511801 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.133598333 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042646022 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.043717074 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.045317058 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.036307425 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.031401488 seconds)
    (271/608) benchmarking "4d"...
    done (took 6.750353293 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.842870483 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.039575828 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.035033116 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042366277 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.048344232 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 10.035743097 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 10.044222498 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.031998884 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.05179806 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 7.81577775 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 5.167147115 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 8.172160096 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 5.100867756 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.412262119 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.055612322 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.048905491 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 9.879229591 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.045255687 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 5.215249721 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 10.035385027 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.384657585 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.03277 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.036848121 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.837901591 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.032974768 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.033860014 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.044305749 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039542034 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.21181146 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.034214164 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.034942393 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.473423297 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.064714389 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 10.070709979 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.042928011 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.032372689 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.031205717 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.035476641 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.048110813 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.038114064 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.050323591 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.047604677 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.049417129 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.04479723 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.046925256 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.05134886 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.041701903 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.125370288 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.030555926 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.040671353 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.032702014 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.038437933 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.03489427 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 10.048189317 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.03486408 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.176811394 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.048559109 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.043924683 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.047433508 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.049589619 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050868428 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 7.901606384 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.0575139 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 6.006173496 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.036365427 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.033804535 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.03292075 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 6.006504093 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.066319599 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.04644728 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.050563509 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.035694059 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.039291145 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.04712345 seconds)
    (346/608) benchmarking "3d"...
    done (took 6.751015359 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 6.159107381 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 10.035612391 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.049697583 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.03094782 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.036148064 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.052922983 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.032194925 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.038431778 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.065245149 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 9.456213705 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.05230014 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.039824815 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.043462802 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.046901377 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.045424315 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 5.532794656 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.051647341 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 7.391309776 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 5.183550058 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 7.895758563 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.056938512 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.041069722 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.044570619 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.33004436 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 10.050307605 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.361650161 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.036553445 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.049770672 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.0392915 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.042366707 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.049095831 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 5.069375528 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.033588096 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 5.271653911 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 10.041391646 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.032416046 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.070114748 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.048707128 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 8.867842858 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.065810887 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.031826091 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.034386538 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.036304551 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.030376267 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 10.046089211 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.034648099 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.034535705 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.038824185 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.879078437 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 7.765551593 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.847994571 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 8.843856219 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.037337536 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 7.924735592 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 10.034844151 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 10.035009799 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.037214857 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.042960741 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 10.049942902 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037796773 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.047526274 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.045258082 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.079244214 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.035323638 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.15640526 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.046015016 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.051596857 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 5.542325391 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.054363894 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.03826929 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.04752578 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 5.076850571 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.055869647 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.047553749 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.04345141 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 8.848460397 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.044787736 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.052797485 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 10.044130859 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.047336451 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.0469406 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.043407535 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.041786478 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039108847 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 9.891729989 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.051025465 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 10.041077962 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.044818698 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 9.765950806 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.056349041 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.048962486 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.420952454 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.239728056 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.113704645 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050914276 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.047307506 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.041799765 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.044175688 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.224696844 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.051020951 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.045453302 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 5.312761994 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.06188718 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.050981483 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.078556464 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.048878603 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.041988427 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046982641 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.040505708 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 5.348951676 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047174785 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 10.065210559 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.045735635 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.056409866 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.146177874 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047396338 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.055092742 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 5.322343129 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.044803071 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.049409048 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 7.911323832 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.065092801 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.05866722 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.046540501 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.047625452 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 10.164650662 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.331954072 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 5.607508897 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.053442386 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.048928487 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037998189 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050965567 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.052667203 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 8.777403713 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.043419774 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.049366912 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.050885545 seconds)
    (484/608) benchmarking "6d"...
    done (took 9.678015445 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.139862558 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.037927724 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 6.022894194 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.057983679 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.038193213 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 10.044031481 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.888985297 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 10.07414146 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 8.504097279 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.075089252 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.073364494 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.053149309 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.041674225 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.050293455 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.052013857 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 10.043560767 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.799610904 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 6.037276929 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 7.425186569 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046993497 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 5.461130178 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.050326417 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047332846 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 10.045493804 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.048552093 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.066456018 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.041760008 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 10.046988353 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.12891453 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.042571096 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.04363552 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.06471418 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 5.152091488 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.055197498 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.174156786 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 7.151275232 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.045128372 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 6.444633186 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.048591195 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.062567251 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 5.540785032 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 5.381731732 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.079309838 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 5.183783218 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.079429451 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.049912673 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.050193322 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.038167241 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.062577401 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.048406969 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 5.379939382 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.224063238 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 5.313132406 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 5.204341416 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 10.047096526 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.091479832 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 5.230722301 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.05602693 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.032199897 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.044772287 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.060432368 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 6.036441771 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.081969588 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.05126977 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.121208674 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.042118382 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.05041549 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.998470298 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.057192338 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.781047509 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.040710738 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.037624881 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.031366901 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.04924333 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 7.393561228 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 5.854336819 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 10.135404705 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.042382351 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.140383314 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 9.673995101 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.048825246 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.043313594 seconds)
    (567/608) benchmarking "2d"...
    done (took 6.264569204 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.045498412 seconds)
    (569/608) benchmarking "7d"...
    done (took 7.339898303 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.03869072 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.145106184 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.051643328 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 10.043900377 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.047830799 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.052961872 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.86941679 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.047029368 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.058344109 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.050371768 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.065661996 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.042676766 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047875205 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.049948618 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.053432614 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.04643822 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.583039721 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.072658122 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.259929891 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 5.303419216 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.049637114 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.140399909 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047023687 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 5.187763868 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.046463064 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.029891982 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.052074676 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.045611632 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.040883354 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.05222371 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.052633939 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.051081233 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047315837 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.047889216 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.044785984 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.047224415 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 10.04778259 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.165264359 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050380899 seconds)
  done (took 5578.446027504 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 10.177606539 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.435460296 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 10.111772882 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.10026526 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 10.067530058 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 10.078772799 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.213770467 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.076933682 seconds)
  done (took 86.315963483 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 10.03926005 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.232306511 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 6.301049162 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 10.503174225 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 10.052629776 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.192710518 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 5.49535458 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.354785506 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 10.531062709 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.901992737 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 10.485342606 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.365821817 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 10.146338229 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 10.050879698 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.253621367 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 5.587761002 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 10.053881325 seconds)
  done (took 142.592954885 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 10.151247224 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 14.603996446 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 10.190032218 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 13.655295788 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 10.125208054 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 10.655046657 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 10.064730772 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 10.051121595 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 10.492121731 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 15.637032418 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 10.129028418 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 10.172324678 seconds)
  done (took 140.982579462 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 5.307694254 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 5.270960817 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 5.311931543 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 5.262675027 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 5.306737871 seconds)
  done (took 31.507386336 seconds)
done (took 6661.477000573 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 5.290724422 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 5.311368893 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 5.517934017 seconds)
  done (took 15.871663822 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 6.098182248 seconds)
    (2/4) benchmarking "Float32"...
    done (took 5.523452158 seconds)
    (3/4) benchmarking "Float64"...
    done (took 5.757082724 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 6.169504114 seconds)
  done (took 28.60889345 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 5.649433267 seconds)
    (2/2) benchmarking "Float64"...
    done (took 5.801873116 seconds)
  done (took 16.502400505 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 5.309131424 seconds)
  (6/15) benchmarking "18129"...
  done (took 10.070635351 seconds)
  (7/15) benchmarking "20517"...
  done (took 5.621537078 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 10.049402461 seconds)
    (2/3) benchmarking "Float64"...
    done (took 10.044403455 seconds)
    (3/3) benchmarking "Float16"...
    done (took 10.052907484 seconds)
  done (took 35.19764534 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 5.085851536 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 5.081526067 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 5.086787558 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 5.081851652 seconds)
  done (took 25.380589767 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.187068217 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 5.469831953 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 10.04541385 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 10.091880185 seconds)
  done (took 37.83557784 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 5.386047502 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.229720365 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 5.597424263 seconds)
  done (took 21.260708328 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 5.690836631 seconds)
    (2/3) benchmarking "Int"...
    done (took 5.111493488 seconds)
    (3/3) benchmarking "Float64"...
    done (took 5.66182002 seconds)
  done (took 21.511178955 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 5.916300979 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 5.896970889 seconds)
  done (took 16.858636839 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 5.215484842 seconds)
  done (took 10.251623892 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 5.877787251 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 5.352712404 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 5.478405844 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 5.528956825 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 5.610066457 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 5.20777927 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 5.346577463 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 5.270147548 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 5.417616698 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 5.389383602 seconds)
  done (took 59.523136793 seconds)
done (took 320.136030047 seconds)
(21/22) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 5.080855409 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 5.064728445 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 5.070404978 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 5.074256534 seconds)
  done (took 25.334802769 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 10.043472373 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 10.043037947 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.040401851 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.051469814 seconds)
  done (took 45.224260196 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.045296647 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.046716488 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.053682789 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.050104106 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.059642199 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.048641734 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.065850243 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.054046263 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.048525419 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.053840336 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.055869473 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.048491328 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.058440812 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.050359124 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.053907197 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.050177178 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.056029085 seconds)
  done (took 90.941937444 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.053946366 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.055211321 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.055146957 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.056999116 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.063355258 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.051069468 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.095055638 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.052859783 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.053886728 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.056487292 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.055727801 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.051123899 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.0628986 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.055587707 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.059663193 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.054314212 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.049756275 seconds)
  done (took 91.02634639 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.441944199 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.222746322 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.278952249 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.056463541 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.242131852 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.060459855 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 10.040047678 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.285620448 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.078713224 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.277624473 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.390351002 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.248075669 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.303032172 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.253840279 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.401579476 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.27456079 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.204828179 seconds)
  done (took 99.105653427 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 5.450261941 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 16.403164396 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 10.13584629 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 5.053303945 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 16.322852573 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 5.050191439 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 5.213617294 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 9.586807558 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 5.473848457 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 10.1873476 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 10.119787498 seconds)
    (12/13) benchmarking "Float16"...
    done (took 10.050525672 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 5.53683928 seconds)
  done (took 119.634930065 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.064719383 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.064230174 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.064032892 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.059290456 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.066388745 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.042569481 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.303360474 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.055131136 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.052316435 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.054369839 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.049236013 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.054811132 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.064735697 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.059475523 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.064048779 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.056626533 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.056743444 seconds)
  done (took 91.282063947 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 5.647194037 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 5.658782822 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 5.681597933 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 6.092066681 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 5.846228569 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 5.49471373 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 6.080448151 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 5.646117811 seconds)
  done (took 51.188343288 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 10.041812123 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 10.046892081 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.043423208 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.044774793 seconds)
  done (took 45.215025413 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 9.974837653 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.844566743 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.594950465 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.087482661 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.934794642 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.085243278 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 10.059199484 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.84415704 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.25169877 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.755109386 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 9.245958596 seconds)
    (12/17) benchmarking "ascending"...
    done (took 7.756755038 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.933545062 seconds)
    (14/17) benchmarking "descending"...
    done (took 7.790612584 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.356449975 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.783952833 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 7.705430782 seconds)
  done (took 131.050633066 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.090861024 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.067462141 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.078547051 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.057008093 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.07349981 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.055440722 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 6.044819346 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.0664107 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.061083238 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.067793301 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.091854596 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.089699463 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.076984667 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.088787865 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.104450151 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.06821317 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.076614137 seconds)
  done (took 92.310020257 seconds)
done (took 887.366038444 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 6.184629474 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 5.652534714 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 5.186219831 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 5.261105249 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 6.15299293 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 5.260190072 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 5.264300851 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 5.205158322 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 5.600115872 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 5.19058343 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 5.413533052 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 5.234834805 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 5.633774119 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 5.253420135 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 5.205699785 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 5.171656612 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 5.44898842 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 5.59129522 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 5.212266073 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 5.658949729 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 5.198594851 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 5.704846112 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 5.208558523 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 5.60003412 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 5.414028853 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 5.71607979 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 6.022450443 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 5.382862177 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 5.242552822 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 5.225291567 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 7.989414564 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 6.197846154 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 5.187591073 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 5.191930537 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 5.185572463 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 5.192352028 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 6.231490613 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 6.081949781 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 5.27597272 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 5.546159712 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 5.650533321 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 5.470676677 seconds)
  done (took 237.749710244 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 5.089318335 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 5.156090276 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 5.139511566 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 5.131164871 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 5.649369532 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 5.15599174 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 5.195988031 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 5.174069372 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 5.136441928 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 5.176316679 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 5.181646597 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 5.630302692 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 5.203372794 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 5.559325192 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 5.174463139 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 5.19014647 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 5.139024286 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 5.582148195 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 5.205795133 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 5.156111 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 5.092691671 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 5.140758274 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 5.09118491 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 5.180318115 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 5.091426553 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 5.141520217 seconds)
  done (took 140.813603027 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 5.129295749 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 5.20449156 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 5.255540059 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 6.24176803 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 5.321108343 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 6.138505776 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 5.235522294 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 5.376915428 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 6.638874993 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 6.554473643 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 5.307335527 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 5.330700769 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 5.155233986 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 5.262166653 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 7.364635821 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 5.168422156 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 5.279880387 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 5.252825621 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 5.226689674 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.181820785 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 6.407767974 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 5.173793983 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 5.248145916 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 6.105642592 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 5.77961058 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.404068047 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 6.07264906 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 5.523649518 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 7.250023233 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 5.195855549 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 5.222387926 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 5.208457248 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 5.371887756 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 5.267386174 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 5.223101335 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 5.123667461 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 5.104845295 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 5.161532198 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 5.78390561 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 5.239870026 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 5.231301974 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 5.86139007 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 5.416931285 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 5.619126487 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 5.76266949 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 5.275474529 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 5.366096403 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 5.168855091 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 5.214772235 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 5.933970856 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 5.396739572 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 6.527054304 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 5.657861349 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 5.312091932 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 5.219299744 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.476550465 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 5.285700279 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 5.36125351 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 5.986164944 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 6.601139248 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 5.164284673 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 5.364011249 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.220921538 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 5.74481525 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 5.360210666 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 5.315250567 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 6.045053142 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 5.955083766 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 5.408575658 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 7.317665712 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 5.659235798 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 5.169736553 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 5.129159106 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 5.167318645 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 5.233377386 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 5.404388207 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 6.328108359 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.47359807 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 5.371758897 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 5.217843166 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 6.045013054 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 5.559156229 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 6.25688485 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 5.898459769 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 5.222288185 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 5.117496553 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 5.17247954 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 5.314061578 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 5.219418732 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 5.62165345 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.661101033 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 5.373758256 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 6.492783529 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 6.269925917 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 6.065336718 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 5.520372504 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 5.104878414 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 5.117737355 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 5.264056307 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.651652525 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 5.173621209 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 6.047581737 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 5.74132142 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 6.135703851 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 6.339241056 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 5.836425727 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 5.328433248 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 5.748803821 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 5.441937335 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 5.096842847 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 6.033986801 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 6.456711423 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 6.885163074 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 6.426146728 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 5.093694472 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 5.627054212 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 5.176998787 seconds)
  done (took 662.808353907 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 10.054918046 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 10.054104083 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 10.059007967 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 10.054654269 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 10.053849223 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 6.557851681 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 10.055922283 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 10.055275977 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 5.277487839 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 10.047903125 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 10.051068315 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 10.053716735 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 10.054418095 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 10.061412981 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 7.08452337 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 5.826282804 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 6.846196761 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 10.055899379 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 10.055613299 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 10.052340074 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 10.056933627 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 10.054364256 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 10.051600646 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 10.053662811 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 10.052959102 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 10.061549074 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 10.206703821 seconds)
  done (took 258.016006007 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 5.12679002 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 5.432589471 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 5.14376873 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 5.19037928 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 5.15589738 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 5.113666926 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 5.489280321 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 5.137090235 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 5.141918701 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 5.120488112 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 5.101246438 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 5.338043296 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 5.388741653 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 5.529272307 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 5.157870332 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 6.216228155 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 5.664802756 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 5.241857188 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 5.138131584 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 5.144479271 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 5.26854381 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 5.429597991 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 5.300037952 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 5.386466489 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 5.258812212 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 5.350745048 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 5.184766505 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 5.116487917 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 5.224917552 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 5.472953197 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 5.099774743 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 5.43350571 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 5.260775919 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 5.110038891 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 5.473369859 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.371456169 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 5.532044437 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 5.592663151 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 5.254275339 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 5.083200744 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 5.081265775 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 5.316996039 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 5.368706009 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 5.156573844 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 5.115528352 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 5.638504429 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 5.107472934 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 5.420255084 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 5.145356107 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 5.08465059 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 5.118625549 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 5.126062325 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 5.301215618 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 6.834451243 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 5.274931962 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 5.391318721 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 5.564749927 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 10.063878306 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 5.350821847 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 5.381439201 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 5.088667439 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.485355419 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 6.487457202 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 5.168281195 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 5.123737027 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 5.906116011 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 5.191383914 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 5.506042819 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.545726385 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 5.12762269 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 5.388910183 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 5.296410425 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 5.098351333 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 5.333857607 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 5.261634506 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 5.640645703 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.536092746 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 5.206329262 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 5.200820373 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 5.135544559 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 5.319603585 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 5.086315797 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 5.612179382 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 5.186101061 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 5.090967847 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 5.479304072 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 5.385445935 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 5.091093148 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 5.121061927 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 5.214636176 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 5.262005949 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 5.219737027 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 5.359171104 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 5.180154632 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 5.811247522 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 5.394442805 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 5.400943401 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 5.126062549 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 5.197779935 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 5.092931007 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 6.621144037 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 5.256183407 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 5.096982495 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 5.371528444 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 5.529216237 seconds)
  done (took 570.317250313 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 5.63028394 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 5.129532831 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 5.279092128 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 5.485410805 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 5.384268987 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 7.105741813 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 5.301536409 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 5.138775222 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 5.260062826 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 5.251224149 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 5.224300977 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 5.183841417 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 6.045814587 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 5.72455215 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 5.124167341 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 5.196864421 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 5.167512456 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 5.604484564 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 5.3564309 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 7.213666721 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 7.141973979 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 5.774470749 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 5.370750678 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 5.406096976 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 5.442369996 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 5.406145148 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 5.575938449 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 5.204088621 seconds)
  done (took 161.187555461 seconds)
done (took 2035.937164539 seconds)
SAVING RESULT...
DONE!
