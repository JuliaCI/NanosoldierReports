cset: moving following pidspec: 273122
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.811467857 seconds)
loading group "shootout"... done (took 0.827857758 seconds)
loading group "string"... done (took 0.233261601 seconds)
loading group "linalg"... done (took 3.269496009 seconds)
loading group "parallel"... done (took 0.022392285 seconds)
loading group "find"... done (took 1.223035821 seconds)
loading group "tuple"... done (took 0.720877586 seconds)
loading group "union"... done (took 3.11369015 seconds)
loading group "dates"... done (took 0.156710359 seconds)
loading group "micro"... done (took 0.08049327 seconds)
loading group "simd"... done (took 0.369677416 seconds)
loading group "io"... done (took 1.418854821 seconds)
loading group "random"... done (took 2.405885799 seconds)
loading group "problem"... done (took 1.234148827 seconds)
loading group "array"... done (took 4.679751853 seconds)
loading group "misc"... done (took 0.994714963 seconds)
loading group "scalar"... done (took 3.515262123 seconds)
loading group "sort"... done (took 0.313601677 seconds)
loading group "sparse"... done (took 3.598377288 seconds)
loading group "collection"... done (took 6.174836908 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.551865272 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.076224333 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.255563525 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.080386411 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.283660398 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.083325722 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.089988506 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.072898032 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.058600018 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.164203657 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.216890553 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.389509378 seconds)
done (took 5.086123742 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.265547162 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033873065 seconds)
    (2/2) benchmarking "String"...
    done (took 0.12707773 seconds)
  done (took 0.789397187 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.140052848 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.016252996 seconds)
    (3/3) benchmarking "different"...
    done (took 0.023266638 seconds)
  done (took 0.802448537 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021104407 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097778149 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.022217214 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022799095 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022619156 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.022099316 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021842513 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021875313 seconds)
  done (took 0.855089745 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029752284 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023625269 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021531046 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.023066108 seconds)
  done (took 0.721349415 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023130953 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.085062677 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020915675 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020642842 seconds)
  done (took 0.769657425 seconds)
done (took 4.864675338 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.200722789 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.789267006 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.992554224 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.183458731 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.36056402 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.310556379 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.078885542 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.24554977 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.150851681 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.032413012 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.183600463 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040929637 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.534119003 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.46304094 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.029303753 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.148071462 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.581177082 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039948037 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.071662229 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.209847533 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.04042097 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039995183 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.044893397 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027680982 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.123587668 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.141182867 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.591587298 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066385841 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026836565 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.136080092 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029101055 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031433311 seconds)
  done (took 9.614703534 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.152105943 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.147896102 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024699366 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.060537036 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.052033568 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025462404 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030846294 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023725654 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.04402132 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.089950183 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.047111992 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.163210454 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.022081735 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.025051045 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.140179022 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.118108948 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.038811405 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.038367088 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.023072265 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.037287236 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.050596837 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.036199831 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.034000055 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.033722603 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.069949652 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.091043812 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.042295996 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.068596697 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023418928 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.035667435 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.052334362 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064725731 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023846849 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021889298 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.066937642 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041508484 seconds)
  done (took 2.718310675 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.714666234 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.051889884 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.141258885 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.13407811 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.064998129 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.051687748 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.182313543 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.079180079 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.056678037 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024681257 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.210984742 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.637262706 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.17347915 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.079261081 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.0286563 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.183729262 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.889866592 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.940001084 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.024459271 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.024611606 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.137483498 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027161515 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.178518953 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.02549826 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.137982068 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.820247332 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026752567 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025184453 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.05393709 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.145449099 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021811462 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.098766565 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051107281 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025994389 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.538976405 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022418123 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020486209 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.042830824 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.051492789 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022737952 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023923614 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034844659 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021988968 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07550286 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036999367 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.524301761 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.026030234 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.708000875 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.83750609 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.031927178 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028737555 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058734127 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020662662 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.024344875 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.569131609 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.11234259 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023431893 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.24959844 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026304079 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.025045115 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.025177545 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.057979265 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02423542 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.025342026 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027464067 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.042367127 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.976453762 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033185137 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.044207873 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.023107955 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023372241 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021946134 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.394393419 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029934451 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.02589303 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.021469265 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028034512 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023733166 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023113189 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.070988176 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.051101196 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.048767575 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.027107674 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024143303 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.023124941 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.661458475 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.941092446 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025530267 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024712112 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.478154774 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021161936 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023058171 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024763053 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.04460104 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024026441 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020360963 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058491155 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025744341 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.129041202 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.490811126 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.025521149 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020811695 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.556056455 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.025073018 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.055368597 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077580102 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023273407 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062100937 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023869535 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.021582037 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.027139399 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020706772 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.0250455 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021933361 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022713 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021741941 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023505857 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024819903 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023395203 seconds)
  done (took 19.960373591 seconds)
done (took 34.632681243 seconds)
(4/20) benchmarking "parallel"...
done (took 0.762283238 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.219534829 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.050337196 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020223334 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.169506777 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.045565657 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.140187207 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.182248602 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.132326998 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.047332432 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.047061652 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.047290614 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.189607578 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.199574562 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.048522416 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.124377073 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.201212917 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048887523 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020897093 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.048383617 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.048516576 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.048503064 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020557181 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.04796947 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.048517479 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.125357791 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.048893532 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020589546 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.125991392 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.049774091 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.126970428 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.049495033 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.048267798 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050480051 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.127110049 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.051160979 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.12691687 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.021014041 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050825407 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.050780089 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.051371281 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.050631828 seconds)
  done (took 4.109389967 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046566772 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039213723 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041556611 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01866638 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028670321 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039210318 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018612209 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038732744 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.042104157 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039192418 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039119529 seconds)
  done (took 1.168489768 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041379724 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039834753 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041198858 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018515544 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030421812 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039716687 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018503593 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039255111 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.042019868 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039613592 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039679354 seconds)
  done (took 1.104547284 seconds)
done (took 7.078003827 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.15556838 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.12386294 seconds)
  done (took 0.984546937 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.558810239 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.225773057 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.133910795 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.255217854 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.126278561 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.15853956 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.244213076 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.164275384 seconds)
  done (took 6.626703729 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.076128233 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.144172294 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.025229992 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023361115 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023518035 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023628879 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.025212381 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023907304 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.023142677 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025682108 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.025406833 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023517968 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.024168875 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025381923 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.023498079 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023753418 seconds)
  done (took 1.416241172 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.029262522 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02627251 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.027495171 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017561658 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.028303033 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.0268405 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.028029483 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028757941 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.02768595 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.027218244 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.025139438 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.028388235 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026883113 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025610669 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.028386994 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017544155 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.028522952 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.027719445 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.029690332 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.028596008 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.027637127 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.025162641 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.029282997 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.026487593 seconds)
  done (took 1.371076386 seconds)
done (took 11.112374682 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.143197212 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.030550616 seconds)
  done (took 0.890933502 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.128985944 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.128805708 seconds)
  done (took 0.985754401 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029214259 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016350049 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033194253 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.025203973 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016664059 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016458195 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.032406963 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016763775 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016459892 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016570833 seconds)
  done (took 0.947798078 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019627908 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023571433 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021601357 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019744651 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02141527 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017370185 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019774482 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017856747 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.023411057 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016813035 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020694604 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.039241115 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020255937 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039644153 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.020242692 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020718467 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.022259943 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019873756 seconds)
  done (took 1.129561526 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018039104 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017402828 seconds)
  done (took 0.765347988 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020960816 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017437746 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019207303 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019031306 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016986757 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.016374587 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016924229 seconds)
  done (took 0.852977191 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.400551868 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.091097614 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.335972409 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.025158866 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.039012214 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.237731548 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020339198 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.02481284 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024702913 seconds)
  done (took 1.926020499 seconds)
done (took 8.223808974 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.041041371 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.145604405 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.150519017 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.457204959 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.03487064 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.023085344 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.052412183 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.232556724 seconds)
done (took 1.876040546 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.498225986 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.280352562 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.195191805 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.02463289 seconds)
  done (took 2.234650808 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.316868423 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.143301965 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.031211023 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.0237393 seconds)
  done (took 1.261135641 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022472059 seconds)
    (2/2) benchmarking "read"...
    done (took 0.028124386 seconds)
  done (took 0.792404795 seconds)
done (took 5.529773241 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030681357 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017265002 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023765764 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018877798 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018447705 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017935846 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017868857 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.01874342 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016899044 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.019048119 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018991998 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018961776 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018618357 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018637049 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.018167235 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019012584 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.01700687 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018646642 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018714896 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018653104 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016992502 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019017428 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018175913 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.01870416 seconds)
  done (took 1.189399937 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.036521179 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.021396021 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022048388 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021840174 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.022430208 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.02202782 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021901129 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.021048364 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022035873 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020883082 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022622515 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.022559113 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020930339 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.022706866 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020934644 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022688844 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.02225395 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02133241 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021004324 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.022690898 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.02210564 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021300703 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.022559008 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.022124915 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.022597011 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022554391 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020954496 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.021298049 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.022114926 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.022534439 seconds)
  done (took 1.413018316 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.02337135 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015543496 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.01577065 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.026032379 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015425797 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015586516 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.016000373 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01515603 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015560096 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.016368376 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015851177 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.015305905 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.016057572 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015217894 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015347217 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015872469 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020599515 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.036755951 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015814608 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015515619 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020308373 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015731584 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015445216 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015439463 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.01591434 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015455642 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015279 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015789186 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015409798 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.016005166 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015455208 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020123797 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021761222 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.01594735 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.026040021 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020779195 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015920861 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020067719 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016349892 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015300825 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015272243 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015304902 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.01540675 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.01541422 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.026234821 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015692238 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016617678 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.01588103 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015641366 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015344781 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015423243 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.017007031 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.02135028 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016828299 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015393332 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016767514 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015370753 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.016190487 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015585124 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015367411 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015366049 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019593407 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016912751 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016273965 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.037639377 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.017072371 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026508641 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015715767 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.016026334 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019911253 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.016209299 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.035748922 seconds)
  done (took 2.033519191 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028005962 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026155924 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.03477131 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025573281 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019088509 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016300005 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019435866 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016424501 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025999329 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020141982 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016458647 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019712889 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025955617 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020193516 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01814763 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.027359298 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020646844 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019501713 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.016542028 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020117137 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017558516 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019722594 seconds)
  done (took 1.2197773 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.105230641 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.022192114 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.066745218 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.025375255 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024051373 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.025485045 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021964587 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021886728 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022010857 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022595673 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022643405 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022095811 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.024117927 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022534485 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022583007 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022407082 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022134588 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.022450466 seconds)
  done (took 1.281051487 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.034128265 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021719019 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049693502 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021418022 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.02147657 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.021064707 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024871897 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025084409 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021274455 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021684716 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025517722 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021342202 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.021331665 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02171179 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021362994 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021780296 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.021330845 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02167428 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.02544517 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025341857 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025253237 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025500668 seconds)
  done (took 1.28505209 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03549108 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020778755 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.037357498 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.022322258 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01589779 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015903918 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022337906 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.020904526 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022169736 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020403196 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020944391 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015950657 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023138496 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02122332 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.023341417 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021077671 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020743274 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.02114475 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0207727 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016026218 seconds)
  done (took 1.182477062 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.132434246 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018374057 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017901017 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022374808 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017730465 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017724137 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02249149 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017885802 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017918447 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.042864571 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.01819935 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018313147 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024070913 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021488415 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.018129654 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0227445 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022552295 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02257102 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017870428 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01789651 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.042990528 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.018116094 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023103055 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018207482 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018226747 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.018093892 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018109043 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021286256 seconds)
  done (took 1.453560903 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038296417 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018431954 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.016151651 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.020145879 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.01997757 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.03267053 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.020106855 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.01991613 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018296227 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.016122749 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018410844 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.018355335 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018330615 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.029017963 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018352026 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018379973 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.028973048 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.020219206 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.032980244 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.032887209 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.01860511 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.028849629 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018516297 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.01614824 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.033101108 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018593165 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020405397 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021422411 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018714518 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.016334746 seconds)
  done (took 1.416635579 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.03024655 seconds)
    (2/2) benchmarking "in"...
    done (took 0.027171409 seconds)
  done (took 0.80372853 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018763071 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033992356 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015350065 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028680353 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024322027 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019731236 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024445795 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024482962 seconds)
  done (took 0.933451518 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.12716483 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.152689728 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017702542 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.01760576 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.125631392 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.086328177 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.137204409 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.029762569 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031587595 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020500131 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.018586688 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.138575623 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.017453288 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.031181905 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018690775 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.027220679 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025087721 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035800795 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030780451 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.016206638 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.030210413 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017987397 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016974399 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.01798137 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018191296 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.024228449 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.033439923 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.030051701 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02596559 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.015429954 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.036457479 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016406348 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.017019022 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025855809 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.127879508 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.01686652 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.05545808 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.016636425 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.02114862 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.016161293 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028817195 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.038039252 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.031291828 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.035046004 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017969857 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.018337693 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.016243845 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.018050118 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020571418 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025845672 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016586499 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023953502 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.016092688 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017864605 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.027245958 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016574133 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021384462 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025957953 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.031014355 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.02720398 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.02904024 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.032285543 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.025526939 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.025438152 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.017148032 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03680017 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.018207931 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.030201948 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031836201 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017708577 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.03002582 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.016359219 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015519167 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016460037 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.05140611 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017959668 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.017327693 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016505714 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.016652341 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017895095 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026331086 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021551334 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023952208 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019749216 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032899224 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.026016866 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.016279196 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.024047162 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.035433523 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020785357 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.01657873 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.034071758 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020634853 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.016264471 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.035114129 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.027389128 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.018167716 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.017211916 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020528883 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030357439 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017972154 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015545876 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025127115 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.018031305 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.129800758 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022350535 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025399429 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016843994 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.027614336 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.023938395 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018665704 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015997594 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021853176 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017857369 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015907535 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02664897 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.017056071 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.03270193 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.024192922 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.032130928 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.032575091 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.028116602 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.033820386 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016963749 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015988772 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.036317016 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.026709461 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.018383863 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.036112237 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016879945 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027925116 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.017036459 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018572243 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.026613679 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.01626275 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018876582 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017168961 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.02397445 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018651017 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018753435 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.023439927 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025821479 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.029867773 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018347328 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.026217479 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.017445169 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.033796115 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02724999 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.022265383 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021097723 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.018073199 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.029959996 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.024422989 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.02676352 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.017040473 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.018052806 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.017135227 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.028712379 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027328095 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019167956 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027469904 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.022423366 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.018049669 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.017187429 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.018212604 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.021207002 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021099739 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017853075 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025160351 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.026361642 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.032429362 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.025699175 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.02674327 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016531522 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.017010519 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019179668 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.017091019 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.022207334 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.026820841 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033479221 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.030007265 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.039748059 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.017594681 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.027265861 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019191516 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.035289021 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.031238127 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.018410958 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022747574 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.016310719 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019588793 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.027153651 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029270473 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.032306125 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032983943 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.022476975 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.022342283 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.017134195 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.033099146 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017747409 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025984603 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026819777 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.02420727 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.017100285 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019155226 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.026626364 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.022388198 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.018993742 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.035126465 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.02625108 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.017268424 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.032294507 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017622377 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.028765571 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.017223187 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.021202761 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.023004774 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.019560175 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.027222155 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.033362115 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.016429646 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.017720774 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.033838929 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.01950998 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019308838 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.025580137 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.17989158 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021864008 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024628774 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027295918 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027613963 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021557092 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.027205003 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017204739 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025942668 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019158857 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028311316 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016262264 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034863995 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015437032 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.03194403 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016880146 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027533296 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016703355 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025831632 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016932943 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033759994 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017612033 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.016857086 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.027987488 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015366162 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025536944 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015926205 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021844988 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023323098 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.02552472 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.017690234 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02563856 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017550039 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025248529 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021325488 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025007464 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025425988 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021196699 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015905307 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024520518 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02696535 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.024310081 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017352385 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017290339 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016250566 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.025363835 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017391572 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016840182 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024187917 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021223529 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.022323838 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017297625 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.017363538 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017227682 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024469249 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02544704 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034190064 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024632633 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023559544 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.025249001 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015833401 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031814824 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015898668 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023542538 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.015204799 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022267995 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.025234784 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.016132231 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035260972 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.017462847 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023939015 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028121446 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024714587 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.02023529 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.034202294 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.018885128 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024439916 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023990872 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.021092807 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.023190503 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017457885 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024520287 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025534184 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026570429 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016644525 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023503357 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024981352 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017807796 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.024930427 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.017878132 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.024897128 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.018001072 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015603448 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021488288 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027875031 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021687693 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021925537 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.016524878 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.015411413 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.016454477 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.02370381 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021567102 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.025162644 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032237862 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015621604 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.01722367 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016199191 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020560373 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03510738 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026220087 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024569974 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021815103 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015853088 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017958199 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.018085111 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016533874 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019629393 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015826275 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.01629581 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027235201 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018138104 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021567101 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016867081 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017605425 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.026657268 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021094952 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016864051 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.02385094 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016295689 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.022189602 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015964016 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018055221 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.021558749 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016200215 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020647573 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.027039137 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.033394596 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.023782162 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.025612911 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.017450723 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.024643952 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032458263 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.025334434 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017473679 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.026236768 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016502175 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036638608 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.026825861 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025766344 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027184652 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.017887408 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.034792029 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.022171866 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.027514614 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033076892 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018073337 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.02622565 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016948504 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.033488587 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.022179094 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016865718 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.026078094 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024976866 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.023547264 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.029353012 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017933628 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.026028726 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022668369 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.021284253 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018843129 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018830292 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.026107095 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.033895152 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017931496 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023198771 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.025231196 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.025656861 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.022182665 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029794236 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.025423651 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018079516 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018820649 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.021317046 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.018017653 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.029886126 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017598802 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.022257337 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.022274763 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.017134982 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.024638811 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.034638653 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026878386 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027175914 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017204355 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.016660731 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.037817051 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.021639975 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021092484 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.025669805 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.027444919 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030166624 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.026870304 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.035069197 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.017707671 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.023667601 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030034891 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.018184783 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016949496 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.021445731 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018985211 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026582328 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02732362 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024768704 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019287059 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.024665362 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.031253793 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.018802475 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.022401737 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.024368348 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018147578 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.028132968 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.025484425 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.026060885 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.018963751 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017045325 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020952111 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.02622713 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024793347 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026460566 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018233371 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.027013851 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.032301751 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02485485 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021118346 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017059813 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020997148 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.026657958 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024537844 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017091586 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022403962 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021272574 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.027419283 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.027231895 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.022415956 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017182332 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.035433461 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.026371248 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.026725639 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019238212 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019345871 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017570518 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.017131483 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029033933 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.01722186 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019147236 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.022470941 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019261499 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.036429981 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.025698699 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.0338678 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018404146 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.02228326 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01715634 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027314677 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.022391052 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017260989 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.028511253 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.016693045 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033467325 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.179091908 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022560786 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.01619011 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.022330178 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025384842 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.032134124 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026313318 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025573409 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019254765 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026106782 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017800025 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027463846 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016145108 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015412344 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026392976 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025193159 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028579869 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016116489 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026329552 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017660541 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024628778 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024831611 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017421831 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017449627 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017389206 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025670993 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021345365 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025433042 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021418511 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033243035 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.016778422 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027107686 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025165481 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026940306 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.03004467 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028077918 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.02459862 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016361467 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023552024 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024547404 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016925368 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021580535 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018846532 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037955685 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017408116 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017271901 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030038326 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022907054 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015887794 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.02246551 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021170366 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026049607 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016720049 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026313244 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.02065092 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016565593 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021074749 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.0211419 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015058798 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01577164 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016005115 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025694737 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.02111686 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016200978 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035059006 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017216661 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024659826 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026873407 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023146912 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017204586 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015126861 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016610274 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029477429 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031638265 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020265547 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024575776 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017462418 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025102633 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.015203174 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024673169 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023821589 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024451216 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015766458 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016076765 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030983947 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031723067 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.021160748 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.033122242 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.025464369 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.017813498 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038710768 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.025641276 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017202808 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.027343101 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018416234 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015831745 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015602235 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017829002 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.027989512 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.016229316 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018368783 seconds)
  done (took 15.69047544 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.062256382 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017441655 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015830458 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015704461 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022944946 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016945416 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015729245 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016938405 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016949865 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018029617 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015942884 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015903351 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021494739 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031392621 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0240256 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019707628 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015941944 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017179718 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015889295 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017179633 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022180894 seconds)
  done (took 1.23816508 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020046652 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020022669 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01950779 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019786035 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019037313 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015921906 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019356431 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015901356 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019713431 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016191944 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020026899 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016113236 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016460484 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016468222 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016492336 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017567086 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020137165 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019341885 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.016186795 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019716117 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017611326 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019700812 seconds)
  done (took 1.188171281 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.0186142 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.01669623 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024984685 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015503546 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015409117 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.01827379 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015388172 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.02032717 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020432249 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020385915 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024646798 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.016199014 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015276924 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021825314 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015311142 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016074334 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.061637519 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016447108 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.01650602 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.01565197 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017831547 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024941818 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015726504 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015892415 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020524308 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.018465198 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015628014 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.018040429 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.016260221 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020602681 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016619807 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015465615 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.024714732 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023991815 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020596457 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020525067 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01693995 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016327054 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015763818 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015650632 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.024176644 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016829189 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015858923 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016773966 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.0247821 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015873932 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015651457 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024944861 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.01572006 seconds)
  done (took 1.730961221 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028814021 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.06892743 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.022061708 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.051313547 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027881934 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.021257804 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021882315 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.054236739 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.01696245 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017354584 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028906227 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028947692 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018423002 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019657815 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.023164562 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018352636 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018972458 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017645385 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020609752 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018047128 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020619299 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023357955 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028535805 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028899076 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019673665 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.018034306 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018212053 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019857175 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.029283337 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.02269217 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.020365159 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020648002 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.029207521 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.023902172 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018234741 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018407347 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.029555591 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018926497 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018666297 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017088841 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.018287899 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019804157 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023383531 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.029732145 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018852628 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023787912 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018684253 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016809668 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.029208003 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018622519 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022354876 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.030142948 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019801501 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018997449 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.0202291 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029239387 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018881593 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017645332 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.019007921 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.028862527 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.017167428 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019581493 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.02975683 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.018343039 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021876702 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.029869413 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.024029813 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019815274 seconds)
  done (took 2.5208612 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.02536778 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.052436739 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.030066529 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029951281 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025406396 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.025407879 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.025668559 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.025776353 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.025675032 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.028566174 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02588956 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.169422859 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.02327224 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027785011 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.025903086 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.025977961 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.025991571 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025881022 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.02615017 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.026054701 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.02618234 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.030935551 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.026222358 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.030991834 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030762826 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.022869468 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.025981234 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.026122687 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.031101928 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.026139135 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.030718162 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.02624882 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.026277477 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.031143154 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.030817559 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.026036666 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016638887 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.026046236 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.026125941 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.026170023 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.022810441 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.031135657 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.026378955 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.02309037 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026664654 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.026351655 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.031572086 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.031246599 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.028349115 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.029504546 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.026492262 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.031558334 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02639574 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026734054 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031874656 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.035134685 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031771399 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.031923003 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.02678234 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031815879 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.031927618 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.035218329 seconds)
  done (took 2.684945629 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030708791 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021603647 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.034951845 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015569161 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015485991 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024678333 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015404743 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015427176 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021577064 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021556521 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023069324 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025035672 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026869947 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023128653 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.025093771 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026966377 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024971217 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025027526 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021761245 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025022921 seconds)
  done (took 1.268091394 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019276212 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.0211295 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016275861 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.032200343 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016370356 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.02380543 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016300835 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016228062 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016230604 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016219317 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020833994 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021032291 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016434178 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024516265 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020091163 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.024019956 seconds)
  done (took 1.113359494 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020704177 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024837391 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.127956526 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.017333875 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018985388 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016311435 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.01721177 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.016140196 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018585396 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030673622 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.017318301 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019415146 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017292982 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015910313 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016527004 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.019288669 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018513654 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017312928 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017237851 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.129344936 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.026130782 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017991474 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019481043 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017984358 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019141415 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.025829041 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.01886989 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.01933969 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017370249 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019706453 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.01925466 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.028699808 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.019278458 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017951734 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.016199481 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016959081 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017437158 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019538262 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019710242 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.01750296 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.016170116 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.01913228 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.017436355 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017727248 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018569688 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.019586634 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018577748 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.027738812 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.017315846 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019248357 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017364198 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018497345 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017754631 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028883417 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.019566413 seconds)
  done (took 2.074552203 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035039882 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021355473 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015449257 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015382325 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020901021 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.02160054 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021016006 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021069225 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021553907 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015423428 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021557112 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020592045 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021597081 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021345982 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021824349 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021266591 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015511859 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.021433242 seconds)
  done (took 1.174654228 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.02474269 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022298481 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021929517 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017502955 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017444469 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021409361 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015816238 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016944283 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016949525 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.01748549 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017488873 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.017123056 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017100281 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.017100772 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021126596 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017522494 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.017067402 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016000812 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017496305 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015894396 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021808392 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016056292 seconds)
  done (took 1.195817005 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.191796959 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.151800544 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.041017166 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.035953991 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.027662929 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.053218413 seconds)
  done (took 1.294355441 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053088915 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.055273629 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021251117 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021164661 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02527836 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02352671 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023531047 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023606066 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026754089 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02958404 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023889409 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027162533 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027030746 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028818961 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025546612 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025565313 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024099206 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023946964 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021449945 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031708272 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024074705 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027471031 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02438445 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024127818 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02428629 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029220207 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027571106 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030202205 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024222734 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027838085 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02609492 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024405197 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027848818 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030209962 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021529099 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027611201 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024409276 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032150012 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025979595 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029301664 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021402784 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0261144 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027504485 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02728708 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027910134 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024775775 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027625446 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024572379 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024665419 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.036226772 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026452899 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029615311 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026352293 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028119504 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02790588 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.036324888 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03090959 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029778094 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026447544 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031031146 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030188848 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026790039 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029985448 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031176827 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026741933 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030141202 seconds)
  done (took 2.631046488 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.061579742 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021557236 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023904264 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029198405 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02813912 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023542078 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023789795 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023923921 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024012197 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021570129 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.061345139 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024294833 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028860315 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02873245 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024178746 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023904048 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023993293 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028673925 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021657662 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034859944 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024288346 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029147165 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029208789 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029198391 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030225933 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026136732 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024403556 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024333774 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024281875 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024162751 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027400522 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024445015 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029252416 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.139821562 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029956853 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024741673 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024304592 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027277849 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024247238 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025962708 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029196855 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032308964 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024339469 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024519875 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030662264 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02458624 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024631447 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022063803 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024545021 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021991588 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030688104 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030655769 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030748566 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029737747 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024778741 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024825234 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024649141 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024618174 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024744327 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026422107 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029642948 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024697256 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.036875096 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024960867 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024905803 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030126088 seconds)
  done (took 2.739482352 seconds)
done (took 53.493960177 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.204841243 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.175734265 seconds)
  done (took 1.167208078 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.139490781 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.139483552 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.167419683 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.024716613 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.08265497 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174206388 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.126615997 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026650132 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.024547592 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.026139605 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.024259166 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025991128 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.026050566 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.024225368 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.087493378 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026778209 seconds)
  done (took 1.949445857 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.07438559 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.245994822 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.059845739 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023418839 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105617653 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.029923671 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.02504809 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.02932225 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.029678555 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023497571 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071664191 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.036692165 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.028347407 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.029297078 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024878782 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.028241875 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.029152814 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029657841 seconds)
  done (took 1.726396317 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.089480376 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.035085073 seconds)
  done (took 0.926153317 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.126257823 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.06413425 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.106861638 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.314141506 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.096457493 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.099211673 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.102324866 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.097416795 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.069694894 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.09585931 seconds)
  done (took 1.968766612 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.063154741 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057946325 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.291085006 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.055635844 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.035587308 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.030578809 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.030952757 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.032260747 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.031404384 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.030300615 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.077138262 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.028920685 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.025065172 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.074407876 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.052154519 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.060228002 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.024469467 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.031231839 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.033571881 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.024225046 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.029323007 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.032273576 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.137971568 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.032019998 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.054113728 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.028838492 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.03224427 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.030317389 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.030256659 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.031713272 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.032270288 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.055813715 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.031711539 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.038155494 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.030032841 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.051952932 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.02521731 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.052924375 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.02811937 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.025164858 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.028693274 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.032402169 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025819209 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.031808458 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.031632916 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.031377549 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.032593512 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.024379486 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.031573345 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.028351256 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.025265958 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.02995704 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.029696565 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.03071693 seconds)
  done (took 3.128052192 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.078717945 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.068501107 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025063938 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073042252 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06708936 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02504437 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.081229106 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.063092965 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.080483777 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024852163 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024154308 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.024157914 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032123559 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035857427 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078062835 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07113513 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026490354 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024789953 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.070507042 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.070718387 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023859107 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.082504187 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.072279178 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.069493257 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.023668673 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025042722 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.02370753 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024313085 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032890984 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.032576161 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024307022 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035406651 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035968019 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031953296 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023457726 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023752289 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023623448 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.032586059 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034412307 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.034135452 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.031234305 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023385678 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02367342 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024258922 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024696127 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023206905 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.034183334 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.031905912 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.034072141 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024214608 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024269468 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.02363378 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024561142 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031670575 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.030606985 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.032020113 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.03546376 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024201085 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024100132 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025432697 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036175438 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033150881 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032760288 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025144512 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03417252 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.024144331 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035108225 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.038214306 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02403311 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02452633 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024167979 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024151429 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024477345 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031160936 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.031233568 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024589866 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024443553 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02384744 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.032609042 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031470497 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024014388 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033745483 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023572941 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024183794 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024531599 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025064257 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.03467164 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.033140281 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024785725 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024353207 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024236492 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024189515 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.023520025 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.035042068 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.033727262 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.033834407 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.036056299 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025018593 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.036742258 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.034257989 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025401154 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.032998096 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024732204 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025052718 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025008573 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032779179 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.032520129 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.034152675 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024668002 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02429223 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.033956494 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036010701 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.024715139 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.033082401 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034699199 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.03317901 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.024166911 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036017087 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024657566 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.036394697 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025008629 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036089414 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025077436 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033838871 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024963624 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.024105025 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024725561 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.037361862 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025349827 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024735905 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025279521 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024748338 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.033790975 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.038372428 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025643927 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034206591 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.033971679 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025382599 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.036478363 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024987232 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036416089 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025006017 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025266687 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024109434 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.038456199 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02484945 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.025311948 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.0249826 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035813062 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024978853 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035687605 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033079105 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024348047 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037319914 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03551302 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.033132397 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.036304285 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025790107 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.025088819 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024707242 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024972746 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.036433118 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.038304925 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025889694 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02498146 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.032806674 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.037289436 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.025651864 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.033555333 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.033263148 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.175108812 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024490177 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024235732 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033823797 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035072424 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.030684002 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.033042127 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031510371 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.024026629 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030178977 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033092759 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023895509 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037196847 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024035699 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.03376523 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033530172 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.029573615 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033137322 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.034325035 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032200253 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.032504503 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.034578285 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023445913 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023568532 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.030366702 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023662752 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023781093 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.029944733 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024157126 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024146751 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.036145136 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.024295215 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.033138974 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.023379475 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030840548 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02310307 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024086336 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034930537 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023867547 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02414326 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030517434 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023686396 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.030079546 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032887011 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.030301795 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023632492 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024050803 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.033667369 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.03280292 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023563567 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023542228 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024011355 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.032673441 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.032050242 seconds)
  done (took 8.080563793 seconds)
done (took 19.753783132 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.145299795 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.07403547 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.146033602 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.086597184 seconds)
  done (took 1.251776683 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.057524554 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.02014959 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.143657056 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.157160793 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.020877045 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.138487466 seconds)
  done (took 1.355220515 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.212869656 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.139172823 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.144229344 seconds)
  done (took 1.317531371 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.140119054 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.285852537 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.557935677 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.135713534 seconds)
  done (took 1.948248068 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.176587885 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.168922476 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.032596431 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.185012667 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.039680047 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016838292 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.105754908 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.023368151 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.054355984 seconds)
  done (took 1.686189453 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.101117217 seconds)
done (took 8.478919767 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.187190676 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.141625466 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.034609883 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028480844 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.135407137 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.133982182 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.151365335 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.030435209 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.136678201 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.295948478 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.16654577 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.049561306 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.158466229 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.044471978 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.267436649 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032387354 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029742436 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025518198 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.143550065 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.135084908 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.24656519 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.029614553 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.098019762 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.031029274 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.102504024 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.082035267 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.174078798 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.298519343 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.278963556 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.031342352 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.129645398 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.043570732 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.117097852 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.134466721 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.136705431 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.049729128 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020853137 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.24702886 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.11168544 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.314234551 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.154453829 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.028170543 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.142706757 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025929472 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019951001 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.145880134 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.033627361 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027177544 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.044223727 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027909411 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.043087198 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028061977 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.143737966 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024613811 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.094466901 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.142683214 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.167483406 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.099611125 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027023597 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.040563275 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.030288897 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.159400692 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039624258 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026735416 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.033252474 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020686459 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.139673043 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.041135106 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021137421 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031151322 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029192133 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.113474189 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.158122621 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.067858223 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.033146493 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.120424019 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096442661 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.048307082 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.050661934 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030898184 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020240337 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.174442533 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.026421598 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.039576852 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.027742609 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.05551129 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020907313 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036535466 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.158353207 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151642289 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.090195681 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021605285 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.398147979 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022205823 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.04632182 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021370386 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020548928 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.167586998 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020337853 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020349537 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029944305 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028676055 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022009133 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.151992598 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.101502952 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028085967 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.027421196 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020628912 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026317092 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021282123 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020660624 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020453722 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095697276 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.039218426 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019776858 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.10966716 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.128046114 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.031549587 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.036835549 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.086083099 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023473802 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.02958343 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027364282 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.1259107 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028630601 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.136750962 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021623397 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.043383081 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.121099755 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095578752 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.108688758 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.020312131 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.157119213 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030535159 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019637424 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027496575 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048804048 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029951282 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.03877631 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028415027 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.157066124 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.031150269 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.026092425 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.120970625 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019521607 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.118626479 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.095910415 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.131164462 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025676777 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.030763968 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.094294303 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044415984 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.04959656 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.04339357 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.02472209 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020367752 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020050293 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034942343 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019421687 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.020252794 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.034274144 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027174957 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.020073794 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.2457806 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030850502 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024890019 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.264517127 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.03341273 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.09945049 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041861662 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020876713 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.103436846 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022663352 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.041433123 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.08597696 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.021135209 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.096211104 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021124255 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020690693 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.028138769 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.022237636 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029541167 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.034731006 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021173947 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.034583402 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028445702 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.02080392 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.102118253 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.02251824 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.172362941 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.100720672 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.115071801 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.02126238 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.039788506 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020353586 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.137486215 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020817081 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.071321751 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.112548325 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.036119075 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.041419815 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021827252 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.095551828 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035507004 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.02038136 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.100800579 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.132266168 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.09907281 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.028457794 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.250011025 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.030049097 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.02131119 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028044736 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028798452 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.02133425 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.098113959 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025475839 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.02031276 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020647453 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022823053 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019983746 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.046286881 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020165154 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028206983 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.020810986 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023725959 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022802751 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.020043069 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028449481 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.098067227 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.132664146 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.027275596 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.041122682 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034033109 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.032168359 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.068955647 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028164567 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.146613036 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020317781 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.030309892 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043712944 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020547359 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025836347 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.020894685 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039194551 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.024459243 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.022507086 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029373936 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.021144678 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.021324559 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020818805 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021085137 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.02928681 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.022644391 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.020557414 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.020570514 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.021044291 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025707202 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.026383986 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031934193 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.041756236 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.485359849 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.02331996 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.023356071 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.02112148 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.021016341 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.021307255 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022654344 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020952059 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022984504 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021220019 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020520814 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050730993 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.026322592 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.021802743 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042491449 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.021036888 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.03055786 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.130985712 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.038276503 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.02621763 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.020280781 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.435159043 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.111680782 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.042631401 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.040853978 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.021153712 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030988 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.021056622 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.02110013 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019819052 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.048317768 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025331599 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020993177 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019838647 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.020081767 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.068433506 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028603863 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.02009903 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028539566 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020141918 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020337242 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.04857005 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021408113 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020233122 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038119737 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.03236745 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.105504861 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032119412 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023367996 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.072346821 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019556562 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020110826 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.02059192 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.118776361 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033353025 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021344537 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020069262 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027531318 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028800778 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.074173993 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.02654542 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022973278 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028042763 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019338793 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020502265 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.045178872 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.048030018 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021257819 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023779788 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019886292 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020415404 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.096714473 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027994543 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024889945 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.107635538 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022024345 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027673842 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019325601 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.479350926 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.025083269 seconds)
  done (took 22.580639928 seconds)
done (took 23.419054335 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.165245128 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.035278289 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.033805718 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.029096628 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032364702 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.033225836 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.03722005 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.031821512 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.03341506 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.032455189 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.149376608 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.02045499 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027979231 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035841865 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.029081753 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.036682443 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.033000572 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.035857546 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020838987 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.036035582 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031278657 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.033656384 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.029079241 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.035462843 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020877754 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028878633 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.159258985 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.041074327 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.024265852 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.030311101 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.028357616 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.034538031 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.028297362 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027704262 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.030084592 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025776087 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030709607 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026869028 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.15897011 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.026339946 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.021048465 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.0336473 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027742869 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.028313 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.029077748 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031940052 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025872553 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034702073 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.020312661 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.033420522 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.158828915 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.025434124 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.02426976 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.029021732 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025843455 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.030057774 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.024022457 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.032724121 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025745109 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.032927987 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028806135 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.02845398 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.020297203 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.029186137 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027772068 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.028181792 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.019491672 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025126611 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.020398008 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.020330331 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.019769893 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.029089946 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.027396366 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.025367641 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.019815201 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.020385209 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.020003049 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.033022155 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.027669587 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.029455824 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020741495 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.0258062 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.025411698 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020904076 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.025233592 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031802495 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.019923725 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020833445 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.019813929 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031991817 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026958226 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.020361207 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031776006 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.02511211 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024807265 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.020417839 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019951477 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.025098736 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.028498771 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.020396781 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019453322 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025130705 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025488279 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.029269964 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020775453 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.025043649 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024852727 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.019516031 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.02925469 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.027798811 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.029668885 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.033587131 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.029339732 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031942404 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020885794 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019460409 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.030188029 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020710315 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025274915 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.028345261 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025759717 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.028193568 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020907224 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019786643 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025021699 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.02630276 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020797105 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020863926 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020774367 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.029543433 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.027839623 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019594904 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.020422952 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.02948844 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.029374502 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.020120554 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.019988658 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.029523482 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020995147 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.026438108 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.02586313 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.029509443 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.020310765 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020793958 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019864081 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.020232105 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019890165 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025797802 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.025242975 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.021071824 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.029356591 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.027750787 seconds)
done (took 5.659302466 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.035993135 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.065886913 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.181281667 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.144227085 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.034917857 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.021749174 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025920853 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.0418205 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.024528216 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.047632948 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.047411479 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.043866675 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.166659327 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.020050358 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020894744 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.021716113 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.019227787 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.033357892 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.148609649 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.046337564 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.065853661 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.02069618 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.038397893 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.042013236 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.034614481 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.040859584 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.022256628 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021838862 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.023791236 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.039468632 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.048285406 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.020641495 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.022024271 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.041426529 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.038063808 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.030562221 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021653709 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.028492215 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.021773813 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.020800201 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.022804674 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.040289416 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.028293962 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.028442023 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.022117212 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.021367251 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021376461 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.029381619 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.035908327 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.027815476 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.034323705 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038647016 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.023131588 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.021371679 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019546231 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.029122506 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.021271283 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.021388471 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021626158 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020541478 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.021694774 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.0238148 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.027136538 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.031997441 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.025137353 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.028980321 seconds)
  done (took 3.425202694 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040833295 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.049556684 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.0358352 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.036118292 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020400984 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020943228 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020969287 seconds)
  done (took 1.15579402 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068240672 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.139762834 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.148589214 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.149371465 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.160242116 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.146844521 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.034763842 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051863141 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.020534301 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.160906491 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.158247377 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.152676392 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.025566294 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.034334595 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.054913069 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.155186765 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.034847086 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028566026 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.146245694 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.153481813 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026690748 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.053394264 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033972621 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022340936 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.150045739 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.143213072 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025371374 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.022307354 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024491086 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021524162 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021468221 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.045372409 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.142150456 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.037393297 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022635403 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020484943 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.139983161 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022972513 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.143245246 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.029606025 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.143223866 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024362039 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024230066 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.02167414 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022987845 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.14617868 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023226427 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02184419 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021153658 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.144863867 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.021159472 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.143567424 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024664764 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.027200523 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028848752 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02853414 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028766675 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022050243 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.147243696 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.032827721 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02347319 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155106968 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.15447088 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.144177478 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.155175317 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031213494 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.14439197 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.143677855 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021803645 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029795657 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022344406 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.157167938 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025838716 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024476671 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.027189358 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029264955 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.162138839 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.16291351 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.163272164 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.037091252 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.024724928 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022217851 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.159902464 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.163583246 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028092593 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022110131 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022960403 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038726387 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.048072072 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024414042 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.027006701 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022159592 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032585543 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024625884 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024783395 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.156675451 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.022630897 seconds)
  done (took 7.872735776 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.029126566 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022375358 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021773924 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.022123288 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.022405324 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.022166713 seconds)
  done (took 1.172733167 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.049741585 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022657843 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.035335436 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022743397 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.047056734 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.144582864 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.145409041 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023956313 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.039265607 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034831067 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.145249731 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.149871479 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.14836035 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.023685495 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.145799213 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.034969982 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.146941848 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027732647 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.033972903 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023820076 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.03657944 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.023366325 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023664287 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.154942751 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.024955174 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.034268424 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.032066334 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.034265451 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.033676642 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.023585016 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.023239666 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.024178978 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.029204377 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.02356166 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.147288504 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.02999097 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022959959 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.026761356 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02464535 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.02427208 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.151365802 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024356897 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.027780882 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.026886581 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.023637198 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.029361323 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.026713067 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026521148 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.148243351 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.02712177 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.026731743 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.02321882 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.02437633 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.026530441 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.029400949 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023662228 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.026580693 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.148751505 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.024058687 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.029858974 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.023061964 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.024489938 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023757624 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.024499264 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.028113249 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.026703211 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.029642472 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023856505 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023925292 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023049128 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.027017598 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023030054 seconds)
  done (took 4.385186934 seconds)
done (took 18.949639569 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.506126189 seconds)
  done (took 1.452210904 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.03570456 seconds)
  done (took 2.00821411 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.05300566 seconds)
  done (took 1.022789866 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.287893908 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.36781236 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.734230647 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092574054 seconds)
  done (took 2.43945072 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.853339537 seconds)
  done (took 1.829225119 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.215958824 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.178946662 seconds)
  done (took 1.398876176 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.499849848 seconds)
  done (took 1.468920697 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.342267978 seconds)
  done (took 2.31761958 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.191230076 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.132550829 seconds)
  done (took 1.298489508 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.611149387 seconds)
  done (took 1.583181463 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.587362215 seconds)
  done (took 5.560057048 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.18982314 seconds)
  done (took 1.223687618 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.197807924 seconds)
  done (took 1.174737997 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.700406886 seconds)
  done (took 1.674875696 seconds)
done (took 27.431924769 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043981402 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.040584823 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.040363303 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.035920959 seconds)
  done (took 1.125619965 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031292083 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025654424 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.028149941 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.028518639 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025875035 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027699827 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.028319561 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024353517 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025613266 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.02480965 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023265248 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024726418 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.027312629 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024402553 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.027023878 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.028301979 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024936908 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.025498964 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.026950302 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024494806 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.02743736 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024762359 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024908882 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.026188541 seconds)
  done (took 1.606037096 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034571233 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.026549153 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.029758121 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.025565148 seconds)
  done (took 1.095909793 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.03363792 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.031577193 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.040564322 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.045297929 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031304022 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031952263 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038706539 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.038943674 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.045840689 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.04171126 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022492324 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.022185441 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.021249184 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.040900432 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.038243691 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.016518549 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017948375 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.032120718 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.031235945 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.034138084 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.024438232 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019921158 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031617928 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.032053537 seconds)
  done (took 1.740962023 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.038163334 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.020156568 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.03689347 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.045833839 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.046414532 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.01998386 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.034321171 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.046892293 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.0840671 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.01997975 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026090319 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019786677 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.059443035 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019969132 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.035482008 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.065711457 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.069091158 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.024336079 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051657415 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019983663 seconds)
  done (took 1.766691871 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029227314 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024499032 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025860877 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019927091 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.031294939 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.027470053 seconds)
  done (took 1.14456159 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024647997 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021957961 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021856466 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.026107599 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.02249874 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021642046 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021642277 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020457607 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.020373946 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.021177305 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.021133353 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021606611 seconds)
  done (took 1.24236571 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.166024394 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.027305918 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.025219543 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020420892 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.022232275 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.021338978 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.036628146 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.023452426 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.039878415 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.021203619 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021474752 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023832921 seconds)
  done (took 1.428260793 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061308221 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06749259 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101278011 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071744813 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071879414 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051867265 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.201304564 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.034000654 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.122592486 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095111087 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073794458 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047143407 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041201631 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024487404 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058469982 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075640713 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094718598 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027832463 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071103044 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.246717528 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091609461 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.094673178 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106783873 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074875374 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049814975 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107090488 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052085871 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060837775 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081348992 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085666191 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077108843 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.055300035 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025956895 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.025749605 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110883516 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.065187515 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078265086 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.04943789 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061932063 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045051369 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068628968 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.02456194 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037835825 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.068965534 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043005271 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092061415 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.049033538 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073103206 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038013607 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101387026 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090475945 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.180471018 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044096339 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065107215 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103833005 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075604201 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101648729 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067684344 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0414604 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.229450898 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.061232366 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056075245 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063467285 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035255782 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135462656 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044298579 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.073522991 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066581369 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.051458381 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050719257 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062737465 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092678387 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082698265 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.081861002 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09265359 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047169111 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075572939 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.055675228 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081013989 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058610897 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.027243534 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081561228 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086612668 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056269079 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057595237 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088289074 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04897456 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031386893 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.058004709 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07753302 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035606141 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.071606359 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037450944 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.068311655 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098065309 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055882293 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068824522 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076411408 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034098081 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118058401 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06507642 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028313172 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073927918 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070889469 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115024653 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054615812 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030490952 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058071488 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063332461 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.118824528 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070503568 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037485015 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071490521 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107228156 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053960351 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.265839552 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055676464 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10840927 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07511345 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.196993986 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030677343 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046617025 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069666265 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062990911 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067915681 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050143015 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.039123722 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04096161 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070230131 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048401796 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035761804 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070024072 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.058237071 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.02961482 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043434728 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.031391116 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10372531 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.034614302 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091532084 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081827007 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.030084435 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062119076 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050872527 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061538107 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.053257546 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073292895 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095712235 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.143565825 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045887919 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.049896868 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062803282 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104150332 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084850838 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048967682 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.034139042 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057684923 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069122298 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.056942135 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082887195 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050701849 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065912448 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060281017 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102593327 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106907116 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056857375 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058529817 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066762158 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.08191273 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030440885 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119501373 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06234842 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077684989 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043524358 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103922565 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.069142953 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04999162 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042647088 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058601087 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.065861481 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066647091 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110113497 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.054032277 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.02804909 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054205846 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111646599 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035443533 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072650051 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.048423408 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.051390667 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080709301 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.056235981 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.195012208 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.023485844 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083718885 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114490073 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024808819 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06892373 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.063468568 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057897577 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.076446289 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.024001295 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074061784 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093117044 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072360737 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099491637 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148476415 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071910604 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073571917 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.069789624 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.061382804 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03423705 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.082475493 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09193416 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051542749 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048017477 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094612763 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076687595 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.097022888 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.076833519 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077626372 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.065020948 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064712246 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063008807 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.063739661 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108256431 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081428666 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.084638263 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040244282 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065030247 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076233123 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097234687 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03711608 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102928416 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.042537592 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079265927 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.035699648 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086275696 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.031893876 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.130645877 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035952133 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059557633 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.025396718 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.030674549 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10576396 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.079440332 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070486093 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062883225 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.103623926 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101540811 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03383789 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069110034 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.225206744 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057682639 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072285973 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063432898 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044372517 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050489349 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063376891 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040279683 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.036164181 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071952953 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049865032 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081397084 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037823757 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029376053 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095188839 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060050979 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050332786 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031214557 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061900198 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.082287285 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047254554 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040518764 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07052561 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060306899 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098072087 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045009189 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.05335816 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080987801 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035775696 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.047961956 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024045302 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.040768493 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.030931176 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086729496 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031390104 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076204708 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023897019 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090791293 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044833717 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.049713287 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059645169 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068055337 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087625797 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050865915 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102342813 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047327865 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07941489 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06539481 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052636368 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043612236 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060309202 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058293785 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082369964 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.052496232 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082428189 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105203817 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061018751 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103388106 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047944227 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081891851 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065274871 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086086195 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.074807005 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161514551 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106851617 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074288757 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071435896 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032036693 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056168189 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067647239 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.22622306 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132885422 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080833597 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.027003465 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060274497 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048642191 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064363683 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059182881 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037167867 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101431113 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057979719 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.042754899 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067103028 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.045678245 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058652212 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030825486 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056984946 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.055425441 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049666796 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051750414 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069288378 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084592824 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067868905 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100064157 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.058368025 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.047064941 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.075542544 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067252869 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065588316 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040875127 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041345692 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097427995 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077422281 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.084436952 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054660928 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066526916 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06853045 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05778774 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085564608 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065274817 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.087772868 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036372462 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.032801419 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.023419883 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.027004407 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083558981 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066410181 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069332028 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056919006 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.027325613 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061138057 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06198359 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02753845 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042508288 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052511541 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055998508 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.050095793 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067152655 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.069900396 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.053027561 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063033312 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056666392 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113378918 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.058380097 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048730069 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111088823 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119695349 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048616903 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054356498 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.027058142 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.188251632 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069651546 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103259833 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109352786 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.033659616 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041504083 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.040946374 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041837761 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025986157 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.043258453 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.044575345 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061064858 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052696651 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.069751258 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060620479 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030326547 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057392935 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054433641 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047666619 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.061833375 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075269735 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081863047 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.097658543 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068768355 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06367645 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031001161 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.035569743 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030910436 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034244904 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056725365 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.034067324 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031079623 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10189224 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.047222579 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062265879 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065626208 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043978466 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031106054 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094653084 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024546055 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095621417 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025980135 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03824487 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.037332555 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034236559 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051297304 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099464632 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0679957 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071186216 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064632809 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063032356 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148033341 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121505044 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038783186 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102570329 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031606934 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032283907 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031683265 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069330146 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047685167 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072508646 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106552855 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045518686 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060775173 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035682508 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109198574 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.062463508 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065128814 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043935764 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.035927787 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110880202 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036330654 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.192294923 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044986593 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066372596 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027010041 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057612842 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038154356 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034362625 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147122036 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.662685679 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047642916 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.030587932 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050871402 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097628389 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087193017 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050864008 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062681531 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.075506022 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055893498 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048764455 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063442868 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.155547062 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028637627 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04966761 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.058648209 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052344905 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057742901 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.053715962 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.04240056 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.048273584 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040993897 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034105691 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063719763 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041758687 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052747638 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062625829 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03858805 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.04370973 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089187267 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.059922138 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.039336265 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045280456 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.060706687 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042418663 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061012335 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024587021 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069301407 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045408022 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07643699 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.056596646 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06538031 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085335623 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051063437 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097968215 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.066679927 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081951762 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043082472 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.034213058 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085886012 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.047601521 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033116065 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106957533 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.057676495 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.062341145 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064368782 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.052047486 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073951808 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080860637 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073201739 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055275147 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034967249 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062348737 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.065596114 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047187429 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038035936 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.183229172 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030830279 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063349223 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041444325 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041515144 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069301667 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044299471 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058734989 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.05511469 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077948694 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044087486 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057298919 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066674489 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047249027 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064322956 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056730742 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085370679 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131074543 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080199856 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085774875 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.355373788 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.032912708 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.030334011 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023491352 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069805723 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034593246 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.043766914 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033598148 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090775131 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038978601 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0672866 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.214459228 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035333714 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050657778 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053076292 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.024748069 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039154544 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064606352 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042162707 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035921379 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075577696 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037345989 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087866432 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06877795 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056332965 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052492163 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037102511 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072521067 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.061182338 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.089047605 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.052053148 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.03106576 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08308718 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061123789 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099401064 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029731042 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03704979 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089887174 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0611111 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092644361 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037049811 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114474773 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103162599 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059099719 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099815159 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027147832 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046805874 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049370006 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.085835614 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044875767 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075176732 seconds)
  done (took 42.245589827 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150344152 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141939285 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077805098 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.090414917 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.246102784 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.254084823 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.107279436 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.079420871 seconds)
  done (took 2.29543022 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.025254761 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.038865388 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.036387925 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.287267792 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.055979443 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021887 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.026665968 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036998893 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021749385 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.021464379 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.057037191 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021678511 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021956243 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.437818221 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020727202 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.02648228 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.021779115 seconds)
  done (took 2.290537586 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.309350737 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.615231257 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.362766716 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.498074441 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.104609265 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.56177231 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029984647 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035262062 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.643181023 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.357210428 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.099781987 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.182339938 seconds)
  done (took 17.90087396 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031907991 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.15910858 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.158765541 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.029149072 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.028611738 seconds)
  done (took 1.566324802 seconds)
done (took 78.498905491 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.041227988 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.127558892 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021689875 seconds)
  done (took 1.279860263 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.161449895 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.157682942 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.15767826 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.161238936 seconds)
  done (took 1.734239993 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.031289965 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.031125601 seconds)
  done (took 1.165590866 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.199038625 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.255554694 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.047287828 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040703274 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035685597 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.036073429 seconds)
  done (took 1.219135867 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027743537 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.02572966 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025854961 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.026225708 seconds)
  done (took 1.202389671 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.138311216 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020461703 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022760743 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.025090326 seconds)
  done (took 1.302429915 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041465035 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.041482838 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.074594241 seconds)
  done (took 1.256988599 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040308893 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.039779681 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.034287641 seconds)
  done (took 1.217433738 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064944423 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.051364379 seconds)
  done (took 1.214836439 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.036730358 seconds)
  done (took 1.136846391 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.049216519 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.053596847 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.226215146 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.191535466 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.228876614 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.213454801 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.031666708 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.032016009 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.027489541 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.026384721 seconds)
  done (took 2.178079701 seconds)
done (took 16.552227207 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.037108896 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.144298104 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.395422905 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.043106584 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.610752127 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.393032695 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.68119823 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.045998193 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.055308167 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022767654 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039818175 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.587185657 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.684241344 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.102346082 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.670792284 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.098447916 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.518912974 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.024474233 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022618865 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023116193 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.662284253 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.023862065 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023283264 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023523291 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.514672323 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.289750601 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.025123284 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.097164636 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024307048 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.027158082 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.270306037 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024546564 seconds)
  done (took 12.305904279 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.02665897 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078485256 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027816646 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.038976729 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.024790049 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024493056 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.026604022 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.0232206 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066549415 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022848821 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040163752 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022118879 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.027004122 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023599875 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043239745 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022740165 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.025038016 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023363275 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022638395 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023185179 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.042164507 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022521616 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023346413 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023260076 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.023050027 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.038179281 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02408573 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022724809 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022851128 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026994368 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.02818568 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024202312 seconds)
  done (took 2.067088919 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079768807 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.080807033 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.028922894 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.063855596 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.076389462 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.025695589 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.108124419 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.045768824 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.068977008 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.023305057 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040611616 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022795078 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.060215728 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.024434599 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.044204768 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02305738 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.025322779 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023629117 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022702194 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023254414 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.042677168 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022735559 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023455231 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023501849 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.023352613 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.039512077 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.024007756 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.023038202 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022863236 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026851008 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.028517635 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02445749 seconds)
  done (took 2.347022266 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026127867 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026854088 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.032625296 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.035973558 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.021007951 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023495106 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024678735 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.021018363 seconds)
  done (took 1.322532474 seconds)
done (took 19.159612093 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036479366 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022975082 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.026002364 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041986415 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.02929532 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.147291229 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.020152802 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028055935 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.026398818 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025668153 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.02790549 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020965769 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024941655 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.019514685 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026927567 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020793264 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.149964191 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025835473 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.148676832 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.150244202 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.024010059 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.026887093 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029666777 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.148917307 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.149091432 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.149078289 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.030691136 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.027296626 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.021328 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.024079475 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.146232949 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.149156738 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.024232196 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.145145291 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.021699629 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.021341268 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025704007 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022954043 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.152536042 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.030930316 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.023716094 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.030339504 seconds)
  done (took 3.542622672 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.151451179 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.157997422 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.150568484 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.033600041 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029745536 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032773041 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.15674521 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.030312214 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.02870869 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.156476137 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.02462646 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028633463 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030732348 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021585606 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028037316 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024878803 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.030440263 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.02274987 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.02820092 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.028558306 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.155410196 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022053965 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.02958451 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.0296705 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024208062 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030410428 seconds)
  done (took 2.621665558 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030955411 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.044506709 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046920865 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.101497386 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.0651241 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.037330684 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037907855 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.048513817 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.055008617 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.022231682 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.044664999 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.051165447 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051044295 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.029398516 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.062132919 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.041373955 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.035239497 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023843355 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028951744 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.057373813 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.045767236 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.041898927 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.055281587 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.04255991 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02138286 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.031718648 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.029568853 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038804387 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.029654087 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034705304 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026239564 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025533331 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.023181362 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033598565 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.026271071 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020395585 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.046545035 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035504793 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.037528133 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.062452339 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.033339326 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.024868183 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049764836 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.088059583 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021869412 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.024865556 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026411149 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.034875763 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.023522902 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.05265417 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037786872 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.021815826 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.041459394 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023680708 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023632735 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037773171 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023791131 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.024229986 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.034180406 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.028350726 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.044159569 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027950358 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.042882454 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.02180758 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.033655392 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.023638416 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023782373 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020794064 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.056856375 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.029826343 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.072300096 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023394429 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020394208 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.034813904 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.03393788 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029821773 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021848065 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041308364 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.035147217 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025924898 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.033401617 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.025204701 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.025400726 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.058592611 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.021455198 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020479875 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020331856 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024703122 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.025246746 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022718606 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035202064 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021606865 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.025457607 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.036546711 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.02200113 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022681616 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.024801654 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.02335713 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021419171 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.032456079 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025874918 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023799186 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.035326968 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.023201148 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025415292 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.038067302 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031664087 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.025411819 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.023379166 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.024563212 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023797861 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026724625 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.025359987 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.024132512 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.02745427 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029965185 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.028509789 seconds)
  done (took 5.100746783 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.246517272 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.236140292 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.023360395 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.232744769 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.031334163 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.162840007 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.235686977 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.236324101 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.023076391 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.023740184 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021821197 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.177976519 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.17213324 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.184412259 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.16487545 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02531247 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.049561082 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.184841547 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.242494488 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.237244506 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.048707327 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.030070698 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.02511904 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.024028712 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.023402608 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.03133382 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039818825 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.032083862 seconds)
  done (took 4.30682322 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.031057974 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.067341495 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026299197 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.047595689 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.040508937 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022838074 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.024383916 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.023195158 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.039462916 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.028203611 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022400881 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.026534001 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.026075206 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024740338 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.0227378 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.029203337 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.029415882 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.030541557 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026496902 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.027456824 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033967084 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.047669081 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.026816459 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022802582 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.026061403 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.022585709 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.028072411 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.031505257 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.022320468 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.022339652 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019615582 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.027074804 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.03776251 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023750924 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.022364217 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.023146542 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022979843 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022738782 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023171399 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.02108301 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020847075 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027990364 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021450597 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.027850434 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.036751079 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.025029129 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.024341316 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.025595489 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025232687 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019576442 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025723322 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025864743 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.025053366 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.031327693 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.026481293 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.025367174 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.024119212 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037474491 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028491456 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.022172576 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021728333 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.021199019 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.02465237 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.029383605 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.039379794 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024760811 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021177067 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022863052 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.024244352 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.036527101 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.022007135 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028313217 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019658619 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022940437 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.025249095 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025839929 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.024204176 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.021283824 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.02247963 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.022106667 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022700907 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.023254399 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.023114699 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.025685247 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020794291 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.021235705 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.023457551 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.024710728 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.02840674 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.02166524 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025519619 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.024170021 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021504608 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.025285072 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.028281939 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.025696972 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.043435537 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.031194095 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023518504 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.02060348 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.038143989 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024656606 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.022174667 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024833797 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.027263509 seconds)
  done (took 3.971943798 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.05289809 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024953849 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.042778945 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.055058153 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.033434034 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.028537311 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.036955585 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.024077542 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044755249 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.022029652 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.032183188 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.02111523 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035893133 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031760005 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024689074 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.03269677 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.025414136 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.043386564 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.038004095 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021644306 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03194908 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.035566938 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035764468 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040873414 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.040328873 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.041383454 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.035555228 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025698244 seconds)
  done (took 2.103255851 seconds)
done (took 22.755772708 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.180979146 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.367506862 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.142928473 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.875909063 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.215118771 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.247373273 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.255517084 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.129317261 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.815108677 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.224768583 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.963656262 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.78980132 seconds)
done (took 60.420243019 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.138920527 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.301866532 seconds)
    (2/2) benchmarking "String"...
    done (took 1.383513488 seconds)
  done (took 3.837647816 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.584815073 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.148509508 seconds)
    (3/3) benchmarking "different"...
    done (took 1.182509005 seconds)
  done (took 5.042504317 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.462973612 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.893850088 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.418970838 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.138394018 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.146070255 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.586122675 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.339162293 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.810985122 seconds)
  done (took 27.465052435 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.143451739 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.401019771 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.495842877 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.607962352 seconds)
  done (took 17.858488247 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.594615074 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.587229313 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.588184642 seconds)
    (4/4) benchmarking "different"...
    done (took 1.851333228 seconds)
  done (took 7.872124132 seconds)
done (took 71.906345588 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.135978277 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.455202719 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.153738542 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.325550715 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.186311914 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.244186661 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.139656994 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.156499636 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.145173774 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.144364144 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.142989098 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.141716406 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.139807115 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.191505664 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.14766696 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.155634166 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.44391678 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.140917853 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.163131239 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.987231616 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.478784186 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.150233504 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.150563837 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.217651507 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.599028535 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.216824098 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.602060382 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.150436827 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.753747747 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.148461387 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.150302093 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.1419138 seconds)
  done (took 183.627208876 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.135685882 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.967405131 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.979554605 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.157037158 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.533382127 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.496546322 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.010937411 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.557734809 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.142383644 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.172061471 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.190693701 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.140866411 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.186782436 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.715901529 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.184559142 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.195463237 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.046777795 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.989387708 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.188151243 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.084442014 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.141687169 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.638802655 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.611801113 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.010898575 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.149849172 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.175779268 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.162054181 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.166500445 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.655342749 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.01529562 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.164555796 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.149802587 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.333854162 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.379195329 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.137319771 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.147082978 seconds)
  done (took 154.24607034 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.360408418 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.144136782 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.183901747 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.25025561 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.077377019 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.96305004 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.143230727 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.133861613 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.135302675 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.141511317 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.140031969 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.204745637 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.140630418 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.252528058 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.171141154 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.138413413 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.136703136 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.249175628 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.151123446 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.138347963 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.134789464 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.238838827 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.481490603 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.251740271 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.139732172 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.145924231 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.247009598 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.149378133 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.137430986 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.136470011 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.246617878 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.1409951 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.267428577 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.253788613 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.146117296 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.199447073 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.147432521 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.379212611 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.144484332 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.1343321 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.138091527 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.182574461 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.143658517 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.199890178 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.243184365 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.144260976 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.156079892 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.613391358 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.712983643 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.142824659 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.139591374 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.135652941 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.138606794 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.136416553 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.522983299 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.143826542 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.171001405 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.727829817 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.14804842 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.138975158 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.135981516 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.136761217 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.137907213 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.148356493 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.171609369 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.76670751 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.046959403 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.493625413 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.863824943 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.140284801 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.136976579 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.13638992 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.111208788 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.203042991 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.139551243 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.135426845 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.314598952 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.140608397 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.135525004 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.057607438 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.054528179 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.145073566 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.245955037 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.140662461 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.135890298 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.525026768 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.266540688 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.150281245 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.154907182 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.193900085 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.14020173 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.134429186 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.14263055 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.058819708 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.142948425 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.146603081 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.501002528 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.145097892 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.137779216 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.587751443 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.505181379 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.142481572 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.218789699 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.541508798 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.074124783 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.13979015 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.136299346 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.15725798 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.13781388 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.148887387 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.148727372 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.14106413 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.135895411 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.140523204 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.136696334 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.134938055 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.13746779 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.155802012 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.138025345 seconds)
  done (took 331.426659959 seconds)
done (took 671.925697307 seconds)
(4/20) benchmarking "parallel"...
done (took 1.127276171 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.39585445 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.147807875 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.260974836 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.392819201 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.347201352 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.321040481 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.347564343 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.434707914 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.373248542 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.317190367 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.373223191 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.319159301 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.432008552 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.398632616 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.440557493 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.401959424 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.342937971 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.850857428 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.362343812 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.320657652 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.346042594 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.309864121 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.304890575 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.37463054 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.444156102 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.317464311 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.545981975 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.394881607 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.349056033 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.398517186 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.414335955 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.425752472 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.35890992 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.429352259 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.391948799 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.448374459 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.305283057 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.416990287 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.329501293 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.356092457 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.376200824 seconds)
  done (took 64.745643419 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.544480432 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.340969084 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.469437122 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.444165519 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.023197706 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.458573935 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.531067231 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.337712961 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.34215759 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.461820312 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.48118415 seconds)
  done (took 18.589414488 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.388532816 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.339971611 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.46168936 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.46654017 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.564758773 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.467925283 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.505536192 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.331984605 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.344104809 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.475958319 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.489331004 seconds)
  done (took 17.982931001 seconds)
done (took 102.447581449 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.705926695 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.214279453 seconds)
  done (took 4.045694095 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.167666151 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.159247554 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.148126539 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.152615689 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.150044236 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.149907174 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.20243515 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.162761677 seconds)
  done (took 10.418249731 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.148534076 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.157015403 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.149065955 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.151009499 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.148853771 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.151043299 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.148850003 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.148967709 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.149675637 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.152458186 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.150892205 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.149021309 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.149294467 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.149076315 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.151960739 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.148483277 seconds)
  done (took 19.532327048 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.149908101 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.151693949 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.149980044 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.148901371 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.149698918 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.147440034 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.153212808 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.156873753 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.14932232 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.148902314 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.151725659 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.149068072 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.149254549 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.150366635 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.151925126 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.149338957 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.150023031 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.148353497 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.14862386 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.152435774 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.14863295 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.148094851 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.148578923 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.155291588 seconds)
  done (took 28.735143618 seconds)
done (took 63.87850098 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.95823186 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.806806742 seconds)
  done (took 7.888479126 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.152850764 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.149585622 seconds)
  done (took 3.539781535 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.151134251 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.148647458 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.150009944 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.149749018 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.152176545 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.148476295 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.14889321 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.14882562 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.14914983 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.152182378 seconds)
  done (took 12.624667359 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.148658489 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.149041122 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.155659502 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.148174135 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.148360253 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.14905614 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.151146012 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.151108885 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.149229677 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.149006603 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.148556963 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.339711024 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.150264789 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.3752061 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.149749817 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.151579128 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.148848666 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.149394435 seconds)
  done (took 22.238636332 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.150567946 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.150433419 seconds)
  done (took 3.428134066 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.147488085 seconds)
    (2/7) benchmarking "second"...
    done (took 1.14802668 seconds)
    (3/7) benchmarking "month"...
    done (took 1.152194743 seconds)
    (4/7) benchmarking "year"...
    done (took 1.148609847 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.147831369 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.147899757 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.150636189 seconds)
  done (took 9.168908783 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.596792237 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.313219021 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.369781806 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.605920073 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.827892811 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.070916843 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.830435241 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.068322436 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.963307253 seconds)
  done (took 16.772852773 seconds)
done (took 76.788953415 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.803439258 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.131686684 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.807413065 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.243712513 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.139860433 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.470555913 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.144697355 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.669194931 seconds)
done (took 37.562534226 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.132778672 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.136159992 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.183640083 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.180683707 seconds)
  done (took 19.631292014 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.136559827 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.718062719 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.181587896 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.213652207 seconds)
  done (took 19.467911474 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.666954125 seconds)
    (2/2) benchmarking "read"...
    done (took 1.682925992 seconds)
  done (took 4.49033809 seconds)
done (took 50.855944389 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.147745404 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.151968595 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.149537354 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.14877808 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.14853878 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.150810619 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.149501092 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.148693104 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.148775641 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.148560326 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.151897499 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.148964299 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.148269459 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.150123861 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.15152695 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.150956094 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.148530991 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.149439379 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.149477024 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.152637697 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.148290339 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.149617253 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.149314699 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.152796977 seconds)
  done (took 28.721612456 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.217501903 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.210466009 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.224360739 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.213248564 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.246948941 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.213004153 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.216609052 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.18658153 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.218297089 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.201275862 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.191445009 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.240720429 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.186966805 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.24569751 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.185973936 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.246820314 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.222878321 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.193050164 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.186132983 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.25078336 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.213380208 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.190889785 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.241546028 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.192445079 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.238463856 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.188997955 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.201784775 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.213672527 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.18335411 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.237797851 seconds)
  done (took 37.52760953 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.185417767 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.149125086 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.148487295 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.235569419 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.156972349 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.150531012 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.149331202 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.149125919 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.148399422 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.152571001 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.148601321 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.149191115 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.148983258 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.151529904 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.148049373 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.148627538 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.180673283 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.334062489 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.150979888 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.149370144 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.196421179 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.152312688 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.148778162 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.149771868 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.14918697 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.149836522 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.152243942 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.148005864 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.149190308 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.148927377 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.152301279 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.192750864 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.182612072 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.150545959 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.274558005 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.208330459 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.149706978 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.181166113 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.15006501 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.152769332 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.148620286 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.148696656 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.14858697 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.151847495 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.214428843 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.150309812 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.148408825 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.151471807 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.149580479 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.148516263 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.149523387 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.147796313 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.167190933 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.149633058 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.148654137 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.149370708 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.151496115 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.150264374 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.147928109 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.150048585 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.15041989 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.220091401 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.148782392 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.149531178 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.528740906 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.154870646 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.214414447 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.149496554 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.149160103 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.368644106 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.149832075 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.362259499 seconds)
  done (took 85.622686233 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.149762579 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.15034936 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.229831991 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.227781073 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.15423477 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.150927537 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.150068478 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.149527255 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.816171123 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.151654737 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.149570714 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.148677423 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.821905196 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.151967131 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.149373297 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.227965392 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.15367488 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.148254859 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.150336774 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.150086941 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.153215243 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.148856483 seconds)
  done (took 28.016114667 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.186177827 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.168181638 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.187249538 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.165386951 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.164272931 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.166470137 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.187560345 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.165410147 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.187376299 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.195069059 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.190272313 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.186234263 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.164077408 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.189444614 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.19537842 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.224461541 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.187308498 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.225376408 seconds)
  done (took 22.46360934 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.331925541 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.314865229 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.230561935 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.19621363 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.411848797 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.387713493 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.254590835 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.329503239 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.19383754 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.315668878 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.326121452 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.197868724 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.386602355 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.194580767 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.192249017 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.414747515 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.230410521 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.191649331 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.262473296 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.258113673 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.327308653 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.262030134 seconds)
  done (took 29.343620655 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.189975694 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.211128301 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.22724669 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.233557597 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.152731684 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.150963735 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.208889528 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.186347029 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.169409552 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.19259238 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.187279634 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.150197953 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.244241889 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.209790025 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.239252878 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.187523919 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.206528834 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.213341256 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.196065416 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.15166622 seconds)
  done (took 25.037318333 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.153494316 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.150195123 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.150305441 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.15077613 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.153621862 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.15184021 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.151883422 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.151289268 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.152376259 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.406923359 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.152820919 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.151739058 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.152703346 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.151608277 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.151684972 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.152338937 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.150732147 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.153440053 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.151487319 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.151396234 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.406938413 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.155718977 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.149704097 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.15120703 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.15589893 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.153038636 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.150423728 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.150032081 seconds)
  done (took 33.894925614 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.19881432 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.153917762 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.149643408 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.152232234 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.150917077 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.216736962 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.150081613 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.150105049 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.150663874 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.152142013 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.151726573 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.151640914 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.150046333 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.201038039 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.154347567 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.150328069 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.248011456 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.15525095 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.212925965 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.142341683 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.154372185 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.212292869 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.154414849 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.151400696 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.141749755 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.155993324 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.151203276 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.149965198 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.153708836 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.150935889 seconds)
  done (took 54.047000087 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.170766131 seconds)
    (2/2) benchmarking "in"...
    done (took 1.175543409 seconds)
  done (took 3.472399936 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.149140887 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.2534684 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.150692415 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.352658317 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.318750192 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.366794399 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.446461278 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.353793096 seconds)
  done (took 11.520326796 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.233968659 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.638877179 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.210411202 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.215855339 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.210205703 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.679977037 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.157093441 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.08931294 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.986575276 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.190264578 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.333972965 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.752448248 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.18705428 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.546089272 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.344001607 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.090988744 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.481857374 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.80475454 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.295265064 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.35588718 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.980958706 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.328767937 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.213020005 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.20340158 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.205570519 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.117032711 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.104431741 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.651966407 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.398489976 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.329284938 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.027025409 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.286210854 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.200191328 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.476893092 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.321177428 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.19697262 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.370882027 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.306600194 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.19709043 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.194209433 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.025734769 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.927015615 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.485263519 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.482493764 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.280982035 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.196620364 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.194100512 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.191065871 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.464950448 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.819704169 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.171542287 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.170845847 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.332873355 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.18725422 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.950433407 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.198084347 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.19180625 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.101119496 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.813812673 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.451988765 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.545465687 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.302892819 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.227945689 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.321129404 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.187512333 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.370593301 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.006738718 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.037652155 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.968374544 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.299572021 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.727284246 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.202362354 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.186805182 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.191388163 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.131534613 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.495218891 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.186949101 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.186352009 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.185716401 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.183722865 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.45569084 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.308306607 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.037855795 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.326466534 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.34966476 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.646800145 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.317345512 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.184485878 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.883873837 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.043957302 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.290618899 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.908929769 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.417678406 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.325396155 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.229246719 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.449585856 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.222622897 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.185148289 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.0357522 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.843080254 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.191848637 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.185129005 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.525714024 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.218325039 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.188176826 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.187258583 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.916907496 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.31461163 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.319572583 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.225404345 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.18469873 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.186270275 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.77541925 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.291463147 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.185422893 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.670153998 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.164110524 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.746471646 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.458537526 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.396437284 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.561216537 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.221944891 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.427232367 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.001593249 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.178633391 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.739872914 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.992032192 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.762757681 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.453796129 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.299270042 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.123505323 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.236808366 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.175311045 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.378717474 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.248912854 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.172532138 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.170264655 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.172296149 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.169759849 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.171321644 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.298520906 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.591957359 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.070403787 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.179916491 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.421148639 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.293222783 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.114949691 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.400500865 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.876372566 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.315280663 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.172658972 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.972436972 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.471190957 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.884885768 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.288617707 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.157263622 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.154437153 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.022320904 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.194628704 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.25495647 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.15736649 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.765387756 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.263096265 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.157842252 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.15375063 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.625579718 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.298528851 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.153505441 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.28202092 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.958634208 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.083282989 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.166144088 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.479778286 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.275554875 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.154505664 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.157246508 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.154242559 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.949893357 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.794694792 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.320637527 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.770798381 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.989863826 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.249648775 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.316419019 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.249713041 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.453503364 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.406353646 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.302259937 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.15523084 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.153773253 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.153350216 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.638865007 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.996050035 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.243975494 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.020450643 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.174702216 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.11412965 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.251410811 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.963762756 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.168785619 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.905015928 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.165752602 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.262058697 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.155941648 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.156213964 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.316705404 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.354765725 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.299985345 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.748112582 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.165223116 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.155638962 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.859078749 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.288901551 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.847231381 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.266631021 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.007692333 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.274242119 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.287032814 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.311996413 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.866327902 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.294041182 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.158585556 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.925255501 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.309490823 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.155114053 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.253089187 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.877838946 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.968078984 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.910507425 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.824759576 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.11260131 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.71698916 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.430434949 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.300865761 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.026752953 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.261409673 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.383522185 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.207874439 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.710120769 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.172810029 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.917893886 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.168058481 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.95432218 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.166450009 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.194296204 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.284691765 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.640216773 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.277358253 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.157033914 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.3522592 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.256741845 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.830015086 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.286312718 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.284780587 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.546987774 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.106102132 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.2607175 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.382085086 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.210419428 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.084256381 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.147951534 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.505982442 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.133216987 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.154833015 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.25159427 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.946173323 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.317717517 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.428931869 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.294896098 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.157446554 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.154580109 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.357080015 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.244616267 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.153990799 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.492734662 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.144913718 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.19368141 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.250511995 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.159735149 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.15821055 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.391907872 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.358377551 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.476260906 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.661852367 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.746778818 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.982580452 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.286739421 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.849236013 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.291176792 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.844860468 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.258859511 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.160171062 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.834914913 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.286673731 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.471650141 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.305828029 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.281280017 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.852949469 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.285403423 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.455578735 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.367010088 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.284778949 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.940410294 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.723013606 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.417151969 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.579975999 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.192366506 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.652614423 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.223939062 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.710396784 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.152059157 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.856200374 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.22799859 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.212080443 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.155162699 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.154146658 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.681961244 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.125631752 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.161572271 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.945245209 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.886843565 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.091751548 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.886007813 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.263060955 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.158972081 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.157420097 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.155892801 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.064828467 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.283932722 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.525524396 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.296272187 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.157945823 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.155608108 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.135444631 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.520509815 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.98928997 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.066477013 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.162283685 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.297361642 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.158815222 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.155364008 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.15496222 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.158210082 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.157283239 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.155081327 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.687672526 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.165909631 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.753256691 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.266231297 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.158009165 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.381865741 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.220685116 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.155015738 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.390691707 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.241005233 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.270973648 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.224147917 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.154721759 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.579185142 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.299649717 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.121534131 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.472236876 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.453640689 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.399406206 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.7642908 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.209638192 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.579381777 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.45120023 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.929348946 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.158045988 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.068162632 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.251707825 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.981289287 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.140885409 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.605326094 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.755867582 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.14988307 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.44442414 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.080354111 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.632583137 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.321076877 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.223895936 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.157575482 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.155260296 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.248255561 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.401973561 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.200795102 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.440039906 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.366251099 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.131382806 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.456883312 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.255859281 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.390753768 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.184047591 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.172472583 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.154925893 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.154168164 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.645690067 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.111347708 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.248964814 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.155390591 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.057752837 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.046311157 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.082290223 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.789794497 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.067554417 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.300442714 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.157121324 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.360971811 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.211471247 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.033103509 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.174477619 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.949130559 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.490916984 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.20238393 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.373947837 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.518792093 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.879966994 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.559355303 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.275385809 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.155014392 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.546369729 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.165169462 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.302530625 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.066577958 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.503297337 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.70562574 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.596130301 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.468189363 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.276578466 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.052110291 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.708221706 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.148720228 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.15943691 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.009694807 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.304389312 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.462682842 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.15167786 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.436293094 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.30100607 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.790735576 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.863793479 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.300278176 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.767963176 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.298807169 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.159624144 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.012457505 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.072794649 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.347804996 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.280108115 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.155459 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.173103719 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.846068322 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.763222285 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.401814282 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.235181737 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.156218096 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.290154681 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.856882689 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.26116684 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.159029229 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.154067708 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.670003153 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.205700596 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.15394528 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.577811843 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.773769888 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.296752956 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.643076428 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.270384129 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.301510767 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.462748746 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.558038049 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.366209527 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.215790229 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.153957414 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.157948757 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.154504264 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.763458856 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.165159785 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.154303032 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.756956045 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.303140612 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.917009366 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.091748325 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.431445532 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.225852887 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.571302395 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.299187466 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.639731251 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.028950482 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.248782187 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.399739131 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.214394559 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.278580612 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.943972955 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.2635831 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.157636046 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.115489638 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.522008532 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.535612113 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.580394006 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.491749358 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.248860508 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.849309188 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.273994766 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.992253734 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.171295421 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.154422528 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.62675546 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.306556091 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.620665805 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.311381771 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.645216288 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.277365918 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.447008685 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.396825746 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.247772696 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.158552222 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.153015163 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.18127217 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.190139128 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.701150001 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.055399987 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.647209439 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.294722702 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.94576471 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.686741851 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.06164755 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.321373188 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.500319098 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.471704806 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.188570438 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.137994684 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.532266442 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.242255461 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.344274228 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.250674117 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.97127432 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.227670931 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.15800688 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.74960131 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.168079082 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.152792324 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.154817135 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.054323728 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.951140635 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.267224175 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.374311568 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.256291298 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.154298439 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.76699338 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.439366923 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.190327009 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.154955719 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.157254051 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.044302239 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.271217044 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.15561051 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.518772069 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.311928524 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.510401009 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.983357757 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.602042301 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.248706142 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.155105548 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.153605561 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.868955264 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.77810626 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.186199693 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.481939024 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.191885199 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.652106457 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.133780743 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.640170347 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.699355074 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.166363055 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.281976477 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.15877675 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.18120574 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.123521097 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.079869808 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.894376284 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.60139307 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.24876067 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.974044597 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.161152506 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.216934033 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.370707204 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.22682273 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.154514565 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.156829503 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.153387889 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.628525749 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.146366574 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.158325836 seconds)
  done (took 1472.469099566 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.435823794 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.155844151 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.153918769 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.159488968 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.155608148 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.154739441 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.154254131 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.154581191 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.156748806 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.154573985 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.15477837 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.154162428 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.156418124 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.438099093 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.155581555 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.155108305 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.158231894 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.15488807 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.153623479 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.155113574 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.157850378 seconds)
  done (took 25.964276106 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.154116987 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.154921684 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.155029052 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.156381846 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.154274707 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.154152229 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.154704411 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.158402323 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.155074806 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.153512547 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.154490583 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.156908114 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.155975696 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.155237326 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.154466447 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.154566701 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.157173524 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.154500244 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.156248015 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.155910513 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.158316396 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.155096858 seconds)
  done (took 26.553149281 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.15515334 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.159313942 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.908532998 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.283489247 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.15911575 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.154810674 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.154749312 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.35911708 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.188542335 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.04817703 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.554918128 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.198480431 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.159392536 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.343930296 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.255675796 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.15514507 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.279948273 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.155503647 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.158862734 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.154751418 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.155878997 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.396746776 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.296378783 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.155097975 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.007256562 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.302150631 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.155487353 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.154280512 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.156866222 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.123412633 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.247007631 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.160586555 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.017725677 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.954717295 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.498625308 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.050256262 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.259724076 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.159935383 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.155600049 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.154350877 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.330727195 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.932900145 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.159923115 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.157013795 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.45971592 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.27841488 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.15551398 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.503066413 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.19531721 seconds)
  done (took 90.855665529 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.155762349 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.290493397 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.212520051 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.155533064 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.283672962 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.164021135 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.206705751 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.156301337 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.155447348 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.156233675 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.294855424 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.313133999 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.156694522 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.159031308 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.242972708 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.154374234 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.154729828 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.158498825 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.156939399 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.154728578 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.15584421 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.203534966 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.277934156 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.313834579 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.156013019 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.154443865 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.158381954 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.155333682 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.308023997 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.156467522 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.157929113 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.156469617 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.286105077 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.264223161 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.161240952 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.156301786 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.284464333 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.157584367 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.15822683 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.155221105 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.155320278 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.15425352 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.209384923 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.297604603 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.155604952 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.262661073 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.155070325 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.158303634 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.303516988 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.155756806 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.155014616 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.327242398 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.155899968 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.155017036 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.155688099 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.280499464 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.154773657 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.154878341 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.155696514 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.302124864 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.155935739 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.154387395 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.310829486 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.157998357 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.158006294 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.324291918 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.262779993 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.159517422 seconds)
  done (took 82.68589214 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.153305894 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.291460198 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.331590048 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.336130243 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.292600901 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.276699764 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.299389581 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.291818075 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.293471294 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.2941311 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.295604872 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.254075426 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.262350226 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.254530092 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.299530471 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.277938859 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.277481274 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.277233079 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.299367264 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.296445539 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.275565378 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.331566357 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.296536573 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.332357894 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.519682369 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.26261783 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.294718391 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.29543264 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.334740779 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.294669161 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.518248804 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.296451858 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.293178646 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.337010413 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.516208666 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.290110801 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.155585221 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.294880784 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.294667985 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.29185969 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.262107198 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.33696738 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.289625993 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.262635784 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.277361702 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.292881698 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.333053863 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.515580861 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.25741733 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.294996277 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.293341176 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.333789477 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.291726028 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.27753401 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.338213868 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.258396153 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.332723648 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.333174273 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.297973662 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.332288094 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.335450988 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.256815715 seconds)
  done (took 82.120018232 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.154057996 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.157985818 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.240468915 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.155832177 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.156059417 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.244184741 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.154428067 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.154864393 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.154721691 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.159020669 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.155391118 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.239239322 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.51920352 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.160268047 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.24146889 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.518333872 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.243771403 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.241898892 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.157569069 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.241674709 seconds)
  done (took 27.582791602 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.155124837 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.155358446 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.154537077 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.315087003 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.155771344 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.291874177 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.156293812 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.157474138 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.153953004 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.154743235 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.155884003 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.158337623 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.155165954 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.311841116 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.157363401 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.29296007 seconds)
  done (took 20.219070857 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.155046722 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.155196998 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.156385657 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.158871509 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.154670498 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.154432988 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.155565353 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.15928368 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.156010337 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.612332058 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.156803459 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.15856517 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.154143038 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.155754974 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.154016218 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.158893115 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.155636231 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.154967743 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.15527754 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.154632465 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.736206034 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.159766007 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.156512119 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.157975395 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.158382283 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.729790578 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.156718365 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.159561836 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.154977349 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.155689671 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.155114468 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.633496259 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.160524878 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.155574077 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.15564903 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.155385815 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.158860012 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.154952944 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.155512298 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.154110729 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.159041615 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.155883121 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.156767223 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.156612099 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.157615495 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.156292413 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.157457649 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.610365373 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.161799252 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.155188589 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.156691336 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.154940969 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.158334707 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.630724199 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.155837202 seconds)
  done (took 67.761879536 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.201221883 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.216089782 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.155881536 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.155085102 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.209530567 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.198234357 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.197904402 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.171080637 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.19568362 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.156956675 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.21548372 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.172192475 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.195607787 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.212397928 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.218806022 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.198422176 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.156101692 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.232804114 seconds)
  done (took 22.5914185 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.156484159 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.15469863 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.158221844 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.155614387 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.15554866 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.154552126 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.155422347 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.158869677 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.160352849 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.156225739 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.155038445 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.157792944 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.155308684 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.154999823 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.155378024 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.15880855 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.155215129 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.155043152 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.156844486 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.157008279 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.157070817 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.155139579 seconds)
  done (took 26.573547896 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.18680135 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.203977623 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.15799685 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.15874483 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.15735268 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.181941581 seconds)
  done (took 8.179789386 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.20754327 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.220465463 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.191455376 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.206252407 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.228234375 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.234148053 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.238927628 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.244836836 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.231156804 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.461283955 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.247288481 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.233041047 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.23521357 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.286373899 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.224312711 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.231715388 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.251841574 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.239931924 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.208061732 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.238493863 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.252281378 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.228547832 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.255915039 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.23642073 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.251842334 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.287668912 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.234945383 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.466162206 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.242585982 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.226938379 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.227122296 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.252306694 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233176664 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.459609848 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.206273689 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.230659094 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.244730546 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233830018 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.232574774 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.280814885 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.193011076 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.221814399 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.235975479 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.251654952 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.226028473 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.253501211 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.249093925 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.257439765 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.250613573 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.472834883 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.232608354 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.280523769 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.221228914 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.234537889 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.234410656 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.463948087 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.464426625 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.280535763 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.22366223 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.464345448 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.283926262 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.225176796 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.283313539 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.465998357 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.223291261 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.284472552 seconds)
  done (took 84.778830224 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.28329135 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.198391976 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.253856762 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.469181758 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.281409425 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.241484552 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.251099405 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.252514992 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.253941644 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.21844175 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.243619511 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.253894795 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.283781005 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.287878788 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.249355625 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.246256343 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.243147335 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.281683109 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.223183356 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.466154243 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.240478551 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.283448523 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.286790384 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.283723001 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.46053751 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.240889193 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.25047972 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.245355642 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.239652133 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.250440071 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.255025189 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.25234361 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.283901118 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.199110437 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.284753168 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.248352239 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.246856229 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.251760133 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.249681495 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.236731159 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.28672205 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.239555414 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.247470037 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.239699171 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.460467616 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.250358846 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.260085764 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.21945031 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.248356048 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.220141031 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.464920272 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.461053493 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.468653483 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.287098191 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.249512939 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.241601614 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.248139226 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.252485022 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.254110749 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.237533907 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.28215054 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.24614472 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.468597541 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.241220844 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.255915705 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.287024883 seconds)
  done (took 85.530641295 seconds)
done (took 2484.668800664 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.20814584 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.311506098 seconds)
  done (took 13.652361777 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.1555305 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.156755049 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.305609597 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.158905713 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.180129467 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.232343375 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.227978949 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.162448927 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.156456952 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.241328664 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.156193946 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.292638271 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.25686426 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.15611936 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.170382517 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.163877768 seconds)
  done (took 40.322035658 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.245893603 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.688034602 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.104537278 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.964610906 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.188093594 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.989005762 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.475340353 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.838476057 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.462105385 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.615073868 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.417097159 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.024594385 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.958517499 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.308953611 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.6582836 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.694687728 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.79329613 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.862983498 seconds)
  done (took 61.423893787 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.154140067 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.313640441 seconds)
  done (took 8.628203132 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.170086207 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.168434958 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.153394218 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.149058612 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.147699163 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.167587986 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.202683362 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.192307335 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.175874671 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.185776037 seconds)
  done (took 62.859480774 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.335875643 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.628789854 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.569461492 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.627149806 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.765095425 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.64134289 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.31528723 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.589905536 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.254901798 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.143437259 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.386536778 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.645772178 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.007045553 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.429626619 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.783101799 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.392203486 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.86740698 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.60967553 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.478880367 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.609243985 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.430472748 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.291617647 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.581970638 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.097019742 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.168138011 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.778968539 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.360525248 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.283706833 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.228620106 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.297046962 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.493382934 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.170025224 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.487057718 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.158038481 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.359852356 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.704374926 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.816651192 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.359467348 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.639848426 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.505462206 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.528393576 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.832236385 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.222599911 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.807706281 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.307060608 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.544026239 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.280451977 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.378726314 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.242820157 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.279547159 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.673891653 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.340111083 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.295826387 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.272231343 seconds)
  done (took 157.45164903 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.145188544 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.603551993 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.32244383 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.146419597 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.542689855 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.3644962 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.959529204 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.720851731 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.170933533 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.367248874 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.324709488 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.281582014 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.148383346 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.153685992 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.150941464 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.148675907 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.340450681 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.738750278 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.161594055 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.150406934 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.366542178 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.399122585 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.289002981 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.151653334 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.322683177 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.405163813 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.557966179 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.280901484 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.54965156 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.147158025 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.596541701 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.160636692 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.151802083 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.042984643 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.541087018 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.49678236 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.607596968 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.154045816 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.943546471 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.146703828 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.795500913 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.355085792 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.48738442 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.303719365 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.308330947 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.386484922 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.740351996 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.14998742 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.919484603 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.326025686 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.372436983 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.367334613 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.428905897 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.155652754 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.710198101 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.149072625 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.148780003 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.444839632 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.304815475 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.277137201 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.147778033 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.155994557 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.15084529 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.397537456 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.149069084 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.272467316 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.149288322 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.153644846 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.276205846 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.277904287 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.300989736 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.399290249 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.402291936 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.10213415 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.479673647 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.391318025 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.570631082 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.41285951 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.148494547 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.151481335 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.597895482 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.601784148 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.320372695 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.39606087 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.462281295 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.451292295 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.726537474 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.147346495 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.38115706 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.326495501 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.383908045 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.305098888 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.523340208 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.051177704 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.148757806 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.149073776 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.368254065 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.289459986 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.149810173 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.671837539 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.43927493 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.804850451 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.32437624 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.598053997 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.263709711 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.149313262 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.704807879 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.148385844 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.374103201 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.442073739 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.157725579 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.155087178 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.309496954 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.900250488 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.146797176 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.579138438 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.568845075 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.154919249 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.314944976 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.153362182 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.410299013 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.972541002 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.386912503 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.152436238 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.428806645 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.339880165 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.301907888 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.153095157 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.411952247 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.422282997 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.555949926 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.478402915 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.149973101 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.14989686 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.45989554 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.151322246 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.14886277 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.343095286 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.104611594 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.330108948 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.152050246 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.421229569 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.316247962 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.535548242 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.148736087 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.395405432 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.400941797 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.528184013 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.147985598 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.289330055 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.148007333 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.204822411 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.317027144 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.146796439 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.153023386 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.966180471 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.15159522 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.327970043 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.383858057 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.857917347 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.527285267 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.505647246 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.149995353 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.580550212 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.346855597 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.657410474 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.656164658 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.324200397 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.149726403 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.150175164 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.153728357 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.398244678 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.452071156 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.148333828 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.15383466 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.876684247 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.257661825 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.150055614 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.341611534 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.789442858 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.563722119 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.366937201 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.150200456 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.518140394 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.148222564 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.403753598 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.655048981 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.440547747 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.150828906 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.149793795 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.149718562 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.154508926 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.377702052 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.414761026 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.717390109 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.302567454 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.453634928 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.374872978 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.467038792 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.619614862 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.16099246 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.417594091 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.149838451 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.549330048 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.155437534 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.342500828 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.425777007 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.151187863 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.375476456 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.513440143 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.291733586 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.553962449 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.151606784 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.151558777 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.150724321 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.335139314 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.590892754 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.14804009 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.426670473 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.518481787 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.286614526 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.347939073 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.394695248 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.16244034 seconds)
  done (took 739.107098171 seconds)
done (took 1084.580551015 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.144675771 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.149713525 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.153159759 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.151374518 seconds)
  done (took 25.73267103 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.122380416 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.219158617 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.331659818 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.158224104 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.524402535 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.208442299 seconds)
  done (took 11.704745531 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.148048837 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.149966424 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.152631733 seconds)
  done (took 19.584897775 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.4502936 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.590884239 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.331084474 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.250021598 seconds)
  done (took 6.761158997 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.241214464 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.184383712 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.156930193 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.186275888 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.157094208 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.157083482 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.252578194 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.179831654 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.158999503 seconds)
  done (took 11.816910487 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.882833565 seconds)
done (took 81.624137106 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.509430297 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.459295848 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.153419325 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.47259306 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.302917789 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.465245999 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.267015945 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.175010933 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.441630138 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.579742182 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.596921841 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.304128765 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.638391741 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.614301408 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.361254018 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.178642869 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.166751943 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.222633504 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.834436806 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.368470175 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.841030828 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.2870651 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.146126596 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.178106099 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.097105568 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.268135486 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.41079463 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.031170882 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.31195711 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.17555377 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.235707068 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.661165918 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.311846855 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.44607701 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.245566408 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.986269214 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.603696313 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.153804681 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.426423041 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.614115266 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.444672398 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.235743985 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.147359877 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.323261784 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.568732868 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.169600711 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.129655433 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.311078746 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.737418012 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.344542746 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.537723675 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.161549042 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.814249455 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.227883382 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.241345282 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.148470639 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.09118994 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.63458266 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.317271362 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.450923234 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.171650421 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.146099598 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.222086462 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.180099391 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.367885509 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.486635563 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.593146734 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.246333557 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.765687329 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.178828851 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.171354388 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.180847439 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.836203134 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.281814752 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.146782931 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.307579821 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.409638742 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.233245949 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.148953765 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.340102061 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.378950061 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.149007627 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.295875174 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.459463976 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.313727645 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.574140418 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.594651345 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.620985589 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.567367165 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.061844158 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.766332502 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.058235206 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.252385894 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.177871748 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.157541197 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.001783313 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.247254151 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.674652032 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.291165785 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.751571503 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.179982899 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.173157497 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.618193029 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.54609539 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.988597382 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.184792334 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.29291686 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.147179555 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.448426319 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.952879936 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.254861375 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.758862622 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.154530676 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.21530483 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.690117516 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.152982444 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.460431358 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.597655101 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.21867048 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.14970729 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.449573385 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.16559678 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.279420592 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.711117871 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.564981366 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.411827319 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.15207391 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.442530312 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.154466754 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.351262295 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.160519224 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.713220851 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.681633087 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.189411408 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.410825873 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.283497933 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.148568712 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.464807997 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.209462642 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.286787548 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.461111785 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.484125539 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.323650708 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.147025597 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.499963992 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.154100074 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.359663095 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.462135217 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.318210769 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.460284605 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.243869982 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.17100793 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.141443119 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.594258628 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.753945513 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.793406948 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.419868802 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.283000597 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.664931972 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.503566208 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.9821588 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.256573578 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.20875696 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.153142111 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.170443121 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.22383157 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.147091038 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.150954832 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.449049582 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.46073471 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.683310005 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.956763381 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.158747142 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.410214128 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.303737132 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.089818532 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.716945205 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.156371865 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.555086304 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.642546475 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.289741413 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.182009311 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.149961863 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.208830255 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.881982779 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.1949975 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.496301826 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.858066319 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.521460243 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.512180283 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.367235263 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.189383324 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.533759999 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.407160204 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.453102106 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.356022148 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.551896748 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.272342173 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.539027461 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.181960677 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.458632837 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.153098024 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.179366541 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.374885154 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.643407899 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.518433372 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.38835862 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.322683494 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.490060597 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.153478838 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.419169255 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.254398339 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.533910348 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.180846533 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.40301679 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.254395247 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.540794433 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.094835396 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.273656325 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.543651627 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.275683152 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.249971881 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.685383155 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.174007181 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.48674056 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.315227209 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.295635337 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.360890412 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.182762076 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.287927472 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.331729548 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.295197502 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.412166969 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.013314673 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.54947502 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.761270842 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.283490419 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.150287858 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.579424426 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.177032495 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.172941371 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.492762516 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.376219614 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.465430325 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.260209202 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.320150493 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.228895152 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.183757409 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.581604325 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.00414822 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.867349509 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.321652102 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.182397268 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.145342869 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.594481738 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.577061565 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.217176431 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.28732385 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.717481459 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.188383096 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.355445373 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.156383097 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.156911065 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.123532152 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.284682296 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.395430976 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.697521941 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.155285028 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.301029107 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.233420711 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.574025222 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.693135886 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.204667093 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.28051442 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.443210534 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.168092536 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.54561841 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.174489206 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.311572844 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.521193747 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.272825683 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.265666346 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.14958384 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.189467922 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.704245958 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.468634023 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.675992422 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.181267991 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.620510747 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.248380835 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.37680776 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.172670847 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.246093996 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.568158902 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.296779809 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.503457803 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.157784969 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.314660263 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.411086324 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.182929765 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.156225667 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.293298775 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.772080896 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.563019514 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.476646538 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.254445589 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.098806384 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.39538557 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.154477833 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.774535978 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.285896954 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.257423427 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.744894938 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.667479334 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.155444099 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.316583287 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.151443133 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.495271703 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.178214026 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.171292488 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.283583117 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.249274849 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.147217426 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.776898459 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.322733094 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.676949504 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.25341196 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.994281181 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.307995664 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.328872776 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.27453198 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.553856146 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.931971059 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.16847474 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.299102665 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.765449299 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.221305041 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.183974249 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.414663809 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.160235461 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.739640995 seconds)
  done (took 884.653348443 seconds)
done (took 885.956665632 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.33340267 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.517394519 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.388620666 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.10614675 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.943414883 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.78719564 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.403217118 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.377288124 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.219798933 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.401112847 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.054015746 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.940550006 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.239164442 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.260745972 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.221818349 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.247813551 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.347794993 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.382202922 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.259510317 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.961090304 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.50707779 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.960216028 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.562714779 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.43806175 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.51589882 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.244060149 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.347936338 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.496342645 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.499334548 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.12049053 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.33413383 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.419000703 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.97791615 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.388068162 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.224667429 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.224447628 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.103709135 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.238614981 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.34089626 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.223834114 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.517858082 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.273235076 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.850268696 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.998809587 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.921326339 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.564217401 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.0200768 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.247814831 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.24263181 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.350627448 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.341103552 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.339317245 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.500418852 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.143977195 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.982539632 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.996813628 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.495934309 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.098917714 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.88019265 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.349093209 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.514840392 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.244290186 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.35023336 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.374859427 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.268271173 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.439014328 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.560562468 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.338623952 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.42027599 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.408685497 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.390281418 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.368039795 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.262653666 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.352508528 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.269317329 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.401998923 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.870124133 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.387820737 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.933133325 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.240745657 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.109998898 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.047582288 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.095097674 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.223563434 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.331942697 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.92681181 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.09907766 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.01981674 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.262265835 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.420943944 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.029730653 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.383940938 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.60582088 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.348238524 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.332427446 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.386495143 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.106168903 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.333364122 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.308375602 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.419565981 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.927230246 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.351176121 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.132934467 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.233409653 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.249666695 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.338991667 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.347783229 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.570671193 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.371028 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.301555283 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.516738647 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.265990992 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.366848397 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.260424653 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.221965797 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.927403107 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.427691081 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.068278285 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.333785155 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.813490368 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.445043057 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.234135064 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.517106469 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.44196395 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.333498006 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.235019453 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.249662001 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.013318294 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.248078199 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.243428795 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.326000251 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.590215324 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.352588864 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.106998772 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.369130328 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.04743936 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.381933491 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.368945181 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.221648461 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.068178353 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.235751063 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.283731564 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.442729628 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.521091202 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.384132583 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.43925698 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.257299 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.405000249 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.3340599 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.25950679 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.369868334 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.267676606 seconds)
done (took 250.039793619 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.520979488 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.346741216 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.463131051 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.443868512 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.525587995 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.533478066 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.231427086 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.588899365 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.269517763 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.571952246 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.408073822 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.041650421 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.365484466 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.367519069 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.525573237 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.397404291 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.27011801 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.42036704 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.627983709 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.512188793 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.943240675 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.408887216 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.304815669 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.575468183 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.152297416 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.943903499 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.516031239 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.287496068 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.421529739 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.925522813 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.94635117 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.42758859 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.515107294 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.920250356 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.599079601 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.892437408 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.531179943 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.978342398 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.525111888 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.52481573 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.451476553 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.065339393 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.932894555 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.964972157 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.318011855 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.510536178 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.225530828 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.09747816 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.155285814 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.896754984 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.419447731 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.976275027 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.04115903 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.489534732 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.369635624 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.85489165 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.641046647 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.690852588 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.514841514 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.475147099 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.526877435 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.574815436 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.572841428 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.352144856 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.933882447 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.44049506 seconds)
  done (took 151.404495437 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.558058146 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.484084658 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.597265226 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.611202923 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.742279108 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.618177968 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.688303575 seconds)
  done (took 14.436411585 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.217558802 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.20381025 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.410138911 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.447306217 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.208764999 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.331902701 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.296532576 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.954349348 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.432695901 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.249382456 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.527621635 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.398815062 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.882775773 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.949986698 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.300185701 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.476907177 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.187502017 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.275582682 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.264973711 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.464639909 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.957718966 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.934131032 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.397783278 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.295299696 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.213390775 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.251706864 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.200169181 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.176491576 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.249432183 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.191575153 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.213415035 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.317042848 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.206727547 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.923203084 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.230399122 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.534557165 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.210689962 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.252673952 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.343933 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.156611404 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.190037016 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.210017428 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.34479682 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.218676244 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.186572044 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.39297048 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.190316488 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.216698769 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.188169298 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.205113147 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.39354882 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.204171614 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.227626942 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.879390941 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.418975479 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.932341351 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.276433084 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.199851948 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.203750878 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.258932478 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.204395393 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.464665864 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.449051979 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.190864336 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.453716045 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.511209154 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.201758619 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.18911788 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.19071391 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.425374966 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.199165706 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.397830935 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.209766432 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.252928029 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.252347711 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.337914435 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.399656197 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.998583918 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.973155161 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.874284472 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.174759315 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.195271748 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.530591856 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.141612116 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.886516844 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.195699009 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.25242479 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.844863026 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.118555122 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.204449584 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.515555878 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.193392443 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.26360087 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.254840611 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.232329118 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.267160186 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.427426279 seconds)
  done (took 157.267879113 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.432182343 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.717661555 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.425989196 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.24400866 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.354973039 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.543965083 seconds)
  done (took 15.85642062 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.520449963 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.015085354 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.223759245 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.221761046 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.262858898 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.202264094 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.199594797 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.479328044 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.353660388 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.212695315 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.200950561 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.221711581 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.208541033 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.342759381 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.19859991 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.212583148 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.201445228 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.231518224 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.206003146 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.269201013 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.511512739 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.263167528 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.267906699 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.093617472 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.264185512 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.212156491 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.172302236 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.215932355 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.209905621 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.546410579 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.391469224 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.203135738 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.014690564 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.650850925 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.976105417 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.090940227 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.356216986 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.228845456 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.256354439 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.201031217 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.221435982 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.271767618 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.225836202 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.221483726 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.640299544 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.018173623 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.289194918 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.471508742 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.200076712 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.22245129 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.233750105 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.230177487 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.202403562 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.221510304 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.676807388 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.71570335 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.180362328 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.204103554 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.262809529 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.096397367 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.287318093 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.207187758 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.614674241 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.154749852 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.899226017 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.227145435 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.098487135 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.341917562 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.274689 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.222682144 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.222655744 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.2217044 seconds)
  done (took 121.882825333 seconds)
done (took 461.987798482 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.168054931 seconds)
  done (took 7.303528957 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.235713878 seconds)
  done (took 7.514642117 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.152034305 seconds)
  done (took 7.293738337 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.157840006 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.169736575 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.168329612 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.181571722 seconds)
  done (took 25.850517565 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.296198332 seconds)
  done (took 7.437915555 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.14738112 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.163106363 seconds)
  done (took 13.552334345 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.357521557 seconds)
  done (took 7.517218818 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.577148804 seconds)
  done (took 7.722538731 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.153425727 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.174012971 seconds)
  done (took 13.497040192 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.150025515 seconds)
  done (took 7.292013662 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.656243079 seconds)
  done (took 8.88881029 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.153012403 seconds)
  done (took 7.331170777 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.231077698 seconds)
  done (took 7.374400917 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.247490469 seconds)
  done (took 7.39479118 seconds)
done (took 137.113823122 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.149700521 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.152551265 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.152667457 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.153722427 seconds)
  done (took 25.745868158 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.482058469 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.4849962 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.462898946 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.613996885 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.428445512 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.428666657 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.485042263 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.487933311 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.427987407 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.531200343 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.487249077 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.529513127 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.636913626 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.465935544 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.4614566 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.634086129 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.545517723 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.485922341 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.433024865 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.462583479 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.637726575 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.635870967 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.916994203 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.910543661 seconds)
  done (took 38.218999459 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.369621504 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.527597166 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.329802078 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.576523732 seconds)
  done (took 6.942218665 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.193561215 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.53450335 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.517540294 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.579768483 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.517650487 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.331128186 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.516011752 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.372291833 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.338206527 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.339032313 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.771332908 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.312362222 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.323481809 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.575424437 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.333156714 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.160746503 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.159180548 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.342245962 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.536564167 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.361818689 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.426038331 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.521913878 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.517132714 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.518799419 seconds)
  done (took 35.241373732 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.918060689 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.090742374 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.526317904 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.072090135 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.864439623 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.953610214 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.440216106 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.661192077 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.427804348 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.403326669 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.890453967 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.899771131 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.308420762 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.048712448 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.921831118 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.339709617 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.337101367 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.010310444 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.578939023 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.460921529 seconds)
  done (took 39.296105027 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.150564384 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.409096732 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.380399515 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.324138489 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.149372952 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.156732192 seconds)
  done (took 26.710150802 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.19659799 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.309102411 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.467880258 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.427000766 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.31419711 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.295283279 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.803616201 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.368900746 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.917524628 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.94515202 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.7942569 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.621167558 seconds)
  done (took 22.60391514 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.151877357 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.186675361 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.152719988 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.380090122 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.195901328 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.818824888 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.169371149 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.153496556 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.680730972 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.411906608 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.297263805 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.389776535 seconds)
  done (took 44.141924406 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.343214885 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.407898058 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.498072322 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.198136417 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.675796997 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.240881737 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.53853919 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.115981463 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.960618257 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.016000107 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.681626214 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.207654939 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.691261566 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.123602314 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.894373328 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.458327245 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.981027059 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.65166484 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.594807475 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.227710564 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122741604 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.303860681 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.152315491 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.703205123 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.474189832 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153708024 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.373839909 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.401830012 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.148279456 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.412286795 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.149955069 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.687586115 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.327500261 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.457861421 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.685601829 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.233909306 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.258881299 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.153503667 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.733161413 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.448663768 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.303861895 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.315998269 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.398128417 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.155848517 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.414062628 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.938178786 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.163407616 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.796121905 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134837324 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.267896548 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.048655293 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.035347108 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.480656919 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.927056854 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.297047451 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.453692633 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.318929436 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.153587159 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.408531778 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.192318488 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.335375057 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.264376758 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.348490361 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12291594 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.387002657 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.492721843 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.511758624 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.469460761 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.413709819 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.480496845 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.538753055 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.259341573 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.976152452 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.295129175 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.648671997 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.068598768 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.513785421 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.152800901 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.861394653 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.686078882 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.133914665 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.267966649 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.831780672 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118016154 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.154367769 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.321660472 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.389757309 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.123718512 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.251780373 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.19275355 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.55911478 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.292483374 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.302685317 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.397249471 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.8557497 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133870436 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.152253387 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.439728679 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.125615269 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.717224967 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.15130519 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.132786187 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.152849944 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.714407707 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570220953 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.952421792 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.892668973 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.841834977 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.488570749 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.763616608 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314259573 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.98424032 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.537882333 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.4801429 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.152888298 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.845607279 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.156026177 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.207773763 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.50176945 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.150836204 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.126948713 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.576091444 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.32699357 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.149742083 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.386766439 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155378089 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.306628241 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.152292302 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.731626902 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.577609832 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.398451424 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.683233908 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.254017442 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.238094421 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.12213609 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.30131291 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.668170862 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.240831985 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.484382732 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.595268602 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.387209028 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.726875466 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.142538143 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.976398269 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.635236577 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.417382946 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.489577308 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.807429504 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.330728001 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.243467615 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.149413163 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.32927818 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.167680331 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.705125011 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.159644831 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.837337978 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.896409607 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.451377361 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.150513454 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.316189946 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.154640849 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.332067101 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.823309902 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.199201324 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313775219 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.444534646 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.409475273 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.150157413 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.12451263 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.530358478 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.426444623 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.680964119 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.408146728 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.818377123 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.517070348 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.634312774 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.371212739 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.533737112 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.952298451 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.395297312 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.503787378 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.895155962 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.17604619 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.180247419 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.227746732 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.576633473 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.386255822 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.900419293 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.823827985 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.775817935 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.204597275 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.163480049 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.126611061 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300880901 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.641422385 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.186260861 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.714617299 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.25367753 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.352840278 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.433226478 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.184070863 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.498047713 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.982873798 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.569539067 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507639206 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48180692 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13518524 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.728426429 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.680488698 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.669612265 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.289642927 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.476510121 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.135101253 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.205155474 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.153433152 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.499917259 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.186313323 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.876309713 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.457277445 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.716305242 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.129948036 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.303383152 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.154611244 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.17128217 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.109948879 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.322935603 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.19414482 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.010458126 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.699296281 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.416026682 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.478515379 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.156213665 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.152388331 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.430380685 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.464374388 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.428810121 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.672437722 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.396098694 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.846567753 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.257975555 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.84707208 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.321226024 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.194329707 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.88284619 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.499763201 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099128996 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.325966833 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.874045837 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.277435532 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.847546062 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.455722413 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.15314019 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.635744669 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.772188651 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.153623067 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.110251329 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.294170324 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.154350202 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.422159085 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.918295128 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.400997759 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.750296686 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.487207476 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.380107302 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.320584737 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.567248933 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.684954771 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.510422575 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.124305244 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308558108 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.238855209 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.486789089 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.150787529 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.435390601 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.781264754 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.844369317 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.936293647 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.702386186 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.372761569 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.330850708 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.627111196 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.402072241 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.471501337 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.111158017 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.826237343 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.139239752 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.294849856 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.120677469 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.955591835 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.473685966 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.53328537 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.645416407 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.217121925 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.686367008 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.568571935 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.196810933 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.337255541 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.410354077 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.154122744 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.416064522 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.148830013 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.097400733 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.601993808 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.160734375 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.02510998 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34915328 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486072332 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.312486488 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.88848689 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.19200715 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299524291 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.603099362 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.330775982 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.291112437 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.496025356 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.017973792 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.191815897 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.220201262 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.70716488 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.793489493 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.639349409 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.7408851 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.758287859 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.55025603 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.889083426 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.154228625 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.375126223 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.311235577 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.153965697 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.330749555 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.56821832 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.190200947 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.350410034 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.495370477 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.342599699 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.683009595 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.225845568 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.838131708 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.314117176 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.668143639 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.678470763 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.92509732 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.659734342 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.189277862 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.68641694 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.142806419 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.317521587 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.480958546 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.878610726 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.22641327 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.003931694 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.952969037 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.298014264 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.580323583 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.220062651 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.934752031 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316434916 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.391711008 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.371201165 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.293364459 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.120137917 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.753130729 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.929902705 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.428341026 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.320312751 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.319138295 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.265526336 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.321447898 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.653199107 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.466035088 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.891569018 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.634724551 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.386989208 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.126524959 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.152194973 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.861667463 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.511607248 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.249942866 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.479026264 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.588638924 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.210483162 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.196709165 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.156379504 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.387049757 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.882499458 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.878736754 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.502977615 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.690564515 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.623705202 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.181496932 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.894105945 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.372083354 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.51594367 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.564893704 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.058700951 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.538057729 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.488607346 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.302903015 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.129925402 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.328965855 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.167511754 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.252313002 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.907144458 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.447597486 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.19097095 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.017911924 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.794664466 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.154471574 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.178899983 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.574989054 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.378338242 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.3478063 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.15058227 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.75140109 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.510577168 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.316309787 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.138550749 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.914772862 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.123582229 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.374739929 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.154550933 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.366872531 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.987793205 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.215797514 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.822003305 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.700993225 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.228520214 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.342021613 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123048804 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.963403345 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.168057409 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.852017944 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.932250094 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.402721194 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.657178446 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.322475956 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.155865845 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.483076508 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.283157871 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.494084308 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.437094085 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.636823377 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.584701041 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.529422158 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.446291441 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.643051091 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.297863368 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.393640697 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.123805841 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.15397806 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.166527605 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.528315811 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.516891056 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.150047088 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.697151793 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.405975174 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.274868388 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.336482682 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.252986438 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.72068378 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.363982686 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.276706659 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.315626252 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.464208121 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.509560758 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.154080412 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.345747011 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.151327282 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.178686815 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.375591103 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.40466008 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.50978536 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.465648643 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.04758035 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.316053096 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.878759708 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.847630291 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.688424213 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.156678214 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.023477412 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.522121619 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.152064208 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.640194607 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.788834433 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.324957146 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.855151494 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.238857502 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.16632997 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.373269325 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.669479291 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.162062604 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.803722603 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.578510749 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.151410867 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.636520764 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.226326412 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.314763926 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.923996213 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.648672313 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.153100018 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.973795117 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.281882 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.708323457 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.85818721 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.228211118 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.159999056 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.722930136 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.13196497 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.15385372 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.219981892 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.69022886 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.177183405 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.731470209 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.266021937 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.312508718 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.164204948 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.296819383 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.15099585 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.377069106 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.346545694 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.402251239 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.428000078 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.323444858 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.159665614 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.759550854 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.850476136 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.259081844 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.340080795 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.152692384 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.508249491 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.063962492 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.155276676 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.711053014 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.4136493 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.369338537 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.582716535 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.41537391 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.192626228 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.343965076 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155521976 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.459836545 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.314850352 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.715592739 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.41272488 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.743390401 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.279017533 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.170099009 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.692523506 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.62962186 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.035138649 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.152013093 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.466393271 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.15497822 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.977374851 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.794614078 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.343176698 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.278815405 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14357153 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.740469365 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.492667901 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.283911972 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.154085937 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.366347771 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.643617528 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.128988633 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978884311 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.035896362 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.382366076 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.484136146 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.122994896 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.324972782 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17481854 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.135848261 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.65159872 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.155126086 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.53366758 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.121849131 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.653169773 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.167369072 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.231917605 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.313880936 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.507917353 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.151808081 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14094764 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.329457829 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.155810306 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.155284893 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.538973667 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.239019211 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.407552948 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.627403721 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.361302127 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.488170077 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.065439353 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.975283983 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.162320328 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.463543651 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.151196692 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.715493424 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.225370053 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.673325998 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.970439498 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.167231233 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.693808972 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.401275889 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.891455379 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.298014937 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.634060689 seconds)
  done (took 1972.893307953 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.175701021 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.265502177 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.203338709 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.237733513 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.177557804 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.178887926 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.227245084 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.192812845 seconds)
  done (took 50.805294754 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.151186404 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.124105785 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.584202262 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.335020247 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.179781247 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.348661106 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.307677474 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.646925265 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.353901533 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.169367675 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.215411347 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.200901388 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.159466311 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.185771877 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.027381355 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.241285694 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.154371767 seconds)
  done (took 91.576357236 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.193630931 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.178769189 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.177019933 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.11433793 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.204793203 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.57790003 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.16800011 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.154879831 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.541757484 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.823002105 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.181164528 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.304757492 seconds)
  done (took 81.794890582 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.190415609 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.19002692 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.189995997 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.189765576 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.192929816 seconds)
  done (took 7.10007314 seconds)
done (took 2444.235022245 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.40264918 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.69127635 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.717595773 seconds)
  done (took 4.54847478 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.223266839 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.293628714 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.369091032 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.303714604 seconds)
  done (took 6.355450058 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.432503468 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.633368435 seconds)
  done (took 4.211046996 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.522933957 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.145396764 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.680306072 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.156129698 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.15721502 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.158303324 seconds)
  done (took 19.622767135 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.185833259 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.185054277 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.184100223 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.17736633 seconds)
  done (took 5.876669993 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.152698283 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.177617528 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.159557316 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.132393248 seconds)
  done (took 18.761839421 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.434038042 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.417845894 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.904585312 seconds)
  done (took 5.904311836 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.972217221 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.289787493 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.959176555 seconds)
  done (took 6.362306586 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.112297043 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.18299761 seconds)
  done (took 5.439413561 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.317968621 seconds)
  done (took 2.461772438 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.636181155 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.645717007 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.016034375 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.033128322 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.184901414 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.467360678 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.519271786 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.444694676 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.85334908 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.737223455 seconds)
  done (took 18.680554305 seconds)
done (took 110.11846771 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.09314549 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.540071372 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.320102129 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.338139345 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.246720541 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.323528712 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.764413208 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.136405158 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.745917419 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.744821643 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.85011144 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.247293468 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.179331987 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.535953608 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.178187003 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.511937629 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.56334569 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.108547554 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.929525233 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.661402779 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.771249158 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.448240718 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.583234592 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.455236747 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.56971238 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.299632853 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.045497578 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.51805469 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.17337188 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.046436798 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.303935472 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.907028234 seconds)
  done (took 154.281916281 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.150296276 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.163044464 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.160809543 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.155863122 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.012616403 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.161721111 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.158380051 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.160449891 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.104036953 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.091200427 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.160381967 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.008185609 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.160481246 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.15508409 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.167317094 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.156032965 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.300407112 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.160619747 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.159804779 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.16297046 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.159749672 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.793444433 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.160243138 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.809033629 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.294036426 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.162356784 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.158976067 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.161049004 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.160525558 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.1607935 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.162986521 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.156802421 seconds)
  done (took 189.400485963 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.15128804 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.159034314 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.162958195 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.15579216 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.160129308 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.160460909 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.160091582 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.156060909 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.159043678 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.159881055 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.157524124 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.161802405 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.162887794 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.157658272 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.161410637 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.160252043 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.159940387 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.160029655 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.159821318 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.163004456 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.159254271 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.156283208 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.161258957 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.161654471 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.159826346 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.162006801 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.15673444 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.158592123 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.162751328 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.15847009 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.160121393 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.156293597 seconds)
  done (took 198.253180588 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.459604927 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.192805668 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.096582417 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.729805693 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.076536196 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.189819152 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.72259598 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.462267231 seconds)
  done (took 14.083399226 seconds)
done (took 557.174056534 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.862309251 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.08042887 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.334158496 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.384792935 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.780788705 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.460495891 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.381329893 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.627923626 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.893750037 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.615569658 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.65916154 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.38142731 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.999115526 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.384446771 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.346723246 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.602822798 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.579920096 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.875336613 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.35086571 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.026284803 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.372883198 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.000686037 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.63206226 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.942489828 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.654630017 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.05658415 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.300087724 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.581941872 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.374024723 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.342940016 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.205718335 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.50943662 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.406241404 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.409298889 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.597982553 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.620232869 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.522728984 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.579978966 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.332121965 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.813724708 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.034928163 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.765073395 seconds)
  done (took 76.830047335 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.183391715 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.199192978 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.36386544 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.252099254 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.846450821 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.258756937 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.418597524 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.395707568 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.278299906 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.394566395 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.426593204 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.919231463 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.429398542 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.815240815 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.414925984 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.438328968 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.256284334 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.793814234 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.413909573 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.405155105 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.221117003 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.34889538 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.221251304 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.377844877 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.213829101 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.232806028 seconds)
  done (took 37.683044536 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.242944848 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.334591918 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.441539222 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.565409895 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.415613565 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.217901525 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.535953868 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.345475106 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.052324425 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.349418632 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.26824839 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.316568505 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.364261692 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.468311839 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.758630507 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.360698432 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.346789698 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.343548586 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.344854221 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.407459606 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.296662437 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.271151396 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.535991009 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.302135058 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.874026163 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.556017932 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.504226432 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.776736641 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.723743528 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.321391953 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.317189182 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.512711358 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.575268067 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.45023179 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.329715789 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.211472503 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.211892881 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.270994241 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.11070174 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.364499743 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.52955885 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.374147052 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.585225655 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.715391592 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.288626356 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.448114702 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.644719963 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.276880739 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.319133289 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.004136231 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.489938917 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.153093539 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.339829315 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.388686537 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.316306763 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.600504064 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.390586668 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.463332628 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.39227719 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.799790185 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.269282574 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.582497337 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.352108041 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.288979553 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.494902165 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.400030893 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.374491741 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.603128763 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.585944912 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.668289915 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.730484797 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.270907936 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.233425003 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.269068124 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.34127196 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.670114309 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.656276349 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.434920814 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.593057322 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.516875266 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.729612214 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.644746626 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.172358443 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.918995266 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.241937177 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.192870992 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.289171893 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.536410774 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.509539115 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.658395317 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.724061323 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.473208741 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.682266167 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.627790039 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.633019494 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.582800306 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.197039036 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.218319296 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.432589421 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.730002382 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.288245835 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.420743522 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.841083447 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.587008859 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.515449132 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.50107732 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.593344422 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.287586245 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.631037577 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.18247165 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.412561467 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.452332888 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.462419602 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.559427939 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.186576308 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.695474617 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.284407824 seconds)
  done (took 234.099426937 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.155416171 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.16355191 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.157290664 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.161785701 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.160087632 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.785719227 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.228933004 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.155968421 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.789020538 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.229220605 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.156464064 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.155020849 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.160229397 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.155964578 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.746055163 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.71300414 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.983901381 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.155822038 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.15582057 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.160936914 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.991748801 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.159003271 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.1569238 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.158027745 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.15748848 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.155232837 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.168280781 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.204792318 seconds)
  done (took 153.828665706 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.214392443 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.603012051 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.251496949 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.305007891 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.251444035 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.232943451 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.732403551 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.354572935 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.285861412 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.227958848 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.219065026 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.446103384 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.464894981 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.819886719 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.336135259 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.330912462 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.86757572 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.35387792 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.226508959 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.22310003 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.378686006 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.567026337 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.506493283 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.490319917 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.371934429 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.493868347 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.288904695 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.221238502 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.339875884 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.716568613 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.231874464 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.598496506 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.364443889 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.220069307 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.724396443 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.568505753 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.803907045 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.775551265 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.404146162 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.182715639 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.178889825 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.45785054 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.53514023 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.259461146 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.217032924 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.880276135 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.239369221 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.641017045 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.259955252 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.178417646 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.312215966 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.329378715 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.482518663 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.206921398 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.39065467 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.362754929 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.732685804 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.196125899 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.280840008 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.527548403 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.1865587 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.708213287 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.163767399 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.285413158 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.225157969 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.37532151 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.308368604 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.744100222 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.843544832 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.262607995 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.562201926 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.399616192 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.188865394 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.487525864 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.389053157 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.667681647 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.80023305 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.346142573 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.317764165 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.296396865 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.496919031 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.204516805 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.790392382 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.317349809 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.188236391 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.718059585 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.601200489 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.189300802 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.216041299 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.325503211 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.379788782 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.427462966 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.49993534 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.285222042 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.129833436 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.480462008 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.530291317 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.231829923 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.3502541 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.205251386 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.612361628 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.405908705 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.20217961 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.530353141 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.605226728 seconds)
  done (took 162.298345849 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.908141574 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.262951396 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.392594131 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.783253654 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.556771096 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.634074764 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.483601486 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.287945872 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.482515325 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.440466202 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.440306938 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.300480012 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.174512923 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.965776385 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.26220808 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.392615465 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.291298586 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.854835026 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.493388419 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.184114298 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.523475499 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.999018651 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.519106243 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.611956383 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.645894711 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.719533769 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.852486491 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.364678401 seconds)
  done (took 49.980817052 seconds)
done (took 715.863906814 seconds)
SAVING RESULT...
DONE!
