cset: moving following pidspec: 20806
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.813290658 seconds)
loading group "shootout"... done (took 1.125750818 seconds)
loading group "string"... done (took 0.666183804 seconds)
loading group "linalg"... done (took 8.601473776 seconds)
loading group "parallel"... done (took 0.165784699 seconds)
loading group "find"... done (took 3.004674888 seconds)
loading group "tuple"... done (took 2.12493501 seconds)
loading group "union"... done (took 14.834181256 seconds)
loading group "dates"... done (took 1.473138564 seconds)
loading group "micro"... done (took 0.21933176 seconds)
loading group "simd"... done (took 4.768305481 seconds)
loading group "io"... done (took 1.076928877 seconds)
loading group "random"... done (took 9.529247385 seconds)
loading group "problem"... done (took 1.516775276 seconds)
loading group "array"... done (took 25.302558707 seconds)
loading group "misc"... done (took 1.877873447 seconds)
loading group "scalar"... done (took 43.518064138 seconds)
loading group "sort"... done (took 3.337436753 seconds)
loading group "sparse"... done (took 12.794110205 seconds)
loading group "collection"... done (took 18.643033541 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.423700117 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115765213 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128761807 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114366389 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185667382 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118416242 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129229281 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.083982274 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.944801709 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13419656 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11306545 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.423712955 seconds)
done (took 5.348302539 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166970006 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089199285 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082404237 seconds)
  done (took 1.377644723 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069567695 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06145371 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065766207 seconds)
  done (took 1.402271584 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063538133 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.132585379 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064641645 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065571272 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065542919 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064884778 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06465677 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064558198 seconds)
  done (took 1.731748257 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070640703 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066036959 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063902729 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065891912 seconds)
  done (took 1.475624837 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063428386 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120062916 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.0631126 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063103074 seconds)
  done (took 1.516530442 seconds)
done (took 8.963082799 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138070145 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.82196559 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.765267681 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120407134 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.243301054 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.365572545 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122042664 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181420977 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087277761 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073569672 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119454073 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076250259 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.384106428 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.49863649 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069667307 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.174082846 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.655651929 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.08792062 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.1335029 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.431664409 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071614526 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086021755 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082883671 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069434128 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.352614779 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.149339235 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.668693914 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091305501 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066431374 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092856259 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.06861988 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076167048 seconds)
  done (took 10.668551082 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090970555 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088434954 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067379508 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122205215 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092176652 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.0683948 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073747206 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066053805 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087193348 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.12271079 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088836269 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.096689029 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065203009 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067288829 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072135318 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195159742 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078686376 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080135651 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06606078 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079606409 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104331394 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076757479 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07688937 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076455481 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130643316 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.166913014 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09506912 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096918029 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064580319 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077175971 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114073504 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123733922 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065468792 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064058978 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118961851 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093611592 seconds)
  done (took 4.580203181 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.876282042 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094518749 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080976559 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072909892 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10487084 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112246034 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.119919098 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120538735 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097902104 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067372064 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153107931 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.666440104 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.159039662 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070274121 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.117942084 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.355879274 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.070444421 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068411493 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067017847 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069161805 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068562264 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111658554 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064409344 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174311506 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582445638 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069620595 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067667736 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094159597 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064165095 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.137278102 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090592744 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068124659 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.541576693 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063755851 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062091091 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.086743538 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.090364602 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.175827843 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067197114 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077671778 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065227979 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107354949 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077837571 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.510674459 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067938248 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.578531284 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.222703953 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071137183 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070091194 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.09960797 seconds)
    (50/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.111882112 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062266906 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065854724 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.981735809 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.143078086 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.064980709 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270883037 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068369919 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068276949 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068855831 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098730536 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065440126 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069703871 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071430709 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094703003 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.787108605 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088644382 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096531791 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067335849 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.39664392 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074540358 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069213491 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069350005 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067885342 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104246912 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064880635 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064418257 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108713764 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093091915 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087713224 seconds)
    (80/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.062456901 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068137905 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065467752 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064708298 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.319374991 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.165878068 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06475637 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.064850715 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.472246697 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06234291 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064129307 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.062137836 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066045754 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.205853399 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068090263 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063120725 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063904543 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097616564 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066448532 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.347457811 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065352138 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.480549008 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069443898 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104062755 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123010496 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067808151 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065101212 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.10257592 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068781948 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065540325 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073960993 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066056334 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064559582 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069582972 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066144389 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06656644 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069278481 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068549187 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067953934 seconds)
  done (took 22.646029722 seconds)
done (took 39.983211327 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.315315101 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079396775 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07819482 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078503814 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078778327 seconds)
  done (took 1.891378314 seconds)
done (took 3.248063264 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.251046926 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073902348 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062524758 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.200272038 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08623014 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173345881 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.213962547 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.164461661 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086983998 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086465075 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086581014 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.217605479 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.222926096 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086654833 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156884947 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.223694938 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086362673 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062612489 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086184959 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086023466 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086587411 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062476672 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086550439 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086437326 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.156137707 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086471117 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.061692311 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155583868 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.08508482 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155755827 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085274869 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.084549905 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.085106731 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.154782455 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.084915679 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.15348406 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.062066115 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.085289813 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085244808 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084612937 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084187033 seconds)
  done (took 6.093040656 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073033197 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199379452 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082942421 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060479954 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069700498 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08045562 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060499656 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080322204 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089635617 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08086714 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08037636 seconds)
  done (took 2.302614087 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068733452 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081131123 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08223873 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060129821 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071574035 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081609124 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06068764 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081452826 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083951235 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081883661 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08183624 seconds)
  done (took 2.131952088 seconds)
done (took 11.808290627 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095112091 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063953917 seconds)
  done (took 1.439099941 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220768255 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.493442645 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.917368597 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090647778 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07028804 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083688547 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.194392105 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065125503 seconds)
  done (took 7.60320379 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.096886877 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067262731 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066047842 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066839685 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069803339 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065721676 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068441619 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066306961 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066071525 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067722691 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067272813 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.06774278 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065852475 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066826806 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065306339 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065946519 seconds)
  done (took 2.497152253 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101925529 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067232834 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097513674 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060531574 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070088768 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060527505 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069488644 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071449037 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068362332 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069309173 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07094359 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069144936 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069442797 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069785397 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071192466 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071220531 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071332805 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069167331 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071430291 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071968749 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070664178 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071287768 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07172857 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069633173 seconds)
  done (took 3.135702349 seconds)
done (took 15.971258334 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171586924 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073130574 seconds)
  done (took 1.533988464 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066088196 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066405218 seconds)
  done (took 1.439053544 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071185461 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058858875 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076230449 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.06812119 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059859867 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059391559 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074878025 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059635351 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059487254 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.05979915 seconds)
  done (took 1.952951219 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061252352 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066605652 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064775205 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062772615 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065390698 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060799063 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063123295 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061178871 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06715319 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.05996345 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064208141 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081275886 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063806516 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081574475 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063433921 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063905399 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066065508 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063129791 seconds)
  done (took 2.486748206 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059237887 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.05966722 seconds)
  done (took 1.430509786 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062590264 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059851669 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06231969 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062143701 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060106153 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059681792 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060375235 seconds)
  done (took 1.733000798 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.418232041 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121876519 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341395598 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067309193 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074683148 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253270914 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062314825 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067035769 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066944411 seconds)
  done (took 2.823735643 seconds)
done (took 14.719015862 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080336342 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178620905 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.0853068 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.377025652 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089677558 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065366347 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.110740662 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.178698301 seconds)
done (took 2.499305141 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.283392885 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.226246032 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.398404761 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.1245476 seconds)
  done (took 3.066174234 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329790386 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.076834596 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075535417 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065027145 seconds)
  done (took 1.875069437 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063303292 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069209003 seconds)
  done (took 1.452824419 seconds)
done (took 8.008391522 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069441279 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059950373 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.065368727 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062145236 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.061804432 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061285086 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.090987012 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.066214072 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062171158 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.060119179 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062139048 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062154328 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062497186 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061613666 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061877085 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062649122 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06162662 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061736907 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061602975 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059763771 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061778393 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062138746 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061335408 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06225599 seconds)
  done (took 2.873410242 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077097517 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063733475 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064948083 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064235949 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06526345 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064698975 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064529569 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063574251 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065286616 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063561887 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065672228 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.0653089 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063209257 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065330766 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063738948 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065368899 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.065364322 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064016758 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063689643 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065630055 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064931153 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064213417 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065528932 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064987906 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065283249 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065209371 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063778617 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.063540645 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065019979 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065504708 seconds)
  done (took 3.288436094 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064445391 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058062512 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058685246 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068093029 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058171095 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058975632 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058833905 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057931575 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.05839821 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059612341 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059245856 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058506272 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059310271 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058414683 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058383645 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059304143 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063312196 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077823613 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.05874067 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058719032 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062755143 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059277257 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.05891515 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058530776 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059205653 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058523464 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058355322 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059133594 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058456281 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059149503 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058327693 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062810791 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063694172 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058609322 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068625365 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063438555 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058560631 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.062678831 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059411754 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058378681 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058393673 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058320692 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058769531 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.05854218 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.06883264 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.05890745 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059570721 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059085478 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.05902113 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058284205 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058301906 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060590189 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067107659 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059711882 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058324059 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059728542 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058230374 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059584411 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058531083 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059124721 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058360279 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.061904785 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059952087 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059081146 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079754495 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061207021 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070875071 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060399667 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060302231 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062362699 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059468564 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076713222 seconds)
  done (took 5.718559919 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069336962 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069901559 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077147372 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068306552 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062684883 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059370931 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063320475 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059481194 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068623783 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063292302 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059593351 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062802304 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068205584 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063532695 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060548691 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068467413 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063499906 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062631279 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059074299 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063543355 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060442098 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062989533 seconds)
  done (took 2.76344395 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136598468 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064488388 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103291804 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068537034 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067001379 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068639398 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066414906 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066277868 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066396876 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067516288 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066888888 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066797396 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06900975 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06682768 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066926708 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066574798 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066550873 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066512905 seconds)
  done (took 2.647833073 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074211666 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064575507 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089878005 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065545473 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065346177 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065635458 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069386677 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069567821 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065484659 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065785915 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070087732 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065393425 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065268345 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066122539 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065691228 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066091758 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065613144 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065879569 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069777947 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069463056 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069741598 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070940603 seconds)
  done (took 2.844671121 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076614729 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06282316 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078542602 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064940304 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058682308 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058682714 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064688677 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063970769 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064420565 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063698827 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065585624 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060442588 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067108872 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065444557 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067451604 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06549141 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064744227 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065323482 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06474212 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060831275 seconds)
  done (took 2.645847919 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.0698923 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06154878 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061377359 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066406785 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061538028 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06169692 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066968886 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062470525 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062911871 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085606393 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063383606 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063302576 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068862541 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.077728943 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063357944 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067546415 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06691894 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067065166 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061696771 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061491391 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083532021 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061783796 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.067086988 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061807697 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061477625 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061615056 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061669727 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065103992 seconds)
  done (took 3.191882047 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062247464 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061396624 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062607422 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063341149 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063095592 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063101754 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063173428 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063110352 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062910794 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063351743 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062871543 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062523501 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065827281 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062471272 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061927184 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061798409 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061880515 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062017825 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061927364 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061927318 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061780349 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061529781 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062909801 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063265196 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062283395 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061796875 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061959855 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062107137 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061615434 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061845476 seconds)
  done (took 3.226335275 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071241913 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069425263 seconds)
  done (took 1.490944935 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059816787 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075421964 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057692257 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070823532 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066605912 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062097408 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.06738475 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066870316 seconds)
  done (took 1.872932947 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066217621 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088475152 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060653813 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060685979 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063114984 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125537712 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072611653 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072547574 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076094055 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064500679 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062907568 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074855866 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061411043 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075220296 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063432037 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071500473 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068898944 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079831379 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074827985 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059905026 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073978497 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061457249 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059067517 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061086046 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060403952 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067378512 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075817272 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072692021 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068301006 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057851959 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078627512 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058954046 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060304959 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068964781 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063288001 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059330689 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09616596 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059931369 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064504617 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059367535 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071497543 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080515141 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073971747 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077776312 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061243594 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.0613699 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059015167 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061477832 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062895632 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068560555 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059024628 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06681552 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058406535 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060783225 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070342743 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061623212 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067061403 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.07011279 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0740173 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072215871 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.07060495 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077715902 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070784608 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069387554 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062151668 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08174466 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062918816 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074706395 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076424087 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062246743 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0744408 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.06038042 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059196265 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059953883 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09296275 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060573812 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060551924 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.058910305 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059111441 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060773401 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.0687297 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064264339 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066781837 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062531426 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074960626 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068354731 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059075799 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065506402 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.0767209 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062322212 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.0592899 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075301323 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062395822 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058221512 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076260954 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068921636 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060640926 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.0598385 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062584365 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072222405 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.059871904 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057622853 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067919223 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060469996 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061148961 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063200488 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06668339 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058894415 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068760038 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063081518 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060268873 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057420945 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062968378 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059423912 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057473252 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067882655 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058265153 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072045922 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064591373 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072500396 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073153778 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068709964 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074334757 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.05829543 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057142317 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076013353 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.0675524 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059082083 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075658399 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057453687 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07091936 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057246437 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.05917734 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.206999481 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059594425 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062418396 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060127907 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065314244 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061271671 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061837892 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065301083 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068293886 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071813567 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060677808 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068631428 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.05980363 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.07476549 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069390045 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063701804 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062399927 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059853231 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071127942 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065404199 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068735074 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058351597 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059229845 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.05911774 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.069936725 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069458428 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060855225 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066232096 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063571427 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059631778 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059762005 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060068247 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062838607 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062413047 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059807125 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067530694 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.067951898 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072824791 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066393982 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068201787 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058178386 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058513184 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060433315 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058561878 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063360831 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069066796 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074642885 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071003221 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.080008022 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.058970192 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.06899876 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060736568 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075961865 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072454271 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.059860645 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06358812 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.057592928 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060446791 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.06809249 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070362592 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072754171 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07418424 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063749772 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063832804 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058823528 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074044236 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059363314 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06755422 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068300301 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063406149 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059063169 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061136632 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.067975817 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063198306 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059012242 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074141426 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.064812921 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058633445 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073741597 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059127713 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069838481 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058643067 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062885073 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064282671 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060482663 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068800439 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073981595 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057722649 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059745665 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074300647 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060769979 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060684698 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067516054 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074197695 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063849276 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066833691 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069987628 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069313887 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06356046 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069201735 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059569293 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068822726 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06192401 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070506402 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058719591 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076775697 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057800304 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074010603 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059334188 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.06968063 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059498031 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068631615 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060019317 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075789863 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060646332 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059679295 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070577291 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057476931 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067913679 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057883617 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063619656 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065136763 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.06740614 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059966457 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067677983 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059731719 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.06700317 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062718926 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066482506 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067079472 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063035232 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057228791 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.06669152 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069245015 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066213008 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059003184 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059490018 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058495876 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.211272024 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061717808 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061454497 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068648272 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064649201 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065941064 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061062387 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061428363 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061284085 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068126474 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069059782 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077006159 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068245293 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.06684057 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068389955 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.05852734 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0747792 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059052045 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069596347 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.057667969 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064760813 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068149052 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.058950928 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077430053 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060205714 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067035062 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071240288 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067833978 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062665351 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076647194 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062069976 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067679686 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067250341 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063788666 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065581926 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.060826416 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067693476 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.06875275 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.069781906 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060248846 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.066783519 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068561992 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060844798 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066528783 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060801879 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067768403 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060759001 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058284491 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06346966 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070615139 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063754865 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.063970201 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059276273 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058086167 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059666528 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065889984 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063512312 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.0676806 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074362164 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058159931 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060222832 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058699579 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062478712 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076715769 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068931462 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067883294 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065202653 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059381379 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062249268 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062633337 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060658122 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064401847 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059516888 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060072031 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070895418 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06192248 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064906769 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060369206 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060275129 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068765532 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063907865 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059765888 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065832097 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058850647 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064641989 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.05874951 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06089946 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063715151 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058500548 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.0629558 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069384709 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075038898 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065563931 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068175869 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060159284 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067301099 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074303665 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066458811 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.05992746 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06857329 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.05821505 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076901846 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.067987477 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0673739 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068836931 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059855126 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075258329 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063212646 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068651796 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074233452 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059947504 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065248194 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058456822 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074332484 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063252025 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058424071 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066849432 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066641739 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064568878 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070427863 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059073229 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066456352 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063503179 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062147013 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059575995 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.05932171 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067146254 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.073797669 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.0589953 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.062044105 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.065914329 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066461214 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062612137 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070262174 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066199361 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05910378 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059866215 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.061732326 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.206069343 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072696796 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060701997 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064661971 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06472365 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059070131 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065997987 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075693511 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068653715 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068967646 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058484812 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058422698 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076793679 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062997351 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062199462 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067243694 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.06863414 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071478352 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068305235 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076174506 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.059911266 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06470105 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071069163 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.05996746 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.058881908 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063058463 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060469911 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068223212 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068680238 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066800431 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060798909 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066306627 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072759251 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060476869 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064058077 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063911579 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059735697 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070009388 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067441586 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070787286 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060498647 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059097674 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062559965 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068092956 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067026584 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068126603 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060054335 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065389402 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072808571 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066529476 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062019954 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058700031 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062456112 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068147676 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06363247 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058706192 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063735465 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062718782 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065580003 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068521111 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063715224 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058738741 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076042489 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067098849 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068375531 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.06087465 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060767662 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059663956 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059075354 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07072988 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058533733 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060530048 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063696772 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060776825 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07687994 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067758091 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076907029 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061489278 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065137519 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060439094 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07036511 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065572572 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061338502 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071464651 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060207878 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076341843 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072723964 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066036607 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059929777 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065390665 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068509029 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076118239 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070300598 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069838685 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064449487 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070288418 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062398239 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071648404 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060233344 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059682988 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071423595 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068519002 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07166373 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058826719 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069480325 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060952327 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067383902 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067231483 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06095321 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060475776 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060404843 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068740997 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06329511 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068346566 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063678377 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076089988 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059963154 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070248394 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068141389 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.069562702 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07282301 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071308377 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067000365 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059740627 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065974483 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066342798 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059522808 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063320684 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061164886 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078905773 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059787745 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059632488 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072185476 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063966225 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057923783 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063998726 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.207510998 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070984566 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06097619 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070776681 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063810058 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06037612 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06460505 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064122935 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058020232 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059052916 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059248001 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068877407 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063815193 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059605316 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078101092 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060619912 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068202647 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07055118 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065827194 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.0605038 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058093659 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060396288 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072859485 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074761734 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063140589 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067762275 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061044714 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068268963 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058115781 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068248587 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067936057 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068000671 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059321079 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059579241 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074082768 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074664136 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063978318 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068912741 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068544235 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060844405 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080334052 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.06800445 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060571271 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070262568 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061290863 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058561746 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058428203 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060628434 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071224489 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059166143 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06284326 seconds)
  done (took 41.012203195 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096133369 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059610381 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058821072 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058875242 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066876434 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059735557 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059081058 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060056641 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.05996949 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061606968 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059225524 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061874188 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06542801 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071577511 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067276917 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06285851 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05898556 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059797958 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059288884 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059735792 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065197196 seconds)
  done (took 2.793977677 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062417916 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062738337 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06331384 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063608956 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062127157 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059149828 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06333046 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059265192 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063599796 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059468635 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063692736 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059302523 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059202716 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059590755 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.05971546 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061061136 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063757614 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062243519 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059239989 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063144276 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060796319 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062983144 seconds)
  done (took 2.79633715 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060226477 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059244228 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068096294 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058212853 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058851793 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061796815 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.05847169 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063076121 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063054889 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.062979372 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067971697 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059526484 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.05801841 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064692464 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058572314 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059574348 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101248168 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060100924 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059976118 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.05854303 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061822985 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068245626 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058502259 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058797591 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063474844 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061899954 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058582393 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061253062 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059459074 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063767561 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06016802 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058252687 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067857407 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067005934 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063163991 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063292332 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06025952 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059656326 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058476662 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058786246 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067145506 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060024749 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.05857387 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059976264 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067985779 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058528122 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058152605 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067828079 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058272234 seconds)
  done (took 4.49642469 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.068933059 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110468928 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064505597 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092295108 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071778904 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064763301 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.06424128 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095099212 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061512939 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061939001 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074206458 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074924661 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064154246 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064878948 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066298475 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062749464 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06389236 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062235613 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065977362 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062813826 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065235742 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065240276 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071273813 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071730442 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062435186 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060840908 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061149662 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063009341 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07134821 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064606602 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062996471 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063255919 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071541218 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.06458814 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061286769 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060989697 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.071989398 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061698117 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061432252 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059918731 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061294147 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062579755 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.065768084 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072280684 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061736463 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066506052 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061721445 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059558425 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071566569 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061182472 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065217863 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072693431 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062435233 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062127598 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06297019 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07183118 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061994911 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060476328 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062537054 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071718093 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059868366 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062543381 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075083403 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061278994 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064843698 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072956715 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066435466 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062824124 seconds)
  done (took 6.12587064 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067891534 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093533441 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074330261 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074337392 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069350024 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069424956 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069388979 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069355844 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069227787 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073722597 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069282361 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105190041 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066753353 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071680584 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069995919 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069469198 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069394353 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069823281 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069418354 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068850358 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069340728 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075106281 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.07008655 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074685997 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071748468 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065975823 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069960062 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070588298 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07479676 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.0688609 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071804176 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.068925123 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069010706 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074567614 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07174507 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070699152 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061219403 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070815501 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070876496 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070921322 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066954733 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076865367 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070821565 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066971293 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070872395 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070754296 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076785245 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073544006 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073340424 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074397152 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071559977 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076827951 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071182188 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069702642 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.0747329 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076712728 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074444647 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074431595 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069444255 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074594522 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074804582 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076578473 seconds)
  done (took 5.960484903 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07182894 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06526867 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077458773 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058778424 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058666621 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068245245 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058923117 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059337576 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066290799 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06700284 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069122579 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069835222 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072165856 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069070914 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06988333 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072137601 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068860036 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067945278 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065897327 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067956987 seconds)
  done (took 2.821262823 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073579209 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077688937 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064685917 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068025701 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065047883 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06807856 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063628553 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064631642 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064740005 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064408864 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068945235 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069222176 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06476849 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068018343 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068814339 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067966683 seconds)
  done (took 2.542654909 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062252599 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066928502 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065089725 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060057101 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061967414 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059304405 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060102634 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05864824 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061444582 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07296679 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059761753 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062587701 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060355101 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059193533 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.05931417 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062969814 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061701946 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059878988 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060423217 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06401864 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.067923743 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060361991 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062256259 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.059490017 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062236777 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067876414 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.06099624 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062059358 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059591567 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062195007 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062060627 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066344669 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06271139 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060813064 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059846453 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061288721 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060643938 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062697114 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.063382696 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061588724 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058816147 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065517236 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060807387 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060544934 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061321751 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062563272 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061690962 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065417855 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060264742 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062082166 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060205464 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061756554 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060184048 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066978421 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.061983442 seconds)
  done (took 4.877393484 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075748475 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064326666 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058724802 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058492037 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063532961 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064172797 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064195688 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.063896952 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064485553 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058588659 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.0645137 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063736245 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064903313 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06427622 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066353797 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06541204 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059824591 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065577104 seconds)
  done (took 2.62668588 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065188461 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064439415 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063037992 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060369445 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060843261 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06521374 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058929977 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060509035 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060108159 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060688777 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060983385 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06021664 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060022086 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059929296 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064709318 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061065352 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.06018484 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058930484 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060540595 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059174839 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065319615 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058908102 seconds)
  done (took 2.819548945 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.085977075 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082651027 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125171476 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078120131 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086587107 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070208727 seconds)
  done (took 2.000392078 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091544665 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095846014 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063568381 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063762547 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068206472 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066875451 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066536942 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068234924 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072088247 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072772603 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068352752 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072112265 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07169719 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074084848 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07030468 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070335828 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068727276 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069066778 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065720733 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076437301 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068317536 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07227937 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06864964 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06829178 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068317623 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073911318 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071655752 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070957578 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066807018 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070472493 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068438027 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066758563 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070085502 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070736459 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063614587 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07003079 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066778716 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074366712 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068653161 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071952355 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063860852 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068473812 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070284614 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070284566 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070472564 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067422465 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070008506 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067340886 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067194895 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076598724 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068920142 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072019038 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068829673 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070481581 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070326144 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075751876 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07087138 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07230347 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069016493 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070477308 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072209895 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068816761 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072251317 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070739898 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06852916 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072226141 seconds)
  done (took 6.127925949 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101700892 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064618186 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06736746 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070623255 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072101386 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067416687 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067584857 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066973268 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067505276 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065023314 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10242204 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06738294 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072341636 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075157579 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067289614 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067295577 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067158597 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072035779 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064074275 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075220207 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066757319 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071818138 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071712897 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072226181 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070414552 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069079407 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067494095 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06677749 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066869032 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066679292 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070072408 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067248273 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07189655 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063695305 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07169393 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066756819 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066574665 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070276917 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066907775 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068484059 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072303983 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07419756 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06687633 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066877663 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070480404 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06741668 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067240349 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064503821 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067778403 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065110285 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070668516 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071102431 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070617235 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072176883 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067326863 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067131317 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067254814 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067243226 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067335154 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068723688 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072338953 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067121841 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075712293 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067341787 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067103152 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072479579 seconds)
  done (took 6.102993 seconds)
done (took 126.992008388 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.215943764 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187892257 seconds)
  done (took 1.861101748 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072490731 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.162750257 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072676391 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072449342 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.105931232 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105173897 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073819874 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070273021 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072548178 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070045222 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137165302 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073512196 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069870274 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069900656 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070286324 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069957578 seconds)
  done (took 2.84713599 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105075836 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.18133926 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.10042326 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068195287 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.149152354 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074240703 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.069657307 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07458208 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074749369 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068626666 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104703587 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.080958863 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073196971 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.073990611 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069616611 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073149022 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074290323 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.07468386 seconds)
  done (took 3.073192945 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101184983 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089577664 seconds)
  done (took 1.678786898 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.15115444 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102964215 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142461484 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.341582126 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133811929 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.139166496 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142396706 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.135921964 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107737846 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131395822 seconds)
  done (took 3.008417775 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103402675 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102110593 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.303630539 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.099757934 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079951069 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075047027 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072771719 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077448295 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07275907 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.073839674 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.118966258 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072901953 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070157282 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.120993552 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095852366 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.103850242 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068570842 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075509894 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077445872 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068503725 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075358606 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077672207 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175494389 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075628966 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096824404 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073128915 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074969033 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072267883 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072051079 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076097961 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076468917 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.097389987 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075843804 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.079867358 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074283282 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094251286 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069334255 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096085538 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072170668 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.069943768 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072549687 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076499199 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069839175 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.075513111 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072549018 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075310955 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077581174 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068723742 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072890327 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.071693682 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070108023 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074340385 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073695755 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074651239 seconds)
  done (took 6.130045631 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105586789 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105848744 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067755294 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.10946221 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102823435 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068146582 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101705491 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098130662 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10562295 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067310118 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067011055 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066879285 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073814846 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076687873 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113653683 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105549966 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069261809 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067485796 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104684201 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.10422074 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066430905 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099019021 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097221242 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104065464 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066263094 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067990957 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065901388 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066980687 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071608958 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.0725002 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066688067 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07318241 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078210849 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073042289 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065897631 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066200765 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066357363 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073045372 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074018643 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073923551 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.071952982 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066021065 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066431899 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067205524 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067250529 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06608915 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07248859 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073318425 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07247852 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06645129 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06697155 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066392815 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067135992 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072918294 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07198686 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073826064 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073635798 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066581215 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066718101 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068086999 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074485798 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074421057 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073757062 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067926611 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074831581 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.0666281 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075228831 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078660442 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066845244 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067078262 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066710288 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066601768 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067175658 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072268188 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072343377 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066742819 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06656299 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066130962 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074979824 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072764954 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066716622 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.071650763 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066131496 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066691624 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066945028 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067362977 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.071801712 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073623589 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067477117 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066837529 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067104376 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066309511 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065825072 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.072001546 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072919099 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073235281 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072417772 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066947462 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072865923 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072287779 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067098419 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072317938 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066614101 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066577104 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06671438 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071955521 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070551881 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072752848 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066095268 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065269908 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071116825 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073600654 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065472461 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07076152 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073307149 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.210628516 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067852416 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076741298 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067775234 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075023465 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067700146 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075462208 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067329055 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073534322 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067082214 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066205403 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066711319 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072610234 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067214675 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066771335 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067791561 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066938108 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072752429 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076149832 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067667528 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072527597 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072542162 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067230486 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07238371 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066934744 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073733772 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067038837 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067093881 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066069307 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075124086 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066690732 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066733245 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066663647 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074131695 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06688811 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074736103 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072487682 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065949503 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076196734 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074495559 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072144473 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074644225 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067343039 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066823628 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066291794 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069087606 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071638352 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072778187 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067037029 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066611247 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071622548 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075025528 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066232568 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072632063 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07240639 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072647864 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067066527 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067033155 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075397334 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074954514 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072751601 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072722842 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073170478 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067072079 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072442177 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07242199 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066483745 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078166418 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066974078 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076913492 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073054908 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071829198 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073301725 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074472754 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074785324 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075014721 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077293383 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066883515 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066838414 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072757298 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066578233 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067055169 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072655515 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067264612 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067248818 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077241686 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066894391 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074853336 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066279264 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073465269 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066184726 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066773575 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07728148 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06744568 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067175235 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072403612 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066459679 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071917601 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074847357 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072368994 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06672851 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066792522 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072802647 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073213875 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06634811 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066100313 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06712517 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071681565 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07127741 seconds)
  done (took 17.832890928 seconds)
done (took 37.93001003 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166146702 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112709575 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207512307 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.19688867 seconds)
  done (took 2.271740901 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.098439257 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063609989 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077834949 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087800582 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063505779 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.074399245 seconds)
  done (took 1.999121549 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.1984627 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173497302 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.242346182 seconds)
  done (took 2.138743947 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.364631628 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.146291121 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212623256 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.497057062 seconds)
  done (took 2.847802174 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.10762731 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.0975121 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075240805 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108603103 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08235761 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060706386 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130691675 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06760413 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097136279 seconds)
  done (took 2.417378386 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.136751533 seconds)
done (took 13.360508774 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.223555249 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.216790737 seconds)
    (3/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.480983593 seconds)
    (4/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.092214377 seconds)
    (5/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.173319832 seconds)
    (6/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.188159919 seconds)
    (7/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.101984056 seconds)
    (8/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.185760978 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.219965127 seconds)
    (10/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069280274 seconds)
    (11/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.197775333 seconds)
    (12/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072747229 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.089658347 seconds)
    (14/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.216814291 seconds)
    (15/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.146360348 seconds)
    (16/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.197568972 seconds)
    (17/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.199508287 seconds)
    (18/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.160314813 seconds)
    (19/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177870456 seconds)
    (20/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.149176568 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07396455 seconds)
    (22/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071820921 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075297051 seconds)
    (24/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.161930547 seconds)
    (25/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.162017382 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077601192 seconds)
    (27/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072821205 seconds)
    (28/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.072862739 seconds)
    (29/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.151230828 seconds)
    (30/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.094227597 seconds)
    (31/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.078096454 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.253113612 seconds)
    (33/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062753429 seconds)
    (34/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.074412525 seconds)
    (35/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.221134277 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072470201 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.088344465 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.162374919 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.172887096 seconds)
    (40/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.16106848 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074675148 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074267673 seconds)
    (43/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073254379 seconds)
    (44/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.186568746 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.089278126 seconds)
    (46/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.075241962 seconds)
    (47/341) benchmarking ("sort", Int8, false)...
    done (took 0.151707891 seconds)
    (48/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.169750308 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.07676068 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.113743626 seconds)
    (51/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.121516414 seconds)
    (52/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070284863 seconds)
    (53/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064489204 seconds)
    (54/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071232118 seconds)
    (55/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.19152456 seconds)
    (56/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063590109 seconds)
    (57/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.073169588 seconds)
    (58/341) benchmarking ("sort", BigInt, false)...
    done (took 0.260132761 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.146520538 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.063483827 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.085724631 seconds)
    (62/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.216613249 seconds)
    (63/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.140920332 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121843554 seconds)
    (65/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063775564 seconds)
    (66/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.217728489 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086413539 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065222188 seconds)
    (69/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.14957036 seconds)
    (70/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071131009 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.214566946 seconds)
    (72/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083678242 seconds)
    (73/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.250602866 seconds)
    (74/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073073529 seconds)
    (75/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.166370008 seconds)
    (76/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.156463813 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.085337901 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070575245 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.084707627 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.067447062 seconds)
    (81/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.071682934 seconds)
    (82/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.072271583 seconds)
    (83/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.166774738 seconds)
    (84/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.164232777 seconds)
    (85/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.070612734 seconds)
    (86/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.090384435 seconds)
    (87/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.201615191 seconds)
    (88/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.069891324 seconds)
    (89/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.063820057 seconds)
    (90/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19039654 seconds)
    (91/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.107465496 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.183780345 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139113027 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.119115979 seconds)
    (95/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.060978822 seconds)
    (96/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.072125121 seconds)
    (97/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.06302908 seconds)
    (98/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.063066368 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.149475715 seconds)
    (100/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.080305811 seconds)
    (101/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.064599455 seconds)
    (102/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.172599241 seconds)
    (103/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.070537569 seconds)
    (104/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.075439448 seconds)
    (105/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062627641 seconds)
    (106/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.062778662 seconds)
    (107/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071216067 seconds)
    (108/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.163914282 seconds)
    (109/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.146071744 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.110652983 seconds)
    (111/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.072439641 seconds)
    (112/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.188722441 seconds)
    (113/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.063196721 seconds)
    (114/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.188009738 seconds)
    (115/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.0621039 seconds)
    (116/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.214975157 seconds)
    (117/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.066350249 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.072990138 seconds)
    (119/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.065561671 seconds)
    (120/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.149892635 seconds)
    (121/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.062618181 seconds)
    (122/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.072282452 seconds)
    (123/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.139288829 seconds)
    (124/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.062301384 seconds)
    (125/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.072881093 seconds)
    (126/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.220762186 seconds)
    (127/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.063720271 seconds)
    (128/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.070157338 seconds)
    (129/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080600724 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.070435432 seconds)
    (131/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.072779624 seconds)
    (132/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.06994949 seconds)
    (133/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.06183863 seconds)
    (134/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.077944754 seconds)
    (135/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.069741864 seconds)
    (136/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.069362082 seconds)
    (137/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07131699 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.079963602 seconds)
    (139/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.079048727 seconds)
    (140/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.070579212 seconds)
    (141/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.136737385 seconds)
    (142/341) benchmarking ("sort", Bool, false)...
    done (took 0.138027504 seconds)
    (143/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.062996185 seconds)
    (144/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.073627722 seconds)
    (145/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.131428091 seconds)
    (146/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.062464841 seconds)
    (147/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.06942055 seconds)
    (148/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.070368265 seconds)
    (149/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.190368029 seconds)
    (150/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.069554876 seconds)
    (151/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.071726261 seconds)
    (152/341) benchmarking ("sort", Int64, false)...
    done (took 0.063672356 seconds)
    (153/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.073859783 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.062480175 seconds)
    (155/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.06236538 seconds)
    (156/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.062275259 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.080477483 seconds)
    (158/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.157828763 seconds)
    (159/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.063630422 seconds)
    (160/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.061630021 seconds)
    (161/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.078365652 seconds)
    (162/341) benchmarking ("sort", Float64, false)...
    done (took 0.130795591 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.14901598 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.062607429 seconds)
    (165/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.061767941 seconds)
    (166/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.061815037 seconds)
    (167/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.079290342 seconds)
    (168/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.061308151 seconds)
    (169/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.18903907 seconds)
    (170/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.070372802 seconds)
    (171/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.077841422 seconds)
    (172/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.079214694 seconds)
    (173/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.06873374 seconds)
    (174/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.135809326 seconds)
    (175/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.061309996 seconds)
    (176/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.225333731 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.062035558 seconds)
    (178/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.062608215 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.070117556 seconds)
    (180/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.063608165 seconds)
    (181/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.065058674 seconds)
    (182/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.061096947 seconds)
    (183/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.062348669 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.089574583 seconds)
    (185/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.061483885 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.060410757 seconds)
    (187/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.062211766 seconds)
    (188/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.061458018 seconds)
    (189/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.358913809 seconds)
    (190/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066459989 seconds)
    (191/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.067519859 seconds)
    (192/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074881866 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127410815 seconds)
    (194/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066024487 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066282255 seconds)
    (196/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.166443456 seconds)
    (197/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066949154 seconds)
    (198/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069846533 seconds)
    (199/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069817038 seconds)
    (200/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072938831 seconds)
    (201/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07768385 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066073454 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148742911 seconds)
    (204/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066252536 seconds)
    (205/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.06802066 seconds)
    (206/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.082816316 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.065608318 seconds)
    (208/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070621406 seconds)
    (209/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.065491487 seconds)
    (210/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068086282 seconds)
    (211/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.065245183 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065124183 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064997927 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.068362511 seconds)
    (215/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17347403 seconds)
    (216/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.064968676 seconds)
    (217/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071590632 seconds)
    (218/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063153122 seconds)
    (219/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065329374 seconds)
    (220/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.066376735 seconds)
    (221/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089900567 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111095353 seconds)
    (223/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.063874872 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072081392 seconds)
    (225/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065141999 seconds)
    (226/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07285964 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071471186 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169336499 seconds)
    (229/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.063007965 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.090406705 seconds)
    (231/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.064919877 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066242315 seconds)
    (233/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064977979 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083306815 seconds)
    (235/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086621431 seconds)
    (236/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065141442 seconds)
    (237/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.163773572 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.090462837 seconds)
    (239/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06495404 seconds)
    (240/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.062917898 seconds)
    (241/341) benchmarking ("sort", Float32, false)...
    done (took 0.13654592 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074437915 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076137544 seconds)
    (244/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151520123 seconds)
    (245/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064812094 seconds)
    (246/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070951941 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071530323 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071348269 seconds)
    (249/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067460558 seconds)
    (250/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.062435051 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13207741 seconds)
    (252/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072568673 seconds)
    (253/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064372308 seconds)
    (254/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063027816 seconds)
    (255/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.080792005 seconds)
    (256/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064215857 seconds)
    (257/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.066396445 seconds)
    (258/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065427763 seconds)
    (259/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064439089 seconds)
    (260/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07177916 seconds)
    (261/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071816588 seconds)
    (262/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.138324821 seconds)
    (263/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06396938 seconds)
    (264/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175908083 seconds)
    (265/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067150591 seconds)
    (266/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.0729898 seconds)
    (267/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065921078 seconds)
    (268/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065277179 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127869598 seconds)
    (270/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06898911 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064127319 seconds)
    (272/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090673943 seconds)
    (273/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13096845 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064170034 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.08924383 seconds)
    (276/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.082310429 seconds)
    (277/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132245291 seconds)
    (278/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065134388 seconds)
    (279/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064509896 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148871994 seconds)
    (281/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.064024588 seconds)
    (282/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076308258 seconds)
    (283/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083692303 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148972644 seconds)
    (285/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.068031971 seconds)
    (286/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065244031 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063706337 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064957012 seconds)
    (289/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064060906 seconds)
    (290/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068046326 seconds)
    (291/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068412246 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064317485 seconds)
    (293/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.063999546 seconds)
    (294/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066703997 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140389663 seconds)
    (296/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.064168647 seconds)
    (297/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071948563 seconds)
    (298/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.067658188 seconds)
    (299/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064427372 seconds)
    (300/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.063929036 seconds)
    (301/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065785123 seconds)
    (302/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075211154 seconds)
    (303/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064843253 seconds)
    (304/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.161124267 seconds)
    (305/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067688355 seconds)
    (306/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088516887 seconds)
    (307/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.063839935 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.087753679 seconds)
    (309/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066749404 seconds)
    (310/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064015448 seconds)
    (311/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.065957319 seconds)
    (312/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.063810682 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.145392567 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.128580741 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064001093 seconds)
    (316/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064492295 seconds)
    (317/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.075395203 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.150882566 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121303349 seconds)
    (320/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067427917 seconds)
    (321/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.0644479 seconds)
    (322/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.237892675 seconds)
    (323/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.069304298 seconds)
    (324/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068514541 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15368433 seconds)
    (326/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065747389 seconds)
    (327/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.197714451 seconds)
    (328/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066954257 seconds)
    (329/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.066878373 seconds)
    (330/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078904099 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086043746 seconds)
    (332/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066568662 seconds)
    (333/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094202139 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066321462 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090697733 seconds)
    (336/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069445201 seconds)
    (337/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.091315253 seconds)
    (338/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064318004 seconds)
    (339/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065457842 seconds)
    (340/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066329071 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.144666883 seconds)
  done (took 36.109463119 seconds)
done (took 37.657140468 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090789308 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078784542 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077513596 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073792916 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077228814 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075587215 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077544231 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075295573 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076503994 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076090912 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.07561977 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063771629 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072065778 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079261623 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072985755 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079638502 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076363138 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079349926 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064461112 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078264401 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.0911214 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076072628 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072372466 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077422572 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064191083 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073203314 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087743387 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084878782 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070690493 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073239475 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071654741 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082253735 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071855757 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07019193 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073711685 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070045722 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073568247 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070685816 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086924483 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069883062 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06423873 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076109485 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07147989 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072241848 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072469719 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075724181 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069213119 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077157165 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06351042 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075453306 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087272527 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069302151 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070812792 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072388146 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069352037 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073310716 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07103861 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.0761131 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069678102 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076166418 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075566992 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072904694 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063998675 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073017347 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071094289 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071806251 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062880372 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069031594 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064479841 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06436791 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063457479 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073311691 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070719941 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068993148 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063465633 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063893961 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063265311 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076347218 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070248948 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073525685 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064289652 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069469304 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069037879 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064513955 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069051162 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075531681 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062781569 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06410097 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063038578 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078077473 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070311289 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063658159 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075218996 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068656061 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068495749 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.0638825 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062904808 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068777954 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071979433 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063593164 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062563285 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068788875 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068602335 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072416033 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064107996 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068623713 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068545029 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062620201 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07338026 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07143169 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072396287 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077059448 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.0723744 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075448053 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063865462 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062532216 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073191201 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.06408975 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068634964 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071526078 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069024057 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071852289 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064331574 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062883828 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068652043 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070068327 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063969318 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064237768 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064027029 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073061435 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07111019 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062489463 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063657524 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072373596 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072559168 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062865445 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062629026 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073320744 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063870336 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069533842 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069640855 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072553371 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063096071 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063887234 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062673695 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063193642 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062876589 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069857225 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071743269 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064208506 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072529753 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.069870783 seconds)
done (took 12.490396974 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067640354 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106488142 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078486641 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.081162188 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077495896 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065866795 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068624563 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082995163 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.068224948 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088423517 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089960417 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086486585 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.095056561 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063743702 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065271638 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065851134 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063522767 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076584775 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081457741 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088359889 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.101103337 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064491725 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080723805 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084356418 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.0789959 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082287449 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066382391 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065918574 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067756433 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083188953 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.09081804 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065082973 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065643934 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082469315 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080419164 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073011119 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06625512 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071068352 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068250401 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064665933 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066791767 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082341937 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07093662 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070978418 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065969618 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066019732 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065018296 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071317121 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082149818 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070737686 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077079634 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083956224 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066790707 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065105916 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063398358 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071783189 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064431478 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065393569 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065320155 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064859654 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065383803 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067853087 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070165458 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070831854 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.06870945 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070525473 seconds)
  done (took 6.547521782 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080908391 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.090530845 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.079301671 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.07976197 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064567012 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065151364 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065186501 seconds)
  done (took 2.246077695 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065540703 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.0727334 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.077273828 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07687497 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.086265454 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.074496092 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065459353 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096719952 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063983683 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.073382356 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080521443 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.078134889 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068907384 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077235429 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065824012 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076989146 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065217985 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072081049 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072921753 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078148091 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06921557 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095045733 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.07936201 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067720789 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080401354 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073428382 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067494078 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067072941 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066880308 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066504038 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066166543 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.08890457 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073352282 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079397206 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066672488 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064526197 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069391559 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065738625 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068899667 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074120983 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068348422 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064495763 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065218595 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064750691 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065869718 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.069179282 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065685104 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064478152 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064468103 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072424126 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064039921 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.071115959 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066529918 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069713746 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069296491 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068873034 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07173079 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064840188 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.072180662 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070969132 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064483264 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077657745 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076105925 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067835672 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076014175 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.07319956 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070911435 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068065569 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064044404 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064065027 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064650318 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076101033 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.068058149 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066850911 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065270358 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069387119 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068471838 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079861215 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079949086 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078221831 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067019779 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064574729 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068520162 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.079849845 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06948933 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064364394 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065311438 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064136763 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069492649 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064992226 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069155645 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064775543 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071397111 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067067576 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066663314 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072434941 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064585889 seconds)
  done (took 8.566908602 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067543421 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066714629 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065747384 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066069197 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065912612 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066034036 seconds)
  done (took 2.154242155 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087863833 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064820272 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077255888 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065467641 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087159271 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071391279 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071402348 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067368486 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081193296 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075838641 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071693235 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073783775 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074120468 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067036626 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071312106 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066117742 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07113932 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068214001 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.075196459 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067400645 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081745439 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066509132 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067054529 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076782998 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068159311 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065901836 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066174772 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075463294 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074640868 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066699757 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.06681849 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068082215 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073619035 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066539946 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071383255 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073477938 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064615282 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070230184 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067261408 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067780354 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073558631 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067131917 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067098927 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070452309 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066576094 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073354002 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070300273 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068352912 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.071238151 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070207207 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070202046 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065517614 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06769846 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069958537 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073183448 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066441525 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070516469 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.071113336 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066676651 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073868356 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065227467 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.06796004 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066735447 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067971022 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.06957416 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070412256 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073946364 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066834267 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067174527 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070288544 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070593801 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065163235 seconds)
  done (took 6.787561428 seconds)
done (took 28.03965361 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548747405 seconds)
  done (took 2.250105109 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.891777712 seconds)
  done (took 2.631691098 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.14308799 seconds)
  done (took 9.893692944 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.332706278 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.396423027 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.730899142 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129958183 seconds)
  done (took 3.373200396 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.741960356 seconds)
  done (took 2.499192167 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.226118198 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217867232 seconds)
  done (took 2.205509187 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.331556031 seconds)
  done (took 2.0797259 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.138714986 seconds)
  done (took 2.882125118 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230977648 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159322695 seconds)
  done (took 2.145916726 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.530647929 seconds)
  done (took 2.279518463 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.269847358 seconds)
  done (took 6.022114514 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229657229 seconds)
  done (took 2.027979727 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.228325194 seconds)
  done (took 1.984136026 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.035953409 seconds)
  done (took 3.784723975 seconds)
done (took 47.807422079 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.082145706 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084119304 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084068888 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079268906 seconds)
  done (took 2.056487066 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071706898 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068001043 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071413704 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071742514 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.06958802 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070070611 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070727513 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067478538 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069143516 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067838335 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.0666853 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067904829 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070509388 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068240035 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070625528 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071805621 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068300756 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.06806826 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070283434 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067811529 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071039679 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067877269 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.065978949 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.06748676 seconds)
  done (took 3.412026851 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076010127 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069825337 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073082938 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069137937 seconds)
  done (took 2.048148256 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074233991 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.073824612 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082827403 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.08769299 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073790355 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074401554 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081409777 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081538864 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063477721 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.08466359 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066029348 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064766585 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064915221 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083497008 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080940881 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060453897 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061991182 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.0747934 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073843358 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076494875 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066598029 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063784853 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073922412 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074969243 seconds)
  done (took 3.524179012 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079979664 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063605982 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078823604 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088727986 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089968095 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06464824 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078479087 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.091453685 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12508197 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06352276 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.06968399 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063243692 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102432362 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063520976 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078337622 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106531066 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109776797 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.06759972 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096758867 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064232708 seconds)
  done (took 3.418369023 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073663578 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067208176 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068192451 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063373782 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074456789 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071107327 seconds)
  done (took 2.190280959 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066413133 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065822582 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067727878 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070458694 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066105738 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065737308 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064969734 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063603394 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063950399 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064829688 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064805417 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.064975222 seconds)
  done (took 2.553806437 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.146328586 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.066800819 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068364861 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063709709 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.06550027 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064411236 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078901797 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066458427 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082244527 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065478765 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064911391 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.066920657 seconds)
  done (took 2.664422084 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101873297 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108230324 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142274777 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114409376 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114460877 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094494805 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122925135 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092715153 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157735934 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135341979 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117577683 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094124721 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085815218 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067640367 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097162062 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116134794 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134350946 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070648508 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110745038 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161719736 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12928355 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132264678 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145605625 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114407438 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088045362 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14526869 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095128042 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100111242 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122188133 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12382965 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11624879 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095947395 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069487817 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068638264 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147236207 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100493209 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117713391 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090915019 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102527327 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086365747 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105082247 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067418911 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083280857 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110140888 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082225484 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128557497 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085959542 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112905073 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07940585 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135449096 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121375003 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0967643 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08395511 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102755182 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.289251215 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109753429 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131613508 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104759619 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081911105 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116556143 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100118939 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098714452 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105499104 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078174162 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173916598 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086501122 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109343665 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10986689 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092068227 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092252884 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10507676 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132656982 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122604617 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.12294153 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134848538 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093166534 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119679908 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097575406 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.125881892 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102622066 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071511533 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118191524 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126645765 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096825623 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098772515 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127065455 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089950322 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075056348 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096346552 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115508513 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078515829 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109841808 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079562903 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106165332 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130465998 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095311574 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109572152 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114258484 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075697052 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152068379 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106644845 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070698526 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.115209227 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111836585 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15495119 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09379719 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074579089 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096976818 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.256985215 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146237706 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105591717 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078160246 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108161156 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13701581 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092916335 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166839981 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093676964 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138049442 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109882094 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085394431 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073307172 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087744425 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109414253 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104988393 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109620867 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087822337 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081704368 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085073092 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10944456 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089554587 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078794683 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110916231 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099417826 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072491123 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086097715 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077508489 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139149636 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075863172 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135283224 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123131151 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.07652199 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103942303 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095743285 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105854342 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095140962 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114342416 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137474293 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113942906 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087728724 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091557699 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106040375 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141073374 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124204105 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090087819 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074867063 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098022357 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109420426 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095621735 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123770516 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097786368 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106581793 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101228629 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139111794 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143412423 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099351785 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098995344 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103723274 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.279581953 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074639055 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152484315 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101753737 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115401451 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082460409 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137798978 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111695735 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087310291 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085572547 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09804035 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101641525 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103578511 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141318912 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094807627 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072529513 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093594074 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144936576 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075878057 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108375263 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.089816381 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09341504 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119203991 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093750897 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081465406 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068419959 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127078115 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155617243 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.067909919 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112431069 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108986469 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100673247 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.118645332 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067453061 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116573422 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135789688 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11549738 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137735252 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144525416 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114127946 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116352586 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.11136782 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103926573 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078031835 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123744417 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132515195 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094188766 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090572466 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133423815 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11595845 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.13369046 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115262105 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112703028 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101541188 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.262583429 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100863908 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099680086 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140810142 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118093544 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.120935669 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083815749 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103368631 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115270585 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132792712 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079818933 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139165591 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081330877 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115329635 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075144631 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12119127 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077797592 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109284415 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07776907 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097441254 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067348458 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07229647 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138695624 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110529871 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106285052 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099632397 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13459678 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134283109 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07897688 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105638872 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113178799 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099424229 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114461153 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106911077 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086904354 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093105052 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106811192 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083749488 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.080205815 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112695565 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092509655 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124444242 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081910158 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073465126 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138399978 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102517942 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09337353 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076143045 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105682101 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119702979 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090643055 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085399332 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112352513 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101787641 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139539435 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088408836 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095693422 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122059343 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078570681 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.08992553 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067330436 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08245505 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073603413 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.28266462 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073968745 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113714803 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.066874783 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.126852126 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084322423 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090416088 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099765813 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108815848 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124905106 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092494741 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137214474 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088083989 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117525388 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106218989 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094794875 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088967123 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10403387 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101345971 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124107414 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.09641913 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123393343 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143769855 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1054071 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14182047 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091820254 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121668704 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105870774 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122061968 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110157362 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144906046 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136025484 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110235984 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109952483 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073277653 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092940836 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103263206 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109416345 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172083792 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12333554 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070067713 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104123329 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09171782 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105958099 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102896645 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08033237 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143630062 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099524184 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085973609 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110783477 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088829617 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102374204 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074183103 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092915809 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.097248657 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.247387424 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096667402 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112518693 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125241049 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110282696 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139480373 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097565776 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090762652 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115781086 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10819409 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108052545 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083478147 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083689727 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134881306 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116073183 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125357192 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097521096 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107143905 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108997305 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09785722 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121975537 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105324701 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123760494 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078201326 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073877675 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066541461 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07015803 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120823762 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106458389 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109368812 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096420734 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070457654 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10111819 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103784334 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070149347 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088045163 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09345743 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09702392 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089407917 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105090409 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111264956 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088942306 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101943038 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096902607 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143754169 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097732434 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086294241 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141223499 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147376835 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085856982 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090656271 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070552554 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076747913 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111377805 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147117884 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149481811 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075605004 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085076573 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.083324351 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083756585 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068960647 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.24135103 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087524664 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102465478 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097384402 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110315846 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102524159 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073282206 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100555187 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097550123 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089747913 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10172726 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115311224 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121771147 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.137577162 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107513673 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104827264 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074525718 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078177732 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073775896 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077833366 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099835205 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077002461 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074531983 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140631656 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089838868 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102746327 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106182791 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086569656 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073352247 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131156047 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067346209 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13238492 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069568776 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080022363 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080502491 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076952108 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091657928 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136986025 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107401194 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110790662 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104012169 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102323142 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137774976 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153348363 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077943714 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140050439 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073744162 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073251435 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074034858 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111350195 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087372268 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112161701 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137848254 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088743424 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101394315 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075336485 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140948102 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096692928 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102245913 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084543521 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076641077 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.299141812 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077934621 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.07805174 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088396743 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108830214 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070439971 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101603961 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082710437 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077862215 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13959552 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628033395 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0877661 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073546149 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093640801 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139176461 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124704556 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092517159 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106041312 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116617349 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098008026 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092998415 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105593153 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.179782224 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072429146 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092308493 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100952353 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095583867 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099649042 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.097901034 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083889753 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090321915 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084932547 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080016986 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106957072 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087436364 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094340148 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105131035 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081095317 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085238391 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128471802 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101708615 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080079482 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086405389 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103862455 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086737002 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099155404 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066980982 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111884401 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088725886 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114556631 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092341207 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104716322 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124267515 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087827271 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135059912 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104645031 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120272258 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085311034 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076275077 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123166264 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086048626 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075895904 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.303540271 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092589093 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091181146 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101429901 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094248455 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110673068 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114505764 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109105153 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095336579 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076841628 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097437723 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.099502959 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082745607 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076279188 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072434666 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074008845 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104940654 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083134488 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081374059 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111791801 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086531689 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100792177 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.09780599 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120119682 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081144965 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098761541 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107451216 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089766651 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107568115 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098186539 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125837551 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171216824 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122899689 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126314785 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13166054 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074592476 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073940683 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066917412 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113092822 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077599719 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086744315 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079117609 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131418719 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.079805585 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109326724 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.228445827 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078033056 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091880855 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094572492 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.067521597 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081199603 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105454578 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085057908 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078091433 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116553514 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081274183 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12497997 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108769927 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097234642 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092780032 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078820969 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111888062 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10282836 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126746378 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092300071 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.072429291 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.272124057 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101329238 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135232298 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.070649435 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078572637 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125984198 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10117716 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129677214 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078219481 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146868028 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139838567 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097859592 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130908465 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068971294 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081221807 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086923386 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123142059 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082272494 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108174079 seconds)
  done (took 66.667605529 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151289431 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139347098 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080440517 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101370434 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185109077 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194601932 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117079321 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094497179 seconds)
  done (took 2.984441913 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066146063 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.080778758 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.07865693 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203833779 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094504514 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065192924 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070542594 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079547988 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066175898 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064844408 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100206392 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065174042 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066269553 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366420702 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064306138 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070513094 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067989983 seconds)
  done (took 3.57117151 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330054313 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.99717666 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.234664998 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.46890119 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.143596136 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553705826 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074557414 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080956421 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.693639068 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372051515 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137513754 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086101156 seconds)
  done (took 20.086482715 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07450568 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076541564 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076211385 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073260699 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072356404 seconds)
  done (took 2.279421034 seconds)
done (took 119.239855241 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081384453 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.168975726 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.065651677 seconds)
  done (took 2.176777542 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079986009 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078885148 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.07870426 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076224297 seconds)
  done (took 2.226877324 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072370308 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074149919 seconds)
  done (took 2.050781696 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.217947405 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.173809212 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087562118 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.079680782 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077143577 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077918761 seconds)
  done (took 2.148993436 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069004378 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069319572 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069814497 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069535528 seconds)
  done (took 2.177829757 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066081386 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064324948 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066726039 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069380505 seconds)
  done (took 2.168206394 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082389643 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083675934 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113468965 seconds)
  done (took 2.1815971 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.080746434 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080525232 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075476275 seconds)
  done (took 2.154345647 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.10680081 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094607853 seconds)
  done (took 2.111812582 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077491399 seconds)
  done (took 1.995201634 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087086001 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095200033 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136005004 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.1045398 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.136902426 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123098596 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074498145 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075887694 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071342902 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070222802 seconds)
  done (took 2.883729489 seconds)
done (took 26.742595893 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076354123 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369660808 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.35711899 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084888839 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.668982629 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354176795 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.997808051 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088884834 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098365265 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065908742 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082962753 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.646638058 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.990003736 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328520076 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.974977148 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.32703613 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651273628 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066340806 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065793152 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066153761 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.981373273 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065202492 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066273429 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06643342 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.64859998 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.372832907 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067576773 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.327752511 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065973755 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069965426 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355021482 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06664924 seconds)
  done (took 16.40250312 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.068079378 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120827357 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070377886 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082024753 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067959007 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067437494 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069099176 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066460152 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109857232 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066216934 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08317103 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065836664 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069910966 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067274238 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085703527 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066173807 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068423072 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06971099 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066337115 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066617765 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08414199 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065762591 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066612188 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06691278 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066429664 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079448195 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067289985 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066018244 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066701344 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070328831 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070860313 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067368115 seconds)
  done (took 4.271122539 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.11878198 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124002267 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070709403 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106373366 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.114749151 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067975106 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148629449 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08910697 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113072748 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066548154 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083790944 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066296496 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101454872 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067105762 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086200822 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066780667 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068654128 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06668892 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06569358 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066860119 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084862238 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066435514 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066764012 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067034579 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066736703 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081444703 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067319218 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066346169 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06639385 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069861871 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071227342 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06775812 seconds)
  done (took 4.53537382 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067066291 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069011931 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075266233 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078630135 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064108549 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066632081 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067648896 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064157398 seconds)
  done (took 2.490525921 seconds)
done (took 29.6292664 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077223881 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065528628 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068919806 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085453423 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071905816 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.067893988 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062702657 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072123933 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069350475 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069067177 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070954401 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.064891571 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.067688657 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062703496 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069913688 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063891924 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070166233 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068406729 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068159541 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.069802442 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066096771 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070686693 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073675043 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070272316 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070702313 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070645162 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074777841 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071891224 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066182611 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.06829006 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067218265 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079544163 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070469645 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070353644 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.063847176 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06414207 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069118446 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066491185 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070456731 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073165551 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.06616304 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073223141 seconds)
  done (took 4.82582904 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085834975 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091908609 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084391898 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079057911 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104795184 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079368771 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088192174 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.07650293 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075205564 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.08823161 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071636245 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076595789 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078371051 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073277839 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075901374 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072430056 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077456065 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071232672 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076331848 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075820916 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.088502733 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069303031 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076788282 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077348889 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07174489 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077459035 seconds)
  done (took 4.005214793 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070338535 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.085759146 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.089977492 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.13889837 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.106693912 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08042673 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080306953 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.090792889 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098464919 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065952786 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07010562 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091867305 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094675802 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072716615 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104294675 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.083947532 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078181408 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067444158 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072564287 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100754581 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.08891771 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08414655 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098732103 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086789704 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.064876504 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075389283 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073286124 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08227816 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073405511 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078379602 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070473225 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069739989 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066778162 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078209166 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073107876 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064386462 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087908331 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07895802 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080393113 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104357278 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.07580413 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067557307 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096096737 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131416736 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065572292 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068058893 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.069976783 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.078665705 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067265819 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09537286 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083996845 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065418321 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084752236 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067390208 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067234027 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082286603 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067631288 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.067777082 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.077801217 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.113534427 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086521563 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.070939693 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08695586 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065194779 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.076983447 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067005384 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067180095 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064093719 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101712171 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.072820759 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117361042 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066568403 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063226596 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078081727 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077164803 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072167699 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065271251 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084832156 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077880771 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069307463 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077681504 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068446679 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068555735 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100814885 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064515996 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063571509 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063508947 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.06784269 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069149789 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066070269 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.07880715 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.064865106 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.068924034 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081024181 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065551922 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066074556 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068326307 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066787924 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065015386 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076120753 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.069389727 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067718538 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078086013 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.06654881 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.068590985 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080230715 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075035564 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064931242 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066789441 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068047971 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067614189 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.06975969 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.06894852 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067311761 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072396371 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073257846 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071678934 seconds)
  done (took 11.000697695 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.159281871 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.150874619 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066791391 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.145544622 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07367505 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070334085 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146534236 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085881161 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066604067 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067215418 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065447177 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094349366 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089531886 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100930782 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.0701914 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.06669381 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091037726 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.098737689 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.149333003 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.143934338 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089668431 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07437961 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069070148 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068189071 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067387523 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.0748089 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082057259 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074183786 seconds)
  done (took 4.585643154 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072815587 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081471527 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070009574 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090059146 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084248243 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.0663011 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068236195 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067380099 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083070229 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072632203 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066128434 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070351046 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069777697 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.06703434 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06721814 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072648752 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072862449 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.064988474 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069976532 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071264646 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076792602 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.0916461 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070374477 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066447335 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069314343 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066221036 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073490252 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075676655 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.065661169 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096212964 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063231567 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070479657 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080290873 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067218157 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.065870167 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066554869 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066432288 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066151461 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066341223 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064114564 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064247197 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071331017 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064919923 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071794248 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.079744196 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073855127 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.066965208 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071757661 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.068704323 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063124777 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069641245 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070132361 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.068882759 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074544311 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069688599 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.068730916 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067584811 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096280203 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072293162 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065431516 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065673708 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064067274 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067887357 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.073939434 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082386461 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067906728 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064287699 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066053479 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.070819382 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080362582 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065795559 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071065696 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06330823 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066008312 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068441488 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069076223 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067181154 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064167752 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06618955 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066425888 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066612804 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065696737 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.065750617 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068221181 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.063956047 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064553352 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066600012 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067296836 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072598947 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065384479 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.068832042 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067696755 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065300554 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.068914163 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.071752552 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069513942 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.085574327 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074975399 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066819261 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064162399 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080496027 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.067923945 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065400633 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071296155 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070571556 seconds)
  done (took 9.369298866 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088824994 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06759546 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085658159 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09235521 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076556616 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07154179 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080055286 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066637141 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082437674 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065147262 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074613081 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064090907 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079505839 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075136645 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067429478 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.07664299 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068737846 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086837175 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.08077948 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064373831 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075352755 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078236467 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078947288 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084206235 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083978933 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085112142 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078738696 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.06874313 seconds)
  done (took 4.141120075 seconds)
done (took 39.853894416 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.995629667 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.175594384 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.003386212 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.268784259 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.289236358 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.00534179 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.249595457 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.000971458 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.137908476 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.058007093 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.306903697 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.405347451 seconds)
done (took 68.89803434 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.064954661 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.153525801 seconds)
    (2/2) benchmarking "String"...
    done (took 2.24366886 seconds)
  done (took 6.340210109 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.611516675 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.007288636 seconds)
    (3/3) benchmarking "different"...
    done (took 2.056397621 seconds)
  done (took 8.615696721 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.099777732 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.641991115 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.2648254 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.005745221 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.011396428 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.413960324 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.810261002 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.480417273 seconds)
  done (took 33.570966764 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.34077528 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.273683604 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.755937645 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.788976436 seconds)
  done (took 17.149939028 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.613609406 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.272120692 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.271607745 seconds)
    (4/4) benchmarking "different"...
    done (took 2.269550632 seconds)
  done (took 11.425458892 seconds)
done (took 89.304404587 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.007414489 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.078183278 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.029959589 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.16125789 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.057950759 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.040168894 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.013357079 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.011448783 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.005363913 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.014253464 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.459346463 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.021876 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.018910978 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.048666369 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.007839462 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.059290245 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.032345534 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.019383376 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.069567433 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.603728653 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.531892639 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.018777883 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.024504499 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.051662441 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.146693428 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.049581876 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.006917418 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.008836926 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.615674469 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.99898928 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.01297836 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.004052172 seconds)
  done (took 211.172227618 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.000076562 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.239737948 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.28260406 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.038755341 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.649807115 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.190024183 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.142408663 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.680739155 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.001832068 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.016671129 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.29401862 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.998998878 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.319911938 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.949316203 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.993752075 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.003730931 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.123978201 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.315556771 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.995196936 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.187411469 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.004496201 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.16649143 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.13056572 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.26587452 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.017165362 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.059741724 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.028607515 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.015952526 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.187464455 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.108599908 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.010729544 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.013144809 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.130164106 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.873625671 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.023025535 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.008722991 seconds)
  done (took 179.401869757 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.172751704 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.010280139 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.064650948 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.136676956 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.74608802 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.724698167 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.003916972 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.000677379 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.001333695 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.008103672 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.001940467 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.07040824 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.562626008 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.208129309 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.000676611 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.003385755 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.526813585 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.003131387 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.00303418 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.003442895 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.081627856 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.376010015 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.217016408 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.003689986 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.012622182 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.143455921 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.012976979 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.005529752 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.141356786 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.00653354 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.084582267 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.140735062 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.011944366 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.085402752 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.011440371 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.490869234 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.003226697 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.004945863 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.006586859 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.068890793 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.002994906 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.095979881 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.095818233 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.004961143 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.01665298 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.072341631 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.696086364 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.006785149 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.005452933 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.004255042 seconds)
    (50/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.003093073 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.003660251 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.005457355 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.433062388 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.006157631 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.030375307 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.617547499 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.00609549 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.008896323 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.005072524 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.005043741 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.006077798 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.013557918 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.042433878 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.809719222 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.125348826 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.393585141 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.810002719 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.008392095 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.590563594 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.06211816 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.007326152 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.087141261 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.00397378 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.005863678 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.005835902 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.006969329 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.134441899 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.095541641 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.007167469 seconds)
    (80/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.006002508 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.143656491 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.010293868 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.006172001 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.232872316 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.488856475 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.004468607 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.018943419 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.058829693 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.007472341 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.007642159 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.006144666 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.014724234 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.110008049 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.007952995 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.007834067 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.00673289 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.101126134 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.008002839 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.26732062 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.232697979 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.082115934 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.262238886 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.234084688 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.008046806 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.008733825 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.008240973 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.023258739 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.009662076 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.006759351 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.016946898 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.007625516 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.00742616 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.006674887 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.009044824 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.007870872 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.008464664 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.021301738 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.010609966 seconds)
  done (took 435.770788017 seconds)
done (took 830.507094805 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.729042153 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.799621658 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.643340228 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.675860918 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.647437533 seconds)
  done (took 15.433829324 seconds)
done (took 17.372438039 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.032404085 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.027583395 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.015108245 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.035041881 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.032087908 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.031484344 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.063300415 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.061493618 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.05276588 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.030999429 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.037872453 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.033396372 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.037297866 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.056316849 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.044788179 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.037593284 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.033319845 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.021941564 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.039777934 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.033330776 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.031800393 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.027443639 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.034306917 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.03644485 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.045142417 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.035402438 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.026313078 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.033024072 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.033299476 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.035313829 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.068368713 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.040114605 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.063665054 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.040776372 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.04041226 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.042942148 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.02957051 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.060783149 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.03154522 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.069412666 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.041918267 seconds)
  done (took 85.567792181 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.021897824 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.158024682 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.234876262 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.052446945 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.020551327 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.233978346 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.075401198 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.147909845 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.151233285 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.237523383 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.245864836 seconds)
  done (took 25.526584748 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.018820412 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.15922267 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.237837234 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.055212469 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.042499848 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.23883032 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.083304743 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.157000413 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.156646632 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.244799024 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.251453735 seconds)
  done (took 25.60027761 seconds)
done (took 138.63835321 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.407542215 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.041004208 seconds)
  done (took 6.390230591 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.015406714 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.03321924 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.166377894 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.01294044 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.014365277 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.014376274 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.011221495 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.012818466 seconds)
  done (took 18.224368994 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.015553421 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.015302171 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.014607449 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.016592139 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.016164668 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.015640917 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.016077068 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.016779787 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.015418919 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.014571604 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.014650108 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.016574898 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.01459196 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.01522657 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.015546219 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.014658496 seconds)
  done (took 34.192367979 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.013455885 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.015746767 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.015884956 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.016497208 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.0147695 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.016909918 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.016107788 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.017245185 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.01621768 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.01699408 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.014531463 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.014103087 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.014719291 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.016378558 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.016953765 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.017687276 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.015674938 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.016180932 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.017324832 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.018476894 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.018075828 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.015929575 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.023038636 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.015949028 seconds)
  done (took 50.340114583 seconds)
done (took 111.101321344 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.215375771 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.575316797 seconds)
  done (took 8.73660169 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.021428425 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.015161729 seconds)
  done (took 6.047133714 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.017167585 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.017391686 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.016930189 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.016982962 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.017575887 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.017694955 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.017015377 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.016546331 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.017141322 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.017795797 seconds)
  done (took 22.117544971 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.016174217 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.015808224 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.017160682 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.018486307 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.018269048 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.017719902 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.017384457 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.017517929 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.018438213 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.017002628 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.016649656 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.016837234 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.018775572 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.017682882 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.018622183 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.017942046 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.018515115 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.018503525 seconds)
  done (took 38.264626697 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.01636472 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.017018386 seconds)
  done (took 5.979814027 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.017825067 seconds)
    (2/7) benchmarking "second"...
    done (took 2.019058585 seconds)
    (3/7) benchmarking "month"...
    done (took 2.018275652 seconds)
    (4/7) benchmarking "year"...
    done (took 2.018733346 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.017102335 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.018349228 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.017952598 seconds)
  done (took 16.073792034 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.019872854 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.186525998 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.238602314 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.606111655 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.019882725 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.02177279 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.892796204 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.021844451 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.022603291 seconds)
  done (took 21.977515428 seconds)
done (took 121.143399021 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.839605138 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.014895894 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.299193601 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.143360899 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.037331144 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.309991681 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.025089222 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.565936241 seconds)
done (took 44.181709503 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.152404872 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.016908684 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.048892188 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.048150637 seconds)
  done (took 23.060789095 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.030332061 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.345185916 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.041612045 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.981704996 seconds)
  done (took 23.362841443 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.395715009 seconds)
    (2/2) benchmarking "read"...
    done (took 2.371342322 seconds)
  done (took 6.721396448 seconds)
done (took 62.250196526 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.019800869 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.020110678 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.019849576 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.021134756 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.019956984 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.020794426 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.021038056 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.021449608 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.020289503 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.021927727 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.02135007 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.020888678 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.020774629 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.02148617 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.022589431 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.021351121 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.020358203 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.021522087 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.022330355 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.021263823 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.021919625 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.022774042 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.022218167 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.021433519 seconds)
  done (took 50.458775056 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.021670063 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.020474195 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.021690434 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.022004866 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.021062548 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.021684823 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.022081699 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.020734752 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.020654465 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.02214859 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.021032409 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.021661275 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.023197723 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.023045853 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.021033743 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.022083197 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.02200507 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.022341776 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.022157598 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.022348749 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.02205121 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.022254269 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.021754419 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.022854907 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.023468733 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.022739569 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.024296504 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.024042678 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.023517435 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.023749551 seconds)
  done (took 62.616426685 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.02341365 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.024850457 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.023373973 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.023716094 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.023498575 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.024786497 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.022743105 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.024423342 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.023963863 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.022732587 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.022907011 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.023115747 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.023356435 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.023578924 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.02294926 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.023445111 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.023289948 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.024041492 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.024437258 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.023976434 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.02439165 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.024203207 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.023932679 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.026022258 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.024089301 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.024018031 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.025487412 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.024374782 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.02495341 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.023665722 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.025004116 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.024269703 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.0241734 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.025026129 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.024743882 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.025087107 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.024386898 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.024662731 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.025318133 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.025130879 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.025401068 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.02589035 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.024223477 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.02518989 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.025317762 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.026003966 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.025771398 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.025173919 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.025460786 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.025937842 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.025462452 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.025558749 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.025003562 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.024303726 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.025142683 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.026276198 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.02546646 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.025441998 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.026217688 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.025665176 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.026788951 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.025727275 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.024820213 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.02500546 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.025645439 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.025861251 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.026236984 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.025281911 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.025404582 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.028109787 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.026345117 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.025996338 seconds)
  done (took 147.738300031 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.026366297 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.025951427 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.027101887 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.025887652 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.026650362 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.024981873 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.025677212 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.025978017 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.026730094 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.027764733 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.027248437 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.027186431 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.02610743 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.026620192 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.025807542 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.024866807 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.027114145 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.026654876 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.02680145 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.027629711 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.027092519 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.026975206 seconds)
  done (took 46.537765642 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.028308806 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.028357393 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.027667198 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.028757508 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.029196522 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.027619322 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.027653603 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.028133812 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.026871252 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029148513 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.028982299 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.028220912 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.028590643 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028303717 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030138041 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.030093592 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.029336025 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.028170551 seconds)
  done (took 38.470044264 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.028814755 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.029449219 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.028633846 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.027898054 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.027980238 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.02961785 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.027786489 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.027340718 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.028565893 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.028273313 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.028481678 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028982436 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.02847654 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.028204779 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.029767825 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.029184071 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.030129638 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029155204 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.028331747 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.028296337 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.029340057 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.029867094 seconds)
  done (took 46.590508268 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02920808 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.028939072 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.028781855 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.029927968 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.029198863 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.03036213 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.028540326 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.02961037 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.03071581 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.029795838 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029482423 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.031076768 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.02711154 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.027870902 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.029047787 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030709022 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.030635043 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.03072468 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.030604553 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.030938202 seconds)
  done (took 42.551198605 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.030023445 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.031188563 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.029895335 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.029847284 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.030235687 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.029472692 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.028835288 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.029856136 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.029676701 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.030766824 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.029998494 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.02975376 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.029500931 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.030330227 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.030067851 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.030420547 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.02992188 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.031803676 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.029172686 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.029843623 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.030583026 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.03168555 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.03112545 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.031341092 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.029602458 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.030271928 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.031181461 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.030898422 seconds)
  done (took 58.807501992 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.031647516 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.032691479 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.032636774 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.030414839 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.032253375 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.033061152 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.032700394 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.032160725 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.031669963 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.029707004 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.032853739 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.032301731 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.032134669 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.032917028 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.033267424 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.033122623 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034954743 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.033272741 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.033727589 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.032504679 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.034011249 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.032304773 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.03254444 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.032714281 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.033443882 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.03258313 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.033907897 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.034913905 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.034548636 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.033642072 seconds)
  done (took 62.946005427 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.051485564 seconds)
    (2/2) benchmarking "in"...
    done (took 2.052477766 seconds)
  done (took 6.065958394 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.033228184 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.033671357 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.03270032 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.033642152 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.035418864 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.034196403 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.034055797 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.034600524 seconds)
  done (took 18.232862924 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.035605949 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.036446219 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.034534093 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.035209922 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.033264003 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.03901927 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.035859599 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.034404969 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.034283175 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.035929745 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.038488347 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.036607752 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.042502003 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.038755354 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.035919037 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.036479485 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.036831991 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.035837269 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.03616921 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.034742041 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.038149572 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.035326398 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.035239455 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.033680776 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.035961525 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.035363465 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.045203144 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.03569529 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.036374274 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.035713724 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.03971946 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.036987046 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.035076435 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.036100003 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.03496676 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.036137571 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.041586723 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.035811011 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.033982122 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.035055252 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.03780426 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.036396211 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.038764059 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.042477174 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.036628615 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.036657573 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.036685202 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.035086346 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.038574652 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.039784908 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.045828894 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.036222485 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.036586137 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.037590963 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.039077723 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.036451708 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.0370476 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.037224978 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.042856814 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.042479171 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.041303274 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.058579952 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.046024158 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.036140959 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.037482784 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.046901906 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.064617124 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.038143215 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.0381384 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.037772435 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.044426637 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.039872482 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.037305932 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.038200456 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.048701692 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.047529006 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.036745998 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.039080177 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.03839764 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.03654671 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.038022878 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.037832604 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.037227199 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.037921556 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.048373188 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.065959487 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.037152915 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.038718142 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.040194543 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.041668564 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.041865974 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.041276238 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.040562271 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.039421158 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.038923338 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.04261784 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.038814606 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.036997389 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.038213961 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.045990903 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.040071358 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.039476175 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.042309039 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.048094415 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.038950951 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.038520853 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.03983704 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.038418576 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.045598385 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.037713874 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.038909784 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.039760764 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.039976361 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.044477158 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.039654641 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.041625494 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.04705645 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.046360943 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.042638134 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.045521423 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.043118422 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.043064517 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.049744784 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.065489643 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.04049322 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.043791341 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.046044319 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.053748294 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.0436371 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.040476853 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.042230738 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.040842395 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.040091076 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.041072369 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.040798184 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.040825109 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.041270014 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.038855683 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.041079268 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.040308911 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.043331735 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.039683397 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.041010516 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.040334466 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.043025254 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.040074991 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.042063075 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.047391717 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.042542718 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.040897719 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.040901899 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.041833114 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.042070759 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.041614671 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.041061395 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.041710223 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.039895168 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.041769056 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.041033937 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.039851973 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.041307964 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.043361993 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.047173244 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.039886808 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.039964062 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.04129268 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.040716417 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.040281349 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.041749046 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.042001964 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.042490592 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.041015116 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.045197044 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.042421239 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.042319556 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.042570859 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.044290646 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.042332644 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.045672424 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.053327416 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.045382016 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.051456175 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.042264403 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.048692311 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.044273457 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.043110033 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.041913144 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.042456602 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.041302108 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.042716678 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.042057078 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.044767513 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.063656118 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.053522449 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.042821662 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.045516119 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.050767583 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.048275966 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.047417194 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.045280517 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.042115359 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.043542783 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.042821957 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.042789392 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.042767568 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.045481777 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.044096732 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.0439695 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.046154603 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.042278143 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.043976152 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.044341267 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.043436679 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.044576601 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.043567624 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.043635314 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.045344518 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.047600443 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.050644029 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.045500426 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.044754548 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.043517385 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.044151131 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.043331185 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.045306221 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.043887045 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.046675807 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.045464125 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.044909481 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.051494677 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.045657452 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.045343517 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.046743852 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.046232839 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.046560797 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.045950383 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.04927839 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.056262301 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.047539714 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.046832551 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.049187069 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.045243926 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.047046159 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.044360165 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.045621535 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.044753601 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.045691382 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.044116773 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.045706653 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.051961081 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.047059392 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.045765059 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.046724511 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.049432498 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.04699852 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.047573865 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.046278421 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.049204742 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.055106836 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.05125043 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.047605861 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.050328892 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.047270999 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.047753281 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.050587644 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.048025843 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.059769936 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.056854033 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.046529037 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.046770974 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.045783691 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.048694161 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.047476288 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.046407953 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.0532218 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.048978199 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.049090065 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.051332514 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.045883435 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.04595843 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.052276769 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.048318159 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.049263871 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.046278222 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.047696455 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.047555855 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.04788018 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.048434726 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.046278234 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.047680775 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.051818861 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.048420407 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.048569333 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.050298883 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.056067302 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.049179741 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.047653331 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.053506232 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.048956582 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.047959121 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.047963387 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.049158052 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.04805844 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.048638775 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.049281601 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.050682119 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.047838933 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.051207713 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.058290146 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.051553273 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.057900839 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.049068528 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.057866859 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.048376759 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.049422033 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.04843654 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.052061465 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.057107538 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.049352341 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.049749782 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.061540928 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.051959153 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.050571583 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.051740487 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.050152438 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.051602854 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.047686813 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.050657042 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.053973986 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.050697862 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.054188568 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.046719296 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.049608666 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.049068233 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.049093275 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.048014953 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.046730399 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.048481156 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.048385177 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.046523242 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.049086082 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.044830096 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.046210371 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.046970251 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.047375744 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.054141598 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.04642978 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.04722648 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.049860675 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.047936568 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.052792605 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.04599011 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.046007034 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.051258321 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.048096262 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.050247521 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.047444642 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.046271401 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.049779941 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.050370773 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.052872505 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.058499034 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.057274092 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.0530018 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.04830456 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.044022713 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.047134045 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.054475713 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.074685852 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.050611486 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.04719655 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.050769101 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.052018624 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.048934598 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.050097428 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.042854513 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.050099141 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.04164033 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.041363104 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.042319767 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.050487902 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.039159917 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.041263236 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.03965528 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.043634358 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.043663596 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.04093452 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.041703405 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.042971564 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.042434318 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.050842607 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.039481274 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.041920123 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.03990452 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.039835329 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.037980874 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.039078269 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.039381354 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.039548711 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.038099252 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.038656476 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.041586466 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.043562026 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.038907359 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.04349488 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.049497443 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.039838486 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.040245538 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.044082847 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.039438979 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.041744415 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.038592557 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.041225912 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.044887926 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.041534869 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.04226277 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.042940971 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.050459105 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.041830544 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.041568084 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.03998456 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.043170157 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.042749244 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.039581237 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.040541694 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.049225792 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.044923939 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.053773837 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.051274551 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.040525586 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.044910415 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.050105393 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.049189088 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.040452156 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.041742862 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.039952287 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.042853224 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.042819123 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.040877366 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.040489895 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.04321095 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.046578989 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.042622746 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.043830364 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.041209572 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.041187222 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.043053549 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.043273298 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.045170453 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.042396024 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.041336117 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.041629118 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.040573977 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.042909789 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.044426834 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.040631114 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.04344817 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.042878232 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.043653532 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.047320959 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.042678705 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.042490389 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.042542846 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.043513889 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.041931779 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.04335528 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.044332222 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.042974272 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.046101788 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.052755463 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.043977367 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.043558656 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.043825619 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.045731528 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.040887541 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.042022691 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.042190844 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.042874567 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.04975939 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.044448655 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.041087876 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.044199606 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.043599604 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.046914374 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.0432296 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.046556716 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.042199804 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.044795769 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.044584013 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.046309279 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.05628806 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.048732086 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.047559442 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.054561282 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.049213308 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.046473151 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.044771954 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.044582677 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.04507204 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.046049308 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.047876737 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.045128956 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.046100976 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.044537316 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.046629508 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.044551366 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.046082497 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.045577073 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.044935537 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.046885877 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.054814889 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.052397574 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.046543422 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.046029882 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.045252353 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.047610881 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.059638331 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.045310402 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.044574623 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.045105946 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.045739534 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.048810826 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.053599172 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.057065543 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.048752519 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.046070732 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.049744103 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.065494163 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.047612815 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.055047276 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.080589161 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.049671225 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.045975545 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.046928138 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.048096783 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.046167922 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.050620696 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.046087856 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.052738228 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.04729805 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.04688685 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.053830048 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.048723991 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.047824167 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.046050304 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.047471369 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.051414004 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.044649973 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.053163342 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.046153208 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.047028441 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.047207959 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.050184544 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.047730004 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.047840601 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.046913811 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.048591052 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.047095268 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.045465866 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.055436991 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.046532836 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.047720251 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.059686936 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.061376771 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.047038686 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.047647405 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.047276831 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.053494867 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.050172579 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.047854911 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.051162212 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.056834913 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.049651575 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.057093252 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.049006221 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.048174011 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.047813604 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.048369339 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.047324103 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.059896606 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.058781143 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.049941069 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.051649912 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.055246591 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.048013934 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.05368205 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.053560232 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.050455994 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.04902349 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.047577998 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.049567266 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.048838632 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.049282317 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.053527656 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.061367903 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.048776666 seconds)
  done (took 1220.991750145 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.049930675 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.048300553 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.050398079 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.050137518 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.050042587 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.050615579 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.050078261 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.049286153 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.049374709 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.048139035 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.048879491 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.049290047 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.049279234 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.050591522 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.049011872 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.04983283 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.04937604 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.051782334 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.050882565 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.050545855 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.051644782 seconds)
  done (took 45.023175543 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.050637673 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.051459827 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.050992812 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.050017159 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.051620562 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.051747158 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.050647135 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.051701259 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.051213565 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.051751924 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.052926897 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.051616176 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.052376955 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.052023057 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.052689568 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.051332328 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.052305685 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.051142643 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.051810778 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.050378873 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.051894098 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.052012225 seconds)
  done (took 47.11163049 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.050703823 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.050925013 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.052206611 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.05289901 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.052795542 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.051576409 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.051841795 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.054822179 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.052943223 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.052769794 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.05983221 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.062287113 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.051922836 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.056744299 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.052626935 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.050477138 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.199143522 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.052248582 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.052158491 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.053369331 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.053560357 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.058313587 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.053439465 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.052290698 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.052144741 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.051445828 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.055768505 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.053477842 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.053993214 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.055322396 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.058992969 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.053821933 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.053152015 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.055628443 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.055781141 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.054927693 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.057928438 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.051190932 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.053747145 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.053333951 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.064161962 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.080667079 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.055103695 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.053254723 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.06156504 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.054627291 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.05627821 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.056892106 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.063999943 seconds)
  done (took 102.828376335 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.054550344 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.054450391 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.054341851 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.053821597 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.055039981 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.056015144 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.054801279 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.054942585 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.054968962 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.055626994 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.055389845 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.055994289 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.055122535 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.056764737 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.05563343 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.056939999 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.055269348 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.056022188 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.055142193 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.056706678 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.052964188 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.054083688 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.056034523 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.057294725 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.056069436 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.05790765 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.056753597 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.056564658 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.058102148 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.055974739 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.056287348 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.056525893 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.0566165 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.056296582 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.057273592 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.056484927 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.056730369 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.056321324 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.057732535 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.056789443 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.056174962 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.05617706 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.055992917 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.057225234 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.057226089 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.057647695 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.056738073 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.05599916 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.056310267 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.057213257 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.057419494 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.057005528 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.060763906 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.057299455 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.058016059 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.056672952 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.056249738 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.058149854 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.059346392 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.05771826 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.056740434 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.056673028 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.057398848 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.057677287 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.058776023 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.058528585 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.05826807 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.058196992 seconds)
  done (took 141.825602776 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.056466131 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.05661786 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.056322753 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.057094284 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.055921741 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.057053559 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.057599648 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.057196461 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.05737022 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.057630587 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.058145161 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.059452031 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.055509751 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.058275102 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.055238631 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.055903733 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.056312518 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.054756666 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.055590255 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.057222468 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.056451557 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.057368871 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.057135172 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.056727001 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.057934006 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.057610738 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.057052056 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.058048922 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.058362546 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.057559243 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.058482133 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.058352406 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.058073885 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.059064251 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.059026091 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.058130073 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.058017012 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.058824955 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.058900992 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.059187687 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.058805492 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.059736821 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.058489525 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.058847173 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.058321096 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.05981632 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.059144545 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.058880235 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.061545765 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.058889051 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.057053084 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.058334263 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.058729841 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.059055422 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.059464023 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.06113584 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.059479221 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.059938922 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.059158394 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.060211371 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.059055523 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.061125805 seconds)
  done (took 129.587011362 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.061561178 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.061094747 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.061263176 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.0616067 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.062211629 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.062357957 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.061485878 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.061575317 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.062502315 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.062677318 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.061772296 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.062268922 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.063879977 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.062131588 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.062591477 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.063548699 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.062097044 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.062417825 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.063551663 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.062539833 seconds)
  done (took 43.232724866 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.062366057 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.06157313 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.062353411 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.062081262 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.062249577 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.062979422 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.062230491 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062089041 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.062606518 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.063222801 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.063118855 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.062542917 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.064576149 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.062325818 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.062680308 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.062320607 seconds)
  done (took 34.989459143 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.0632222 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.061782298 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.060945003 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.060792005 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.062704809 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.063289856 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.061894408 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.061598085 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.062384454 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.064219525 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.062472621 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.063301817 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.062977971 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.061948453 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.063672557 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.063962695 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.065263943 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.064797017 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.064421259 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.062529507 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.064954575 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.065525901 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.064347628 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.064979175 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.064599191 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.064780647 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.065544944 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.065137605 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.065949967 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.06580489 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.065093956 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.066172986 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.066637053 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.065383894 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.063961101 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.065592937 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.067192935 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.065178123 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.066199389 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.065381937 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.065574638 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.065197633 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.06666499 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.067219466 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.065896267 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.066307099 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.065804186 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.065741789 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.066382795 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.065861361 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.066944866 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.064158904 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.065591231 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.067320075 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.06627899 seconds)
  done (took 115.54753724 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.065958056 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.067657367 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.066013275 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.066393085 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.065691314 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.066169145 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.066988958 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.066606149 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.066519218 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.066804595 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.067232404 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.067259463 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.066791239 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.067132339 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.067424319 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.067110417 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.067478617 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.067492011 seconds)
  done (took 39.194899635 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.06645163 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.068237808 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.067786618 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.067175199 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.067546037 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.068733285 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.06783107 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.06789084 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067339735 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.067531499 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068634062 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.067112629 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067986444 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.068080924 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.067910929 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.068218281 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.068007498 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.068988914 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.068517147 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.067996137 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.068008562 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.068382446 seconds)
  done (took 47.486587985 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.067171877 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.067943188 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.085292874 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.091923069 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.091165208 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.107626567 seconds)
  done (took 14.505360577 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067608423 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.067891196 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.070435645 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068192133 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069211675 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068013996 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06883723 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.070756682 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068357433 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069463629 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068605779 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.069543481 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069908734 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070232259 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069201655 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069319119 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.069198236 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069657396 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.070054671 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069849083 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070640817 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.071133946 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.069362693 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069899395 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.069090637 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.069859831 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071248093 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070822246 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.070509106 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.070449625 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070774314 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072144379 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070471977 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070738064 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.070202036 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.070293373 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.070113812 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070540721 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070763509 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.069900854 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.069190433 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070719532 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070133226 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.070995571 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071739799 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.07083403 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.071041223 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.071372459 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071222402 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071410899 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071100747 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.071477416 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.071068643 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071278238 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.070547424 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.071396243 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071168868 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.071820347 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0719559 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074052541 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.07070224 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071604279 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.071609708 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071737078 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.072082951 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.070984701 seconds)
  done (took 138.641228985 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071834929 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.072236574 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07330502 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073483135 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072897092 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.07297744 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072151063 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072785453 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071490287 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071332965 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071669547 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072091937 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071532779 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072610842 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.072424911 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.073543272 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.073548752 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074034256 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.073667471 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.072766357 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.072819155 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074660783 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073059376 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.073780026 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.073437676 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.072624449 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073306148 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.07362735 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.073597085 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071930229 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071603723 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07209586 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.072972017 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.072971685 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.072857637 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.074487172 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.074241821 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.074347824 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.07324047 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074137006 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.074011975 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.075914551 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074998474 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.074806408 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074422743 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074717183 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.075137459 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.074630931 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074036561 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075165619 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.075521871 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.07571523 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074761719 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076720389 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075031798 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.074947334 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074700157 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075476937 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075611987 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075777295 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.076135274 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074845118 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075988048 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074446749 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073987645 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073957788 seconds)
  done (took 138.868618954 seconds)
done (took 2842.805371284 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.114453013 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.20402959 seconds)
  done (took 16.315763012 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.239134407 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.103921814 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.259963335 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.19324453 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.094334025 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.093345837 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.074864633 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.077262403 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.169089705 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.077505154 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.112021185 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.073598716 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.07895502 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.077790138 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.07689138 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.078062488 seconds)
  done (took 55.892227133 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.083299624 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.081311503 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.077748063 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.076081304 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.08968265 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.154030943 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.097956735 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.078180125 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.091064288 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.113107319 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.097361551 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.083799836 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.084096357 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.08138479 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.170345043 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.126904116 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.138222247 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.15098186 seconds)
  done (took 39.877032436 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.158876703 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.108741382 seconds)
  done (took 11.279343476 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.091441144 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.090473008 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.077587268 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.084010769 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.097867886 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.091041475 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.097337043 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.103382676 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.110254941 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.07346817 seconds)
  done (took 72.945933997 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.081281204 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.080586201 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.336694832 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.089082564 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.08620583 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.101524789 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.082243692 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.106374932 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.082501932 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.075644806 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.087426204 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.340465124 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.091791837 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.079919698 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.499115207 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.093606464 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.085987884 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.109401783 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.111336152 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.084810735 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.085740171 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.081805033 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.240438273 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.775502648 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.080787024 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.080405962 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.086748547 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.079371232 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.078529458 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.080303281 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.082021694 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.078677865 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.082121824 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.077805821 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.083880627 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.084255798 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.580708887 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.095830419 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.088231369 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.171091893 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.123780666 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.087922529 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.926100069 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.080382242 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.079222352 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.085406181 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.775652997 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.157691202 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.085238484 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.249190067 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.435093076 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.098284013 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.25284961 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.236189372 seconds)
  done (took 144.478317496 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.078220879 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.315800037 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.234003919 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.082462577 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.335527497 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.292615394 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.083784578 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.129401937 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.079223188 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.283096288 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.341797691 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.189487792 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.085106592 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.080970483 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.07833767 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.076662209 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.2312474 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.151458161 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.080807749 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.080565249 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.105875894 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.289719205 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.204483818 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.083382847 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.107244117 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.290659 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.203649801 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.185907677 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.044145365 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.081470141 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.14176012 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.081276169 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.081576355 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.07786409 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.235683928 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.176058703 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.167689693 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.080314265 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.081193048 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.081742641 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.762534837 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.284027589 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.176884826 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.206298946 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.334035448 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.297469964 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.774431971 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.082152049 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.73919547 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.247193775 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.288513381 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.297632035 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.200109043 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.083328403 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.394732969 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.0799036 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.082122711 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.302503262 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.302359941 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.184055701 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.082772009 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.082761152 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.07891765 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.323146397 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.082851571 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.17328067 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.081229868 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.081242442 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.175052264 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.185067237 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.308777243 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.307444939 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.11485334 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.410290476 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.603555964 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.287501843 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.14999276 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.304209523 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.085832034 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.079653305 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165883213 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.916711683 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.339847786 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.328320865 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.284393006 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.113239068 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.747561003 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.082329255 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.269619594 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.275536232 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.317028567 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.329131606 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.321895692 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.632707891 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.083302859 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.083815074 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.465856197 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.199833875 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.088322729 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.436889415 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.312031427 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.586079938 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.110294698 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.433006888 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216031178 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.08831516 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.734820271 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.086732539 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.29174158 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.125504456 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.089649428 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.085733802 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.275053348 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.995184463 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.085742532 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.813873568 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.147198617 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.090798304 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.291878278 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.089476379 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.328802822 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.087861253 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.321414936 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.72244242 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.113053093 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.260950732 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.330119232 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.750237714 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.326270613 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.330893071 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.203475008 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.313640157 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.968104424 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.086397117 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.347187751 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.088797587 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.085541214 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.253028534 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.09120727 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.71343345 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.086538274 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.353098086 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.108195749 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.320692705 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.089176869 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.330941567 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.121741801 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.137750231 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.088407894 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.213820982 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.090545383 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.035278424 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.245327821 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.093843697 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.085287467 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.672753544 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.086110982 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.232416605 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.317003254 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.107056766 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.155424471 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.65252102 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.083337801 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.177806229 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.107045066 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.375506268 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.089010049 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.341675436 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.036527675 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.564944057 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.087312017 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.325482964 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.27465103 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.091224899 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.089548123 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.928662644 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.088528751 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.087822452 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.245084934 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.07144928 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.006293884 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.287079982 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.091644808 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216376544 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.091920581 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.416225016 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.429633185 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.084187826 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.085197489 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.085511226 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.086914723 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.086779841 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.301360835 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.11450699 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.526080017 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.225875434 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.348000227 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.395065759 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.296419183 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.128153953 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.091561978 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.311414259 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.09102452 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.150020019 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.091549028 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.108400154 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.320456021 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.09351282 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.295861233 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.336115058 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.141676596 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.136224156 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.092745804 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.089360621 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.002916399 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.2376923 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.174857763 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.091829858 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.090799714 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.205235165 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.211422402 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.269581207 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.943671417 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.216942074 seconds)
  done (took 951.184446735 seconds)
done (took 1293.972210731 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.090854017 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.08923075 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.090190943 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.093207032 seconds)
  done (took 30.378853788 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.091627447 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.090845306 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.094059292 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.089692366 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.09069356 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.091546846 seconds)
  done (took 14.56641213 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.090793834 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.090908336 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.090142104 seconds)
  done (took 23.287366967 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.527264416 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.500455507 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.161887351 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.231365536 seconds)
  done (took 11.438970464 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.095574608 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.089947824 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.09127895 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.094370248 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.094927706 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.090504748 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.092341085 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.095364614 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.091962702 seconds)
  done (took 20.863788269 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.278310453 seconds)
done (took 106.830218598 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.462809325 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.188909598 seconds)
    (3/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.291106978 seconds)
    (4/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.789233861 seconds)
    (5/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.216580061 seconds)
    (6/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.862760652 seconds)
    (7/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.216963486 seconds)
    (8/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.293467798 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.283759322 seconds)
    (10/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.171948932 seconds)
    (11/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.41187033 seconds)
    (12/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.10958098 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.422371586 seconds)
    (14/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.432696668 seconds)
    (15/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.295093 seconds)
    (16/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.252281576 seconds)
    (17/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.025535239 seconds)
    (18/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.241472262 seconds)
    (19/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.093924903 seconds)
    (20/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.542860005 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.10797745 seconds)
    (22/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.237437939 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.106456307 seconds)
    (24/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.365788631 seconds)
    (25/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.200189858 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.111995097 seconds)
    (27/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.102433773 seconds)
    (28/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.102872683 seconds)
    (29/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.981130172 seconds)
    (30/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.098452012 seconds)
    (31/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 3.906241512 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.395389664 seconds)
    (33/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.201610601 seconds)
    (34/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.395550241 seconds)
    (35/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.499097047 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.103681099 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.352018725 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.230893216 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.187086703 seconds)
    (40/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.367082518 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.321159469 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.17989993 seconds)
    (43/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.100980749 seconds)
    (44/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.037677126 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.517612457 seconds)
    (46/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.799244104 seconds)
    (47/341) benchmarking ("sort", Int8, false)...
    done (took 5.383358173 seconds)
    (48/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.449384605 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.510971842 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.1624143 seconds)
    (51/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.119689441 seconds)
    (52/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.173137066 seconds)
    (53/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.308183923 seconds)
    (54/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.329710061 seconds)
    (55/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.096774463 seconds)
    (56/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.319667004 seconds)
    (57/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.326953273 seconds)
    (58/341) benchmarking ("sort", BigInt, false)...
    done (took 7.089802257 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.090263114 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.424123266 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.354372555 seconds)
    (62/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.912299619 seconds)
    (63/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.20477157 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.8280753 seconds)
    (65/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.985650794 seconds)
    (66/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.084244315 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.595711206 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.796492357 seconds)
    (69/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.089863191 seconds)
    (70/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.108507423 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.394498459 seconds)
    (72/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.186035218 seconds)
    (73/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.086439145 seconds)
    (74/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 3.818438963 seconds)
    (75/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.61292317 seconds)
    (76/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.193078334 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.994728685 seconds)
    (78/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.103784375 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.41278938 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.105074224 seconds)
    (81/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.701494093 seconds)
    (82/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.297076684 seconds)
    (83/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.209457673 seconds)
    (84/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.191644332 seconds)
    (85/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.483639675 seconds)
    (86/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.082572642 seconds)
    (87/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.490083344 seconds)
    (88/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.09552911 seconds)
    (89/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.077695786 seconds)
    (90/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.024194045 seconds)
    (91/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.927088339 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.084141961 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.206850009 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.20748748 seconds)
    (95/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.174840786 seconds)
    (96/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.715177973 seconds)
    (97/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.56923094 seconds)
    (98/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.462787667 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.0798447 seconds)
    (100/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.557858512 seconds)
    (101/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.657785876 seconds)
    (102/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.431551907 seconds)
    (103/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.086393344 seconds)
    (104/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.07759218 seconds)
    (105/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.467850313 seconds)
    (106/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.079869429 seconds)
    (107/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.149682065 seconds)
    (108/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.509349643 seconds)
    (109/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.077761707 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.207286195 seconds)
    (111/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.076309916 seconds)
    (112/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.524517034 seconds)
    (113/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.380821262 seconds)
    (114/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.364204474 seconds)
    (115/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.241843697 seconds)
    (116/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.301475485 seconds)
    (117/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.668260274 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.377276401 seconds)
    (119/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.347914681 seconds)
    (120/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.787098569 seconds)
    (121/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.167241715 seconds)
    (122/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.076042114 seconds)
    (123/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.382242849 seconds)
    (124/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.92846089 seconds)
    (125/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.185499377 seconds)
    (126/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.369829822 seconds)
    (127/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.073126234 seconds)
    (128/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 4.166696656 seconds)
    (129/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.920915433 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.098322707 seconds)
    (131/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.871802994 seconds)
    (132/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.093855255 seconds)
    (133/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.187139403 seconds)
    (134/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.516074521 seconds)
    (135/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.081439135 seconds)
    (136/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.166390383 seconds)
    (137/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.317096599 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.992207831 seconds)
    (139/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.161407888 seconds)
    (140/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.326526896 seconds)
    (141/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.266538649 seconds)
    (142/341) benchmarking ("sort", Bool, false)...
    done (took 2.296400747 seconds)
    (143/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.837608886 seconds)
    (144/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.84233236 seconds)
    (145/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.211310129 seconds)
    (146/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.348009186 seconds)
    (147/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.155200648 seconds)
    (148/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.082880387 seconds)
    (149/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.283675249 seconds)
    (150/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.089210909 seconds)
    (151/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.084234055 seconds)
    (152/341) benchmarking ("sort", Int64, false)...
    done (took 5.722276062 seconds)
    (153/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.23330757 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.465538498 seconds)
    (155/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.070594538 seconds)
    (156/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.419753939 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.07481494 seconds)
    (158/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.358931088 seconds)
    (159/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.069996216 seconds)
    (160/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.356267971 seconds)
    (161/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.149204232 seconds)
    (162/341) benchmarking ("sort", Float64, false)...
    done (took 5.766474749 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.960162822 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.466390045 seconds)
    (165/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.263504829 seconds)
    (166/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.409672563 seconds)
    (167/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.071486109 seconds)
    (168/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.286741528 seconds)
    (169/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.381206794 seconds)
    (170/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.736016389 seconds)
    (171/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.292518953 seconds)
    (172/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.456054899 seconds)
    (173/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.069987849 seconds)
    (174/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.167984996 seconds)
    (175/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.205878448 seconds)
    (176/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.068843222 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.463305573 seconds)
    (178/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.068059737 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.142111005 seconds)
    (180/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.170916091 seconds)
    (181/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.336784032 seconds)
    (182/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.229760414 seconds)
    (183/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.458867272 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.164826233 seconds)
    (185/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.320538109 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.218411099 seconds)
    (187/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.272963828 seconds)
    (188/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.150089583 seconds)
    (189/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.204128883 seconds)
    (190/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.282651587 seconds)
    (191/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.855269456 seconds)
    (192/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.255319574 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.066384154 seconds)
    (194/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.512911257 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.453525005 seconds)
    (196/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.15244914 seconds)
    (197/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.482136478 seconds)
    (198/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.123708637 seconds)
    (199/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.125452223 seconds)
    (200/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.14532362 seconds)
    (201/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.064276629 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.385951039 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.062982752 seconds)
    (204/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.251781951 seconds)
    (205/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.977757884 seconds)
    (206/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.175263635 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.415028901 seconds)
    (208/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.159504823 seconds)
    (209/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.195386397 seconds)
    (210/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.998398243 seconds)
    (211/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.297156794 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.378075229 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.383234643 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.145540881 seconds)
    (215/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.0667104 seconds)
    (216/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.178547794 seconds)
    (217/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.070278947 seconds)
    (218/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.081145226 seconds)
    (219/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.303766198 seconds)
    (220/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.041541305 seconds)
    (221/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.037397939 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.197941736 seconds)
    (223/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.26111251 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.215975667 seconds)
    (225/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.306422288 seconds)
    (226/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.079022723 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.079840583 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.065456911 seconds)
    (229/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.069960616 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.800483316 seconds)
    (231/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.150425455 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.392947341 seconds)
    (233/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.293674675 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.989819045 seconds)
    (235/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.085874269 seconds)
    (236/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.460817935 seconds)
    (237/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.511509911 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.776346446 seconds)
    (239/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.387828097 seconds)
    (240/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.167283467 seconds)
    (241/341) benchmarking ("sort", Float32, false)...
    done (took 5.750457566 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.374604108 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.691060789 seconds)
    (244/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.063811624 seconds)
    (245/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.342384884 seconds)
    (246/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.079273972 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.081115878 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.08176267 seconds)
    (249/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.144830882 seconds)
    (250/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.14857114 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.16402996 seconds)
    (252/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.167972595 seconds)
    (253/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.284118429 seconds)
    (254/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.146686346 seconds)
    (255/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.165348425 seconds)
    (256/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.069457296 seconds)
    (257/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.314550462 seconds)
    (258/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.080619799 seconds)
    (259/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.711513337 seconds)
    (260/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.084205809 seconds)
    (261/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.367830217 seconds)
    (262/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.17035851 seconds)
    (263/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.27895997 seconds)
    (264/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.070432047 seconds)
    (265/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.16286239 seconds)
    (266/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.316637148 seconds)
    (267/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.486058354 seconds)
    (268/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.18283141 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.90084394 seconds)
    (270/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.226336729 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.080657934 seconds)
    (272/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.884235738 seconds)
    (273/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.167296385 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.384778181 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.842236164 seconds)
    (276/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.44897806 seconds)
    (277/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.190763448 seconds)
    (278/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.06664017 seconds)
    (279/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.075404022 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.128105705 seconds)
    (281/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.472363698 seconds)
    (282/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.750328943 seconds)
    (283/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.290231305 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.067871356 seconds)
    (285/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.349882926 seconds)
    (286/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.067210829 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 3.975820002 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.822613634 seconds)
    (289/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.143078708 seconds)
    (290/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.195733182 seconds)
    (291/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.164572627 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.270457964 seconds)
    (293/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.223062999 seconds)
    (294/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.133796773 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.200032163 seconds)
    (296/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.343172388 seconds)
    (297/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.078238067 seconds)
    (298/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.267625861 seconds)
    (299/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.38907825 seconds)
    (300/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.481274777 seconds)
    (301/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.065113109 seconds)
    (302/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.728226727 seconds)
    (303/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.506116937 seconds)
    (304/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.208428371 seconds)
    (305/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.311640645 seconds)
    (306/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.083718847 seconds)
    (307/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.363488992 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.984997231 seconds)
    (309/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.160160077 seconds)
    (310/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.145392912 seconds)
    (311/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.207002188 seconds)
    (312/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.190767888 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.098731739 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.192953932 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.379396271 seconds)
    (316/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.284665275 seconds)
    (317/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.924483988 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.065813099 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.071233609 seconds)
    (320/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.230527557 seconds)
    (321/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.07345856 seconds)
    (322/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.265709515 seconds)
    (323/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.066670328 seconds)
    (324/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 5.539959802 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.104053628 seconds)
    (326/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.388802013 seconds)
    (327/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.072270643 seconds)
    (328/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.765633417 seconds)
    (329/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.076094261 seconds)
    (330/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.671566076 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.287448501 seconds)
    (332/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.457978225 seconds)
    (333/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.068915829 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.298960739 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.967243595 seconds)
    (336/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.076301668 seconds)
    (337/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 3.767885703 seconds)
    (338/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.578031086 seconds)
    (339/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.133515391 seconds)
    (340/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.071575587 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 8.507508108 seconds)
  done (took 1164.11324357 seconds)
done (took 1166.229798286 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.090523941 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.069748184 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.56385552 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.079723903 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.069785521 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.073774805 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.576392744 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.098782394 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.087127575 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.574407898 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.078191027 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.072047969 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.086175062 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.105746206 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.081665403 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.085965862 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.077022687 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.097268834 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.104442434 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.076700577 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.122432426 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.076464151 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.070434796 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.123231831 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.071142348 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.085433141 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.091157676 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.122023671 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.121734234 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.073161876 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.077338997 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.423238969 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.120066044 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.075297194 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.083040682 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.086775348 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.077577582 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.087645885 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.091489482 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.088026679 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.072117274 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.081311931 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.075335375 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.074135193 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.070625915 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.071046104 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.074201276 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.197217825 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.086188795 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.408156307 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.129566188 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.090962856 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.124853166 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.074977176 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.072892758 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.075078457 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.123692645 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.076791631 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.076520408 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.40800923 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.16210207 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.086955709 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.410433324 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.133631646 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.08164373 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.079671067 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.071399371 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.092326823 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.423758433 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.613550933 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.10329552 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.094603162 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.074367486 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.076625542 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.088799091 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.576708886 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.085138801 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.644296422 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.097928038 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.089391148 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.079821344 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.077150327 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.076047635 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.091065727 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.093721998 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.073580664 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.079897081 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.080447157 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.087744588 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.425863615 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.1158507 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.564651521 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.080100379 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.092999978 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.093119277 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.648752023 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.101801695 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.09160923 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.078950357 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.426767431 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.114465027 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.094742821 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.077672397 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.086566625 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.188805777 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.092772428 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.094313244 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.074675142 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.097175099 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.08064488 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.075752363 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.090528098 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.094800711 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.109747467 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.092472088 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.074910288 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.084226699 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.080974981 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.092349445 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.085173462 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.081967689 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.087335667 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.076978139 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.12800062 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.095567482 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.09231893 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.190228321 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.081285392 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.201743615 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.091431148 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.083211282 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.075963492 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.412851985 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.116659497 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.098559506 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.082702302 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.099559089 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.099598842 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.094132787 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.07970323 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.091159592 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.080873925 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.129472064 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.077952881 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.102688886 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.130035328 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.093299012 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.08504857 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.097740488 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.113775697 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.100374384 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.083332169 seconds)
done (took 326.772844648 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.12868067 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.080320318 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.156758822 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.082398968 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.14895162 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.133832636 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.081900203 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.082463232 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.082415745 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.463850933 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.081453276 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.087613776 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.079795553 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.081875264 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.130290157 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.081347989 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.081333633 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.341576083 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.0811092 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.141111573 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.081369238 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.084055536 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.081371032 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.470614238 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.082417403 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.082437763 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.142522313 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.082582733 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.320881248 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.080794632 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.080980902 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.3234738 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.141378281 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.095878326 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.093439343 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.088547012 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.149032885 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.091562269 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.129191056 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.128955333 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.160958208 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.116364417 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.08312953 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.084023263 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.085207645 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.08325424 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.083083868 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.116903563 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.083175101 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.087950534 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.314881003 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.090925529 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.089007152 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.084603108 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.083620324 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.097981331 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.084217826 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.082578352 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.142310336 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.082193601 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.131709372 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.472832209 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.512043622 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.084215397 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.082918787 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.085178775 seconds)
  done (took 197.973710018 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.153600468 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.170367468 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.151451321 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.089625571 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.135340494 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.150016322 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.08995966 seconds)
  done (took 16.948400304 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.092212235 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.085057658 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.107999993 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.107932078 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.083222304 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.225128031 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.096798168 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.090281111 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.112247356 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.085246474 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.420545841 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.109026932 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.091774872 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.084621072 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.098218607 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.113406311 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.088167333 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.084370971 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.184474277 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.164038654 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.090669206 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.09230823 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.114634456 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.097433223 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.085496571 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.085964815 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.085429441 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.093539372 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.086567694 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.086720358 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.085591391 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.100257389 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.087418228 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.086289191 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.085114054 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.087388607 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.084710394 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.085712549 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.085900262 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.086350115 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.085804108 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.086085765 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.085261852 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.087210336 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.086376423 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.108576008 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.086503542 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.087566586 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.086179921 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.08839484 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.116464818 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.087900989 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.088870772 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.092647348 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.128151659 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.093285186 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.086204544 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.086944674 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.08733828 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.08747697 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.087294316 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.167204296 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.109975739 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.088315343 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.111599147 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.125364058 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.088475144 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.087140475 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.088649834 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.113196857 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.088126172 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.111338192 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.087778244 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.187827993 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.089161595 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.230702749 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.112077011 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.092412551 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.091867081 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.087832825 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.095752901 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.089289966 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.090469068 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.094744684 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.094977052 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.089379133 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.089775617 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.089069157 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.096445626 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.089333806 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.134852778 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.089606653 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.087359907 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.184861205 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.089627018 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.187057744 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.115731715 seconds)
  done (took 226.227637566 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.094822582 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.09275671 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.10378872 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.091702144 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.090036691 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.095418059 seconds)
  done (took 14.581275246 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.09282389 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.093969 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.089750533 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.089656615 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.088772385 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.090171568 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.091141002 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.091978617 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.093955184 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.090055633 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.089345871 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.09031213 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.089086876 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.089257743 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.091739929 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.091696507 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.090830481 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.090695845 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.091297244 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.090133335 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.333051194 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.090427728 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.08954551 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.093507026 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.093623287 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.091341167 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.098946782 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.090170127 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.090423286 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.097089524 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.095652391 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.091907567 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.093626769 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.097938784 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.095809671 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.093621711 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.094446709 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.092703339 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.0915038 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.091498775 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.092375907 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.09070676 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.092052658 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.09236309 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.093707869 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.098747188 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.095671302 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.101231981 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.093134924 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.091435777 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.09135035 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.092033576 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.092948832 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.093327558 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.096914891 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.098493314 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.095001404 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.092416416 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.09153737 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.096050124 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.097157646 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.093102112 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.09523255 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.098390245 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.101608197 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.092420708 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.095086024 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.09692523 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.09291931 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.094057784 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.093868617 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.093417761 seconds)
  done (took 153.964943084 seconds)
done (took 611.702900751 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.185355367 seconds)
  done (took 9.201639423 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.130763501 seconds)
  done (took 9.250853617 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.242743655 seconds)
  done (took 12.26592019 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.105626597 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.14373822 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.094413065 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.089421373 seconds)
  done (took 30.466571305 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.36621412 seconds)
  done (took 9.384051775 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.103414889 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.088816479 seconds)
  done (took 16.276215419 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.1030648 seconds)
  done (took 9.120795111 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.59802103 seconds)
  done (took 9.641336098 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.099311209 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.108205527 seconds)
  done (took 16.245828105 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.09729689 seconds)
  done (took 9.116530103 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.875524907 seconds)
  done (took 9.978603998 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.099634996 seconds)
  done (took 9.13669447 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.174417146 seconds)
  done (took 9.193539881 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.927692844 seconds)
  done (took 9.946165012 seconds)
done (took 171.242782735 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.100986205 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.095428387 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.095139769 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.093493399 seconds)
  done (took 30.402688658 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.128999229 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.130337299 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.138020019 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.129093575 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.120271758 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.11927692 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.129590891 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.130405486 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.121987728 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.127731136 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.129804775 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.1271797 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.131137158 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.139297322 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.139748071 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.129698099 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.130709119 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.13018926 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.121494439 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.139401193 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.130023428 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.130409763 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.097035111 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.096439119 seconds)
  done (took 53.068635259 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.286420955 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.165797093 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.250914984 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.14160121 seconds)
  done (took 10.86349867 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.096937816 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.161783389 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.149593535 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.141793509 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.147595662 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.199192237 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.149944356 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.233574186 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.225137174 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.223228949 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.103585698 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.118818346 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.124370593 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.143922674 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.199598371 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.09603805 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.096783227 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.21312822 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.159595176 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.326948158 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.097085132 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.154430529 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.14797385 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.14959545 seconds)
  done (took 53.880553402 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.097208142 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.10642975 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.104928573 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.09750255 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.09915333 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.099235178 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.104483432 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.100236502 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.1208767 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.101733383 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.098547878 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.100286096 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.104565557 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.09839076 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.098999969 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.111813134 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.11221049 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.099755519 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.103296847 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.106510282 seconds)
  done (took 44.087880393 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.096927292 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.944024545 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.4448247 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.347931998 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.095921027 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.093893114 seconds)
  done (took 33.044817125 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.110469341 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.114597242 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.102877575 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.125001747 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.143667792 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.105421211 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.158916973 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.263766436 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.106343385 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.157825233 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.11683205 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.103401951 seconds)
  done (took 27.632591293 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.097447289 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.099461539 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.096863337 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.108678192 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.10911435 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.107858444 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.10472528 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.095600841 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.111302834 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.117593064 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.108242236 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.109993026 seconds)
  done (took 47.288918663 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.315150551 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.324143463 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309736986 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.679157181 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.426189949 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.07454892 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.385022022 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.312276099 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.830050915 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.842181665 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.394072613 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.073276731 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.035426769 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.022164246 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.016247689 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.341341144 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099011346 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.96073732 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.360919221 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.142357407 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09908979 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.099767021 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107731991 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.407375176 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422728022 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.097352529 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.313783322 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115305118 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.127364483 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.311620698 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.672099788 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.155591952 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.301659861 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.354388537 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.454847902 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.171999818 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.101609468 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.290100351 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.145001679 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.134872166 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.109526346 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.110751209 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.641561863 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.11133293 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373154318 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.10115285 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.132633331 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.087273762 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024653247 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.34920959 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.202094481 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.105609539 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.134371995 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.535323081 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221182354 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.344159378 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106705329 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.26763181 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.158885248 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.280810883 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.225933313 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.102116724 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.317294303 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.02525452 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.451435098 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21214344 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.104596476 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.108020226 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.800350412 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.343567582 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.187555932 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.353820003 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.849884416 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.103063517 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106306854 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.154899062 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202322072 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.098415623 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.417869543 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.06180483 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.027143161 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.200287657 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.606125024 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107515775 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.102066647 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.109000109 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.9520825 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.029713403 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.200982129 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.286922473 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.41628384 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.102828542 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.104891311 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.125831056 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106838236 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.050953571 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.655652846 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.168771554 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.030355804 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.669397828 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.695732034 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.069767245 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.612094475 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145634017 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.384097568 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.249371127 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.507496605 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.309023371 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.349263356 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.640663457 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.10929997 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.668270919 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1890502 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181219877 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.104459757 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.695991416 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.304476283 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.323729149 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.205267426 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.104055471 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.029614259 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.11721296 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306223195 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.688713889 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159976305 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.101894582 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.109516975 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.105654225 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.108367674 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.21960998 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120553278 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.392094841 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.17600521 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.104696132 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.042475662 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.107072803 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.4062186 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.737912972 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163353352 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.363927688 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.370139874 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.854912184 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.700713327 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.206128937 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.374372226 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.175482834 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178934987 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.66855337 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.231181422 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.202738017 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105755824 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.233816559 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.107514836 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.110352043 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.504764669 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.625204114 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.540019149 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.149204607 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.105220048 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.061051676 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.280970871 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347333357 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135842088 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.124678769 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.111505569 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.194526908 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332863734 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.107306995 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.034197054 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359788701 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.344885791 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.404345066 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.520530888 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.141452101 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.17690954 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.118711892 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.322316703 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.194270063 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.761888875 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.655133217 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.323636535 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.672966013 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.069916074 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.753733866 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.287897507 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.475220247 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124236035 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.558194917 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.280007753 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.791021601 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.137651546 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.633291764 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.033721111 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112029882 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.439265345 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.058149932 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.417612805 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.162659972 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121287522 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.109872786 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.110389981 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115787986 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.996434232 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.216034392 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17773938 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.182338383 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.037287167 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.742818247 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.145733636 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.11289241 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.109357427 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.38624195 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.858790755 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058738564 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.109974353 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186694035 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.123708765 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.662853555 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.112601344 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.114240757 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.711603125 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.111923483 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.028768633 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.160774554 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.834152832 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132706941 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.292329403 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.796018026 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.41565602 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.182201064 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186329612 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.109962195 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111081313 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.81538272 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12302901 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.814321788 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.399615437 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.385254615 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.553154541 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.168376127 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.323077383 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.129703941 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.115821092 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.606042747 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.135558208 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115599293 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.318594464 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.6334894 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.359500375 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.062321166 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.201370933 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.114592966 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.38517177 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.107455712 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.694414829 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.799756772 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.11315967 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113931993 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.373179938 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.800005279 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.116811018 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.094475591 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119902981 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.330013261 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.315988671 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392384721 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.407465529 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.566993098 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.044246483 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.119140957 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.142999164 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.361336391 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.115507889 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.154257483 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.622334367 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.16558967 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.541244219 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.394263944 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.422475924 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.737984007 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.389001281 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.175440122 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.126405733 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.767704677 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.239021108 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.044821378 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.234438846 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.042262493 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.833957766 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.403836592 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.1339666 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.387367059 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092026459 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.462104678 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.410513219 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.302845022 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.152334264 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.141785948 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.117551948 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.158685626 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.116818449 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.309015717 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.234139941 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.123021753 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.656723178 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154256685 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162665994 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.12168561 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.601766296 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133024471 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119516539 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.862466873 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.140738491 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236360077 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189929844 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.86464105 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.730887385 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.231310166 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.997401231 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.768940797 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.388001026 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.172035451 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.562529175 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150825154 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.523844788 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.116348457 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.334529092 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.124760528 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.717325959 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162894697 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392301599 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069333952 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.329255441 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.315001427 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.140113261 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.120347488 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045708919 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.283369279 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.984624007 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.100306716 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.122053635 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.810387803 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.490878086 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.336750301 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.521204058 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.93843383 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.121974463 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.434140251 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.509705258 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.760176547 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151194296 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12182664 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.392493465 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.241012011 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.346788509 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.402944459 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.128481589 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.14588823 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335079763 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246183275 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.040200931 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.597297668 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.70697325 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.819573218 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.131953088 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.3255198 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.391034697 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.412164053 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.153456891 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193495173 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.526451359 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.396138655 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.189246926 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.044334213 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120864601 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.520469453 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.539730676 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.216177581 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36243489 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.42250911 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.743180926 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.719121426 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.550506391 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.51237286 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.61088288 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.523747072 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.328231879 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.476275365 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.446370856 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.718284958 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.53561168 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.332560729 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218657778 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.400737244 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.986460979 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.831338761 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.366250925 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.126053909 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.051160156 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.33093465 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.246799922 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.487207522 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.760137423 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.37238578 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.298586083 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.592217236 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.666392151 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.304950051 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.145880613 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.087430661 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.145395292 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.144405473 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.122867122 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.601400557 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.409934512 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132790832 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.064488191 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.791797405 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.049221579 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.339181532 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.328292794 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.157725408 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.690890884 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.311956219 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.218673724 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420435027 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.379865347 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.156649109 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.048809314 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.840600845 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.06583362 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.177931399 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.546636875 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137116871 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.127613435 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.328376012 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.053012815 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.168653234 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.128814286 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.321091346 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.695926359 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.394809598 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246963475 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.371017716 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42041654 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.986651328 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14389655 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.39805719 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.052566621 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.742765574 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.815379278 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.161945832 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196451991 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.12520727 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.127873977 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.396745376 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.376287176 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.326586299 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.72841713 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.156130816 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.148878764 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.478829839 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.210128165 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.128086377 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.131316182 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.60559174 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.356248037 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.121533291 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.097293591 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.339566473 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199375751 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.322495675 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.201060379 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.638863192 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.131893847 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.954587343 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.219629194 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.070771151 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.122093738 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.812487925 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.18359317 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.125374892 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40071538 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.784109006 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.329577947 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.524388444 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.988607109 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.330483444 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167954842 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.129575605 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.255591792 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.430471126 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.425473609 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.127464938 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.401116812 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.170999558 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.131186704 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.788876405 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.093724555 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.126474886 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.860993462 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.028938146 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.856438942 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.529238606 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.133715673 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128016371 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.131099337 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.054860709 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.126484737 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.306671754 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.10465479 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.226243542 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.398573652 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.373148628 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.210158326 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133587696 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.130007294 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.136077721 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.343601817 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.642932439 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144374108 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.828599809 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332494416 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.135291414 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.609701284 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.565112794 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.371910658 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.165919456 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.312776123 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.576422224 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.772930634 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.315151114 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.090709408 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351930067 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.129708543 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.401576129 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402076761 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.12986568 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.342134715 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.721094336 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.412973757 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.490121684 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.455326039 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.185594964 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.320149914 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.041907833 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.139269373 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.136209278 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.399194348 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177553863 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.129434771 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137741617 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.776854742 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.800257857 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.590738879 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278079151 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.362755442 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.941823009 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.881817813 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.13250998 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.058388364 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.129819649 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152553026 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.134369481 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.057458838 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.857482229 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.849598415 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.344744597 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.44470031 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.058025021 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.334534035 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.739085796 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.054453224 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.10010308 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.130160719 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.375177722 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05855359 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.134342137 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.086036063 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.322344405 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.842556194 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.39938139 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.132252048 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077222232 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132244185 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.13449134 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.130640235 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.22104325 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.132637921 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246488391 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.405751279 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.408109448 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.222557015 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.782383479 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.781979913 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.065699585 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172042992 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.754476809 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.702749631 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.333000028 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.25217593 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.803317807 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.074061667 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.140315684 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148004019 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.375430451 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.134447603 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.136177281 seconds)
  done (took 2228.499763428 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.162647415 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.199471286 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.182918316 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.294148592 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.139515659 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.16633183 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.181162291 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.199056907 seconds)
  done (took 59.579913405 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.133139322 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.143027148 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.137673814 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.133357713 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.129112729 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.159791513 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.320926453 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.159452019 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.134570267 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.134471779 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.149775693 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.134523342 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.132442841 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.128357335 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.136385014 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.423725523 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.152766641 seconds)
  done (took 80.934486695 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.197489684 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.13969433 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.131717541 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.078204749 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.173045926 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.436446902 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.131587263 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.134412798 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.484039073 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.431185818 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.142759732 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.143854213 seconds)
  done (took 95.682153791 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.137025693 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.133685754 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.13527121 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.135068774 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.134797324 seconds)
  done (took 12.731399308 seconds)
done (took 2779.779547429 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.371321352 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.228253005 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.204229475 seconds)
  done (took 6.487860641 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.276416078 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.339628332 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.50584242 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.495859276 seconds)
  done (took 11.680041793 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.417201939 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.515314879 seconds)
  done (took 6.990429794 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.49603529 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.133581789 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.522154553 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.138287538 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.138432681 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.137018815 seconds)
  done (took 23.475456465 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.135132635 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.137080323 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.1381636 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.138372827 seconds)
  done (took 10.606620317 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.134377259 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.911646833 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.130515892 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.139029023 seconds)
  done (took 22.373530628 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.344675985 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.782259683 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.912014992 seconds)
  done (took 13.09734203 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.754711848 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.582487465 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.74287144 seconds)
  done (took 10.137171885 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.962892451 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.145173531 seconds)
  done (took 8.165358251 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.27325737 seconds)
  done (took 4.331743326 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.973269105 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.449427548 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.604459032 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.658678949 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.705017244 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.347346149 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.446555051 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.400941133 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.535611032 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.524661549 seconds)
  done (took 27.705597752 seconds)
done (took 161.630834316 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.575292422 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.161479339 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.347923466 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.509720463 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.373647422 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.346323952 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.438535119 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.496052531 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.180057642 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.166529542 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.509171645 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.369158641 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.386923069 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.158151391 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.390308475 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.148898439 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.386190294 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.60321827 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.19080463 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.40463735 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.444173671 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.156136169 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.34700362 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.170195803 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.384669357 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.297248446 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.767686694 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.148906012 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.341772911 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.775960259 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.327392246 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.552224167 seconds)
  done (took 177.916282997 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.138787523 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.136283657 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.137097775 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.136287074 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.582839782 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.137248836 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.136957821 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.135946072 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.331708635 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.3288281 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.136167025 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.568378059 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.136861422 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.136478019 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.139535856 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.13565616 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.435804998 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.136916655 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.136819836 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.137273898 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.13624741 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.445025773 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.13760892 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.457402121 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.425069496 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.140843338 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.137182422 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.137962753 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.138450172 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.13791825 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.138281696 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.138148094 seconds)
  done (took 216.934815523 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.141217072 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.13895136 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.138800777 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.138680567 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.138867376 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.137839848 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.140111999 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.137740092 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.81608942 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.809960922 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.139225537 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.138361407 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.138253976 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.138129556 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.142421376 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.138240837 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.142642147 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.142652329 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.141872254 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.14505107 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.140614955 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.998441817 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.140420346 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.023304837 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.140425495 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.145168254 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.139505683 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.145087958 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.144384222 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.145647051 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.13970798 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.139311177 seconds)
  done (took 229.653081304 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.382151796 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.143782219 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.14399694 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.158866758 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.143766184 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.144118368 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.148909422 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.388386977 seconds)
  done (took 21.720387143 seconds)
done (took 648.295638745 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.505781913 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.873530199 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.272516435 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.164308532 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.407086898 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.204581907 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.161795379 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.228797502 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.801105883 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.237020051 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.584678228 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.167254153 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.8821753 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.185337692 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.279741732 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.222625849 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.533808848 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.814026875 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.295591339 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.820430165 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.360346598 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.1098824 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.240035711 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.845588499 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.5893304 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.132623029 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.171182264 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.537026307 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.164723792 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.396490532 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.824495098 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.408231739 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.173892607 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.164754837 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.22093099 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.203766182 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.355567195 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.169508043 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.27731703 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.907559265 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.827793458 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.685173784 seconds)
  done (took 111.47350308 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.152340908 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.150764859 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.15155327 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.152233773 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.159780023 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.150505584 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.152481753 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.151974348 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.152361247 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.151144963 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.151943368 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.158944748 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.152953411 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.159977123 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.151415104 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.15242773 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.15173036 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.1587595 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.152737492 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.150872694 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.152563983 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.151597699 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.147952182 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.152784898 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.15151575 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.151664621 seconds)
  done (took 58.050550964 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.1463142 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.299719529 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.43524584 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.174056989 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.146628182 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.15030948 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.176481387 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.152255337 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.148978133 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.150347805 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.259345601 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.153478165 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.160734078 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.43396026 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.172934121 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.149156907 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.149641539 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.149703969 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.305730692 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.164399537 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.178269023 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.152538497 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.178181565 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.159819549 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.153080362 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.148829617 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.151984843 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.561758272 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.156218021 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.260500928 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.19209233 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.179112041 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.529214358 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.439795408 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.210612031 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.152140991 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.148373247 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.307011216 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.156296201 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.14895935 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.177608724 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.15393794 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.436732729 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.659281651 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.162018065 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.147609952 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.557398922 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.314263775 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.192822565 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.160695088 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.442688276 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.174854524 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.149858513 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.151962226 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.186928403 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.157953536 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.151433819 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.429956856 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.16248696 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.179649084 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.154029912 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.150794685 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.314547789 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.159535642 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.303905853 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.15805677 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.157060588 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.151076775 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.438949663 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.17513178 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.656315894 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.162024748 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.150362787 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.264049899 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.308300191 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.583860463 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.161236446 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.316825923 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.54701308 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.184279641 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.160168599 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.546835284 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.188211096 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.15904839 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.149984753 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.152130539 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.151094306 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.195223583 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.17859478 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.578319141 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.654963531 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.444113874 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.187459945 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.161075754 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.153623482 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.431865797 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.159855821 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.152401958 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.433436339 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.68026017 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.165549527 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.157760694 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.645356108 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.163670455 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.183044752 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.161007482 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.448740682 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.176738609 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.192962648 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.153030038 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.158893176 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.155010289 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.1825958 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.160908616 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.152122641 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.632261015 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.321705075 seconds)
  done (took 265.494269538 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.155493138 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.149892932 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.151456404 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.150331203 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.15270336 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.153531235 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.153042991 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.152848147 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.154899357 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.151551428 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.152761615 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.152667973 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.152921887 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.151718044 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.187260136 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.155065219 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.637633115 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.150557179 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.152840585 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.151930987 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.740136702 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.156496144 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.152277001 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.150782641 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.154022282 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.15371973 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.160155498 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.185642205 seconds)
  done (took 175.505027249 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.154309167 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.201601695 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.162433895 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.200644364 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.162339741 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.15404333 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.17551824 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.166959991 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.159647227 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.153282873 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.154690132 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.180644184 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.159912427 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.22829915 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.183628135 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.184511057 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.228642504 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.160709716 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.154552844 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.154452534 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.198687045 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.163723175 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.180571939 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.205492797 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.163665851 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.200554845 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.165043567 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.154073298 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.155495592 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.244041268 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.167850208 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.182969228 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.186683776 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.171389938 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.245987833 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.2428123 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.233038367 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.182613115 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.157887709 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.155000993 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.156441055 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.15664064 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.202065469 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.165901308 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.156744297 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.245787926 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.17081052 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.156098962 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.175612976 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.155486454 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.166156819 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.170603555 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.186774392 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.253486386 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.195716919 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.182811908 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.175874476 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.172957444 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.156010276 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.228842986 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.160362147 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.245994177 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.170629518 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.15640307 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.156276778 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.158813773 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.202133121 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.187151244 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.231412503 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.161578538 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.226977357 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.20719738 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.167145076 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.156605714 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.156423998 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.203675049 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.240198834 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.209378134 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.212109837 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.189564649 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.164697374 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.156441218 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.15909226 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.184217708 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.163286079 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.246034534 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.241822335 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.161109187 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.155369783 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.1574304 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.156805173 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.178451039 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.212322771 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.195024152 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.237862128 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.191035118 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.190302681 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.162925864 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.168672842 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.161387716 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.185851652 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.162094278 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.170213574 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.490048441 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.193091933 seconds)
  done (took 231.59403981 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.53695642 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.203734473 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.22719844 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.41681384 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.553270576 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.292977075 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.193404955 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.20938316 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.215652194 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.322270871 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.267924923 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.251307475 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.191205022 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.178702997 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.20617314 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.215977229 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.235586697 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.502369528 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.299219016 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.907672269 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.192171007 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.481355441 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.485309036 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.566863379 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.242492202 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.579455256 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.84847921 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.29430446 seconds)
  done (took 70.203368641 seconds)
done (took 914.386979957 seconds)
SAVING RESULT...
DONE!
