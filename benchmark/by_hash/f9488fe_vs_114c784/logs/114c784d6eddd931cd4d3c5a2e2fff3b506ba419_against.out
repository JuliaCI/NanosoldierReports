cset: moving following pidspec: 15993
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.862623315 seconds)
loading group "shootout"... done (took 1.172627335 seconds)
loading group "string"... done (took 0.667332143 seconds)
loading group "linalg"... done (took 8.568324885 seconds)
loading group "parallel"... done (took 0.164603328 seconds)
loading group "find"... done (took 3.009791547 seconds)
loading group "tuple"... done (took 2.128957203 seconds)
loading group "union"... done (took 14.826080932 seconds)
loading group "dates"... done (took 1.454088017 seconds)
loading group "micro"... done (took 0.219407928 seconds)
loading group "simd"... done (took 4.814054438 seconds)
loading group "io"... done (took 1.085385692 seconds)
loading group "random"... done (took 9.53069323 seconds)
loading group "problem"... done (took 1.522986787 seconds)
loading group "array"... done (took 25.300550461 seconds)
loading group "misc"... done (took 1.88968982 seconds)
loading group "scalar"... done (took 43.201330312 seconds)
loading group "sort"... done (took 3.291850404 seconds)
loading group "sparse"... done (took 12.936235516 seconds)
loading group "collection"... done (took 18.411413173 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.427330665 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.11331371 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.125777535 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111494997 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182468922 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.117147694 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126357836 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082519149 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.880297354 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134570887 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113453828 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.420624665 seconds)
done (took 5.319822652 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.172377384 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092068675 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081589433 seconds)
  done (took 1.435446218 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071729862 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062514109 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065631151 seconds)
  done (took 1.460359666 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063577077 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135921797 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064568251 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064881411 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065091165 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064622712 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064413948 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064512469 seconds)
  done (took 1.789501158 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071972607 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065848202 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063710064 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065821422 seconds)
  done (took 1.531979236 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065367568 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119262606 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062903056 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063374885 seconds)
  done (took 1.57048385 seconds)
done (took 9.312558612 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.137919401 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.817936009 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.764626091 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120851543 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.247730243 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.365588567 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122764181 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.18108496 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.086829113 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073545397 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119934114 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07635005 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.382963652 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.494096162 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069208143 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.166538749 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.645449617 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084850371 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133292841 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.451548362 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071715586 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085909523 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082953739 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069511742 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.35314266 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.150899267 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.663390577 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091275901 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066940789 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09243109 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068881385 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076115013 seconds)
  done (took 10.711794569 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094069603 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088124506 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067378128 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122216405 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.091855676 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068309389 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073910583 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066336644 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08692426 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122768399 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088150651 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097022318 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064649605 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067735566 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072303399 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195155133 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078591748 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.07962081 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06575799 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079648997 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104048427 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076783942 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076752616 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076022219 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130334759 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.16691995 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094858699 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096938208 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064273071 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077336519 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11332662 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123664069 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065196629 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063634489 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118230383 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093807962 seconds)
  done (took 4.635950216 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.873338512 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094414412 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081221885 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07282905 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104798499 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111548562 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.118804763 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120574707 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098025943 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067127474 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.156115334 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.662787554 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.149753143 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070099273 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118247392 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354040884 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.055660727 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068691945 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06673623 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069522314 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068467096 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110137929 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064624457 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173012125 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.581644432 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.06941722 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067959177 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094642896 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064039746 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139067894 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091575727 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068022399 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.54693753 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064071014 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062318825 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.086966909 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.090726547 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.176837713 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06687092 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077675553 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065083683 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107027413 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077753316 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.508363838 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067759561 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.577079094 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.223160882 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070829724 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070182336 seconds)
    (49/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.093207781 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099221904 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062372974 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066043054 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.938498657 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.141657807 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.064962209 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270350661 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068590745 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066502574 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067528075 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097548986 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065515102 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069566738 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070969146 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094286434 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.797914756 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088765779 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094342348 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065106566 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.398215742 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073653537 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067615015 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067844458 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.066888673 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104594978 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064835317 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064435263 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108523894 seconds)
    (78/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.062664899 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.092555403 seconds)
    (80/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.081721419 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086439459 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.067998079 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065632978 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064314883 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.335716483 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.161953502 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065042057 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065822341 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.478373707 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062092781 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064524469 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066263899 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.206957301 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069562262 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063233473 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064037146 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097705394 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066386796 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.334058265 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065253303 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.472598222 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067237896 seconds)
    (103/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064731523 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.11766426 seconds)
    (105/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100520856 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066961814 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099016216 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066680819 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063577238 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072185071 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064358278 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063273218 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067796629 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064057001 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064977929 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067943884 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06669781 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065913148 seconds)
  done (took 22.598359455 seconds)
done (took 40.085673173 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.315016607 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077091287 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076881099 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077254258 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077049146 seconds)
  done (took 1.932117091 seconds)
done (took 3.340832887 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.251312887 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073735987 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062624974 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199759019 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086110993 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173152362 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.214499433 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.164348444 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.08670311 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086222757 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086329377 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.216516408 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.222164976 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.08680239 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157116802 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.22260364 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086696302 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06243904 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.08649389 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086289531 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086186179 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062926 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.085904831 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086206726 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155654744 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.0863471 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062716044 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.156661834 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.086095928 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.156146399 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.084947438 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.085222848 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.084907935 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.154728752 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.084827459 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.152911887 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.061769526 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.08443527 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084997969 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084983091 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084997943 seconds)
  done (took 6.1406603 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075868845 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199828 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082039262 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060337383 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070058096 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080539254 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060322686 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080416794 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089565779 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080905336 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080350776 seconds)
  done (took 2.350862763 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070513588 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081427919 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082697692 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060287143 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071401126 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081604748 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060143507 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080926145 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083638483 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081655955 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081844752 seconds)
  done (took 2.177602122 seconds)
done (took 12.000819113 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098003619 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063916126 seconds)
  done (took 1.483929819 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220276003 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.494647615 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.925708122 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091039089 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07033413 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083123052 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.194849935 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065443446 seconds)
  done (took 7.660074081 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.097931842 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069875831 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065693866 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066626551 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067740395 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066226235 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067357515 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065855686 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065683401 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065833213 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067233443 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066138531 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065984126 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067980146 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067636689 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.06678912 seconds)
  done (took 2.541164561 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102094814 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067598231 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097651973 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060313113 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070473182 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060793561 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068620446 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071460098 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068203676 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069585346 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070952124 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069655442 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069571334 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069816891 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071396514 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071438831 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071545481 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069210644 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071787802 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071754401 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070343009 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071148858 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071765036 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069543329 seconds)
  done (took 3.183329723 seconds)
done (took 16.210315892 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175495742 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073171706 seconds)
  done (took 1.578395766 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068120074 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066216876 seconds)
  done (took 1.483815267 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073239683 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058825081 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07574898 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068166836 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059678709 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059427506 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075121214 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059857062 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059594563 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059705831 seconds)
  done (took 1.997689027 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063269761 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066608649 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064529773 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062545783 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065195276 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060646153 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06300395 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060996614 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067717564 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06005578 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063828703 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081008816 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063726195 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081656631 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063793284 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064086456 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065547425 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063281905 seconds)
  done (took 2.533597022 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061331404 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059991031 seconds)
  done (took 1.476491907 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064550632 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059988493 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062233107 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062285872 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059870697 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059594261 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060454057 seconds)
  done (took 1.777212415 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.420688918 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121817789 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341888466 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067119918 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074439293 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254020412 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062359105 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067269621 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066860266 seconds)
  done (took 2.869415625 seconds)
done (took 15.082622392 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082434526 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178170879 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.084967827 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.376845054 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089216452 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065098332 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11113876 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175095324 seconds)
done (took 2.541064786 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.280637414 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.234800189 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.397709317 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124304419 seconds)
  done (took 3.114134344 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.33446115 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077002456 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075231654 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064894642 seconds)
  done (took 1.928506859 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065357921 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069613027 seconds)
  done (took 1.501353118 seconds)
done (took 8.196490345 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072601583 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060486384 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.090162209 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065181971 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062508428 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.061985711 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061298525 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06233899 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059866214 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061303727 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062441356 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.06260786 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062175114 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062150708 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061990664 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06130902 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062688105 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.060163933 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061933977 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061805589 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061670592 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062344712 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061221049 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061783973 seconds)
  done (took 2.915539395 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079829133 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064375992 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064739568 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06464385 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065182659 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064716384 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064740257 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063968531 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06520187 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063390243 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065871324 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065599421 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063393437 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065476156 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06396722 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065927995 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064850602 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063917738 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063585705 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065598205 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064963804 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064387452 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065467417 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064875488 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065384016 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065289239 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064105279 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064112329 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065039544 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065237421 seconds)
  done (took 3.343176434 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06678926 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059132698 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.05889317 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068052874 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058309467 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.05858215 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058973723 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058008359 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058481533 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059540702 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059436198 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058384193 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059227168 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058668812 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058822163 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059112979 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063461239 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078239131 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059195659 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058613267 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06303818 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.05864213 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058521356 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058838848 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058909326 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058305089 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058356656 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059022966 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058684112 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059184666 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05862802 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062826403 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063919352 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058273675 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068801468 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063326598 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058724178 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.062910025 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059767228 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058535624 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058392536 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058077386 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058369111 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058777949 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068737909 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058764633 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059721154 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059278214 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058941701 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058361433 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058385137 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060341818 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067317001 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06008594 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058482174 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059447818 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058345926 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059377366 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058882329 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058514226 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.05846535 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062514836 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059857688 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059337059 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078371972 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059833993 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.06886332 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058715778 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059393554 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06265336 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059428335 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077000542 seconds)
  done (took 5.767030135 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07222021 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071997228 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077656838 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068231194 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063132794 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059509837 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062707237 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059443456 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068681833 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063497884 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059278089 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062881517 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068371255 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063261961 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06058878 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068374046 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063643122 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062585323 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059509092 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063671939 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060739341 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063144184 seconds)
  done (took 2.816840496 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.140626122 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064689694 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103243981 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068321567 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067338568 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068322334 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064674831 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065137124 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064802906 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065362438 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065375683 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06487084 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067089705 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065549345 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065329286 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065531634 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064708837 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065353029 seconds)
  done (took 2.675657755 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076892147 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064162968 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087360418 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064208598 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064446141 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064186793 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067820965 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.06848912 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063949177 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064310023 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068467985 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06413537 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063925992 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064172268 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063970583 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06457244 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064114276 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06548362 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068382683 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067626484 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068466149 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06960123 seconds)
  done (took 2.860708594 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077798191 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063014573 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078980573 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064847533 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058539508 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058512491 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064535195 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063458302 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064718935 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063291389 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063491904 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058987959 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065422957 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063854217 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06568194 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063957977 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063369538 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06387676 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063578346 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059005995 seconds)
  done (took 2.671600194 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072373487 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062097332 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061364685 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066756321 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061852513 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061933265 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066997333 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061484279 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061580941 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083207425 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062389774 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.0722529 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066979199 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064915803 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061613387 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067001515 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066566661 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066915622 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061642267 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061638627 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0828974 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061684296 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06677548 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061801407 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062034822 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061702698 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061399946 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06523757 seconds)
  done (took 3.222344179 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064330166 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062292828 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061716157 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061769029 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061513845 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062038497 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061817665 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061938373 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061288188 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061927699 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061661054 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061534098 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064375191 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062032972 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06165623 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061809522 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061476007 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062177005 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061985211 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062163493 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061621041 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061702851 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061643877 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062278968 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062096775 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061632355 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062326641 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062144908 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061875454 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062315833 seconds)
  done (took 3.256013911 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073333493 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069534603 seconds)
  done (took 1.53637672 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062003299 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07575336 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05807118 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070694649 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066614328 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062250755 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067319527 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068703845 seconds)
  done (took 1.919753653 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067168743 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090569662 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060413806 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06060737 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063879484 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125868062 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.073177652 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072511592 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074627492 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062666635 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060800847 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.07226822 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060124795 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073799394 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061793625 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069507057 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067642943 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078102586 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073674878 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059160381 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072688124 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061195924 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059111971 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061049245 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060179046 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06722195 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076194044 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073312233 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0687617 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057909642 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078623104 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058758543 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060010455 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068758616 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063458258 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059403075 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096242542 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059539936 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06410719 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058472848 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071273113 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080448035 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07423131 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077726508 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061291577 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061506053 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059077516 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061283476 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063580249 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068737041 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059309608 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067088113 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058610523 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060520774 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069655071 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059505081 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06450348 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069088013 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074206694 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070625392 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068896548 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075472443 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068596831 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067594494 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060872851 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079800368 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061501576 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073349773 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074554449 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060559741 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072658664 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059233792 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058220746 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059062628 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092842516 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060894035 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060211231 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059170499 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.058740999 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060510223 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06884522 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064283635 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066751884 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062701406 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075027185 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068725491 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.05896547 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065839415 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.07717513 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062830617 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059348959 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075805886 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06252278 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058790941 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076845959 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.06891309 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060435042 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059813434 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062900191 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072619443 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060953131 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057655563 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067596966 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060708807 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.06137143 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06298743 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067261875 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058441715 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069035623 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063499332 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060225385 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057291246 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063231935 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059966031 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058086768 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068490158 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058799504 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073179199 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065696475 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073209106 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073291994 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069430191 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074429923 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058742897 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057399023 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076345564 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068169067 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059541604 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075630562 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057978808 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071062983 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057458133 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059244305 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.209617128 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059548728 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062180237 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060099642 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064648631 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060914266 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061505527 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065026239 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067774221 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071271477 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060562837 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068167937 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059611787 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075106007 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069237449 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063611235 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062444186 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059851358 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071128989 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066079352 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068361447 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058341004 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059619932 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059202303 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070147961 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068916488 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061289029 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066392569 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063358567 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059698531 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059600625 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060832999 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063005353 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062555129 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.05981317 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067235402 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.067993453 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072765735 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066383806 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068139293 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.05804164 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058778376 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061066106 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058701845 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063596204 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068488604 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074404509 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070420685 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079598436 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.058841494 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.068907888 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060272927 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075442352 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072468152 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.059786384 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06350514 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.057770155 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060640371 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068617101 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070429171 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072801834 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074042214 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063498511 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063360994 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058922555 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074182712 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059408904 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067499612 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068708979 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06322179 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059011325 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060307278 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068184581 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06361212 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.058888743 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074373486 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.064940066 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058312381 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073497512 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.05932244 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069907189 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058492131 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062600525 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06432981 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060858664 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068507746 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07424162 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05772835 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059547696 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074606094 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060658985 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060890382 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067334425 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074547758 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063594 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066837618 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069945024 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069502308 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063763575 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068939264 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060062642 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068843873 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062352643 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070964475 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058770754 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076704769 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057728937 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074061574 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058906759 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070058267 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059423636 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068150522 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060027673 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07611823 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060468409 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059568813 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071071047 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057605176 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068400362 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058506301 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063972785 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06572077 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068441832 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060332836 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068478949 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060358759 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067896602 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063331199 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066962803 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067866131 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063627062 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057672743 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066787101 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069357199 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066487562 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059103101 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059444169 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058635823 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.213492856 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062036007 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061436087 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068641207 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064635166 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065466993 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061209284 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061184787 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060991034 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068229342 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069160032 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077210783 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068150508 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.066989044 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068892048 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058625151 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074607822 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059153732 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069543235 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058098667 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064729858 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068474211 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059342703 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078409086 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060755019 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06734132 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071420376 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068100501 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062950004 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.07733659 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062330994 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067818423 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.06753055 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063565906 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065856843 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06082093 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067892756 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.06891916 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.069795695 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060260529 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067073967 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06816859 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.0609972 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066469895 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060504411 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067563195 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060526135 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.0579858 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063752618 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070446954 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063640705 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064193039 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059179329 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057958703 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059362947 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065701892 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063771539 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.067688723 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075100401 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058464542 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.059895942 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058588164 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062635301 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076878185 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068699173 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067434349 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063722271 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058351896 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060345396 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061024246 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059230714 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062582755 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.05817465 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058908589 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069772277 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06098477 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063603208 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059141734 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060213566 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068750288 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063993212 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059658406 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065876581 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058776247 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064214761 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058341673 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060642279 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063649763 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058442958 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062874921 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069890369 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075922216 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065758713 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067935443 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060267309 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067379245 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074799121 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066181353 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060246761 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068825858 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058427669 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078054631 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068918102 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067863435 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069531292 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060233272 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.07609543 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063440634 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069131202 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074499368 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059909528 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065469151 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.0583961 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074747124 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063361856 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058601497 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067104764 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067137524 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064848209 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070693485 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059407625 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066666776 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063763845 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062743981 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060637407 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06036816 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067583234 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074843737 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059287313 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.062698857 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066481525 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067354524 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063123576 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070661701 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066474041 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059188169 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059983094 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062043917 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.208158525 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072174919 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060887337 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064423501 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064361333 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059533109 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066036339 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075918136 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068787642 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068994509 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058928705 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058400137 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076932414 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062995023 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062598239 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067150579 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.068998375 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071771715 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.0688805 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075997734 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060078729 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.064910515 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071444121 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060113534 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.05951455 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06297288 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060376916 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.06867924 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069069597 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066804265 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061193767 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066392596 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072839886 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060880078 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063800575 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063881221 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06004547 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.06995674 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067494803 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070743335 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06104483 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058791781 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062713518 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068166815 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066839442 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068760357 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059944587 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065744818 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072550595 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066798315 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062657515 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058216033 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062218632 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068353352 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063335895 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058810731 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06392259 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063225758 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065575469 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068605927 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063800169 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058626153 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076042021 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066989298 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068274884 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060749659 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06113381 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059595689 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058439092 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070145614 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.05864605 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060907196 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063848465 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060831672 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076592268 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067654996 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075105306 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060057515 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063568848 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059027949 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069354003 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063722724 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059299227 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069555666 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.058110101 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074636281 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070636805 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064384982 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058471717 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.063945122 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.066815643 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.073977769 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06882959 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068189328 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062336482 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068900407 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.0610018 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070092499 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058912479 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058112362 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069362403 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067993193 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072007893 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058552864 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069525785 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06115062 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067561543 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067045688 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061160554 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060720603 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060445402 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068295113 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063661476 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068077592 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063322825 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075690242 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059856673 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070237042 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068093568 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.069837006 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07268722 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071088012 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.06668023 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059591754 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066288456 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067024367 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059965843 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063995949 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062051237 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080296021 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.060183976 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059983674 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072492957 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063815692 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.0582974 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063788427 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.208211585 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070532746 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060883459 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070408888 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063621738 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060483176 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.063791753 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064190922 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058348979 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059001884 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059076479 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069506965 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063411541 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059201198 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077872408 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060715088 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.067646946 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070530504 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.0656605 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060880203 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058124531 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06036544 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072208649 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074484799 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062389784 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067724378 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060403037 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068312039 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058199168 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068295673 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067496171 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067935952 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058840838 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059426462 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07420074 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074651034 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063825278 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068592823 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068753409 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060711878 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080617385 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067886809 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060404011 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070194662 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061567968 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058730256 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058185134 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060429127 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07083876 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058394217 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061631895 seconds)
  done (took 41.003471365 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099311035 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059738551 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058524495 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058633343 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066783812 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059719451 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059208192 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059979356 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059797355 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061742311 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059023802 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061523831 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065192301 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071535292 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067168365 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062662969 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059038283 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060044028 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058958322 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059649354 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065212224 seconds)
  done (took 2.825587678 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064485635 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062772836 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062832787 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063165129 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062250363 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059038844 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062862891 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058758616 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063395276 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059374584 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063749401 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059116763 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059230696 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059483537 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059321792 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060599298 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063276566 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062285229 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058841518 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063108031 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06064582 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062827265 seconds)
  done (took 2.82553225 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062649416 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060313691 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067707444 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058352881 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058072403 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061857801 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058255676 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063434808 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063132067 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063130261 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068083913 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059840917 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.05847091 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064948765 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058518376 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059421947 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10067306 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059502842 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059842918 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058541309 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061364023 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067787332 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058213477 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058741794 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.062903892 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061809244 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058092077 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061539622 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059177124 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.062963438 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.0595301 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058245306 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067824589 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067404504 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063306148 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063110186 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060278811 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.05953161 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058404684 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058063748 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067301844 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060004733 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058674949 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060273515 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068039577 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058189799 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058240955 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068114302 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.05845396 seconds)
  done (took 4.526914903 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071428578 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110598656 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064261699 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092010837 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070973854 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064514976 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064081451 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093276074 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059737691 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060445845 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071804561 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072552662 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061280228 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.06268579 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065345393 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061377538 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.0617498 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060820115 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064142874 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061059172 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063994772 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065269245 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071385634 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071189296 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062014137 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060627318 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060928096 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062645688 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071451815 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064260422 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.0626944 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063122105 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07111472 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.064781458 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060949712 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060917997 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072394973 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061628929 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061333307 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059707492 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.060850728 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06307893 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.065433087 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.071958583 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061827006 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.065956647 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06144625 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059302251 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071428771 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061421382 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065129731 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072917649 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062488446 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061957494 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062767393 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071388203 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061661878 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.059954149 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061625917 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071440746 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059857359 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062176062 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074717958 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.060847068 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064660561 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072305437 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.065855729 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062632137 seconds)
  done (took 6.120129324 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070208563 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093009514 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074055811 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073918671 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069044539 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069016765 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069043276 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068824893 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068874381 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072069397 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068932445 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.102923288 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065621922 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070729658 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069091885 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069225009 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069204354 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069397868 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06928798 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069080155 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.068759905 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074090838 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069090675 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074093851 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071410761 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065480498 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.068910326 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069201344 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073582968 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069156446 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071097481 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.068755733 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069843862 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073983364 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071235612 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.06881872 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059784206 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06895746 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069129124 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069035998 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065347518 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074010375 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.068880077 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065342393 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069346764 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.068592159 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074111838 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071414771 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070929503 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072189656 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069153557 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074602184 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069091846 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069004653 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07412018 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076307696 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074020449 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074150222 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069155204 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074451194 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074158472 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076951603 seconds)
  done (took 5.932315724 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074854497 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065234224 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076953244 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058481878 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.05865958 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067762909 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.05894689 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058765204 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06519999 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065494891 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067082591 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067966585 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070084917 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067061134 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067611168 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07034924 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067970877 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067894212 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065240761 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067737086 seconds)
  done (took 2.834326354 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075714009 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.078582152 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064139394 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067630853 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064233304 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067812971 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063901177 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064548528 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064832088 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06523161 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068883176 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068677486 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064712486 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067953127 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068913233 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068061195 seconds)
  done (took 2.579919448 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064546705 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067442043 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.064937836 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060229788 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062010798 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059181001 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060272619 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058597352 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061430071 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072549564 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059673066 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062200105 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059861302 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058995619 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059272125 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061996392 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061291123 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.05950143 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059973911 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06361528 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.067886758 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060495981 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062244248 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.059491689 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061640849 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068099071 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.060782371 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061738226 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059678228 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062102957 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061684109 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066184794 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06154303 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060219783 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058817221 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059586828 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059933481 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062469614 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062126968 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060046868 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058396026 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065185229 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060282847 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060440045 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06143983 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062234785 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061323645 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065175733 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.059960832 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062117735 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060245822 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061727724 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060167153 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066933772 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062446239 seconds)
  done (took 4.898105835 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078476861 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064765584 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058549889 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05872695 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063549129 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.0643087 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064220514 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06424482 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064539872 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058436092 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064363963 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063331591 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064236379 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063897101 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064679348 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064082489 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058644148 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063892402 seconds)
  done (took 2.659571139 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067592148 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065557287 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.062769399 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061189041 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06044534 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065334387 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059734122 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060032374 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06018703 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060781155 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060644197 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060245731 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060424627 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060428713 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064863433 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060551768 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060166406 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058842271 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060658049 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058684394 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065416675 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059001159 seconds)
  done (took 2.856243106 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088382683 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082234837 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.12544307 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078104529 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086581446 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069517594 seconds)
  done (took 2.034246473 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093870374 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095398737 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063500656 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063655171 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067981895 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066346045 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066571702 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067030871 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070021861 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070259102 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066400833 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070008772 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069813331 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071785325 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068261693 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068521125 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066906706 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066888746 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063976133 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073864806 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066903268 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070101178 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066866519 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066538615 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066610622 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072275199 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069643046 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070475694 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066581934 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070167109 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068465521 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066583186 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070179728 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07068437 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063561285 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069915714 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066895048 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074141036 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068176633 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071531726 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063665068 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068242401 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070030729 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069900763 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070456252 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067006784 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070067415 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067020801 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067318409 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075699421 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068620857 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072080619 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068547843 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070618643 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070139695 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07533837 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070796555 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071912776 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068423271 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070656294 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071841202 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069002426 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072138819 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070798499 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068542153 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072103313 seconds)
  done (took 6.11280979 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104493781 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064298098 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067030593 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070456349 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072228276 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066879857 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067095076 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067166274 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06679216 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06440215 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101885091 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067274625 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072213693 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074716937 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067401338 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067013601 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067096154 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071790244 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064082652 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075289513 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066714188 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071696711 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072095132 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071783281 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070539271 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068640974 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066845614 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06660727 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066923198 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066643341 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069700457 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066526644 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071818912 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063732478 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071545333 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066505449 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066526047 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070002068 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066546701 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068503902 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072053141 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074340983 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066779269 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066738556 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070399913 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066789952 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067159057 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064697556 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066961622 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064401558 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070907695 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070728914 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070637976 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07200631 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067104343 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06707886 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06712011 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067019276 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06726047 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068724347 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072048124 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067030314 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075431184 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06697523 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067294188 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072419752 seconds)
  done (took 6.127944318 seconds)
done (took 127.690665591 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218325472 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188033149 seconds)
  done (took 1.890802505 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074475773 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.162905898 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072462328 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072162753 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.105882982 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105328586 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073313109 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070052779 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072731819 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070220141 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.13609194 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073909017 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069732159 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069584454 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070336333 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069903918 seconds)
  done (took 2.875954936 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108488492 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.18172983 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.100747567 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067874865 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.149469457 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074517382 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070081452 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074076601 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074666647 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.067927029 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104562167 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081143535 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07340282 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07402995 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069533807 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073448966 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07380817 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.073986642 seconds)
  done (took 3.106600482 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103935889 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089231743 seconds)
  done (took 1.710740988 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.157765258 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10267227 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142035574 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.340330517 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133363284 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.13535797 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.138978131 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.134393796 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.108765732 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131361931 seconds)
  done (took 3.034792146 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106464378 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104995328 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308652669 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101247322 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079799323 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074924471 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072486674 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077798911 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073237621 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.073951491 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.11904899 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072746504 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070288367 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121070403 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096107764 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104153978 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068819046 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075819028 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077082989 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068416877 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073292372 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077075238 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.173921464 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076063749 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096821473 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.072812654 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075020937 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071744491 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071977976 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07543666 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076365192 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.096278177 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075986932 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080027454 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074059642 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094183309 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069309185 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096325994 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071876014 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.069898632 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072644289 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076337658 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069825977 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.075361254 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072820967 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075178688 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077290367 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068977018 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07254078 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.071915189 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070279314 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.073919149 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073707501 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074822706 seconds)
  done (took 6.175944706 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108414373 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105558523 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067897927 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110303778 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102927169 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067953637 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101836811 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097451587 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105536587 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067442577 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066503519 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066688962 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073613679 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076645352 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.11391871 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10542211 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069110257 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067768728 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104630265 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104722348 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066430241 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099280275 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097073709 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103384416 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066019892 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067494758 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06625653 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067212386 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071742629 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072492245 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066322873 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073409568 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078107309 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073233908 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065877773 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066987525 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066464876 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073266821 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07421551 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074146715 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072699987 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066312596 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.065933502 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066677635 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067315921 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065652008 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072383853 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073152298 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072023017 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066390531 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066971973 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.065894945 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067201551 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07261481 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.071765772 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073791411 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07336907 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06639661 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066490755 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067751127 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07431982 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074388329 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073554436 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067482937 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074677104 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066327694 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075329727 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078086771 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066567754 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06690765 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066588456 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066737591 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066948316 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072030286 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.0722724 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066803785 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066398475 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066294581 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07415135 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072515608 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066355717 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07213556 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065946451 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066449406 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066927214 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067294147 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07168347 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073238197 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067159818 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066495616 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066262577 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066499433 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066182037 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071754931 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073010839 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073370999 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072502494 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066666707 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072111892 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072088115 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066495641 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071982196 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066171242 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066850956 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06661576 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072202124 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071622192 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074282054 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066288078 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065990934 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071374686 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073435888 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065547497 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070916012 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073075458 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.211916557 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067417622 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076216127 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067152336 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.0745942 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066892806 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075083677 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066906966 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072699089 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066685925 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066312207 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066527224 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072466603 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066920293 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066431517 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067288701 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.0667092 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073250271 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075841223 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066990685 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073015187 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072675183 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067079354 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072359039 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066589165 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073554675 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06692211 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066532308 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066071654 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075087415 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066521814 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066345778 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066958682 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074026532 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066797979 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074739593 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071618049 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06608701 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076265044 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074738314 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.071842481 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074926544 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067363943 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066529461 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066565716 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069223271 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071386988 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072704333 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067376178 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066730531 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071484858 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074521688 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066064569 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072367208 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071870029 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072535188 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06688279 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066990729 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075419483 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07434212 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.07243102 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072359924 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073009261 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066378719 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072193832 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072293792 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066765403 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078964543 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066815022 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076293205 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073038473 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071588109 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073249245 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07406922 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074489261 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074907434 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076539447 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066173352 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066628239 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072792517 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066575124 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066077658 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072266596 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066938562 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066931571 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077040376 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066923571 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074471483 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065991247 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073239424 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066472717 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067158331 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077885258 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066839501 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06685888 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072598413 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066767482 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072213154 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075032336 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072303842 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066336903 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066814467 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072737805 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07350317 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066597134 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066464005 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066668512 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071829127 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071797471 seconds)
  done (took 17.848388883 seconds)
done (took 38.174015564 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170141292 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112069045 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207383361 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196333848 seconds)
  done (took 2.304349979 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101586784 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063444523 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.078092215 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087579211 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063160173 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073488438 seconds)
  done (took 2.033045558 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203965537 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174853581 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240427851 seconds)
  done (took 2.174202992 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366627267 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.145481408 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212767035 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.496480666 seconds)
  done (took 2.882519461 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.109290255 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097539636 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075073282 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.10836133 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082298332 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060259485 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130291946 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067157552 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09688787 seconds)
  done (took 2.454095893 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135836207 seconds)
done (took 13.565399263 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.123892835 seconds)
    (2/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.098637838 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.234628907 seconds)
    (4/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072592202 seconds)
    (5/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.06942429 seconds)
    (6/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.513266116 seconds)
    (7/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.174444404 seconds)
    (8/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.184717172 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.249845968 seconds)
    (10/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.064012169 seconds)
    (11/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074537937 seconds)
    (12/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.174830437 seconds)
    (13/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074350802 seconds)
    (14/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.239325787 seconds)
    (15/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.174045687 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073749279 seconds)
    (17/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.091233173 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.200837604 seconds)
    (19/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.188119849 seconds)
    (20/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.094771794 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075928776 seconds)
    (22/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072786457 seconds)
    (23/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.076145138 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076231948 seconds)
    (25/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.185114069 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.155792449 seconds)
    (27/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073353267 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.085624771 seconds)
    (29/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.114238004 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072267367 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.089137576 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.177925535 seconds)
    (33/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.159755006 seconds)
    (34/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.183514419 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087426911 seconds)
    (36/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.074295233 seconds)
    (37/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.07268236 seconds)
    (38/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.231463477 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074206692 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073652443 seconds)
    (41/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.223832066 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.063066231 seconds)
    (43/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.210803931 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.185509757 seconds)
    (45/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079650113 seconds)
    (46/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073957352 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.088853231 seconds)
    (48/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169256087 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.083529777 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132936317 seconds)
    (51/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065245361 seconds)
    (52/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.119896605 seconds)
    (53/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.06550865 seconds)
    (54/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072032376 seconds)
    (55/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075729581 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.086427212 seconds)
    (57/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.205659325 seconds)
    (58/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075455508 seconds)
    (59/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.071254551 seconds)
    (60/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.065408452 seconds)
    (61/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.225621092 seconds)
    (62/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.202224702 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.086108248 seconds)
    (64/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.187637169 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.128609544 seconds)
    (66/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063141358 seconds)
    (67/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.230833285 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065407166 seconds)
    (69/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066233329 seconds)
    (70/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.070944813 seconds)
    (71/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.195618199 seconds)
    (72/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.074688696 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148331616 seconds)
    (74/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.194612534 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070644145 seconds)
    (76/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.065266579 seconds)
    (77/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.138698744 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.370991958 seconds)
    (79/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264238313 seconds)
    (80/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066035111 seconds)
    (81/341) benchmarking ("sort", Int8, false)...
    done (took 0.148935755 seconds)
    (82/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.163628579 seconds)
    (83/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069748571 seconds)
    (84/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.081468105 seconds)
    (85/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.217451886 seconds)
    (86/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.162283058 seconds)
    (87/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.137354679 seconds)
    (88/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070997351 seconds)
    (89/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.075100437 seconds)
    (90/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.195203667 seconds)
    (91/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.091896298 seconds)
    (92/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.070087028 seconds)
    (93/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071168254 seconds)
    (94/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.197028043 seconds)
    (95/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072186895 seconds)
    (96/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088495253 seconds)
    (97/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.196549196 seconds)
    (98/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070892945 seconds)
    (99/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092149452 seconds)
    (100/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072596501 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062249791 seconds)
    (102/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.074564482 seconds)
    (103/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.064897562 seconds)
    (104/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.080604138 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063516487 seconds)
    (106/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06413045 seconds)
    (107/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.143887165 seconds)
    (108/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.071878554 seconds)
    (109/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071239004 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071176384 seconds)
    (111/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.062938911 seconds)
    (112/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.072221357 seconds)
    (113/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.063237489 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063212762 seconds)
    (115/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064056205 seconds)
    (116/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.075081829 seconds)
    (117/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064122081 seconds)
    (118/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.139217538 seconds)
    (119/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.136775706 seconds)
    (120/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063961897 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088942814 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083338292 seconds)
    (123/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063670475 seconds)
    (124/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.134354998 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.073768817 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066755787 seconds)
    (127/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.152881492 seconds)
    (128/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.063999398 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.173583342 seconds)
    (130/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.080925148 seconds)
    (131/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066020694 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07224771 seconds)
    (133/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.063326552 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.088797438 seconds)
    (135/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.214288712 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.131435487 seconds)
    (137/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065024085 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071846917 seconds)
    (139/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.129192352 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071527143 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121318004 seconds)
    (142/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.070889889 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.08013966 seconds)
    (144/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.16724388 seconds)
    (145/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.192477551 seconds)
    (146/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075081358 seconds)
    (147/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064415293 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073274118 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139838447 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 0.144589113 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082585377 seconds)
    (152/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.164103264 seconds)
    (153/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.081651147 seconds)
    (154/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.06361557 seconds)
    (155/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.141528726 seconds)
    (156/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.063880682 seconds)
    (157/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063706766 seconds)
    (158/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.063966991 seconds)
    (159/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064408457 seconds)
    (160/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.063193232 seconds)
    (161/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.06518047 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06355318 seconds)
    (163/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.217901594 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070537925 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073046717 seconds)
    (166/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.072752202 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140595008 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 0.064447001 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.065304118 seconds)
    (170/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.159860619 seconds)
    (171/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064155247 seconds)
    (172/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064254085 seconds)
    (173/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.081885585 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153189958 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117900461 seconds)
    (176/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187422529 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.062809898 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.06383317 seconds)
    (179/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063905721 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.079863263 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062836663 seconds)
    (182/341) benchmarking ("sort", Float64, false)...
    done (took 0.133930306 seconds)
    (183/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.062640451 seconds)
    (184/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.075506472 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.12352395 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.071710823 seconds)
    (187/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.310105823 seconds)
    (188/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.143450224 seconds)
    (189/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073298054 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065326372 seconds)
    (191/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.142850081 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062917989 seconds)
    (193/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.064937627 seconds)
    (194/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065498633 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085304587 seconds)
    (196/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.063626919 seconds)
    (197/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071033037 seconds)
    (198/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065050713 seconds)
    (199/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071098004 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146351427 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072082056 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074488896 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065554764 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067128428 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.143669946 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.175892807 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063392378 seconds)
    (208/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064017106 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110501463 seconds)
    (210/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.161931176 seconds)
    (211/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.063844742 seconds)
    (212/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.062637479 seconds)
    (213/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.07927294 seconds)
    (214/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180471479 seconds)
    (215/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064962934 seconds)
    (216/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.193040076 seconds)
    (217/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.061886809 seconds)
    (218/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07162176 seconds)
    (219/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.064354573 seconds)
    (220/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063934641 seconds)
    (221/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071079702 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061873034 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.084092125 seconds)
    (224/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064729378 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071737575 seconds)
    (226/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.160915028 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071054398 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.167771869 seconds)
    (229/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067378588 seconds)
    (230/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064254626 seconds)
    (231/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063701318 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.086212114 seconds)
    (233/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.063727348 seconds)
    (234/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.063740316 seconds)
    (235/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.063813037 seconds)
    (236/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.136862355 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065457096 seconds)
    (238/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071508359 seconds)
    (239/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.064016258 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066938112 seconds)
    (241/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085646283 seconds)
    (242/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.082223589 seconds)
    (243/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075226044 seconds)
    (244/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.063529611 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073402237 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075114074 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120112812 seconds)
    (248/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.063350048 seconds)
    (249/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064412802 seconds)
    (250/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090094135 seconds)
    (251/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070703755 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070205116 seconds)
    (253/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.063890268 seconds)
    (254/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064070193 seconds)
    (255/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065312304 seconds)
    (256/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.063009919 seconds)
    (257/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064074258 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070481959 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066619019 seconds)
    (260/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071042786 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061967376 seconds)
    (262/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.067314373 seconds)
    (263/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.06390516 seconds)
    (264/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.149889706 seconds)
    (265/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.06365631 seconds)
    (266/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066376214 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.148030812 seconds)
    (268/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.065914243 seconds)
    (269/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.070175066 seconds)
    (270/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.081639883 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.062784993 seconds)
    (272/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.063874517 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.14393243 seconds)
    (274/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.068061885 seconds)
    (275/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06542797 seconds)
    (276/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.063773556 seconds)
    (277/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148367094 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061849898 seconds)
    (279/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.064840009 seconds)
    (280/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.063708865 seconds)
    (281/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.06378463 seconds)
    (282/341) benchmarking ("sort", Float32, false)...
    done (took 0.135156589 seconds)
    (283/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.070593117 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.149868063 seconds)
    (285/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.063682467 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.11322682 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.062943735 seconds)
    (288/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064247845 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095112894 seconds)
    (290/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.066703601 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.147213909 seconds)
    (292/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.063819553 seconds)
    (293/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.075393797 seconds)
    (294/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06386079 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130017339 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.078356414 seconds)
    (297/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.06238902 seconds)
    (298/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.065317145 seconds)
    (299/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.07935897 seconds)
    (300/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064446188 seconds)
    (301/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.063760558 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064541001 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.082484554 seconds)
    (304/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189287099 seconds)
    (305/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.063560998 seconds)
    (306/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064169395 seconds)
    (307/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.06448091 seconds)
    (308/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064650713 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063000556 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.088044861 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.082275958 seconds)
    (312/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.061568015 seconds)
    (313/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.067833869 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.062994596 seconds)
    (315/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07454316 seconds)
    (316/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.066703233 seconds)
    (317/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.074303681 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.074134757 seconds)
    (319/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.062771357 seconds)
    (320/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.063066808 seconds)
    (321/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.079874567 seconds)
    (322/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.235169684 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066044782 seconds)
    (324/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067489515 seconds)
    (325/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.063460579 seconds)
    (326/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.150928055 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.0832777 seconds)
    (328/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151366227 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064150788 seconds)
    (330/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066438907 seconds)
    (331/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.076791097 seconds)
    (332/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.067414548 seconds)
    (333/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.06446929 seconds)
    (334/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.067235817 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066707029 seconds)
    (336/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.063595103 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063420565 seconds)
    (338/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063540449 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149179915 seconds)
    (340/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066070045 seconds)
    (341/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063301218 seconds)
  done (took 36.194717345 seconds)
done (took 37.777516817 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090100299 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.076513643 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.074917327 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071695865 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075332217 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.074169383 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075675236 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073660623 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075332819 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074641965 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.07392028 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.062559595 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070756376 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078217239 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072304296 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078549082 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.075833287 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078668818 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064031801 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.077878304 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090481781 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.074965363 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.071908103 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077033024 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063410963 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072561756 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086712867 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084672895 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070732216 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07292014 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071018461 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.081763291 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07097913 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069655375 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.072732716 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069054757 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07289929 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070260183 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086270569 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069019429 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063789295 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075148025 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070300844 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071828153 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071916924 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075174051 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.068663031 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.076584991 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.062936211 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074267831 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086351962 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068089896 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070219968 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071346802 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.06839356 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.072652749 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070213086 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074461164 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068274482 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.074594768 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074355939 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071525457 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063279952 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.071786697 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070608405 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.070632493 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062090817 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067995287 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063317062 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063173644 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062372393 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.071780988 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.069658143 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.067806594 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062385324 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.062903187 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062069803 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075516612 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.068828173 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072471515 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063172227 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068355024 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.067860199 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063395432 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068236368 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074297511 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062134681 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063760185 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06217894 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.077552498 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069165409 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.062937777 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074770374 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067856084 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068180258 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.062764867 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062411764 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067832064 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.070746255 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.062801255 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.061985186 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068036042 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.067910535 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.071710144 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063473999 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067778819 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068070665 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062085055 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.071933805 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070214273 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.071825423 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076020979 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07210729 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075016916 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063490131 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062217173 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072798055 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063537644 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068152324 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070928317 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068427862 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071083608 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063322984 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.061798363 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067831131 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069588255 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063287746 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063313674 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063606267 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072491311 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.069895854 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061799262 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062809789 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071570742 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071870301 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06220748 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062301763 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071835195 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063358221 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068634819 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.0686573 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071616865 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062310519 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062645379 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061430217 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062060168 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062250376 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070356039 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067303431 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.062564239 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070680626 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.217921805 seconds)
done (took 12.442097968 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067575643 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105705938 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077502636 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080176914 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076687816 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064890797 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067873482 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082399143 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067175778 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087759209 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.088909678 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.0855941 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094197292 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062195389 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.063918191 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064491555 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.061906 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075699393 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080212118 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087433304 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099236589 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063270999 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079494107 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.082929181 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077474187 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08202069 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065311867 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064509177 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.066869117 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081969527 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089485491 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063363595 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.064832678 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080928751 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078496206 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071804558 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064861839 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.06991432 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.06770554 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063817323 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065968562 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081085727 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.069985696 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070458265 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.064998953 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.064915037 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064296773 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07056905 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081077595 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069513173 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075698046 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082502949 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.065672222 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06476238 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062544915 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071158082 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.063837982 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064683956 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064128983 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064052414 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064345971 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.066330859 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068602916 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070052421 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067116902 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069612666 seconds)
  done (took 6.435722575 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082321342 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089454851 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078504952 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.07894124 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063630311 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064707754 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064578771 seconds)
  done (took 2.202779871 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066786835 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072322843 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.075978678 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076084266 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085457112 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073749829 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064741751 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095983277 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063856608 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072562626 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079631327 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.078160352 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067431501 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076351007 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064486966 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076134778 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064861551 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071539356 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071910717 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077183735 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068099318 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.093937305 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.077714628 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.064997938 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.077247851 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071570027 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066598681 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065074399 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064875146 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.063989339 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064080873 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086131619 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070466131 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.076730407 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064817838 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063239389 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.068679293 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065045594 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068487508 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073392743 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068066752 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06415339 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064883362 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064125053 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065615754 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068449544 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064824832 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064026229 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064209347 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071199447 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063358503 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07013897 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.065994792 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069071417 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.068885075 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068189858 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070792585 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064466567 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071499192 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070314364 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06377126 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076383378 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075308578 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067577875 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075632082 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072330714 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07032654 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067622783 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063595047 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063476024 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064204785 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075255552 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067249671 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066290923 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065187392 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068953157 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067925519 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.078886157 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.078777277 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.07718152 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066242743 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064113095 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.067939197 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.078931223 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06852146 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063785992 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065095462 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063126753 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.068896179 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.063997842 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068481079 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064131481 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070671554 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066450832 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066015022 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07167343 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064289985 seconds)
  done (took 8.441893418 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068898208 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066214397 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.064992971 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.064959545 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065260636 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065314467 seconds)
  done (took 2.108150999 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090020985 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.06441436 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076312259 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064925724 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086601986 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070947917 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07083382 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06633379 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081189762 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075225444 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071349403 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073516898 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073517764 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.065841698 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070630488 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065408486 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070942324 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067760553 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074415598 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066605743 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080530715 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066158258 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066451714 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076241132 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067679174 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065286566 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.0655668 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074692012 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074230541 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066150928 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.065931789 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067619963 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.072977428 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066239631 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070888817 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.072657788 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064337232 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.06994162 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066920673 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067477393 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073124109 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066551155 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066646955 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070083485 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066516444 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.072667711 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069624692 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067990041 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070394801 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.069742421 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070669653 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.064910152 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067389431 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069635743 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.072620863 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066545178 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070411964 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070472116 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.065908029 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.072733972 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064818464 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067489134 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066155736 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067223066 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.068968879 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.06962087 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073051486 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070564354 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066599726 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.064204206 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.069938579 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064872873 seconds)
  done (took 6.704593392 seconds)
done (took 27.555499543 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.553084944 seconds)
  done (took 2.204261339 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.885048335 seconds)
  done (took 2.580339669 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.162690841 seconds)
  done (took 9.862830539 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.337374581 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.394840597 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.726419044 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.128848685 seconds)
  done (took 3.326196361 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.748312789 seconds)
  done (took 2.458272978 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.23169014 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.216904543 seconds)
  done (took 2.165188183 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335663496 seconds)
  done (took 2.035889276 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.140143301 seconds)
  done (took 2.83710914 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235502029 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159126307 seconds)
  done (took 2.10349843 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.532788078 seconds)
  done (took 2.229817233 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.280543715 seconds)
  done (took 5.983996181 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.231661756 seconds)
  done (took 1.97573749 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.228420532 seconds)
  done (took 1.935282085 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.031327418 seconds)
  done (took 3.731074434 seconds)
done (took 47.13498215 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085202287 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084704344 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084504158 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079483351 seconds)
  done (took 2.005209614 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074784651 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.06870063 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071574098 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071614705 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069997266 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070373143 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070754723 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067805279 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.06977213 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068353688 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067083033 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068201277 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070658373 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068183934 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070750196 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071969298 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067991532 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068049609 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070754918 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068194633 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070643105 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068127134 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066295805 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067919148 seconds)
  done (took 3.367015144 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078970259 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070818857 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073248901 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069178969 seconds)
  done (took 2.002265737 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077128837 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074928312 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083109601 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087925309 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073895264 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074975677 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083568276 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081848792 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.064039112 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084703037 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06629301 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06527907 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064920828 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083982774 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081475211 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060541258 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061692376 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074953322 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074320334 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.07739486 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066611169 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063736668 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074606262 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075152603 seconds)
  done (took 3.485260676 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083313669 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064577772 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079555468 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088950136 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090248424 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063383191 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076833883 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090964985 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125981546 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06378372 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071218375 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063946316 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102737007 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063550624 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.07854146 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.107952691 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109795667 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067783273 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096970593 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063901815 seconds)
  done (took 3.37319291 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076758245 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068851345 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068888922 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063977539 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075499655 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071346726 seconds)
  done (took 2.148149195 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068826509 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067183111 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068439648 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070478046 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066186612 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066276075 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065518845 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064323426 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064166407 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065301382 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065062379 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065857167 seconds)
  done (took 2.51081837 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.152299439 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067507466 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070130319 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064378927 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.066384496 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064969283 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079682639 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066892807 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082762218 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064864781 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065493977 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067853098 seconds)
  done (took 2.629680628 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106168575 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112048615 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146118509 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115988415 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114042493 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094569076 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122628631 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093489186 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157662692 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134858741 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115072526 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094141915 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085769282 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067698914 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097213502 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11570389 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134740861 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071162393 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110764498 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161831558 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129393916 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132247238 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14560078 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114997623 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088546088 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146075543 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095313613 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10025981 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122351343 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124218405 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117976954 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095511785 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069866957 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068957089 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146717542 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100700143 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118057769 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090869066 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102579334 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086092188 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104843185 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067315919 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083058909 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111118915 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082674568 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128004406 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085935895 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112877015 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079142095 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135174974 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120806517 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095827239 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08259671 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100590645 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132782866 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107105389 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127851935 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102348718 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079090064 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.113848349 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100180139 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095802117 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102053916 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077151884 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.169848744 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085338449 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.106843427 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106116388 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086863533 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.088127407 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100864707 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126523624 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114348589 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.114521122 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125965444 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089346243 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11233841 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.091895921 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.120715011 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096372456 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.069019207 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10997923 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120411375 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091374929 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094109329 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116757491 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086987086 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073436392 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.091310385 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.110566795 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075361511 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.102358636 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073300794 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.100637965 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121074969 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089358079 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10263026 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107967036 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073572631 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140336141 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101621309 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068889472 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.109008562 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10447403 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143047436 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087420688 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07220267 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093392395 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.374278771 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.154398636 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108285435 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081895836 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111838995 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140952674 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096142015 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171934074 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096865819 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141517926 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112347518 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088225077 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07505085 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090800699 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112570051 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10771144 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112026761 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089633177 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084016473 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087153529 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112189702 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092173281 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080624116 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113215751 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101567864 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07423629 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087544474 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078193592 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140769267 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077067829 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135821891 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124135915 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078132562 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104779592 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096406809 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106459077 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095997373 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115002922 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138189248 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114490035 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088023371 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091826579 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107116179 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142617152 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125275869 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090890816 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075005453 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097975325 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110334017 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095765573 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1234433 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097851088 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106708638 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100966165 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139196281 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142824013 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099151733 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099267085 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105598275 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.286882786 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07596701 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153069686 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101361325 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116017611 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083312767 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138888771 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111832838 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087566979 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085740722 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098820531 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.102113931 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104328945 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141376055 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094595737 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07091375 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091379835 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142385306 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075066293 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108099718 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088950582 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091644688 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117147819 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.091390258 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080049699 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066601664 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125837304 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15652695 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068664446 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112615602 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110518233 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100871638 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.119381356 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067942611 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117407895 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137498543 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116400031 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13941253 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145422586 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114686886 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117115331 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.11222021 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103659062 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07827978 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.124334368 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.133279736 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09439054 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090898763 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133055898 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116869027 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134538256 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115149817 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113422825 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102905058 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.272646783 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101083707 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100471493 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141803558 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118706362 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122469812 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083837109 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103828994 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115444286 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133148128 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080296302 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139771321 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081876771 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116238204 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075823066 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122056884 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.07793145 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109690893 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077873909 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098297556 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068027435 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072416531 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139425353 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110370621 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10393491 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098036577 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135395329 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134060962 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079531455 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106466869 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113357598 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099557614 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113958444 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107613271 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087484321 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093718417 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108009974 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084279962 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.080384471 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113153717 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092729188 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125273378 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082723891 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073806911 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138743356 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103076528 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093555641 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076208815 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105799483 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120246665 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090949195 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086016759 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112554316 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102624115 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13974124 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089147053 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096240419 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122759305 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078924515 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090702124 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067867359 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083655284 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074338234 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.288721363 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074829985 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114613984 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067708582 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127939719 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085510358 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091525336 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100397372 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109126105 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12594935 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093155828 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138071695 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087655337 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116367115 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105983152 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093147711 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087275917 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102137428 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099190313 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.120639874 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094922766 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121388925 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142236208 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103082292 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140211256 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089953017 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120095891 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10537394 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122609657 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110649621 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145717079 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1365397 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110779425 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111164833 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073807751 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093953377 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103866421 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109881867 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172828878 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123617303 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071209308 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104046282 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092840955 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106298167 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103240905 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081134168 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144624663 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100119267 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086628356 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111153791 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089576862 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102665264 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074716132 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094020651 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.097742335 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.252163694 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097023668 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113633941 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12539632 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111568777 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140904997 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097812651 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091674378 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116773811 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108874836 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109556801 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084880016 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085252733 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135660083 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1167975 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.127427821 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098887214 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108088739 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109694083 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098509326 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123091194 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106547575 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.125252618 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078750844 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074821953 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066838722 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070464796 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12166902 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10695005 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109813588 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097597387 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070765858 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102423706 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104384999 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070885566 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087195602 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092679765 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097739447 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089753831 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104873694 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112511245 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089521205 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102664536 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097644702 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144468329 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098513907 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087235132 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141856141 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148198838 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086241055 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090956568 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07008644 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077401636 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11166881 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148037602 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150086233 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076035682 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085514794 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.083840295 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084439201 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.069404808 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.246627312 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087787851 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103060348 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096944255 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110543377 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102648262 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074066724 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101544151 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097774975 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090847625 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102328862 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116356198 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123010426 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.138717465 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108534469 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10536698 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074898061 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078760404 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074484026 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078291227 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10047233 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077721918 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07510047 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141657543 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090241791 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10345088 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107040528 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087567782 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074187101 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132457043 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068060562 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133395074 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07023743 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080980243 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.08115489 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077971693 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092365644 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137332127 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108288178 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111529021 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104909984 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102908096 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139117469 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154631889 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07851354 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141529279 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074384383 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07412764 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074758127 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11194067 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088007375 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113023509 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138176856 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089238567 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101194834 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075463294 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141210233 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097150577 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102631521 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085332429 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077446044 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.306445592 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07863569 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078689201 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088712969 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109883232 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071268718 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10265458 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084025451 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07884973 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140209934 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628836064 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088957052 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.074308207 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094046546 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139887276 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126084466 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093287986 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107232361 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117679854 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098423679 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094037688 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106733431 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182617582 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073092348 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093457738 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.102523806 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096797518 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100670097 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.097130385 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084220262 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09068995 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085616814 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07837559 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106462459 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088295446 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094994013 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105726971 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081620739 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085270842 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129199874 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.102576349 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080360965 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086958366 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104101436 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087724645 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099476739 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067670466 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112913039 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089712739 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115222757 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092467867 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105572961 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124971258 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088444619 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135665928 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104570608 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120377008 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085963432 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076626282 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12333679 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086147278 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076250108 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.309292336 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.093092195 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091611782 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102136288 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095483937 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111536238 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115979341 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110166585 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096115489 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077743541 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098407306 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.1008791 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08379221 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076973163 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073310107 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075015482 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105929445 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084141429 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082772342 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114029197 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087955832 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102417687 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099272601 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121366276 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082398514 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10015136 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108576409 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091128811 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10820807 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099126192 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127289572 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172582045 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123693952 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127411305 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132117481 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07568258 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074158831 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067189524 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113544261 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07791197 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087696074 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080012281 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132455098 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080588309 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109602376 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229422837 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07899963 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091843823 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094862924 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068072879 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081741065 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105854604 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085680907 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078772377 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116992204 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082606499 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125927771 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109526023 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097822399 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093078684 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079767785 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112694577 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103252639 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.127305116 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093219328 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073140062 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.2752281 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101603676 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136277548 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071641119 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079196308 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127641373 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101878119 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130074144 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07865448 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147344742 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140728285 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098569157 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132216123 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069912962 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08243877 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088040735 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124005777 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083505647 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109787579 seconds)
  done (took 66.700998893 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.171089766 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142381209 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080046944 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102024242 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185524574 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195777547 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.125181908 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.104511064 seconds)
  done (took 3.015004339 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069178485 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.08085449 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079443265 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.205786879 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094636904 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065926338 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071175754 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080452336 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065776835 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065734422 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100352833 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066104112 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066042429 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.367412188 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064972622 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070840959 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06591936 seconds)
  done (took 3.573818877 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.3356823 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.989276212 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.248632759 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.266691005 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.145025485 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.555530813 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075769354 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082231191 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.696097172 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368011274 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.138835302 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087406775 seconds)
  done (took 19.884875957 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07835805 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077879887 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077302924 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073781376 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073715276 seconds)
  done (took 2.270895456 seconds)
done (took 118.720243754 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085128657 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.1717443 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066607956 seconds)
  done (took 2.167247407 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083075443 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079408202 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079219357 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.077022583 seconds)
  done (took 2.220000034 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075779689 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075086747 seconds)
  done (took 2.04525428 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219355768 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.175818362 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089329933 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082987945 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078221286 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078877007 seconds)
  done (took 2.148015172 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071882662 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069715237 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070298214 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07044844 seconds)
  done (took 2.175049412 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068489502 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065270388 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067356178 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070361056 seconds)
  done (took 2.165142166 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.0859546 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084224835 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114295179 seconds)
  done (took 2.177715896 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08331353 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081555493 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076302224 seconds)
  done (took 2.142613385 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110468025 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094920421 seconds)
  done (took 2.100718847 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080157646 seconds)
  done (took 1.981111314 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090800709 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096103124 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136241624 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104982604 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137451052 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.124066177 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075794939 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076581596 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072095381 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071298973 seconds)
  done (took 2.882229638 seconds)
done (took 26.667973258 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079735871 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.367716413 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357636832 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085147867 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.668977565 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354814641 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.005841002 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089244924 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098982871 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066583979 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083611728 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.647233416 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.999828504 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.324589701 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.986007685 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.323622925 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.650975615 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067226696 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066154025 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066866783 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.991057797 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066069807 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066641922 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066950363 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.64762525 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.373165053 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067840028 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328556189 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066515667 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070968531 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355606335 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067621116 seconds)
  done (took 16.430304685 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070928204 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120967887 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07058006 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082786786 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068810842 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068002206 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069786187 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067370028 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11034682 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06683682 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083885038 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06618043 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07034797 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067959957 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086469577 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066612156 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068645657 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070667847 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066959778 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067664393 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085193085 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066673646 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067404547 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067563371 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067131838 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079952751 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067810034 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066634032 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067022094 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071428031 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071584568 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068671392 seconds)
  done (took 4.278590783 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12290537 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12442377 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071284312 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107802271 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116694791 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068230316 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149457845 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089772255 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114545485 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067210789 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084415597 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066620322 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102158303 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068078548 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087086599 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067519636 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069258672 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067690524 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067350842 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067560064 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085934536 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066676016 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067285636 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067829688 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067610717 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082060915 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067766643 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067363634 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067143634 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070922779 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072157471 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068467213 seconds)
  done (took 4.553868559 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070282532 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070947355 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076656385 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079146609 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065073853 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067431394 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.06843882 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065092758 seconds)
  done (took 2.487901407 seconds)
done (took 29.669014945 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080268725 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.0665532 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068883605 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085854737 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072731779 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068479923 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063104467 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073203268 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07036309 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069802439 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07170417 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06572935 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069086721 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063462649 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070621298 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064918238 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070830403 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068714704 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069175975 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07031441 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066953851 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070273198 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073139014 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068830975 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.069021983 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.069010555 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073586992 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070603416 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064768905 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067403379 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066750676 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079410293 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07084833 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070970815 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064768592 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064494685 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068986981 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066830683 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070988589 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073665224 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066774622 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073386847 seconds)
  done (took 4.817466028 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089954432 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093062673 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.085251314 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080357826 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.106269751 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080233286 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.089378324 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077553079 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076456476 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088812027 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072330607 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077436819 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079383362 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074328238 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076423206 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072967142 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078111825 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072128461 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077166384 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077283072 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089591355 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070116815 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.077696839 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078248123 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072336201 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077994456 seconds)
  done (took 4.018270534 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073286214 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086713493 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091144715 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139870618 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108038453 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081370521 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080389367 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092589109 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.09963946 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066694889 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070616099 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.092636373 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09520431 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073849428 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105520142 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085034211 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079525098 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068625914 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073746582 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.101713019 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089758404 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085469512 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099683358 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086939111 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065645869 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076042965 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074257533 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082645409 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07417386 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079119732 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070730868 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070185839 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067215395 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079027145 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073637792 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064601532 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088646964 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079783321 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081302266 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104894346 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077203956 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068422337 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097326716 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132628143 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066012536 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068793664 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070417606 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079471403 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067594456 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096610805 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084914003 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066265945 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085539526 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067947644 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068016382 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083075378 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067859392 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.110837836 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078582788 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072493595 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087153482 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071518725 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08759368 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065941596 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077707827 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067677349 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067813731 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065041746 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102413773 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073723357 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.118795634 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06725674 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064215602 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079021104 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077420822 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072954819 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066092726 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085504239 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078432163 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069998243 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077846936 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068971006 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069665737 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101981824 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06487262 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064586487 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064419634 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068370312 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069530519 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066676574 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079411328 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065517666 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069383358 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081614176 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066045494 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066989858 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068303446 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067415805 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065510735 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076777762 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070089619 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067866149 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078787165 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067280073 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069939009 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080888806 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075993281 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065495323 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067229901 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068343857 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.068276391 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070533896 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069424638 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068111349 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072938043 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073668934 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.072414988 seconds)
  done (took 11.076683075 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164294911 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151539719 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067198201 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146899808 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074944222 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071354168 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.148800045 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.086578599 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067277438 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068087045 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066744152 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094677881 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090615826 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.101699406 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071095325 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067447478 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092801436 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.100510892 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151281445 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145559584 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090411186 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074983704 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069307214 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068625618 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068204191 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075381257 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083131877 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075253493 seconds)
  done (took 4.595363131 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075481278 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082236483 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070888047 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090886787 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084997715 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067466994 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.06872616 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068220236 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084230319 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073413805 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067382545 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071589306 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.0711242 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067903933 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067984671 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073611002 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073842818 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.0660518 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070678759 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071298235 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077779926 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093003021 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071706682 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067306737 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069551334 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067020194 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074023798 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076882872 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066474935 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.097502942 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063787554 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071121979 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081312487 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067850717 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066376057 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067505149 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066439054 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067182498 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067273512 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064893618 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064746717 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072002287 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065490185 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072524544 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080832766 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074709491 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067804923 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072322624 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069327544 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06340889 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070040643 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070041726 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069452925 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075425305 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070295447 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069478311 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067971754 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096567336 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072582441 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065926033 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.06610757 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064959498 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068307337 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074769529 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083390335 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068601197 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064566662 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067094781 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07167337 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080941899 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066207568 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071874649 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063783443 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066793616 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069020463 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.06971135 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068170936 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065067703 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066496261 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066738097 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067071535 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066493912 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066813286 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069461174 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064274809 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06496929 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067207654 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067770731 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072706536 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065785094 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069370049 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068089637 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065492257 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069473147 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072229599 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069874491 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086920425 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074896787 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067484002 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064693554 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081800516 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068426032 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066035977 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071997743 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071366093 seconds)
  done (took 9.426173395 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092613063 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068264521 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086803545 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093133058 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077290486 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07196112 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081182722 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067591218 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08338095 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066262829 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076265975 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064741446 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080604821 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076082574 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068370467 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077349414 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069242967 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087284358 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081751265 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.0657104 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075919944 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079883946 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079924053 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085343068 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085204204 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08591699 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079429627 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069633847 seconds)
  done (took 4.151233719 seconds)
done (took 40.00132691 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.994956539 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.152443865 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.983246198 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.238472988 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.030210895 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.203433359 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.22519351 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.97807749 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.051549716 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.030879421 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.294959207 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.410116464 seconds)
done (took 68.579829133 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.045517355 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.126220719 seconds)
    (2/2) benchmarking "String"...
    done (took 2.193446737 seconds)
  done (took 6.234851502 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.586488591 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.985219418 seconds)
    (3/3) benchmarking "different"...
    done (took 2.032302686 seconds)
  done (took 8.516023792 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.086088052 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.616891551 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.239643216 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.983447326 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.989547873 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.375966166 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.799657715 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.460329549 seconds)
  done (took 33.382310439 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.328521225 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.248620095 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.737495766 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.770857871 seconds)
  done (took 17.053290368 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.590569722 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.248281757 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.24649401 seconds)
    (4/4) benchmarking "different"...
    done (took 2.240738853 seconds)
  done (took 11.303439408 seconds)
done (took 88.638801624 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.982815063 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.012390432 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.990900535 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.137302024 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.006388812 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.016107096 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.995453008 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.984950628 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.98289741 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.987753052 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.43465313 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.983303491 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.992722217 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.019268994 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.982321731 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.029428911 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.532653679 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.997051284 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.998026232 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.657115917 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.511914048 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.998227398 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.984946402 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.046981374 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.106038395 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.998729477 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.035969017 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.98675764 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.599561391 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.987507917 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.012712095 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.983360733 seconds)
  done (took 210.890115702 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.987924589 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.011274133 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.082510977 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.013786455 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.656488189 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.189120365 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.140491207 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.699690655 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.987094646 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.004318865 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.204035915 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.989118447 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.23346227 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.9915361 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.98062951 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.990153556 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.227080972 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.257921741 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.982185185 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.179580902 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.999574218 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.096558556 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.051082434 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.199457457 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.006059039 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.078912178 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.986071257 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.025161703 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.197206355 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.202716743 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.021372215 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.032309739 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.115658845 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.856343006 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.011112924 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.003502451 seconds)
  done (took 178.609474011 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.400339613 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.007473369 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.051503477 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.260287554 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.773509598 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.753451706 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.985685996 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.989574614 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.98766182 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.995746862 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.987583467 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.057235123 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.506819502 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.001131182 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.985902159 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.989481861 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.41362254 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.987501454 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.988353047 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.989382014 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.052626762 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.359136337 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.124698207 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.989609134 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.996437896 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.12739514 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.997094514 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.988890788 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.126355466 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.989440712 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.070327566 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.124343672 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.994218894 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.071318626 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.995470806 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.499829065 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.988107893 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.990085475 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.992575312 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.051975735 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.98859078 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.100639396 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.079994266 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.988176255 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.001418794 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.065480925 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.678978245 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.991702699 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.989826869 seconds)
    (49/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.991229935 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.991256153 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.990408582 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.991725642 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.265549434 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.987808496 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.01546687 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.647627556 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.989245133 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.993471382 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.988939355 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.990823599 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.992362784 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.999021167 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.023670089 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.811429076 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.273900027 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.371928309 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.803539857 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.991661801 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.947060145 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.044735508 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.989426911 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.070715132 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.992627614 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.991266067 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.991525004 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.990572024 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.132920077 seconds)
    (78/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.991363909 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.108770673 seconds)
    (80/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.991543944 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.992321927 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.129596594 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.994704097 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.992902589 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.040954155 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.595312879 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.991444641 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.007087303 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.046573318 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.992700607 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.995580804 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.000271766 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.143248594 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.993017358 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.996132454 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.991518025 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.106758315 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.995840803 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.578944086 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.218631028 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.068277743 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.244430736 seconds)
    (103/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.996819967 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.995814733 seconds)
    (105/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.26319846 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.995144367 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.009468738 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.997140071 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.994107888 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.000374824 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.995290131 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.994694599 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.993003354 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.995169181 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.994332969 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.997924218 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.007184165 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.993454718 seconds)
  done (took 434.760408204 seconds)
done (took 828.629245013 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.708191241 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.772784357 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.618517261 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.651715665 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.618842742 seconds)
  done (took 15.293553268 seconds)
done (took 17.217892144 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.016721443 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.011122826 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.001285567 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.018255174 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.016403744 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.014709144 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.045368037 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.044111915 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.038060547 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.01374439 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.022647469 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.022961383 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.019497671 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.040648349 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.029601684 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.022374212 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.024174537 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.008223859 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.027534088 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.018348389 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.025242635 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.016079598 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.019208731 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.026030702 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.034234244 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.021134641 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.015657844 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.024605542 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.022342378 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.025776909 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.057972277 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.028954663 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.053967683 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.030033333 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.026014951 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.033553506 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.018092665 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.049350922 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.022314725 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.057069188 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.026295944 seconds)
  done (took 85.014046714 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.003839314 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.136856752 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.215935888 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.034825527 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.006106263 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.217077604 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.059495648 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.13440359 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.132963559 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.220058023 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.226113841 seconds)
  done (took 25.322594894 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.004287102 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.140211212 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.218189025 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.037803763 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.028990932 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.221662747 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.065048091 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.136507995 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.140582592 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.222183115 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.230654932 seconds)
  done (took 25.386060463 seconds)
done (took 137.649917893 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.392399972 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.026842409 seconds)
  done (took 6.34950753 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.001542433 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.019306661 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.157439189 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.003453746 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.002077011 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.001363906 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.000527402 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.003519415 seconds)
  done (took 18.119699037 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.006335529 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.004888667 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.005474977 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.005129038 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.004079966 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.006649886 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.00602285 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.005374264 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.005908997 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.005694183 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.005243553 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.005336627 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.006364855 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.005682678 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.003491066 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.006495524 seconds)
  done (took 34.020663637 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.004590379 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.005093142 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.005638074 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.004753567 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.004557029 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.005087886 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.007074497 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.005568807 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.004644822 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.004934136 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.005614746 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.005054688 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.002999546 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.003652347 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.007031935 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.006861594 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.006645653 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.006151214 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.007275454 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.007272149 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.004803411 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.006516309 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.012456012 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.007412709 seconds)
  done (took 50.076328249 seconds)
done (took 110.506439778 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.197743266 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.561511657 seconds)
  done (took 8.690382512 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.011868171 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.007892762 seconds)
  done (took 6.012025399 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.007782181 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.007193491 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.007563432 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.007893059 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.008235418 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.005947205 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.006774807 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.008708174 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.006723137 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.007064278 seconds)
  done (took 22.007144072 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.006409347 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.006912741 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.009267495 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.007823896 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.008542633 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.008159536 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.008439145 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.008855815 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.008861363 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.009250178 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.006508365 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.00836321 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.00874712 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.006431919 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.006712418 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.008317679 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.008710931 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.007674894 seconds)
  done (took 38.077837216 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.00946152 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.007522053 seconds)
  done (took 5.949541699 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.008893966 seconds)
    (2/7) benchmarking "second"...
    done (took 2.009427053 seconds)
    (3/7) benchmarking "month"...
    done (took 2.009019887 seconds)
    (4/7) benchmarking "year"...
    done (took 2.008328524 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.008389706 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.007340771 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.010228373 seconds)
  done (took 15.995897784 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.009495436 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.165799571 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.218136045 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.614003671 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.011119537 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.012464797 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.881100775 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.012452834 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.012426017 seconds)
  done (took 21.87237861 seconds)
done (took 120.539639036 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.8426669 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.001779368 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.285458949 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.1484818 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.005314003 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.295828765 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.044481966 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.53862841 seconds)
done (took 44.100100729 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.121253796 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.99675655 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.031101687 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.025235211 seconds)
  done (took 22.987476388 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.000202664 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.297551403 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.020284531 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.968676634 seconds)
  done (took 23.230070045 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.375917046 seconds)
    (2/2) benchmarking "read"...
    done (took 2.345460493 seconds)
  done (took 6.651516206 seconds)
done (took 61.923649116 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.994890238 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.997870504 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.99559969 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.994437152 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.998910995 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.996638979 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.993809806 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.996903506 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.99795188 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.00145693 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.997405255 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.997020812 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.999574828 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.997597094 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.997420043 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.997766244 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002165201 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.998821541 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.001481012 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.00105787 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.993164903 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.996984613 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.997555908 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.000984228 seconds)
  done (took 49.877212276 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.996274339 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.995876154 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.996138456 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.994890485 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.998554384 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.994451767 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.99555066 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.991873101 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.99648758 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.996561568 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.992571422 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.994889543 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.993425208 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.998083611 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996811917 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.994935254 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.999149766 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996642826 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.999344994 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.000164885 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.995830863 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001009485 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.99589927 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.99366933 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.002130329 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.992566517 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.000740306 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.001241171 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.997755148 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.003663526 seconds)
  done (took 61.834926927 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.997132517 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.000435881 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.004284401 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.003510692 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.9985724 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.997837636 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.996084431 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.997818117 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.999915452 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.994181359 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.994080725 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.99283009 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.992074086 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.001297988 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.989695643 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.987375807 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.991984958 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.990020817 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.991531926 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.990246039 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.989303246 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.990850885 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.99157573 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.994200196 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.989764368 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.991460499 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.992752436 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.991635975 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.992170403 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.991587295 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.992017323 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.991306492 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.992706017 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.991585209 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.993180235 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.995098166 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.99237392 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.993022986 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.991466619 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.990591246 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.990318258 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.991173038 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.991586376 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.992553834 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.992279541 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.991201803 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.992282334 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.991441598 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.992224608 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.992945819 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.990434564 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.99194561 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.992837199 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.991427077 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.9954852 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.993086022 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.993799319 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.99133079 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.994416407 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.997234715 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.993945896 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.99392107 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.995851633 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.995455918 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.998077599 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.993230023 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.993517882 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.99624634 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.996513282 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.004513658 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.996233637 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.998104231 seconds)
  done (took 145.485337014 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.997921915 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.001694935 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.999065567 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.997381688 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.998452226 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.99588046 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.001355396 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994457319 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996719342 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.992759307 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.997611062 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.000933763 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997781615 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.996814624 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.997331206 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.996027723 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.999384547 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.996718717 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.996163491 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.996500289 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.995610505 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.002619425 seconds)
  done (took 45.869737182 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.995782542 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.994625654 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.997550827 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.992909559 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.992674516 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.990432377 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.98885362 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.992692234 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994256171 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.993242278 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987945834 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.9923771 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.991707175 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.99028551 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987631097 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.988562151 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.989530027 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.98520126 seconds)
  done (took 37.763091082 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.986113223 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.985208686 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.984377443 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.984652956 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.993036909 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.988372829 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.986504828 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.986428928 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.986780524 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.990477716 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.986846415 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987163846 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.985673494 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986621124 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.992810625 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.982782482 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.983124463 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982802664 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983192675 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.985677406 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.986917636 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.984335013 seconds)
  done (took 45.619319986 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.983745186 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.985641223 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.983267749 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.983671866 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.983848087 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.983979105 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.993915497 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.983507374 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.98267456 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.98337249 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.983511268 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.989509045 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.982401115 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.982803133 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.984809246 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.983187578 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.986044467 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.984640843 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.985183382 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.984599039 seconds)
  done (took 41.603858316 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.986224304 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.983490034 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.982446685 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.986773115 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.982458242 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.98188057 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.981986623 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.984072972 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.985657662 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.97955868 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.988069485 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.984181127 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.985177254 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.986486414 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.98703023 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.99072126 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.982609627 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.984884104 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.983584565 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.98244953 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.982929406 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.982426371 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.982778647 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.982840059 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.981029645 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.981822763 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.982777064 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.985200137 seconds)
  done (took 57.461527192 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.983644629 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.982227147 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.987377037 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.982304854 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.980389817 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.98028395 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.980532698 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.98692632 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.983014303 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.981528915 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.98293275 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.98009555 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.98073489 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.980170844 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.980048833 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.979811566 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981150127 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.981839348 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.979844916 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982298109 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.980537314 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981782716 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.987759694 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.982824703 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.983101028 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.984851561 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986885208 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.987660138 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.982358298 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.984243249 seconds)
  done (took 61.388197238 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.003250391 seconds)
    (2/2) benchmarking "in"...
    done (took 2.011277449 seconds)
  done (took 5.926847639 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.985452855 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.984774141 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.980754092 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.990305706 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.981783387 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.984659386 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.986357073 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.983277278 seconds)
  done (took 17.784923352 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.986760025 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.986575484 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.980734234 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.983777332 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.989634758 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.989287158 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.985003857 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.981115201 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.987695218 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.991712648 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.992134689 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.988703641 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.993158425 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.991756308 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.994706576 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.984326661 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.986704918 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.983407004 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.986472196 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.994101255 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.990794284 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.985611701 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.989438417 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.987053577 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.993526091 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.989692599 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.995639213 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.98767289 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.990737622 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.991904198 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.995562234 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.990317239 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.986301642 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.989112082 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.985155035 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.990465386 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.994600039 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.988679402 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.98712433 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.991690577 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.990111066 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.990236906 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.988172521 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.994924565 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.991853492 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.989523633 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.98857673 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.9901252 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.987212811 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.996697131 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.996618461 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.988984516 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.989787166 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.985955427 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.995288515 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.989048382 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.988248469 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.985545812 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.994632073 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.99869251 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.984601927 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.005654285 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.989619734 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.986770471 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.991776985 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.991737285 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.007655556 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.988591015 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.988453521 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.986601214 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.992296411 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.986324153 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.984934309 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.984275604 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.998314738 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.991383135 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.975360888 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.978525994 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.979207258 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.976325764 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.979412801 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.974708266 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.975050735 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.976095499 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.98864851 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.009424491 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.977425824 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.983136296 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.987047735 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.981184165 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.986541183 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.976857588 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.980439693 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.982264379 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.981728232 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.986313403 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.977660941 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.983080784 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.98155519 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.986557998 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.983864602 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.979396107 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.985942441 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.98555809 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.980165887 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.984828471 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.982211682 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.98158246 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.985000823 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.983238793 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.978551445 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.978928713 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.978259834 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.978235498 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.978881433 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.985821481 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.989868658 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.984053276 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.984758092 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.984735023 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.986366398 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.978832484 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.988178394 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.000312174 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.97706972 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.98666486 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.982666953 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.993624442 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.983370317 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.984704487 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.98184968 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.980121869 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.981400655 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.982896563 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.981543938 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.981036766 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.982124228 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.982377765 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.983099349 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.98062821 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.992122615 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.98477442 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.981166883 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.97927937 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.990071204 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.987198998 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.980061106 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.986711211 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.981885054 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.982085245 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.985692466 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.984404449 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.988075155 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.982234025 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.982217229 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.984367333 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.978938408 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.980467345 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.979446363 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.977568766 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.982866022 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.98072189 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.982340246 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.977646637 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.977677835 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.986047074 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.977553165 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.978646887 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.978078045 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.981234911 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.989204127 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.975832837 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.978419154 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.97657184 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.976648912 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.982241123 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.977647388 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.975610291 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.978737436 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.984672257 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.980082976 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.989728742 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.978386346 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.98541793 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.981671706 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.981525241 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.980376891 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.978171774 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.977061387 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.978939519 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.979287404 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.990089312 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.998023432 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.986778775 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.979996546 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.978831382 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.993270394 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.982847322 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.983781998 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.978699029 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.986596992 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.983470453 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.974449168 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.977130574 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.977763417 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.979786594 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.980730827 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.977079041 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.980875799 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.980154902 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.97930844 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.982165567 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.97974298 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.980708992 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.977574669 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.977951 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.985557056 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.981730482 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.987990043 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.981821218 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.977291247 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.985283171 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.97983096 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.979269031 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.980886898 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.980579947 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.985012981 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.979603357 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.981384615 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.988834078 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.982468135 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.986439318 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.980569856 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.981931937 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.982593014 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.979363465 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.987571836 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.988358143 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.983930925 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.982241334 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.985665521 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.991638722 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.982921414 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.981360181 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.983053185 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.981154321 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.991584585 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.988691143 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.988804181 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.991235638 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.987647384 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.997179221 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.983213877 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.987079869 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.992082247 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.991063102 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.988607297 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.992365355 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.998704642 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.996505226 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.995067416 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.993231392 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.98979689 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.990006023 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.994425744 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.988414793 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.00698945 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.999552082 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.992898132 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.992349849 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.992073925 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.996215821 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.992211592 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.989982437 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.002214888 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.997892056 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.998181635 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.999484398 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.994482533 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.994376247 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.003744674 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.993099661 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.000392572 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.997932313 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.995405455 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.998796905 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.000236432 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.998984927 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.997991867 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.995590718 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.003473673 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.999182862 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.995042331 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.997406162 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.005092078 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.998139363 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.002331667 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.001857266 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.990849296 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.99443585 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.99892582 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.006540217 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.997461746 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.998146004 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.995938627 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.997634084 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.00236253 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.994303066 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.000675438 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.998460465 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.99928631 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.000920742 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.999693897 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.988330755 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.996399396 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.995872883 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.000124215 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.002810022 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.998276535 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.993762589 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.99970654 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.004237828 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.99521705 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.001508353 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.996465379 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.996102028 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.002490491 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.996025442 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.000203573 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.000379667 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.995435715 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.99902957 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.99990603 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.996716652 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.99649844 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.001282132 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.007548734 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.995041957 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.996742439 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.995577594 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.999860859 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.004881848 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.995231943 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.997595782 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.994897222 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.002578136 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.00392559 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.991051485 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.995152371 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.991675214 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.002883297 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.002119276 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.992494584 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.99540103 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.998708352 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.999353435 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.002912138 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.998713438 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.998244811 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.997077912 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.002719618 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.008820568 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.996256881 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.996941014 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.995790328 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.997303506 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.997215451 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.002803626 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.017933895 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991706965 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.996199331 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.003740091 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.999219422 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.002443944 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.998723848 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.002506783 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.009391784 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.001500652 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.998603705 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.997958033 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.009953096 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.003905626 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.99805653 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.998309311 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.001952018 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.000835805 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.008702506 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.996389115 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.003661167 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.999090935 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.007046667 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.003213062 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.990334659 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.995302691 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.992514258 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.989902867 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.997205635 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.992823718 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.994813096 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.995294595 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.990808192 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.999968354 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.998935992 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.99423596 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.99828041 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.00379229 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.99083998 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.997817407 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.003153151 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.996959578 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.000278603 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.992646447 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.994645199 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.993964982 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.998057274 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.995138427 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.000878674 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.001620655 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.990650582 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.995045009 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.993637204 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.995813588 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.001444096 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.993364642 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.997633236 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.0045351 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.002034782 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.01362982 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.00802859 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.001891113 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.005241048 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.008522987 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.010387611 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.001888292 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.00304946 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.002173504 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.003942468 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.000395811 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.003866402 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.999749772 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.004583213 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.006892411 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.003822465 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.002869904 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.004416011 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.999576012 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.000539749 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.999755088 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.007544382 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.999878844 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.002714807 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.000385516 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.006863565 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.004689621 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.999620363 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.003081453 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.001534142 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.005288906 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.000685011 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.007604767 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.000003487 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.00463113 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.005458908 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.005025295 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.002207189 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.005798225 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.004252428 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.003443107 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.004120879 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.010714409 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.002745252 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.001703108 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.99883943 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.001219351 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.000793618 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.001604797 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.999401319 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.004314369 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.001968496 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.005525752 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.999203547 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.001520147 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.003666451 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.008535963 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.004716605 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.007535982 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.000075814 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.006857558 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.006324019 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.007847307 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.013132505 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.00609983 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.014326803 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.012626384 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.010826756 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.006130824 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.009874297 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.006240643 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.008544802 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.007793325 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.009091657 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.013576516 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.005893715 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.005509421 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.006880315 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.008564752 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.013232177 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.008023531 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.007793077 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.008327724 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.013530656 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.016481866 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.007002407 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.004768566 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.004445215 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.007864832 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.022993677 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.006592497 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.005520134 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.005366951 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.007004698 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.011538302 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.011167032 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.015369407 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.008115811 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.004723443 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.013856186 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.023619647 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.007562265 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014259879 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.034607628 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.013282927 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.0077744 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.007449266 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.009449138 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.007421819 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.00950843 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.007774182 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.013200309 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.008811268 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.007370637 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.018143794 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.009917443 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.010074557 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.004367731 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.009761008 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.013378444 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.007189709 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.012403292 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.006088934 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.007244263 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.014257137 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.01145583 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.007460355 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.008470612 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.007868766 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.01068729 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.008861339 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.00793574 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.017041057 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.008333374 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.011744719 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.019738009 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.021158914 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.008834258 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.009391622 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.015260632 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.013948352 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.009115436 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.007368643 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.011166776 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.022314914 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.011718235 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.014581873 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.01202124 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.009731729 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.011198103 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.010367135 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.008826705 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.016923096 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.018429943 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.011702616 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.011390103 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.015369796 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.009493057 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.012107811 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.014829578 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.012231791 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.011173396 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.010816562 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.011011975 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.012771912 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.012081467 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.012297783 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.016959222 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.008380107 seconds)
  done (took 1191.149645769 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.011394863 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.010885098 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.010443274 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.011306178 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.012407542 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.012138691 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.012127059 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.012350762 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.011943924 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.012777214 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.011589458 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.010799998 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.013044656 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.011212289 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.016283665 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.010600472 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.011584441 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.011533041 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.012040083 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.017749742 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.01328142 seconds)
  done (took 44.198854464 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.010769731 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.015319197 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.017961412 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.013408482 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.011427927 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.012071262 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.012163409 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.015496979 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.011389239 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.010381793 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.012415414 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.012075374 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.01873443 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.01341299 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.012432304 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.010799809 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.011499373 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.01637698 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.011532903 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.014079197 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.013803443 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.013385339 seconds)
  done (took 46.229619269 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.013406105 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.008970056 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.012798939 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.012343253 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.013815261 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.012161537 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.014278918 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.014997409 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.011583112 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.017315837 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.018131047 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.019921143 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.012187754 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.016170435 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.016042643 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.01365359 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.159347984 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.013348556 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.011882006 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.017617073 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.012187946 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.018441856 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.012605963 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.014028768 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.021199649 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.013555444 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.013599436 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.014454485 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.015456501 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.014023485 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.016686234 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.01419157 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.015123447 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.017203892 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.015341316 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.014180577 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.016198239 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.013932103 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.015366726 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.015574712 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.02282371 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.036094609 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.014567334 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.017871754 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.018622315 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.014729865 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.014052477 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.016578258 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.026714954 seconds)
  done (took 100.858099881 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.014542556 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.013862209 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.015416575 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.021668234 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.016523377 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.015626593 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.015444603 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.016889084 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.019464581 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.016132494 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.015088004 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.019966076 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.01856314 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.017026934 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.014855254 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.009124524 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.017577807 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.016474566 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.017897498 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.017224905 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.017794275 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.018189366 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.018961725 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.019284352 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.018119037 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.015538099 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.019589724 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.018061754 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.022381555 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.018437611 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.019236417 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.016902297 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.019060072 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.024266483 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.018909375 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.020128286 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.013327962 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.020481894 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.023065385 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.018348061 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.020194521 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.016390442 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.018696396 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.015025403 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.016500929 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.016098612 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.017982138 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.01901672 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.020571809 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.017112794 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.016756368 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.01527953 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.015015197 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.018820639 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.014736463 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.017430719 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.015200186 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.017281534 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.018925867 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.015460383 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.017465246 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.017969601 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.016834075 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.018018611 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.015491982 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.017112744 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.017586521 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.018635746 seconds)
  done (took 139.133830472 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.013342235 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.016833224 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.014627179 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.015162349 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.018657326 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.017047018 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.01696147 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.015973559 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.015838902 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.017348615 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.015932729 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.017280255 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.016006624 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.019009757 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.015569074 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.019046514 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.0198823 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.017465938 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.018684994 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.017940731 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.01625388 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.018036314 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.016628291 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.015526304 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.017843166 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.01581564 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.016371461 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.017339481 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017075418 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.016557165 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.018905371 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.019245234 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.018267162 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.016596538 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.017620663 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.017871558 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.019265092 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.017411501 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.017064638 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.01816308 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.016873047 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.017597599 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.018758741 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.016554834 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.014205732 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.016167141 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.016207345 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.017679544 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.01908609 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.01722674 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.019520543 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.019476643 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.018287941 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.02107213 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.01731041 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.018908642 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.019112552 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.019747466 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.020872003 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.019344897 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.017582172 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.020772605 seconds)
  done (took 127.034096849 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02071472 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.020336057 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.020997905 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.021579528 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.02062803 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.021469562 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.021446138 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.021872375 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.023273754 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.021361391 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.020673388 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.020426219 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.023877514 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.020638389 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.020748106 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.022374472 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.021542897 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.020500335 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.021582426 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.020857076 seconds)
  done (took 42.374818545 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.019950699 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.022486295 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.02097533 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.023951019 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.022500955 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.023796825 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.021628062 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.021065066 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.023809423 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.023090716 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.020915629 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.020943541 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.022168985 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.021836895 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.024966164 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.022590585 seconds)
  done (took 34.303834234 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.023409156 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.023740647 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.020530395 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.021670329 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.021830657 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.022719528 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.021917561 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.022970954 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.022823011 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.024803112 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.023586061 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.023925128 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.02444273 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.02416701 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.024799076 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.023431264 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.024031566 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.024334649 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.023727748 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.020881114 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.025021297 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.022517528 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.02288953 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.024984586 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.024562435 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.024832977 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.024028426 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.025435755 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.02575536 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.02430341 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.022243973 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.022964632 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.024866197 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.02594147 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.024103692 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.026543313 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.025816162 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.023938099 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.02278708 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.026415502 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.025814741 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.022887705 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.027157455 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.026095058 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.024329345 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.025535555 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.025040233 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.025588039 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.025190864 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.026058531 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.026136298 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.023749011 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.025243561 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.026700974 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.02606408 seconds)
  done (took 113.285861307 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02711565 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.026739786 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.023696319 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.026513434 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.024457052 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.025575076 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.027997548 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.025660421 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.02453232 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.027056779 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.027288376 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.025504298 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.026160591 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.026532529 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.024520439 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.027358033 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.027542235 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.025124633 seconds)
  done (took 38.420590318 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.025240109 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.026734299 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.026301788 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.026372473 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.02728953 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.026765311 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.024835021 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.02556102 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02721656 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.028319041 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.02559175 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.026564635 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.0270129 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.026146905 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.023359577 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028104007 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.028032761 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.025884672 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.024432307 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.027945017 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.026387594 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.027507167 seconds)
  done (took 46.532324326 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.027945646 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.027321549 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.041362717 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.048162894 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.046183814 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.061435841 seconds)
  done (took 14.205925881 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028145355 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026456594 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.029484282 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026847495 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027393574 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028705986 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028582878 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.024772721 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027366065 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028838524 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.02632355 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027483723 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02847035 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02751285 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026996458 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.029038197 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028787875 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028377839 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027833253 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027260667 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.026765862 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026834667 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.026295277 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025534477 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027414975 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.026415522 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.029423509 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.028888592 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028234864 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030373893 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02866476 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02771698 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028588586 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030388438 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027254764 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026361048 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028167601 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.029944803 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.026136331 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.027427939 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.027631001 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028482785 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.029039197 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029190056 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.029190946 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027664013 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.029210312 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.027708327 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029195021 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031626487 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.028580718 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029401285 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027513407 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030675586 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028371599 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028136002 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029006793 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029353511 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.029050387 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027945965 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029527628 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.028195601 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02847562 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.028847824 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.030031126 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.030564514 seconds)
  done (took 135.820159638 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.028279724 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.029343412 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.030904716 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030120308 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02976408 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031041007 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031803523 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031190897 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030956876 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030415382 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030114546 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031083026 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031274616 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030462726 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.030714487 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.031168414 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030685504 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028702637 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029639316 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030063138 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030621859 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029705361 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03070357 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032046494 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031680151 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031090099 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028948312 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030693687 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030926934 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029614899 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028214121 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031180426 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029928315 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.02996222 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.029972224 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029847247 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.032874475 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028965435 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029562375 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031803712 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032859836 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032080684 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030782737 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032939254 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033068751 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030023496 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031775536 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032531208 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031962444 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033141779 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033787554 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029946558 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.030603994 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031599231 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.031891714 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.032547789 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032071133 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033811854 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032162359 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03273153 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030343017 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032188419 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03433718 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.031307755 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033072151 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03289763 seconds)
  done (took 136.010938186 seconds)
done (took 2782.106834654 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.04464892 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.13167085 seconds)
  done (took 16.134127476 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.206737304 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.071683204 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.228998965 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.161353489 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.068770219 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.070574514 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.042807177 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.047128678 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.13718098 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.046543267 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.052780181 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.044985744 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.046088771 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.045158915 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.046602511 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.047329921 seconds)
  done (took 55.583870774 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.049117066 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.051751316 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.047662442 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.050259569 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.059532909 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.204580636 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.072038529 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.051266073 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.067012714 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.08449154 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.065263802 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.052987904 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.05323632 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.054119646 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.141984763 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.095719399 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.105848787 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.121811454 seconds)
  done (took 39.4011902 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.127033641 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.054681527 seconds)
  done (took 11.162942181 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.067593006 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.058720011 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.059985613 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.056167909 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.080498686 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.081621814 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.051487325 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.055103854 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.050715203 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.072834586 seconds)
  done (took 72.611269486 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.050818073 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.053365297 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.302039611 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.056478086 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.056376399 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.070861069 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.054528644 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.078458002 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.054171779 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.04806549 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.059956318 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.30861613 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.058301537 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.053677984 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.389059032 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.062094454 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.056459109 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.080402678 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.082256457 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.054164572 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.057866779 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.052768052 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.212081659 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.750023203 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.048115151 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.049652914 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.056439409 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.05045021 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.050157036 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.049805782 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.05214955 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.049892821 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.057275948 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.055598968 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.056081171 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.058783822 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.551160254 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.067483275 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.051630339 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.125540506 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.095648047 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.055999385 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.888343164 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.052237485 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.050929702 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.05654752 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.739401504 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.14154909 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.053466405 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.212631571 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.417653143 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.066203289 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.215267467 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.197581638 seconds)
  done (took 142.752678752 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.053992738 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.28641126 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.206104188 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.056662153 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.309665775 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.264089054 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.054849276 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.100839733 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.054261283 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.256417407 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.306724176 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.156331618 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.05507939 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.052881392 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.049869949 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.050903801 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.206806815 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.121991389 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.055801332 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.051739629 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.079157099 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.255788261 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.177081835 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.055047593 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.080385518 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.260701415 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.178046891 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.156261858 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.827992329 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.055609025 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.117866552 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.055834266 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.05518656 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.052889113 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.210728125 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.148043962 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.137417964 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.056206502 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.05629237 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.050828646 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.727559749 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.257012663 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.149393226 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.18017442 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.299977493 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.27060553 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.667464627 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.051855103 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.679705757 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.222435849 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.2578137 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.266512454 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.173454991 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.057228049 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.608136011 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.051147126 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.054753322 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.272743815 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.273421845 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.155481447 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.058949251 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.057952214 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.053952621 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.299304384 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.056744873 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.144041809 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.059378086 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.056372172 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.149185923 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.157143781 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.283957088 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.275265736 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.086653181 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.381288108 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.546289063 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.262087123 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.122391891 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.277434159 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.059038143 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.05333221 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.1366464 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.889844412 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.310011942 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.299679307 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.255983806 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.087651794 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.710461943 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.055421681 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.247900314 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.248512841 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.2879796 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.300795946 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.297449665 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.422904992 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.058360414 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.05809229 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.362361587 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.175217884 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.007029443 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.41720502 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.285923377 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.543857987 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.083507112 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.343840919 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.187624202 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.061856885 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.706914766 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.063207242 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.2630503 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.101156028 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.061601183 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.060572306 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.249058361 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.964877053 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.058296462 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.011635641 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.120461976 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.06073421 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.264299954 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.060187185 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.303079397 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.060981627 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.29318126 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.6932888 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.091110746 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.288737923 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.301684556 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.690387743 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.353235856 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.302390695 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.168913793 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.334147844 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.060359627 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.063301186 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.321768052 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.064467923 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.059928487 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.225487698 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.064038894 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.202865799 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.52134838 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.325787196 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.07769675 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.289383278 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.065141463 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.30091193 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.09133606 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.116605743 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.060663528 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.191638983 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.06633884 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.909938151 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.217319692 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.066422922 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.058975601 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.822536095 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.059993338 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.214224165 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.289799105 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.082478768 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.132459346 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.631299927 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.056017832 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.152914591 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.082401537 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.333252409 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.06338102 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.310801123 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.039788975 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.545143934 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.068414912 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.293946432 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.297221912 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.069860416 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.06307354 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.906653349 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.062461843 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.062248262 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.219959497 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.496872184 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.965702848 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.26258054 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.06353012 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.190838673 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.064948715 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.138524132 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.409371869 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.061921361 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.063920433 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.063666098 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.063273478 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.065154883 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.325722439 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.088591752 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.4959783 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.200889257 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.322165075 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.368093647 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.263347806 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.105248186 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.068984137 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.285174909 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.066589009 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.126480567 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.064302459 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.084368465 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.29536383 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.065052607 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.270604919 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.300929184 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.04567584 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.110229343 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.064193386 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.064873917 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.033225557 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.210962192 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.151858093 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.067093 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.065057937 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.181405638 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.185440381 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.249295781 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.891982391 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.203671703 seconds)
  done (took 944.502190218 seconds)
done (took 1284.108585457 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.061627131 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.06290579 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.062365293 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.059185627 seconds)
  done (took 30.23466239 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.062219595 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.062729421 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.07878121 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.060316185 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.064021304 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.061878877 seconds)
  done (took 14.377260548 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.061651758 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.064506115 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.064449158 seconds)
  done (took 23.178525893 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.489130148 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.470111905 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.132703356 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.20340851 seconds)
  done (took 11.283219845 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.065085101 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.062485531 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.063028419 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.080646718 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.081715956 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.063809089 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.063504079 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.0825181 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.06232 seconds)
  done (took 20.623471279 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.261514037 seconds)
done (took 105.948070119 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.780116737 seconds)
    (2/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.169366308 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.175931156 seconds)
    (4/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.08918494 seconds)
    (5/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.143814756 seconds)
    (6/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.366017303 seconds)
    (7/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.138600819 seconds)
    (8/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.539419672 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.464905705 seconds)
    (10/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.258706586 seconds)
    (11/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.18176655 seconds)
    (12/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.060841481 seconds)
    (13/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.366368207 seconds)
    (14/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.475645691 seconds)
    (15/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.269731209 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.075570392 seconds)
    (17/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.05613614 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 8.672331845 seconds)
    (19/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.817793105 seconds)
    (20/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.064298663 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.076215145 seconds)
    (22/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.073394878 seconds)
    (23/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.164954209 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.070818588 seconds)
    (25/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.211084268 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.055248411 seconds)
    (27/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.131938351 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.312618601 seconds)
    (29/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.923111015 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.080050296 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.350389095 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.15053745 seconds)
    (33/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.250906848 seconds)
    (34/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.167587585 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.956268587 seconds)
    (36/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.063794704 seconds)
    (37/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.992615395 seconds)
    (38/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.132794021 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.382752596 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.140538358 seconds)
    (41/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.433856122 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.139472503 seconds)
    (43/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.946907971 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.149863197 seconds)
    (45/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.91047506 seconds)
    (46/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.458244226 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.916447819 seconds)
    (48/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.036959245 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.488646267 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.189578513 seconds)
    (51/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.012329935 seconds)
    (52/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.919939394 seconds)
    (53/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.334989658 seconds)
    (54/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.075117923 seconds)
    (55/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.299542501 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.445794468 seconds)
    (57/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.790477101 seconds)
    (58/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.053006896 seconds)
    (59/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.427324228 seconds)
    (60/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.052629219 seconds)
    (61/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.350891923 seconds)
    (62/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.40480542 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.381847704 seconds)
    (64/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.590648319 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.173439112 seconds)
    (66/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.316797103 seconds)
    (67/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.052030983 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.776988022 seconds)
    (69/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.127816338 seconds)
    (70/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.068482395 seconds)
    (71/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.214158378 seconds)
    (72/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.798379859 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.206123365 seconds)
    (74/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.27059177 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.067626488 seconds)
    (76/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.826485731 seconds)
    (77/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.392725718 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.442963423 seconds)
    (79/341) benchmarking ("sort", BigInt, false)...
    done (took 7.054599172 seconds)
    (80/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.054342832 seconds)
    (81/341) benchmarking ("sort", Int8, false)...
    done (took 6.951818377 seconds)
    (82/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.327562053 seconds)
    (83/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.067640379 seconds)
    (84/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.131071894 seconds)
    (85/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.370388904 seconds)
    (86/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.149788789 seconds)
    (87/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.522763682 seconds)
    (88/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.072920117 seconds)
    (89/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.186431822 seconds)
    (90/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.383410415 seconds)
    (91/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.096830101 seconds)
    (92/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.19420435 seconds)
    (93/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.159458598 seconds)
    (94/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.279902792 seconds)
    (95/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.913224478 seconds)
    (96/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.181574454 seconds)
    (97/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.296943914 seconds)
    (98/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.205814607 seconds)
    (99/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.06326519 seconds)
    (100/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.149716662 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.135246473 seconds)
    (102/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.060411591 seconds)
    (103/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.110060475 seconds)
    (104/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.345358629 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.389313261 seconds)
    (106/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.272523804 seconds)
    (107/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.061014624 seconds)
    (108/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 4.168413231 seconds)
    (109/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.076419603 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.067021064 seconds)
    (111/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.190382142 seconds)
    (112/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.072449504 seconds)
    (113/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.26363234 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.412403194 seconds)
    (115/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.447682601 seconds)
    (116/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.187723454 seconds)
    (117/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.381387343 seconds)
    (118/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.428896769 seconds)
    (119/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.183009032 seconds)
    (120/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.247391452 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.949040737 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.065516644 seconds)
    (123/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.378428636 seconds)
    (124/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.188905545 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.366377435 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.329142103 seconds)
    (127/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.764897292 seconds)
    (128/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.923062773 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.141565998 seconds)
    (130/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.138047774 seconds)
    (131/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.197171922 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.080691655 seconds)
    (133/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.216838985 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.831463467 seconds)
    (135/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.473797208 seconds)
    (136/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.177380992 seconds)
    (137/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.053073262 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 3.722223876 seconds)
    (139/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.057450732 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.148240753 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.061021027 seconds)
    (142/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.301448553 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.307084499 seconds)
    (144/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.50394357 seconds)
    (145/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.244473085 seconds)
    (146/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.856308891 seconds)
    (147/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.464823069 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.301702421 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.180047301 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 2.275709797 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.977809964 seconds)
    (152/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.158504036 seconds)
    (153/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.759296826 seconds)
    (154/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.290752421 seconds)
    (155/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.159216107 seconds)
    (156/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.465744803 seconds)
    (157/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.69621303 seconds)
    (158/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.267907316 seconds)
    (159/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.3643585 seconds)
    (160/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.361002887 seconds)
    (161/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.070634522 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.478473518 seconds)
    (163/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.055815793 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.136955533 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.074720564 seconds)
    (166/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.951715892 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.28104004 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 5.705472774 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.15936834 seconds)
    (170/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.352063052 seconds)
    (171/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.052910667 seconds)
    (172/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.588152421 seconds)
    (173/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.426056133 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.941687256 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.195744189 seconds)
    (176/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.061025633 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.267764121 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.475076783 seconds)
    (179/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.828100922 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.186307361 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.389634354 seconds)
    (182/341) benchmarking ("sort", Float64, false)...
    done (took 5.79608331 seconds)
    (183/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.208015426 seconds)
    (184/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.067597509 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.995963652 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.174083806 seconds)
    (187/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.178245917 seconds)
    (188/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.449646065 seconds)
    (189/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.073374423 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.458235265 seconds)
    (191/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.14863649 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.220868291 seconds)
    (193/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.133849142 seconds)
    (194/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.109687703 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.062943483 seconds)
    (196/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.211832668 seconds)
    (197/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.194801777 seconds)
    (198/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.077404212 seconds)
    (199/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.068410133 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.060567122 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.076907041 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.064128728 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.060998395 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 4.005142247 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.064465794 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.068711832 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.377057671 seconds)
    (208/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.141189834 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.188172535 seconds)
    (210/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.358483847 seconds)
    (211/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.064317736 seconds)
    (212/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.216060497 seconds)
    (213/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.524285729 seconds)
    (214/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.271540683 seconds)
    (215/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.812261627 seconds)
    (216/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.964866719 seconds)
    (217/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.076917069 seconds)
    (218/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.07281359 seconds)
    (219/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.350309452 seconds)
    (220/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.232434811 seconds)
    (221/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.320186465 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.079486364 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.506606857 seconds)
    (224/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.379811376 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.213777808 seconds)
    (226/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.349770153 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.076562743 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.062531495 seconds)
    (229/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.192954883 seconds)
    (230/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.270243327 seconds)
    (231/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.407221875 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.988875862 seconds)
    (233/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.184807165 seconds)
    (234/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.769391299 seconds)
    (235/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.173630938 seconds)
    (236/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.212146516 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.392782466 seconds)
    (238/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.083740744 seconds)
    (239/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.060174508 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.134936532 seconds)
    (241/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.07535323 seconds)
    (242/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.446423077 seconds)
    (243/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.832873805 seconds)
    (244/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.211790961 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.360820044 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.715029382 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.987743191 seconds)
    (248/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.163036813 seconds)
    (249/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.282392818 seconds)
    (250/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.078098304 seconds)
    (251/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.076464412 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.08383587 seconds)
    (253/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.82984622 seconds)
    (254/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.283346994 seconds)
    (255/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.063343596 seconds)
    (256/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.47842519 seconds)
    (257/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.065533014 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.172889691 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.138781428 seconds)
    (260/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.088496851 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.143194965 seconds)
    (262/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.341706708 seconds)
    (263/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.251518547 seconds)
    (264/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.066463198 seconds)
    (265/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.151264051 seconds)
    (266/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.135247082 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.066154558 seconds)
    (268/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.146001316 seconds)
    (269/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.069778131 seconds)
    (270/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.260041466 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.178720543 seconds)
    (272/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.325708179 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.089528571 seconds)
    (274/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.14699067 seconds)
    (275/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.506632881 seconds)
    (276/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.319534676 seconds)
    (277/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.067151262 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.080140485 seconds)
    (279/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.065360989 seconds)
    (280/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 5.138764022 seconds)
    (281/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.081395282 seconds)
    (282/341) benchmarking ("sort", Float32, false)...
    done (took 5.842398693 seconds)
    (283/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.208726391 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.079169328 seconds)
    (285/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.172338226 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.201153641 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.373716717 seconds)
    (288/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.267191878 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.180818855 seconds)
    (290/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.137451214 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.070473903 seconds)
    (292/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.180431963 seconds)
    (293/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.755167066 seconds)
    (294/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.34786711 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.166601936 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.40613586 seconds)
    (297/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.150552678 seconds)
    (298/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.420090977 seconds)
    (299/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.472214002 seconds)
    (300/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.492822101 seconds)
    (301/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.184554323 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.470388486 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.280211785 seconds)
    (304/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.07431445 seconds)
    (305/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.188949828 seconds)
    (306/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.074687584 seconds)
    (307/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.382119872 seconds)
    (308/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.399479492 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.472627352 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.782363181 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.184660705 seconds)
    (312/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.152848174 seconds)
    (313/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.164604074 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.332538065 seconds)
    (315/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.687891874 seconds)
    (316/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.277163113 seconds)
    (317/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.678616846 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.942250015 seconds)
    (319/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.464802364 seconds)
    (320/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.068204487 seconds)
    (321/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.037664994 seconds)
    (322/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.981106208 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.081616145 seconds)
    (324/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.482766968 seconds)
    (325/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.163028988 seconds)
    (326/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.979609744 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.28876404 seconds)
    (328/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.07381449 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.470609008 seconds)
    (330/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.067243243 seconds)
    (331/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 4.538999387 seconds)
    (332/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.553680614 seconds)
    (333/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.19961141 seconds)
    (334/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.338422644 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.266484144 seconds)
    (336/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.185549001 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.42116295 seconds)
    (338/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.402971364 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.106702241 seconds)
    (340/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.080978923 seconds)
    (341/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.281696805 seconds)
  done (took 1160.530727927 seconds)
done (took 1162.621546046 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.095106708 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.078262747 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.577084819 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.083402221 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.073962697 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.082023474 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.585983565 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.104672682 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.093490481 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.586072267 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.083513232 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.07451133 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.091900091 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.113155574 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.083824125 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.09172116 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.078315336 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.107150834 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.11131005 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.077005488 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.131327521 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.080008654 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.07944463 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.130094353 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.081416461 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.09090818 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.09265266 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.131844926 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.134077503 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.076942114 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.081908788 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.426753779 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.117090178 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.074818022 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.089653306 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.092927148 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.07779593 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.090858046 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.097840646 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.091540012 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.073434974 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.083775629 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.079168883 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.079800319 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.076229811 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.069468458 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.073503468 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.198967558 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.087019332 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.41369365 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.135726352 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.094356081 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.124592982 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.077947443 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.07707795 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.078160071 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.124378458 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.084659198 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.078407132 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.418107762 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.168903693 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.092951798 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.412636054 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.136919183 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.092688625 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.088468035 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.071906733 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.092666725 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.43579935 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.623643351 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.098316325 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.097219669 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.08068715 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.079936851 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.088308756 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.581257365 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.087903104 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.653506451 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.09920424 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.093509907 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.080479287 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.080753059 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.081046426 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.093852386 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.093776698 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.081914289 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.083572255 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.081014671 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.094925606 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.435188144 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.126089295 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.578027421 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.080606061 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.100343676 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.099537049 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.662791344 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.101564754 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.100852961 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.080340107 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.43210034 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.118610978 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.096891833 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.077842032 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.0911215 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.190421289 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.100508404 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.095802993 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.07731959 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.103247777 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.084799797 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.080629119 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.089786951 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.101433788 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.114240444 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.094902979 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.07902596 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.085358064 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.082120883 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.09747341 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.087294618 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.084336225 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.087508243 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.077628947 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.131967839 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.10012764 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.092488882 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.200228041 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.086243482 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.204117934 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.091097384 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.086733196 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.077623504 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.423208445 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.124534341 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.100377578 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.087075083 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.101388206 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.101920421 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.096884588 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.08403382 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.094689482 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.076026588 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.135962647 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.078912649 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.109495199 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.136805554 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.092445288 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.086773795 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.094176302 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.115241496 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.099493 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.085442913 seconds)
done (took 327.424907376 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.138746929 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.081442912 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.166497608 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.082461814 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.151012449 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.139470819 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.086330367 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.089396465 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.088289686 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.473632416 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.085407029 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.090548764 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.086033899 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.088838623 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.134866122 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.086262581 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.085126716 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.320292994 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.087830432 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.142038723 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.082376534 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.08876589 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.083820415 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.475272903 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.088289892 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.083819935 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.144584342 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.087181998 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.326546819 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.08454639 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.089317327 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.328451746 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.145983172 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.098613155 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.09255303 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.091158659 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.150781689 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.087485896 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.133492272 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.136134881 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.166348615 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.116633034 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.087003061 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.08296784 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.092767413 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.08884733 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.084982054 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.119501554 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.090299721 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.090285956 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.321181073 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.099895086 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.09537469 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.087531207 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.091661745 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.099282632 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.0891917 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.087909675 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.151249369 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.085692681 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.140106131 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.478154943 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.472899298 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.094448562 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.088660586 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.08818609 seconds)
  done (took 198.197861947 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.161886104 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.173542975 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.156537005 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.096800331 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.13771846 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.156088993 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.100016575 seconds)
  done (took 16.993686067 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.09769296 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.091968952 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.11491419 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.115472685 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.080295171 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.234558193 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.102541505 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.094480328 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.113799351 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.085158344 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.423215568 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.111121584 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.091617651 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.089694887 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.099174186 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.119991446 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.086246705 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.084043895 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.192612407 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.171973403 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.088215119 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.09523148 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.125828653 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.10015833 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.094092919 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.084171571 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.079659198 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.103941387 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.086769385 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.097452501 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.089423771 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.101437319 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.093526968 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.096553365 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.087426308 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.085471517 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.086368615 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.088869394 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.088614926 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.090112433 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.091138781 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.090147927 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.0871567 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.091465992 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.08830158 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.10994529 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.086931077 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.087878425 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.092960944 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.085489849 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.120091768 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.087911428 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.088825621 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.090700405 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.137049959 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.096607071 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.089120706 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.088029362 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.095617461 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.091335546 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.09369097 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.171988068 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.112452095 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.091453572 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.116859525 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.130747613 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.087267067 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.09029662 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.089816056 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.118070533 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.0880028 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.107513198 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.088180908 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.189812955 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.089503852 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.234926627 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.107060313 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.090604228 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.095331784 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.094014732 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.094816057 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.090554592 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.099208761 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.0980674 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.099892539 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.089042641 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.086663223 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.087598295 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.101205548 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.088232237 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.129911102 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.090108622 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.088464001 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.185261971 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.087647988 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.191558448 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.112831486 seconds)
  done (took 226.477978256 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.097342676 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.094086097 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.108754997 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.095886284 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.092809505 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.099140497 seconds)
  done (took 14.598684967 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.095202958 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.102414891 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.09131161 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.093014213 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.087483745 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.088639207 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.09295027 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.096536246 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.098998548 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.089770422 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.087959172 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.084113038 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.088427329 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.087168046 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.090743175 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.09569478 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.091111224 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.094864614 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.089044241 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.088383131 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.337677373 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.095483806 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.095219807 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.094774087 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.098961597 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.088422006 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.097250898 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.09299713 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.089662746 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.099619587 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.096865748 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.088007997 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.092303446 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.104329918 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.095816948 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.092622606 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.092957392 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.09378491 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.097542564 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.096735916 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.096311425 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.0907184 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.095239098 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.098988437 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.099638345 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.101266828 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.097108902 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.104768293 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.103475319 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.096733213 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.093927501 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.095584724 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.093016267 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.097042168 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.0983283 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.105520651 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.098594319 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.100338653 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.094167564 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.095665901 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.099721255 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.094475363 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.100903407 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.097931499 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.103791119 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.091145466 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.093705043 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.094229566 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.097510892 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.093344863 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.096217061 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.093982931 seconds)
  done (took 154.100044452 seconds)
done (took 612.375619402 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.185837822 seconds)
  done (took 9.203868561 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.166473804 seconds)
  done (took 9.289380028 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.412944721 seconds)
  done (took 12.429593978 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.160751402 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.118487962 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.10042274 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.094689328 seconds)
  done (took 30.506957871 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.445788661 seconds)
  done (took 9.463687485 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.107375866 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.089967409 seconds)
  done (took 16.284463511 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.140201066 seconds)
  done (took 9.161325819 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.130588385 seconds)
  done (took 9.174818017 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.120507123 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.118483376 seconds)
  done (took 16.273700209 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.088703171 seconds)
  done (took 9.106491521 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.95058187 seconds)
  done (took 10.054565309 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.103813994 seconds)
  done (took 9.141567428 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.151103851 seconds)
  done (took 9.165595411 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.080907612 seconds)
  done (took 10.097786761 seconds)
done (took 171.36786063 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.100846621 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.09147048 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.09651406 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.087587494 seconds)
  done (took 30.393761075 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.129409371 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.13215663 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.139009255 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.133624569 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.11851013 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.115420017 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.132306408 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.128990541 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.120135054 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.128133367 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.134003548 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.135210464 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.131429839 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.140207088 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.142279085 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.126806123 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.13358375 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.130158867 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.126494954 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.141148509 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.128948816 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.134017888 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.096175878 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.101974937 seconds)
  done (took 53.097182675 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.288007034 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.161289353 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.249636319 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.144202308 seconds)
  done (took 10.859810773 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.102223935 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.164283382 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.144647814 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.147022528 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.14652833 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.201798399 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.153420143 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.239139806 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.221013263 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.218955475 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.106173799 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.117799772 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.122793063 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.147867841 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.205286853 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.098827542 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.101882188 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.220217746 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.156103191 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.35818556 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.097097538 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.155459956 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.153184976 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.154376602 seconds)
  done (took 53.952309196 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.099447812 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.108775591 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.107260869 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.107636087 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.098413735 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.10303138 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.10628938 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.102258962 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.123968154 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.098550151 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.099722622 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.097404796 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.104615517 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.098720135 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.10179043 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.107875611 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.111093356 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.100608069 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.107273154 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.109701688 seconds)
  done (took 44.114438215 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.097938855 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.943893028 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.447779997 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.349021941 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.104221101 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.097368984 seconds)
  done (took 33.061429746 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.117783659 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.118332578 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.106603541 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.129447791 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.15287121 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.110601205 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.157463633 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.258091121 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.106563092 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.159503553 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.123627144 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.108805841 seconds)
  done (took 27.672496668 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.10300668 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.097282124 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.107439224 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.111183687 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.115258813 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.109679917 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.111920203 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.101334415 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.114560315 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.120724846 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.104644941 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.11089092 seconds)
  done (took 47.337075082 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.309354049 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.331395584 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.323486204 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.693585487 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.428204291 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.092885275 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.381652902 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.305292882 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.860410245 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.883133161 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.406967141 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.08991714 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.053678262 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.023795922 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.001570236 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.34869685 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099105077 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.960325564 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368438131 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.151107687 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099978558 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.102879205 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105000939 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.405050508 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432870173 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.101576283 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.314670421 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121154414 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.136700488 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.307776099 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.697379506 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.161890703 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.304413091 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.360381437 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.447705722 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.162389177 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.20340678 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.272246409 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.145643283 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.137592002 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.110080531 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.11209365 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.631559486 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.106795533 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373072782 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102902347 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.112296583 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.195976498 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024507389 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.503814859 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230627941 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.106130405 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.140097774 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.546888616 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218228429 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.343518684 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.107689629 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.267721457 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157799892 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.436121974 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.228808638 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.205368985 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314463816 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028732565 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.600967868 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239497804 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.106709164 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.107749032 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.798696438 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.344557757 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.182711933 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.502602566 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.884206233 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.102152979 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.107477181 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.144719065 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204022227 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.101048922 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.396945993 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.093767505 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.03162388 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.201618056 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.497934855 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104502286 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.103332978 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.117004097 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.950955535 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.026817108 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.200556384 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.448276894 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.445934205 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.104481523 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.107053808 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.123602509 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.10556069 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.057074741 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.656079162 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.172467129 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.03467664 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.668854021 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.70381509 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.072104333 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.570360281 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.150750061 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.393599897 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.256167478 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.512898881 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.317096916 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.351134892 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.632699193 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111531256 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.72312796 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189425798 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177623681 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106322566 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.669210712 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.285705985 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.48854924 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.234962642 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.104625529 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03320806 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.114607767 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.310509979 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.701848933 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.162857995 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.103332367 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.109330224 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.107475704 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11136596 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.212646282 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12220612 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.404968275 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.178438256 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.106102047 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.0462357 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.113144424 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405400131 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.750498782 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1702912 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.390327396 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.377220977 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.804148133 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.701191095 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.050631577 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.381916467 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.181747549 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181181969 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.700626707 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.242254221 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.200473428 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107431156 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.236685532 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.114544747 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.108412411 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.483742526 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.523196038 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.533459403 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.148364358 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.108864752 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.057730253 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.275912259 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.354430566 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.251031151 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.135398513 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113584902 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.190150337 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332141093 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.106471687 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.038090051 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359929191 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.356435643 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.403209255 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.524140137 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.240039272 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.177633477 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.118444743 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.318290681 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.193157934 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.771558304 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.657051976 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327335041 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.669611455 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.074270071 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.751563195 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.453572132 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.500648291 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123703219 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.559583425 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.274288004 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.783261867 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.141875856 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.642585804 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.033538738 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11434732 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.446300346 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.072296384 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.431271319 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.17657687 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201134546 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.108696071 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.110141294 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116889434 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.103570679 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214746348 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175090219 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.18056049 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.037178599 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.746557458 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.14777256 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.109642991 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.106341376 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.592802805 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.049471503 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.064580165 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.106386854 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184549065 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.858985182 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.660051988 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.111895938 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.112096774 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.709852692 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.113072371 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.023490724 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.116751952 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.039150523 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136795215 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.444889777 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.820945936 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.405093928 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.188691259 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185254891 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.108292393 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118252373 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.808157261 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.116652008 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.809510222 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.403090448 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.385411674 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.575177386 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.177263292 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.31921117 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.123311872 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.110962454 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.672557585 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.137190769 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109686596 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31370912 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.626719125 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.516956463 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.76225601 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.195696091 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.107995462 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.383897942 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.122207241 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.694263519 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.81709217 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.127724823 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.110716922 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.375494242 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.796380058 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.113664534 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.08957895 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118223447 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.32160908 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.315885263 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.387009766 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.420491458 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.568629174 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.036098822 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.115793276 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.134929758 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.355088949 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.109662447 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.143619831 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.558989247 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.288467318 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.543383229 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.402996817 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.583134114 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.766604143 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.393065001 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.187483351 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.121822729 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.781171046 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.250889154 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.042066801 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232053091 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.03754218 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.932002117 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.401327032 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.127230103 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.392366209 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.096913248 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.459713055 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.413008659 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.456448688 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.17432595 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.139578135 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.111567662 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15505869 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.114100683 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.285096197 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.232623128 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.119199171 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.646773857 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156480043 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159023894 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.115895406 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.700120494 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136721087 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114575568 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.811200846 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.138184576 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231351063 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183656851 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.949025877 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.735176621 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.239114229 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.986858001 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.765605362 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.387880635 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.177962988 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.589643579 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.158277761 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.518642171 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.114661102 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.325758014 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.1186698 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.6888488 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163271872 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394863722 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072650824 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.32497007 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319664611 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.146614019 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.117983193 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.039110591 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.277077576 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.989910857 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.092551561 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.118540135 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.80153763 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.580314452 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.323659619 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.63044603 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.933451286 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.116287817 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.572981477 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.537641391 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.745977066 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150442676 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121519701 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.534681881 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.262606296 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.50514743 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.422828611 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.122369685 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.144407432 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.327973861 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241116527 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.035875427 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.595495154 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.703093969 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.817906614 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.12540902 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.321758794 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.526441902 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.41689458 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.152789784 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.186174733 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.523341529 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.395741746 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.190172355 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.049487709 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.113552271 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.513849318 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.517218594 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.214103921 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.362164738 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.448866407 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.719665973 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.725903076 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.546567272 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.648263096 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.576186953 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.517605947 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343591596 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.49923218 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.447334264 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.710939007 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.534325467 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.33274189 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.213531449 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.403722417 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.996173873 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.827267289 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.365686477 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.124976354 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.05522531 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.329632033 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.128239643 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.56326608 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.652388583 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.36487263 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.455884695 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.60241248 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.659012764 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.285916341 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142676154 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.089658804 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.146337256 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.141589336 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.122823415 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.598223115 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.411751864 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132118015 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.065261563 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.792263011 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.046208784 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.334929908 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.307000114 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.157826417 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.678748404 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.471605394 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.237573728 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420715604 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.367282518 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.155726 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049544063 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.942553528 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.069654713 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.263404869 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.552243282 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136078935 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.122387234 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.32572484 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.048387903 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167165896 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.124383674 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329622432 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.703812396 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398604362 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.25254861 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.369365002 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.427166147 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.113982456 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163826205 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.395411076 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.051957579 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.748048218 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.805523939 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.159541852 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193302328 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.12516479 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.12385492 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394348471 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.537979658 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.231176271 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.819145022 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.157785838 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.144934079 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.53576756 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.228206866 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.124185453 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.126628208 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.604379908 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.356279302 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.123558378 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.104040258 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.336589006 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197432338 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.319531518 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.198004388 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.640660053 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.127320963 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.129041476 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.239856944 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.079980977 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.119275258 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.902042793 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.183644608 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.121964591 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.401318601 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.782283004 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.326889218 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.51820426 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.992288519 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.307051179 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.165467376 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.12295826 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.136618622 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.513652488 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.436653963 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.120988668 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.409890193 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177512776 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.129858649 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.788486977 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.0914322 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.123663388 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.948191075 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.013251387 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.853980403 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.520177718 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.124126817 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.186562619 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.126905136 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.052349063 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.122144673 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.301000761 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.104781261 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.127894813 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.50083479 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.523698194 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229526042 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128526586 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.12680886 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.128482331 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.339787484 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.637918104 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143836318 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.828589134 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.328985794 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.127641805 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.608987854 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.601490055 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.374449149 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.165075351 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.296948848 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.383645396 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.668918095 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.303072104 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.100025333 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352348296 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.127733056 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.401293422 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402988845 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.125829614 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.340179248 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.731205109 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.414886946 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.474263422 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.446316243 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.198913888 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.305482337 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.033762861 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.124535065 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.131856451 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.403363878 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190248697 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.125495704 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137263997 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.684862099 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.89479284 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.603445903 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284118469 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.536410631 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.055094922 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.884578953 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.128830157 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.054053658 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.126030294 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152292278 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.132409089 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.053622958 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.954755054 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.847518319 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.343944406 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.4354149 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.05524296 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.335012486 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.733780407 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.051491467 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.097397073 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.13354753 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.381872466 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058664455 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129952926 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.087364625 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.484973213 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.018502634 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.397652533 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.128439537 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07458818 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129317359 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.127821318 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.128399417 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.210578006 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.12983588 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250629595 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.408321771 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.591194772 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.243561346 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.770973653 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.918458748 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.065907947 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.168080859 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.744666102 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.695726902 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.490426912 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.270754588 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.900248773 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.07302683 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.136520974 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149749169 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.393392813 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.131580303 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132451992 seconds)
  done (took 2234.386498487 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.163360527 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.238163804 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.250546932 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.213812836 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.17239725 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.178993945 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.231304375 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.18249119 seconds)
  done (took 59.67845863 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.14587118 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.189460391 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.148610865 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.155936912 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.138795458 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.144581968 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.341251321 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.171529619 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.14515934 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.151975051 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.144891718 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.13840379 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.140764962 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.132057359 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.137960085 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.429322931 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.162138702 seconds)
  done (took 81.120475377 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.186409249 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.968988568 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.139215359 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.901285712 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.174237169 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.428189125 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.135530297 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.136825491 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.45104669 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.428289972 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.141973336 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.143479803 seconds)
  done (took 95.298363716 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.138759722 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.138932613 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.136500224 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.137290279 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.138785657 seconds)
  done (took 12.748858957 seconds)
done (took 2785.80856431 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.38261804 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.225836257 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.201104719 seconds)
  done (took 6.482031952 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.28324414 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.329897428 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.442029753 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.450506264 seconds)
  done (took 11.570193788 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.415823878 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.519766521 seconds)
  done (took 6.99146815 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.498528416 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.138904836 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.522304424 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.139842226 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.138460948 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.141859084 seconds)
  done (took 23.484432012 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.138032099 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.139429352 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.139243604 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.139184947 seconds)
  done (took 10.614494978 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.136019668 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.917695776 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.134966449 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.143315886 seconds)
  done (took 22.389949999 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.350566999 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.152880325 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.905314633 seconds)
  done (took 10.467715285 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.76051351 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.589682793 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.749297857 seconds)
  done (took 10.154613247 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.280822959 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.974707344 seconds)
  done (took 8.313812984 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.280628239 seconds)
  done (took 4.338905031 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.974986397 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.453332611 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.58811463 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.683802583 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.746183743 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.37823686 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.468656797 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.411826452 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.551484611 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.554586625 seconds)
  done (took 27.870196555 seconds)
done (took 159.278765897 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.569543132 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.163529421 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.353597702 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.517250455 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.380720521 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.352641523 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.452404369 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.506512714 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.180136589 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.17072545 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.517156156 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.43171828 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.397341228 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.163709882 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.403866909 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.161515484 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.380146525 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.587096853 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.19666175 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.438964069 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.455219056 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.160174165 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.355600172 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.168237525 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.379888143 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.306011166 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.759463265 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.158798527 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.346511638 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.770549301 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.302415935 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.589755814 seconds)
  done (took 178.149174331 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.016014856 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.147405314 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.147221002 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.147475915 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.426683423 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.149861374 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.148355103 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.148507469 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.443425778 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.425795523 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.146178202 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.440464693 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.148221448 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.148232744 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.151354288 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.148007685 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.560890376 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.043467129 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.150737355 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.149677109 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.149671033 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.302525242 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.151104111 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.315282098 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.540566245 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.150404118 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.14938241 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.147844871 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.148779895 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.154746831 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.149051694 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.150868295 seconds)
  done (took 216.869177074 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.152108555 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.150148398 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.149631741 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.149373328 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.150157563 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.151229132 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.151945935 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.149424526 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.00180027 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.999732189 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.149613223 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.153266575 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.15799857 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.148104199 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.162049561 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.148712393 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.162897264 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.158592774 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.149638482 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.150437286 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.150526625 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.791415044 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.151561414 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.828061635 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.150904118 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.154736292 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.149671777 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.158123389 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.149430468 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.149608782 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.152700672 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.149129306 seconds)
  done (took 229.956335235 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.393150041 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.15644344 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.154868694 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.159900579 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.155264413 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.155943875 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.163144163 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.399893319 seconds)
  done (took 21.810742005 seconds)
done (took 648.867639337 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.520041565 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.893942195 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.282790039 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.173916306 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.458674417 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.221485897 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.170243584 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.236565196 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.815787617 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.244793373 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.565507667 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.178402824 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.869831525 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.194222917 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.284159039 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.230283416 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.52238069 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.784842258 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.304897785 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.878099991 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.376444747 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.117602849 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.247836524 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.855910531 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.571428815 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.143078814 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.174900609 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.517796215 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.170744186 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.401712465 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.802567363 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.397750259 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.181745826 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.166405855 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.222725018 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.204200478 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.357878374 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.175894255 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.280715266 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.905396706 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.861765376 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.687704593 seconds)
  done (took 111.725078903 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.155704545 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.151604907 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.153247397 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.152507984 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.163864897 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.151745699 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.148538096 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.155285451 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.159996144 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.155354278 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.153762063 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.163391214 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.156471607 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.160647175 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.154082411 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.154629606 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.150689354 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.161215013 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.15971013 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.156057243 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.15256129 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.151909669 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.148400317 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.152184402 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.151997687 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.155340424 seconds)
  done (took 58.113328078 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.152854019 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.306086295 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.441382526 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.185424585 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.15636153 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.155169114 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.180258463 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.16001856 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.158055962 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.156178636 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.244222779 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.161041312 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.165562784 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.438060712 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.181247729 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.150990234 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.150776292 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.152737103 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.310627417 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.166844852 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.187155729 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.161470248 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.190058307 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.166909775 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.158307396 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.158298642 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.164581797 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.563405002 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.169299027 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.250175835 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.199533354 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.185107214 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.51103585 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.447010855 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.218315457 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.158916606 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.155479177 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.294396665 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.167404534 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.154611533 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.184710872 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.161112599 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.443143012 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.660803795 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.173419341 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.156946133 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.563431886 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.306591988 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.205786563 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.168603391 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.452695078 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.185692125 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.159895507 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.159357739 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.191090654 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.168122401 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.158557754 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.39908509 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.167227814 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.182367769 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.165388043 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.154209651 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.320247312 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.166606535 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.31479563 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.168509662 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.162039842 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.16051344 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.442778658 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.186331179 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.666775338 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.170648351 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.160803684 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.251946937 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.319668377 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.590456443 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.167338411 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.323305032 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.528998845 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.189938211 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.162524641 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.549081215 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.197146952 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.164480991 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.160007072 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.154532969 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.15884492 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.201256914 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.183629636 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.582267829 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.66545802 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.421089514 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.198689769 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.167743662 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.156202047 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.406803307 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.165918481 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.158992183 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.436458056 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.689567032 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.173217515 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.165353423 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.646412884 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.176612538 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.186457946 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.167170976 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.456214293 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.190934188 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.199023336 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.157949526 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.161671936 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.163946638 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.187570328 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.165646393 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.159472715 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.635630886 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.311701393 seconds)
  done (took 266.050455289 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.160338945 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.152556525 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.154915092 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.157535317 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.156075389 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.163595603 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.154408447 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.161358903 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.161248275 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.159683381 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.156205428 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.161852705 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.163363496 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.161929748 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.19794116 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.16226319 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.648820368 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.164664601 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.155508544 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.151854466 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.729305656 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.162930785 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.162561366 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.154985529 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.157344941 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.159788308 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.161098961 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.197916189 seconds)
  done (took 175.681787083 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.164291904 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.210170672 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.168960235 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.204251713 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.172016089 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.162077638 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.183231571 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.171890931 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.168026934 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.163448883 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.160284702 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.186327323 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.167139772 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.232905552 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.18681009 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.188083255 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.234756805 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.161741358 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.16540777 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.159605686 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.203381211 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.174362357 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.188424032 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.213394383 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.170817234 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.208014051 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.167865436 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.164811792 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.160762678 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.254152761 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.1759476 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.192894761 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.195834801 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.177329672 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.255261937 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.2479876 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.24266082 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.185190159 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.161366728 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.16461626 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.161139767 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.159486931 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.207992001 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.179249236 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.167845155 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.247932002 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.179612377 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.164179569 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.184796016 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.163572852 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.175500662 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.180797482 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.200197323 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.26250654 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.206018486 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.19332401 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.183753779 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.175305293 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.161345849 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.238707295 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.168517358 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.250650391 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.17976824 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.162235607 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.16553254 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.173703926 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.214288487 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.200296224 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.238692399 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.166020031 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.235979415 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.217746885 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.175957296 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.171103517 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.165399015 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.21374185 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.250823757 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.213619042 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.219905291 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.196265776 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.172415287 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.170184389 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.166405026 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.192949663 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.171697974 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.254777799 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.25374522 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.171149978 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.169251365 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.16540822 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.169428766 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.191714642 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.224240064 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.200161711 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.246229527 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.199661272 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.199281502 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.171289556 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.178278972 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.170508507 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.199056754 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.171483774 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.184705572 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.491038547 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.207415609 seconds)
  done (took 232.468613118 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.518120912 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.205950572 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.238938577 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.445744088 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.524869602 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.28773017 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.203027878 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.214984461 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.226649051 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.325856174 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.269940325 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.255436418 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.194753235 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.191266785 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.205343197 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.218337678 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.236159067 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.507900809 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.307515924 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.943741124 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.201597216 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.459114629 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.507654509 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.558392219 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.252763606 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.586133443 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.822450812 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.292656369 seconds)
  done (took 70.288701911 seconds)
done (took 916.403091322 seconds)
SAVING RESULT...
DONE!
