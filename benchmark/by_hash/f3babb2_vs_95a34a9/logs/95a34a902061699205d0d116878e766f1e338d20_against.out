cset: moving following pidspec: 1737716
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.772986883 seconds)
loading group "shootout"... done (took 1.07434924 seconds)
loading group "string"... done (took 0.653743378 seconds)
loading group "linalg"... done (took 8.489095905 seconds)
loading group "parallel"... done (took 0.162662307 seconds)
loading group "find"... done (took 2.976422023 seconds)
loading group "tuple"... done (took 2.05433075 seconds)
loading group "union"... done (took 14.227595216 seconds)
loading group "dates"... done (took 1.414118333 seconds)
loading group "micro"... done (took 0.210182319 seconds)
loading group "simd"... done (took 4.62173624 seconds)
loading group "io"... done (took 1.367441346 seconds)
loading group "random"... done (took 9.513436439 seconds)
loading group "problem"... done (took 1.595455756 seconds)
loading group "array"... done (took 24.90754934 seconds)
loading group "misc"... done (took 1.809312029 seconds)
loading group "scalar"... done (took 41.860390462 seconds)
loading group "sort"... done (took 3.258701827 seconds)
loading group "sparse"... done (took 12.98788658 seconds)
loading group "collection"... done (took 18.273668784 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.434684785 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113192089 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.160749801 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109158101 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.227034402 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123885995 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.12611893 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086783267 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.195663968 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139602202 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.133912408 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.41835326 seconds)
done (took 5.699988288 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.30535029 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.238997194 seconds)
    (2/2) benchmarking "String"...
    done (took 0.160707157 seconds)
  done (took 1.562397429 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.090794947 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057704083 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064279192 seconds)
  done (took 1.372652014 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.062620907 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138066039 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063495161 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.063907641 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.063763215 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063486679 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063209682 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063293678 seconds)
  done (took 1.681982317 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071326864 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.064914652 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.062809027 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064437917 seconds)
  done (took 1.421673849 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065299478 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.117570469 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.061854901 seconds)
    (4/4) benchmarking "different"...
    done (took 0.061716766 seconds)
  done (took 1.463516349 seconds)
done (took 9.047780278 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.156549685 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.757158527 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.844194162 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.143747585 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.307570262 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.339387338 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.118444283 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.198094806 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112087811 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074119563 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149129213 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078946498 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.477264226 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.470157029 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069906108 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.183544321 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.605675893 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.083454138 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.111400619 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.284439566 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.080503375 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.081699688 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086448285 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.0709802 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.126712787 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.175272481 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.615616893 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098041963 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067708558 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.191589488 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070388059 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073535632 seconds)
  done (took 10.494459873 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.113514734 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.109384416 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.065919594 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.099960588 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092765933 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067130124 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072408525 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06593015 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085055429 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128310081 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088705533 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.120511322 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065487317 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.066808299 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.096478981 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159289597 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081545922 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079739856 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065923549 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079072095 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.091701245 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077644747 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.075631167 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.075200048 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.109650069 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.130732634 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.088209424 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.105876134 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066044956 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077818362 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.092711092 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.105813839 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066513944 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064347036 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.106272335 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083317505 seconds)
  done (took 4.412843066 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.01816295 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.092916165 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.103718743 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098726754 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104225305 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092650967 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.144855503 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120005157 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097536362 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073023723 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.172908377 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.668578484 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.053545564 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070658905 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.144585524 seconds)
    (15/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.095801829 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356210061 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.895776697 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071373895 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0666461 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.095183494 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068361848 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.137454031 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066019306 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174485844 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.634544884 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.0717587 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.191854253 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095759969 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063558778 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.137783052 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091976742 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067728435 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.577273486 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065280327 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06249543 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.083156208 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091157396 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064479829 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.0655595 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075908632 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063473311 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.113848514 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078609303 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.542420468 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068186649 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.621257165 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.328152204 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071699734 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070028253 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100470876 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063140291 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069134099 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.625947548 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.147055917 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065933035 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.2830509 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069942029 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066899975 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06765839 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.09831367 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066115191 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067952817 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07135855 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.083046759 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.017345165 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.150791444 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.084295461 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067498829 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.416703429 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075735098 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068392441 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069394854 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.094368697 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.13402879 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066155869 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065788283 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109282112 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093110363 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089929507 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.207811282 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066117742 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065365397 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.531840921 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.949645598 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068573924 seconds)
    (86/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.106952566 seconds)
    (87/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.062259968 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065520369 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.503075344 seconds)
    (90/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063618432 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063425809 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064780449 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066273148 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.086452178 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065071929 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062005934 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062683876 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098318418 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067345743 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.542641533 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067780094 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.475273356 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.06893023 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096902975 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121525574 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06705777 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.10310177 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066157552 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063633336 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07194233 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064286454 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063150558 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067846352 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064276283 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065091475 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067287113 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066922741 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065707523 seconds)
  done (took 23.025686409 seconds)
done (took 40.109308588 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.394084252 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076199989 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076118418 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077238333 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076390809 seconds)
  done (took 1.905457555 seconds)
done (took 3.222399497 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.25241006 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076408758 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062263297 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.20413304 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.0866179 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.176404605 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.215848037 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.168235885 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088078972 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088203505 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.210471193 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.221844284 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.231002683 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.08926964 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.160912834 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.232157162 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091508187 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063901781 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.08862303 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.089905139 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089932808 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063781165 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088474623 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.091077677 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.160794788 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089142072 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062993878 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.16167652 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.090816138 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.166206342 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.09127846 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090306646 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091463597 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163835872 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.093018704 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.164188268 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063869166 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.091835633 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.091247806 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.093887671 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.091552018 seconds)
  done (took 6.339381073 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076453059 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079388561 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080593876 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059849015 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068750261 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.078864263 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.05971863 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078569444 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099353886 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079237336 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.078848468 seconds)
  done (took 2.145890953 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070263759 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079664395 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080741868 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.0593133 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070260607 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079645388 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.05957083 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079467405 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08220752 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.07988327 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079815756 seconds)
  done (took 2.067280414 seconds)
done (took 11.780044763 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.188938657 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.086559238 seconds)
  done (took 1.498636354 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.255256005 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.49068246 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.223197414 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.1196898 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.098042331 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.115327998 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.22503101 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.098131942 seconds)
  done (took 7.030226722 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.123978785 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065166846 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.064622945 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.065984693 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.065885233 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066237898 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067100652 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.065506116 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.066800686 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065063233 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067340797 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.066865329 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066023276 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065622384 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065758729 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065473068 seconds)
  done (took 2.473173372 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100003381 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.066732291 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.095517096 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059440302 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.0691946 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060978809 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070572944 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071252972 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067528643 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.06767354 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069167165 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067779967 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.068509296 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.068585357 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.069515064 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070155814 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.070874587 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.067651245 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.069929735 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071614219 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07093873 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072432945 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.072896895 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069594617 seconds)
  done (took 3.067322073 seconds)
done (took 15.313411894 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175667897 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072197574 seconds)
  done (took 1.484953122 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.092312421 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.089849926 seconds)
  done (took 1.442127075 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071815355 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.057937808 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.073392934 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.066656744 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.058796358 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059552995 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.073232307 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.058947893 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058634621 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058681016 seconds)
  done (took 1.896432162 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06279287 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.064889152 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.062764204 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061109589 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.063681518 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059432613 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.061897294 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060760846 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06553091 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.05872935 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062210654 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.079825668 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.061886093 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.080301654 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.061820767 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062490757 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064058083 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062306419 seconds)
  done (took 2.418742945 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061503318 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059227149 seconds)
  done (took 1.386278159 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063889042 seconds)
    (2/7) benchmarking "second"...
    done (took 0.058857962 seconds)
    (3/7) benchmarking "month"...
    done (took 0.060649109 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060319664 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.058843166 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058414514 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.058974639 seconds)
  done (took 1.680052252 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423221102 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.191476651 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.42323084 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067925852 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.080926422 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.265512631 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062769104 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066647494 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066684539 seconds)
  done (took 2.950328813 seconds)
done (took 14.528332118 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.0835048 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180458533 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.109171817 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.412807821 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077470286 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065083171 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093268093 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.206732025 seconds)
done (took 2.507883749 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.284363095 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.199945793 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.254002115 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.145628815 seconds)
  done (took 2.867787235 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.417479155 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.164908049 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074125174 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064891603 seconds)
  done (took 1.995931441 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065698596 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06986079 seconds)
  done (took 1.409564911 seconds)
done (took 7.84020773 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072691808 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.093388705 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.058617601 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.058671427 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.060489343 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061913084 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.060744096 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060074205 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.060701357 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.058870524 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.060883463 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.060849384 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060788276 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060667287 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060617284 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060811835 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.059989767 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.060426879 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060393755 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059416954 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061221156 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062716668 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06130069 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061533298 seconds)
  done (took 2.794711037 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079347773 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063162856 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063666352 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063627872 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064098309 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064013921 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.063917871 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.062918358 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064647173 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.0634351 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06451974 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064430907 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.062897691 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06449448 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062940453 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064487864 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064283169 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063339112 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062911875 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064464019 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.063995458 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063301752 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065134604 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064929974 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066414311 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065688985 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063949109 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064193478 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065000359 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065378707 seconds)
  done (took 3.224932141 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06683141 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057353391 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057563623 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067363875 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057139285 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057955592 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058876999 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057526959 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.057788768 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058573025 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058176145 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057506457 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058284703 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057460422 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057462295 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.057893116 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062536358 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077708167 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.057695844 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.057516683 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062183923 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.057811826 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058490013 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057955611 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058196982 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.057656586 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.057691487 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058429696 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058246458 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.058812556 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058320071 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062896047 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06437017 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058266754 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068474938 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063467654 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058221211 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064783661 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059224621 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059204487 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058495647 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058268799 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058372432 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058286197 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068739768 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058492336 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059373924 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.06156389 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058500877 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.05812114 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058421337 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060052692 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064102884 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059540082 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058286327 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060118224 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058856162 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059056544 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058462299 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058230749 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058287753 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062370938 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059617338 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.058899004 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079215892 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059565357 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068720997 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058379571 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.058876701 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062803875 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058821881 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077981771 seconds)
  done (took 5.641767943 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071994254 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068543714 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.075927197 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06696122 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061118078 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058358856 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061348788 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058361816 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067284377 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061782203 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059258254 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061883206 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067470319 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06193105 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05942831 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067323463 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062007018 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061097392 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058441239 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062271059 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059897114 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062097209 seconds)
  done (took 2.697723873 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.143192162 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06390272 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105427197 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067466165 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066023337 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067172862 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063951115 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06400991 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064049538 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064526869 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064377732 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064041863 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065863238 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065195608 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064958626 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064356155 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0641802 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064570548 seconds)
  done (took 2.573262116 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076886762 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.06351635 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.08958906 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.062923043 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063385631 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063292864 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067844869 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067301961 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06325728 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.063565886 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067087268 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063267364 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063300823 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063750987 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063260231 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064080961 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063484342 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064649786 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066986903 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066927959 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067241154 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069023737 seconds)
  done (took 2.754971119 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078285824 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062597071 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078189194 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063737163 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057720653 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058067545 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064395796 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.062968859 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064189618 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06263468 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064064264 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05859837 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06527435 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063116855 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065196973 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063078456 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062542165 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06290734 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0627469 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058082691 seconds)
  done (took 2.568747508 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.096934481 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061326521 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060561327 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064569021 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06036543 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060476896 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076338806 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060341376 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060635674 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084237047 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060507207 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060494514 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064871741 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063174731 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06050525 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064848312 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065811018 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065612914 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.060959959 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060875161 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0849061 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06146648 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066113666 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061222989 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061205999 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061151615 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061157963 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064000925 seconds)
  done (took 3.127450808 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065200145 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061361874 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061549898 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061220397 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061149748 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.0611162 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061283548 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064232286 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061113331 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06159014 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061245095 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061211995 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061211247 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061082587 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061304431 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062072065 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061889585 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061802143 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06169804 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061611462 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061316957 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061260511 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061251364 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061590376 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061847855 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061552129 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061841861 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062067029 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061846464 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062227823 seconds)
  done (took 3.154546733 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072965024 seconds)
    (2/2) benchmarking "in"...
    done (took 0.06850208 seconds)
  done (took 1.440873226 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062039987 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.074616362 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057040747 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.069889792 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.065530078 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063298634 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067400855 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066404688 seconds)
  done (took 1.817716818 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.091703586 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.113475772 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059209569 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.059706211 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.088735798 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126081829 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.100603326 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072140973 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073843482 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062616999 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.05992454 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.098855091 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059139338 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073148702 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060527943 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068753824 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067155305 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078053958 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073058236 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058219284 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073607184 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060812202 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059458723 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.060884139 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060426008 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067362743 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076423827 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072838877 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068835203 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057644719 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079127866 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058606304 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059858186 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068815162 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091130076 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.05996036 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.0971584 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059308806 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.063562243 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058528355 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071417578 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080308829 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073717233 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077424745 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06037016 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060660154 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058290135 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060559755 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063032871 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.06897233 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059271263 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067051953 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058175113 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060280819 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070092539 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059170703 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.063618761 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068570017 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073020882 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070005981 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071527054 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074910173 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068277489 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067327378 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060141449 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080516569 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060911363 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073000969 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074525059 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060144392 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072668561 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058478425 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.057968016 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058889041 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.093833959 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060842129 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060370185 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059546591 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.05922321 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060803674 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070317767 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065262423 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068458579 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063876514 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077242009 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070430824 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060521403 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068737489 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079629102 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064495788 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060841401 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078362346 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064575447 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06011364 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080647644 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071970758 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062881426 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061861495 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064686899 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075246264 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062537334 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060103937 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070813533 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063467001 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.247856701 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063405106 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067843426 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059368326 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069456735 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063523329 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059522783 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057067219 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062893753 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.058733959 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.056965174 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067760078 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.057939301 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072720614 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064979642 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072914644 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073472917 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068955846 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075440092 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058339904 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059812453 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076334128 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.06775976 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059077833 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076227107 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057400126 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.06881855 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057381476 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059131978 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.067695863 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057131042 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059454403 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.057806594 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063285609 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060061907 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059750067 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06414781 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067114624 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070354791 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059002765 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067374296 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058318828 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074101811 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.06856752 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063373845 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061314545 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059032379 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071156757 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066010849 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069979055 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059307796 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060053311 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059413548 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070315519 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069137324 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060705177 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067308325 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064067587 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059705681 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059281247 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060151584 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063071797 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062173421 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059762645 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067435333 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069123521 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07374559 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066158168 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068698179 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058249978 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058597813 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060478276 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058406939 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063846118 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068708194 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074929873 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.07097305 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.080741086 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059084527 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069325023 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061419454 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076916451 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073090042 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060186509 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063589948 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058136922 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060743402 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068904817 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070968116 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073564232 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074966829 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065151974 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065415502 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06012377 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07649594 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061716842 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069797413 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070567407 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066719099 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060901822 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062594656 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070292926 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065558725 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061421883 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077024589 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068259635 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06017151 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075742291 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060951726 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072356191 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06134582 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06553198 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067081933 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063429371 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071820634 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.235452162 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058185549 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059177164 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074475497 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059861446 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059563987 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.066830408 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074242311 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064072605 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066663351 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069064259 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068503361 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063106333 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068342643 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.058670093 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.06772386 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060545642 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.069868366 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.057946697 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076265415 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.056969988 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073528652 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.05826628 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070449312 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058958536 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067888445 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.058989579 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075559226 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059562303 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058693015 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.069996401 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.056884746 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067622199 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057456559 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063562557 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064950653 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.06768151 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059572991 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068209744 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060294034 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067796147 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063252139 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066611414 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067734945 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063058163 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057792557 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067298942 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070190341 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067526196 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060193226 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060156401 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059196671 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.068640041 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060145801 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061012698 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068168604 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064325844 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065479304 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060708133 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.060852685 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060585105 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06803625 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069035397 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08052278 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068305905 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067067326 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.0687523 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058546907 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075121287 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059998527 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067398796 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058101278 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.065925018 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068847368 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059196449 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078662721 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060493086 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067501493 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071907373 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068289935 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063205927 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077630355 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062167087 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068029139 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068679818 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064815318 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066594744 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061090046 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068287335 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.06927353 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070465918 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060483824 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067399699 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069084379 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061220924 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070223063 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062600979 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069640714 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062546001 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060599782 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066146567 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072889578 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066059861 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066334452 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061195369 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.05955401 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061066116 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069151591 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065919887 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070287139 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077051437 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059724688 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061978559 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06095723 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065919064 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082007937 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072315715 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.228969944 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064472104 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057792108 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059814783 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.05987502 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058503635 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.060939666 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057288066 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057612534 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06891606 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059699266 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063776524 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058487578 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.058929396 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068453197 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.061915161 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058645094 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065067068 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.057843312 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063696337 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.05713327 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059253708 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.062999741 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057437262 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062151481 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.068812009 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075117888 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066405321 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06777451 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059123953 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066423726 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073869563 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065114188 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059068906 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06772118 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057301239 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077086261 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.067894971 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067170089 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068196397 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059046652 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075542175 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064059917 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068496615 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073909259 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059789278 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066298572 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058472219 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075109779 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063874068 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05844639 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067528672 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067301575 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065085017 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07087918 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059498626 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067288728 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065103376 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063350577 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060882752 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060603087 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068587772 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.075725047 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.05999946 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064459726 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067602279 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068108106 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064159793 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071795918 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.0678851 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060339173 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060792433 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064047264 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060433317 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071673977 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060194123 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064109264 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06412024 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058712668 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066183466 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076001761 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069408872 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069152729 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058781282 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058441621 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077720374 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063527375 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063150489 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068914302 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070107145 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072197173 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069226411 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077059758 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060300435 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065947357 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072458844 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061553552 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060743811 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064900514 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062432322 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070674157 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071336927 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069813768 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063471287 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.0711871 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075014518 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062105945 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065854522 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06709446 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061931525 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072185725 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069699326 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070809108 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063176323 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061340442 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065597072 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071483852 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.22611194 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068517892 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059483679 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065298017 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072400098 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066374679 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060973223 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057580205 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060765465 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067713053 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.062805816 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057541159 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063153993 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062801708 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065426718 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.06795984 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.0631852 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05751128 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075274374 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066487345 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067563482 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059617691 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059797579 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058808999 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057688251 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069657347 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057611033 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059427257 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063383759 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060517076 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076688123 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067023872 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074326991 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058992616 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063096883 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.05770272 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068023309 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063066846 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058311059 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069067265 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057391961 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073929666 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070231155 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064078295 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.05894506 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065420954 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067658142 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074762796 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069125456 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068730678 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062124027 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069080118 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060623923 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070316794 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058677469 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057883218 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069328245 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068035819 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071780519 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059179273 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070863449 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061268135 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068087939 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067876832 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060926125 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060743772 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061070665 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069185151 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06416832 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068859525 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064322614 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076650727 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06029023 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070663235 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069084255 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071554341 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073819155 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071998598 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067876206 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059976111 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067226911 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067823364 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060493842 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064746365 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062541181 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081768548 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061137625 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060793961 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074204056 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067745131 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060276633 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067250567 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06489605 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070686112 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061116478 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072023418 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06684363 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061929643 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066172279 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066271654 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060269071 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060278017 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060708028 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071080297 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065580111 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062069584 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081550362 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062763711 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070332713 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073041516 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069020737 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063413834 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060835309 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063142473 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.230829808 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075225563 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062447517 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068598546 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060393685 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068089592 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057264737 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067456941 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066617409 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067122805 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057604784 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05837655 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073594288 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073948068 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063339983 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074351743 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067533832 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059365782 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080518754 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068280316 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059201886 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069322874 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060036272 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057541894 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057370922 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059527363 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.069846363 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.057785971 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06015978 seconds)
  done (took 41.50197536 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.101891825 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059347213 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060672806 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.057764413 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064874421 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059289673 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058124479 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059232969 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059234927 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060215574 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058116395 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058061738 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063328183 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072880536 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065939615 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062550708 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058382227 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059357337 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.05820753 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059218022 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064285772 seconds)
  done (took 2.714338426 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064553304 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061838527 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06131047 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061610878 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062025648 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058654228 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061739978 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058306708 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062072418 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058618271 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061992821 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058309384 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058761236 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058698002 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058748279 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059930395 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062087562 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061271199 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.05832109 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061597976 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060130463 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062851692 seconds)
  done (took 2.710486216 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06269794 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.058874568 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067320817 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057437842 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057320886 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.060479834 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.05768282 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.062867134 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063128228 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06382025 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067696653 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.058845578 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057706538 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064244404 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057552064 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.058769606 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101872224 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059203896 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.05921076 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.057845954 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060626011 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067802567 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.057846273 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058144874 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063776769 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062367502 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058580559 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061210879 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059207849 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063923444 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059617746 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058079922 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068147725 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067361541 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063360097 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063589826 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060277933 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059508335 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058424248 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058345699 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067803714 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.06050057 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058755709 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059815049 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067907612 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.05831538 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058003908 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068000134 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058021528 seconds)
  done (took 4.422038863 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07283874 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108865306 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064114735 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090057206 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.069874791 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063160939 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.063993652 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09096129 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059083217 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059489101 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.070722644 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.070695851 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060482052 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062236787 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066050432 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.060651931 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061372351 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060354241 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063205599 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060595999 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063442367 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06544395 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070327204 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.070964533 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.061725425 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060219441 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060414862 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062059659 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.070357393 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064440349 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062559895 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062782727 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.070944055 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066051789 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060546421 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06064523 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.071825256 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061642214 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061401289 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059935795 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.060939881 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062390733 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066004704 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072318008 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061873003 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067397413 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06168199 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059710603 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.07163927 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061227939 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.064684851 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072174636 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062176943 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064301948 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062562712 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071219234 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061278627 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060193601 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061420683 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.070975735 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060590096 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062363816 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072212249 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061099865 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064454892 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072293904 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066664029 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062470926 seconds)
  done (took 5.996144281 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070821994 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093894574 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072211416 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072289499 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068265297 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068340004 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068173402 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068190306 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068047405 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07076858 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068275859 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.130534092 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.06537461 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.069653385 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069479949 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069037356 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069119008 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068960301 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.068926343 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068872909 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.06880291 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073235597 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.068761647 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07329594 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07314719 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065696312 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069139275 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068704683 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074295409 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069267685 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073397432 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.068917676 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.068835251 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073530909 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073239095 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069121077 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059923051 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06917043 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069248911 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069155336 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065897552 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074072253 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069409479 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067134261 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069564517 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069275563 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074794734 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073813421 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070824698 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072008784 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.06933969 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074298045 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069208884 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069377422 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074117183 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076903906 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074337277 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075134735 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069729091 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074448774 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074376117 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077899371 seconds)
  done (took 5.879681486 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075161129 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063485393 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076774718 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058753019 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058147744 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06735797 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058010573 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058014696 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063857141 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.063712308 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065109043 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067165137 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068921885 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065300393 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067245526 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068892138 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067120009 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067183869 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065502616 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068342225 seconds)
  done (took 2.73749799 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063138777 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.062922056 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058405574 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073606266 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058473956 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066068188 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.058794757 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059236184 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.05979763 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059119623 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063261225 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063144573 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058830348 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066470123 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062008189 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066089015 seconds)
  done (took 2.39692771 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064212171 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.0665598 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092168543 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059691352 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061261486 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.058724959 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.05946339 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058434084 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060480624 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072109025 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059464851 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061239153 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059306041 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058530622 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058641325 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061234069 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060361598 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060361604 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059640259 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.092536405 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.067781366 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060267494 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.061809944 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060393967 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061384567 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067635978 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061063576 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061457909 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059655729 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.061755858 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061379986 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.0703664 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061930296 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064467478 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059172348 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059595724 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059926761 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06194116 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.061956843 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.05979748 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058730146 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061482528 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.059870482 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060269601 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061653895 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06188915 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061149146 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070177996 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060178518 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062879404 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060516388 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061796064 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060896831 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.07134544 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062402289 seconds)
  done (took 4.862118119 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078874756 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063665509 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057791179 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058499576 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06335699 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.063945143 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063726659 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.063729118 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064089211 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.057981578 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06410811 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063107561 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064094248 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063700859 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063975686 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063722908 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057878987 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063841513 seconds)
  done (took 2.56258821 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068146294 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063141271 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063442251 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059547531 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.0597253 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063964139 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058259249 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059425451 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059388606 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.059801298 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060370774 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060358436 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05982127 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059681611 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063446255 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059901379 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059466709 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058445229 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.059791337 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058108413 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063852828 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058709287 seconds)
  done (took 2.743243823 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.116617336 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.081830596 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.155995007 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078285215 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088321609 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069964405 seconds)
  done (took 1.99782239 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094713794 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.09521613 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063244814 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063112131 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067197926 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066017116 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065840341 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065910837 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06882051 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071404627 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066012418 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06918202 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069159227 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071304354 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067595561 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067511446 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065988551 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066341517 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063782372 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074047425 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066622291 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069703629 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066711996 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066392586 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066389192 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071275492 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069675119 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073328428 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067143194 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070003986 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068252146 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066732142 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069956517 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072392629 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064070197 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069785672 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066718521 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074132981 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068716287 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072016819 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064311737 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069174853 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071187855 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070329774 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070605196 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067269983 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069901482 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067006891 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067263882 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078391817 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069007818 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071926975 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0688162 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070526314 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070205783 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078548071 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074343891 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07238552 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069159646 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073291526 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072385056 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06921333 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072223005 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073471281 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069289061 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072711954 seconds)
  done (took 6.043167691 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104201925 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063967438 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069092009 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071225363 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070547754 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066118803 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066256301 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066322352 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066081253 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.063961478 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101167108 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067622561 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071190818 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070827494 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066494986 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066167328 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066173139 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071220607 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064479071 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0777104 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066800104 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071359733 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071285418 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071310344 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072442364 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068915706 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0676913 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066968382 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066875333 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066789176 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069656104 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066943173 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071565649 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064334497 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071381502 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066942745 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066775779 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069699596 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067146412 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069044956 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073172685 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075290119 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067401718 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067176359 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073125146 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067209704 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067162803 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0647831 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067183666 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064877349 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072932549 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073144936 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07302892 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072092526 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067902595 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068493431 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067526802 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06740527 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067507651 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069075083 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072160231 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067538214 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078920215 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067735434 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067675433 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072583415 seconds)
  done (took 6.062817706 seconds)
done (took 125.698419469 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.259432879 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.222934458 seconds)
  done (took 1.881030182 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074448926 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.266601387 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075439284 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072432932 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132749514 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.131481365 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.105627706 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069819862 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.071826985 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069417681 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168866709 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.106110218 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069991489 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070110196 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.093780436 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069704702 seconds)
  done (took 3.073369764 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.120814468 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.206741732 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080023193 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068321113 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150499536 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075854509 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071718891 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075109386 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074837409 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068678056 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.116253975 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082224355 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073062372 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07415737 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070960554 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074202751 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074301651 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075140728 seconds)
  done (took 3.057987033 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103661015 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.111633166 seconds)
  done (took 1.644563271 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159662158 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106873862 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144594945 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.615791605 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137969159 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.14052667 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.144417651 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.139689031 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.113125403 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.137756537 seconds)
  done (took 3.265198576 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106266142 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102133689 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.304740891 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100940952 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079627125 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074543476 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072266515 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077182455 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072562269 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074146149 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.12001068 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072694692 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070058615 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122506286 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097359806 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104234616 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068784401 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076126828 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077884144 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068688174 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073564562 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077878564 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175954868 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076768874 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.09970071 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073472325 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074955449 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072287914 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072125432 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075906874 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076554059 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099210229 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076410632 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082574861 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074340747 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.095109493 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069903373 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098701182 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072893103 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070680355 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07289247 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076653653 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.07040291 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078832501 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073108896 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075468162 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078338047 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069183615 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07336735 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072774606 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071665896 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074837078 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074205657 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075165033 seconds)
  done (took 6.104533768 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.122252599 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109066228 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067875213 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117455507 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108673983 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067848036 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123126809 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103857017 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.1211432 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06739282 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067377324 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066625585 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074069365 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.077983348 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.1203004 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112482211 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06964689 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06802019 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.11172864 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112175294 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066949145 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.1240806 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.114751906 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111412732 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067528753 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068233784 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066653226 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067103585 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074873178 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074709284 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066937945 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077089413 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079327288 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074149439 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066283949 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066608134 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06638823 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07498001 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077413223 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076349313 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073515852 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066311129 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066661261 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066991248 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067574842 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066147707 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076216337 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075369045 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.076588547 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068929939 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068352719 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067083022 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069213273 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074587544 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07346172 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074911214 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077498332 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068030204 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067288957 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06871646 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078336116 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075648893 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075222199 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068272581 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076327588 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067827075 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078347868 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080322601 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067272417 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067928574 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067200568 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067220514 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067625609 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07381967 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074095424 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068021968 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068431845 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067506081 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076808944 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07650585 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069221759 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078330759 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068394023 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068885745 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069127966 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070027233 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.079571183 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077298023 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069539928 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069858969 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069855071 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069856565 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069061363 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.080933253 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.228997253 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074233896 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075131851 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066800031 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075345708 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074083527 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066840038 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072436525 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066186248 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066363858 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066318648 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073358598 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072530753 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073908908 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066089413 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065851725 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073576498 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075555143 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066149909 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.071748505 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074878624 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.072598827 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.06575798 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075499402 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066298912 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07552008 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067032703 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074451727 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066384297 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072643725 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066242183 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065606002 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066096353 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075225381 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068180187 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06699139 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066295987 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066106953 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072359714 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076167921 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067667932 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073430228 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073540407 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067290648 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075730237 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06780605 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075673273 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067018633 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067356748 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06630689 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07792626 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066991282 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068739264 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070401831 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077213955 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067716858 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076156529 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073522165 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06674824 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076799371 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075886361 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073554837 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076622305 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067910072 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06722104 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066909985 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067274186 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076241687 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078643245 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068932818 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067497532 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073223474 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.076609729 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066900588 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07382533 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073608503 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073976815 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067534787 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067385989 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077304416 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078731914 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075046391 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.079839751 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077300556 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068837364 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075923616 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079213851 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06878865 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082242846 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06887243 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07969774 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079738439 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076696988 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081103364 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.082653134 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.232231458 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07491759 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076803163 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065939417 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066057932 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072158405 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.065966006 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065982222 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071629027 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06635419 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06804706 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079301014 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067651003 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075036238 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065731702 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072741488 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065560485 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066404394 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077182559 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06620356 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066508811 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073991988 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066968267 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072003584 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07503451 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072273347 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066955647 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066699116 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075397114 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075178718 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065970386 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065837504 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066465016 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074278743 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073614414 seconds)
  done (took 18.380089501 seconds)
done (took 38.855669492 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169460563 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.111752442 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.223348931 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.202446026 seconds)
  done (took 2.226808386 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100650079 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062962881 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.10600506 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.114478556 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06321125 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.100805842 seconds)
  done (took 2.013330913 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200701524 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175843491 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.248856383 seconds)
  done (took 2.088022049 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366026607 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.14895708 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.25619761 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.513891846 seconds)
  done (took 2.851527483 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.134165107 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.13139972 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075093152 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.143556567 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.081673049 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.059890616 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.143243444 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067068168 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096213979 seconds)
  done (took 2.460880114 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139273282 seconds)
done (took 13.242456713 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.367028719 seconds)
    (2/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.318230913 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.121231866 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.179044928 seconds)
    (5/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.323607019 seconds)
    (6/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.228738383 seconds)
    (7/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.261061629 seconds)
    (8/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.225911952 seconds)
    (9/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.107214712 seconds)
    (10/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.230009891 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.118381189 seconds)
    (12/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.127584482 seconds)
    (13/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.203582713 seconds)
    (14/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.261546063 seconds)
    (15/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.071828705 seconds)
    (16/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.171982812 seconds)
    (17/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.075472946 seconds)
    (18/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071957265 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074264894 seconds)
    (20/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.205335877 seconds)
    (21/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.205245837 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090824658 seconds)
    (23/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.230580646 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076438751 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.15190071 seconds)
    (26/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074331017 seconds)
    (27/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.291664555 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077613583 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089822297 seconds)
    (30/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.240361686 seconds)
    (31/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072095189 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.128859947 seconds)
    (33/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.145659456 seconds)
    (34/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.232087689 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074589491 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064570862 seconds)
    (37/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.124242894 seconds)
    (38/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.07136756 seconds)
    (39/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071611846 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.242591617 seconds)
    (41/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.169462352 seconds)
    (42/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.078265992 seconds)
    (43/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.148498443 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085164286 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.085321264 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077853816 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087896511 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06445253 seconds)
    (49/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.204998798 seconds)
    (50/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065423044 seconds)
    (51/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.244752406 seconds)
    (52/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.232848212 seconds)
    (53/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077330169 seconds)
    (54/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.131813943 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.186647825 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079050823 seconds)
    (57/341) benchmarking ("sort", Int8, false)...
    done (took 0.152046442 seconds)
    (58/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.215102817 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.253644468 seconds)
    (60/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.233574002 seconds)
    (61/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.316065546 seconds)
    (62/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.176097071 seconds)
    (63/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.221531688 seconds)
    (64/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072952068 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.073663774 seconds)
    (66/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064915215 seconds)
    (67/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.104681978 seconds)
    (68/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072063312 seconds)
    (69/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.07215168 seconds)
    (70/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.13994385 seconds)
    (71/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.171830843 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.209223678 seconds)
    (73/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.142178233 seconds)
    (74/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.081823552 seconds)
    (75/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.143366474 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.078303556 seconds)
    (77/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.28442703 seconds)
    (78/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.080630131 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06598255 seconds)
    (80/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.061899079 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.085739994 seconds)
    (82/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064065656 seconds)
    (83/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.082303274 seconds)
    (84/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.091827452 seconds)
    (85/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.081018123 seconds)
    (86/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071995717 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071610506 seconds)
    (88/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064370719 seconds)
    (89/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066961694 seconds)
    (90/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.192159956 seconds)
    (91/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.066035431 seconds)
    (92/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07127459 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.085581792 seconds)
    (94/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.127517236 seconds)
    (95/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.108564185 seconds)
    (96/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068756111 seconds)
    (97/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091218572 seconds)
    (98/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.064270629 seconds)
    (99/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064898347 seconds)
    (100/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.071868119 seconds)
    (101/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.064505345 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063491441 seconds)
    (103/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071911395 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.063524058 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063877912 seconds)
    (106/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.214863686 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.185960784 seconds)
    (108/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.19617617 seconds)
    (109/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077307054 seconds)
    (110/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065238736 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.09289723 seconds)
    (112/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068987688 seconds)
    (113/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064939778 seconds)
    (114/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.171565531 seconds)
    (115/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.084387182 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071700558 seconds)
    (117/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067568124 seconds)
    (118/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.198374428 seconds)
    (119/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067966411 seconds)
    (120/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.064281528 seconds)
    (121/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078197999 seconds)
    (122/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.064827025 seconds)
    (123/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065138085 seconds)
    (124/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.06591957 seconds)
    (125/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066798012 seconds)
    (126/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064806894 seconds)
    (127/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065253811 seconds)
    (128/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.148941361 seconds)
    (129/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.273321155 seconds)
    (130/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.207655636 seconds)
    (131/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072641078 seconds)
    (132/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067319208 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089868242 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.082853836 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069290318 seconds)
    (136/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.175239072 seconds)
    (137/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066624443 seconds)
    (138/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.144129308 seconds)
    (139/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077829811 seconds)
    (140/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065032131 seconds)
    (141/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.06490024 seconds)
    (142/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071336377 seconds)
    (143/341) benchmarking ("sort", Float64, false)...
    done (took 0.137220772 seconds)
    (144/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.084311836 seconds)
    (145/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072403371 seconds)
    (146/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073934067 seconds)
    (147/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.07202063 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094389087 seconds)
    (149/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.190925796 seconds)
    (150/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068908761 seconds)
    (151/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.081842825 seconds)
    (152/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068167151 seconds)
    (153/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070916529 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.147045281 seconds)
    (155/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066964031 seconds)
    (156/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074553006 seconds)
    (157/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.25621945 seconds)
    (158/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.076103792 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.081756797 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091326962 seconds)
    (161/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065035591 seconds)
    (162/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153454659 seconds)
    (163/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064246452 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073068949 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 0.144033235 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092012038 seconds)
    (167/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077127768 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064051179 seconds)
    (169/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.200728845 seconds)
    (170/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091749193 seconds)
    (171/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.062761497 seconds)
    (172/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071765151 seconds)
    (173/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070376377 seconds)
    (174/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067754576 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070502012 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072665221 seconds)
    (177/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.184634747 seconds)
    (178/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.184528645 seconds)
    (179/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065681651 seconds)
    (180/341) benchmarking ("sort", Int64, false)...
    done (took 0.065930043 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08626947 seconds)
    (182/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.138919465 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064113601 seconds)
    (184/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077718347 seconds)
    (185/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.067768926 seconds)
    (186/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067368846 seconds)
    (187/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063161826 seconds)
    (188/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.083458683 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.107222451 seconds)
    (190/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.063899656 seconds)
    (191/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.147203984 seconds)
    (192/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.065055903 seconds)
    (193/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.207040062 seconds)
    (194/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06364665 seconds)
    (195/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.081809297 seconds)
    (196/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.063540179 seconds)
    (197/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.063879216 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.078736468 seconds)
    (199/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067740321 seconds)
    (200/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095293793 seconds)
    (201/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072936649 seconds)
    (202/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.071769652 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065091961 seconds)
    (204/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074264286 seconds)
    (205/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062465154 seconds)
    (206/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064561512 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.079428414 seconds)
    (208/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.064543138 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.155213971 seconds)
    (210/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064299859 seconds)
    (211/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064664387 seconds)
    (212/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.06610155 seconds)
    (213/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075572198 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06517789 seconds)
    (215/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.066392691 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155673217 seconds)
    (217/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085982843 seconds)
    (218/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.063085271 seconds)
    (219/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071774574 seconds)
    (220/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089183155 seconds)
    (221/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150438358 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071698574 seconds)
    (223/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062385532 seconds)
    (224/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072126133 seconds)
    (225/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.064209867 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071964071 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146546054 seconds)
    (228/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151212699 seconds)
    (229/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065560347 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071206788 seconds)
    (231/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064375006 seconds)
    (232/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064473346 seconds)
    (233/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.209739486 seconds)
    (234/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064969014 seconds)
    (235/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.172326384 seconds)
    (236/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067491087 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.06790918 seconds)
    (238/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065419138 seconds)
    (239/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.210186436 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085063267 seconds)
    (241/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080081732 seconds)
    (242/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065033881 seconds)
    (243/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180854351 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.186089454 seconds)
    (245/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066233875 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065752223 seconds)
    (247/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064026202 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076971248 seconds)
    (249/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075365303 seconds)
    (250/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065409403 seconds)
    (251/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064995876 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121253032 seconds)
    (253/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065141444 seconds)
    (254/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.072121788 seconds)
    (255/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065964337 seconds)
    (256/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072044951 seconds)
    (257/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066210995 seconds)
    (258/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06487128 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073740626 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071540493 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.203346747 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.068071268 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06524075 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066955766 seconds)
    (265/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074171602 seconds)
    (266/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.254632987 seconds)
    (267/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.06940759 seconds)
    (268/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076147673 seconds)
    (269/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.084972111 seconds)
    (270/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066206377 seconds)
    (271/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069121566 seconds)
    (272/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.064601393 seconds)
    (273/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064472755 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085742246 seconds)
    (275/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.158658946 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120263379 seconds)
    (277/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07020194 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06388904 seconds)
    (279/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064314183 seconds)
    (280/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064122266 seconds)
    (281/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063699663 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064304831 seconds)
    (283/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.065051671 seconds)
    (284/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06438939 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061911409 seconds)
    (286/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.063731754 seconds)
    (287/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.11168098 seconds)
    (288/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.136742066 seconds)
    (289/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063781622 seconds)
    (290/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.068111062 seconds)
    (291/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063820094 seconds)
    (292/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.211418836 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.160327173 seconds)
    (294/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.189555569 seconds)
    (295/341) benchmarking ("sort", Float32, false)...
    done (took 0.136149676 seconds)
    (296/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.071818709 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.063782895 seconds)
    (298/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.063626476 seconds)
    (299/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.074891626 seconds)
    (300/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.066087652 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.12927633 seconds)
    (302/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.140137807 seconds)
    (303/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065967513 seconds)
    (304/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066218018 seconds)
    (305/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.206453763 seconds)
    (306/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064599691 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.128499476 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.09406222 seconds)
    (309/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064347933 seconds)
    (310/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064089967 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064070373 seconds)
    (312/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065642496 seconds)
    (313/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266906984 seconds)
    (314/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066713803 seconds)
    (315/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06485143 seconds)
    (316/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.066428142 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08364496 seconds)
    (318/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.064304398 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.063917529 seconds)
    (320/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.06295853 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.075915985 seconds)
    (322/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.064132705 seconds)
    (323/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072282304 seconds)
    (324/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.068958832 seconds)
    (325/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065961769 seconds)
    (326/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065304077 seconds)
    (327/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064004468 seconds)
    (328/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.226300414 seconds)
    (329/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065829304 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.245755197 seconds)
    (331/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.206430032 seconds)
    (332/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065653265 seconds)
    (333/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065244389 seconds)
    (334/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.065033243 seconds)
    (335/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064404865 seconds)
    (336/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067271236 seconds)
    (337/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.076172071 seconds)
    (338/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.06864181 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.189176013 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146459856 seconds)
    (341/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065126178 seconds)
  done (took 38.453793669 seconds)
done (took 39.943841227 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.122975579 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077486929 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075120959 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072115834 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075760771 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075959698 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076269299 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074413415 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078034668 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074680231 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.105227354 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.062876212 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070399223 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079497345 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.071852638 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078271943 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07798737 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.077938715 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.063820586 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078514542 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089767173 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076555785 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072500504 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078227135 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064184831 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072327804 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.118531999 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083403064 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.06856693 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07328395 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071109576 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.079592165 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072064203 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071654694 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073528293 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.068996516 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073864229 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070210994 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.119050224 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.068949895 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064211161 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076090429 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070589032 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071563924 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072162274 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075934682 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07034054 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079469336 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063591109 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074942504 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119118265 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069407985 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068520165 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072062162 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068958975 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073110995 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068504331 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075101044 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068796806 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076284301 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073596756 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071809936 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06369687 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07236401 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070851105 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071139913 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062652947 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069131966 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063555205 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063698973 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063138219 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07270547 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070701549 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069247939 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064304472 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064147113 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063361115 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075663634 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071052723 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072952436 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064431219 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069472722 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068885327 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064636499 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069628298 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075522045 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063370652 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064592554 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064230038 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079316307 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070738962 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064230692 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076207362 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069945888 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069853295 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064320175 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063753373 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070054116 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072530902 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064638483 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063392029 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070042972 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069412436 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074397385 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065764679 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070999008 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071031066 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064426209 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074331992 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072515325 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074522273 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07842367 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075033926 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080147984 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067035494 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065230078 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07671797 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.229262946 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069849999 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071287234 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068403332 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071112436 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063604786 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062352166 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068503161 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068827905 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063320294 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063383975 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063281864 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072696044 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070699657 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061975226 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063752564 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071765486 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07149304 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062287123 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062221548 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071489331 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063505018 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068672169 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.067948229 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071478165 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062494361 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06316681 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062979865 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062900122 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062329075 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068244587 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068598546 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063564443 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071520972 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.07016913 seconds)
done (took 12.684249488 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067926899 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106540891 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.113663737 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109018179 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077878357 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065316071 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067765937 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083540722 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067323538 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08899838 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089131267 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085473774 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.127189602 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062763272 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064222425 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064775104 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063256391 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076636378 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.112337463 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088168823 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.10626271 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064048872 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080041278 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08439997 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077082425 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083366519 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065923739 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065190647 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067602113 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082560849 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090258922 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064360682 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065347753 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083299999 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080423384 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073000779 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065204132 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071123592 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065099018 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064128313 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066221109 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082804985 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072177861 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072379032 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065496532 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065372652 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064560454 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071990161 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078312017 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070438733 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076904673 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.080791419 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06596099 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064338127 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062591626 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072122158 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064553517 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066029711 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065159656 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064560306 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064991552 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06728729 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069786674 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.07496905 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068525794 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071812832 seconds)
  done (took 6.528450318 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083111637 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092195042 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.077944053 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078112858 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063515645 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064599781 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.06445333 seconds)
  done (took 2.130321612 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068188418 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.103646978 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.109872185 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.11074327 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.119835106 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.108704632 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065630711 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097705096 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063980751 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.105200346 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.117982726 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.112423596 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067537869 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076537077 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064946281 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.112754286 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065551871 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071990766 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.109880432 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.114630869 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069395034 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094979788 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078367993 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065631816 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.113669998 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.105678109 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067470063 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065609784 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067256387 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064693546 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065661641 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088231571 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.105556534 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079622686 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065487699 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064050581 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.103776188 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065839192 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.102619415 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07209489 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.102389039 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066936799 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067958012 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065080703 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065847878 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.107263913 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065899677 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064549644 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064305108 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.106659124 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064409218 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.105405477 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067177549 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069733771 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071831275 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072402732 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073135401 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065552564 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.10823851 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07495489 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066834484 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.117709416 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.116628069 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.104551321 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.116728719 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074541224 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109389362 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.105252688 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065399595 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065257692 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065942712 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.118074245 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.068939127 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068084749 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.07060165 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073142502 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.111680456 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.123396789 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.125188785 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081377997 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069801786 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067051358 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.238664263 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.118749758 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069373324 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064323237 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065093639 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063702427 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069901919 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066554344 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069147418 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064083697 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074175687 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066673676 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066082374 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.11033805 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06432205 seconds)
  done (took 9.86020837 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069686206 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066838461 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06535236 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065279241 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065549588 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065127528 seconds)
  done (took 2.021246266 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092233566 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065344164 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076814442 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067854172 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086993634 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.106928636 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.106198906 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066745468 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081119919 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077334785 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.107729193 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.108575484 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.10858312 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066737371 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.106373577 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066352593 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.107415525 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069072147 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076416493 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067251927 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079739184 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067702961 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067374863 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.115542645 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068232911 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066690275 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.073972801 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076914865 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076379752 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067172518 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066828186 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068011039 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074782834 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067230779 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110510346 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075168941 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066155857 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070542284 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067638684 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068013739 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.111475204 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067370643 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069761946 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070352071 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067041878 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074777169 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070273592 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070660878 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.10953079 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070392161 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070246296 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066225127 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06775812 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070266216 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074332355 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066850283 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070279815 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.109119776 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.0670544 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074951298 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06677445 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.06881075 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067310494 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067898335 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071229686 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070732643 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075218741 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067571142 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067529733 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066320659 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070883629 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066220915 seconds)
  done (took 7.150747861 seconds)
done (took 29.273454945 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.546669217 seconds)
  done (took 2.129180319 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.954977529 seconds)
  done (took 2.583679939 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.195432904 seconds)
  done (took 11.828765041 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.389857164 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.477492349 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.756215409 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.138562105 seconds)
  done (took 3.415250946 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.872098476 seconds)
  done (took 2.504513829 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238587835 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225479369 seconds)
  done (took 2.116089228 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.42061687 seconds)
  done (took 2.041078095 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.212064681 seconds)
  done (took 2.838616647 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.234214897 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160533099 seconds)
  done (took 2.027999176 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.626218106 seconds)
  done (took 2.251546352 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.735719323 seconds)
  done (took 6.364990995 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.324646207 seconds)
  done (took 2.007620143 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.241156933 seconds)
  done (took 1.878039458 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.597332717 seconds)
  done (took 4.221659383 seconds)
done (took 49.855633852 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085922299 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.085000518 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083757477 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078940609 seconds)
  done (took 1.935128022 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.0752017 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068629066 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071981437 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071521868 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068705021 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070215338 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071038254 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067426749 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068770167 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067858255 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066322742 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.06784475 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070353941 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067382177 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07000976 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071369628 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.06898479 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068631341 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069860816 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067485393 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070522542 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067744132 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.065693519 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067243192 seconds)
  done (took 3.286921582 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079075018 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069754159 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.0727534 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068362257 seconds)
  done (took 1.928100496 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077263732 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074008916 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082282938 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.086955268 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073284145 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074211918 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.080980846 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081319984 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063197563 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.083924946 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06549929 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064616986 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065716785 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08331276 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.0807188 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.059791063 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061167539 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074730891 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073891512 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076707967 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.065998353 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063221713 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073598014 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074577839 seconds)
  done (took 3.395461657 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082759655 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063572279 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.085007175 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088234314 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089457018 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063270839 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078585183 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090513743 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126090481 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063721601 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072315554 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063283938 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102577366 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063357064 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078561512 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.107755333 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.110666183 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067306422 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097462472 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063882634 seconds)
  done (took 3.301392273 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07818515 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06828225 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068900462 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063992278 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074274564 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070284242 seconds)
  done (took 2.096447373 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069022229 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066146748 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06595008 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069941384 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065602577 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065598539 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064780836 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063947644 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063970057 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064551954 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064555368 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.06500174 seconds)
  done (took 2.428485512 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.214523755 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070556125 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068149555 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063716008 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065354144 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064580298 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078290084 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066816865 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08299109 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064949975 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064830639 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067040915 seconds)
  done (took 2.617943033 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106002799 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108859748 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140792703 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112788404 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113715767 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093009228 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.161631153 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.091813512 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.15830494 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136516124 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115530794 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092581302 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085464474 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068012728 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098137444 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118374437 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137269213 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071155497 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11251326 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.211650419 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130938068 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.13339461 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145813283 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115134349 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090489083 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145566278 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096174817 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100725701 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123522805 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125754651 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11705839 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096497952 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070122981 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069114596 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148884283 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108926222 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122823261 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.091874852 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105262502 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08783678 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10814879 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068864461 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083007465 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111952596 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085330179 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134344891 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093144635 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116438746 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082240005 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.312443719 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124399837 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132465794 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084348673 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102915587 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133349229 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108280369 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130332462 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103064528 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079416513 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115183563 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102767567 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096929466 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105917088 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077380399 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.172606208 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086285035 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108538109 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10839876 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092449893 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09321308 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103689342 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134806862 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125813371 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.125665611 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138700671 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094680046 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118992406 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.099729096 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.12744041 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103562698 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072475322 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121604121 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128585499 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098844101 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101867255 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13191839 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092173205 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077087726 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.10078029 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120313538 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080277799 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.114171587 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079998062 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.110507178 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138921812 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099759576 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113225776 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12337838 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080529278 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.323915493 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10610061 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070600194 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113276698 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108699478 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151437553 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091764613 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074810276 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097955949 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099490152 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149346603 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103942375 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077362914 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105816743 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135462051 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090892341 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.208833379 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093027062 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139355503 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107344656 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084536747 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072591835 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087973712 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111625036 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106189126 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111322159 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093683359 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.082934936 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085380988 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113655516 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092536591 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079393974 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11283997 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098139639 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073267461 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086780232 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075970982 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141698892 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077220982 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136620656 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125241803 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076148826 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107651075 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098303761 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10917556 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097798823 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120680236 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143090854 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.115645867 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091013205 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.095523666 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110036625 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.152011394 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134358411 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.270107679 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075649405 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098473383 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109337789 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09483517 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122999278 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093045359 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103619149 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10041987 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137229476 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139198395 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09515183 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097803975 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103689335 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118145927 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074277285 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152019196 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101941214 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116393102 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082064781 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137031099 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.109316959 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086903592 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084997989 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098216531 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.102711146 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10625057 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143741614 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094898046 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071346016 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091559931 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143086345 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075988876 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10858205 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090094877 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091350661 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118248631 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094913844 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080254372 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067118421 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127429681 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159380272 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069379129 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11498335 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109528327 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103946002 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.12433831 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.06940076 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1219243 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144487886 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122309512 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151325938 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.341704912 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116688955 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11581294 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.109888357 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102556307 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079942127 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.12188909 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.130897492 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092370286 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088514075 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132250968 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116216428 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.131843894 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.112991174 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115272352 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101592176 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105337314 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099473685 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102391322 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142499226 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120715571 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122906978 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084608456 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104610208 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118685718 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135496246 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080873146 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141868237 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084751814 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119262805 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.076823612 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122762865 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076504496 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.107440632 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078095576 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09999702 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068529203 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073100876 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144845363 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113832817 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107998211 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101424453 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139916018 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138662278 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078892403 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108498228 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118058126 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103419752 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120394584 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111722799 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092417787 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.273219497 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10699446 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083114783 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.078782343 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113338086 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091035969 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12104423 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081490508 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072265934 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134952093 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10089823 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091456155 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075428036 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103960373 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.1215795 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090835877 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084120809 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114357938 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10213592 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137087418 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088347539 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.094675984 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120967951 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077641602 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090674813 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067469044 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083146612 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074051259 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126134874 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074099612 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115579088 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067501077 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.129835968 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086061019 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091756296 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102250905 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108902201 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126434259 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093367563 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139885434 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088388564 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119700297 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107011841 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094284051 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089430825 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103535826 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100740817 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12357042 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095907704 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124996486 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146549315 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105166479 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144861058 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092316188 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126487408 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111771 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134454003 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.283825883 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163655581 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135512944 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109343651 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108821593 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072818623 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092252451 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101653249 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108990905 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.177841668 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124130122 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070979162 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104739536 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091512315 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105419884 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10047536 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079307175 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140789292 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099129019 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085468583 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108739816 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089802458 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103278479 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074516662 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099210006 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103902218 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09448504 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096786864 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118708963 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133396583 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113128634 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145552874 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.101037533 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09298056 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120757254 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111338765 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109995938 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086428503 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086475424 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13943934 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124115031 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128419554 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101613972 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109567201 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113886385 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101191417 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127607348 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108731463 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.132322072 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083445748 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079570043 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069764503 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.246580478 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122066337 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104904838 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108513098 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095713795 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070312513 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101695927 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103631613 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069849849 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084817788 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09037215 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092681574 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089054903 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103411034 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109454118 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.090010982 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102734822 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097463783 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14354761 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099616665 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086339083 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140070508 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145284067 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084777545 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089292431 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069647344 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078476677 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111098815 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147828496 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154344642 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079892026 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087213633 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085932175 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085743798 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070596216 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089221171 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091092081 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109207704 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105543714 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115228156 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107048203 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075160854 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104338968 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100503764 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094199167 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109596929 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124355181 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129437993 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144315619 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116790875 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110340212 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076364668 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080644817 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075875002 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079432624 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102654447 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08012903 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077147193 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.323514768 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09086332 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103005743 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106684348 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086349299 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075784496 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1350354 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.06823176 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13266266 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070657405 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080481313 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080929614 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076862986 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090514234 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133357391 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11153617 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11056633 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10731952 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102898372 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157320038 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15318516 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078627112 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140083607 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073227496 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073512528 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074367682 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109403011 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087577526 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113577974 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141944762 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092497706 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103714514 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078965262 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144672604 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099223414 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105539204 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085514257 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078233022 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145339257 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08053458 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.083044888 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09284097 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116576061 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.075464634 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10794057 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089041585 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083533172 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167824014 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.713627186 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093916474 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076546192 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096839071 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146994003 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13806836 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101290905 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114604261 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.296801688 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100059764 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095097279 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106016833 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.189124895 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073183536 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091562428 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100700675 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096712263 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100864061 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096767648 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085940146 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089616082 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08452971 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076846331 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104250105 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085580119 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0941359 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107917867 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080831161 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.086103125 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128416366 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.100559254 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079842597 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085007452 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102592349 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085808333 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101219162 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068097954 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114429862 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093087727 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120172183 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.100460792 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108065691 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12780162 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093865342 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136549801 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106281331 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122082788 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086869609 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078390533 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125368999 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.089039684 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07713172 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146950693 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098221093 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091242828 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104186049 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096654855 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113700282 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118876573 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114195509 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097653793 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0803922 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105367578 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.106669036 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089389414 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.253944073 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074571048 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07535646 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104582449 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083343046 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081278481 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11183694 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086252348 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10005946 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100197538 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118909305 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085648782 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100139945 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108244971 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088522623 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106655619 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098269558 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.12498107 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168917955 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120652217 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126697536 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131861827 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075435191 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.072741543 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066678255 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114192702 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077500804 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087527091 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079533387 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132202684 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081425404 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112680422 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.244382742 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080453632 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094178492 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09583329 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068960283 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082677928 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106818961 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086178977 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079647786 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119404033 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082881118 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129506298 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111434429 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099501122 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095716026 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080487547 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115201375 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104730885 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132192861 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098995378 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075580191 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126362487 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105324681 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141179911 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073655397 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083038507 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.137897607 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.284303724 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128898207 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078155826 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146550241 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141853249 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101130348 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133594404 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07058497 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086615199 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086630593 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123735737 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081901592 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108660407 seconds)
  done (took 68.227867597 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.182685061 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.177148183 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.125448148 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.135547017 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.292036117 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.302192223 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.154134775 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124823644 seconds)
  done (took 3.352306169 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069901356 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081744026 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079872535 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.243174999 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097500689 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068020652 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073073033 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082282431 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069124574 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067226323 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101099696 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066977081 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068023254 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.533110804 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066768716 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.076093844 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068421711 seconds)
  done (took 3.742472573 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.356682629 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.584220489 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.404868598 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.812443294 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.174478843 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.734872039 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.082895447 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.090948542 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.940094577 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.424235772 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.16812214 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.09866517 seconds)
  done (took 21.723036859 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078659669 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.121704466 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.121523055 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.074803258 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074550514 seconds)
  done (took 2.394804558 seconds)
done (took 122.091492914 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085861563 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172707096 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068510271 seconds)
  done (took 2.088322486 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.121059026 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.12079931 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.118315782 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.120136791 seconds)
  done (took 2.298842885 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076506796 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075735833 seconds)
  done (took 1.970989777 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.229941479 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.214828253 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091288393 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085575589 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080101969 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080120161 seconds)
  done (took 2.072969708 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073081835 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070583318 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070729749 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07092146 seconds)
  done (took 2.098926506 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.17128546 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067006722 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069081113 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070879576 seconds)
  done (took 2.194356343 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087162358 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086530343 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115790753 seconds)
  done (took 2.10889547 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085184683 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084051798 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079401809 seconds)
  done (took 2.070219386 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111172299 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097612899 seconds)
  done (took 2.020934606 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081114421 seconds)
  done (took 1.899320786 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093696309 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098577168 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183841272 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.150068828 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.185110034 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.171133548 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076501651 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076673683 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072963979 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071707405 seconds)
  done (took 2.998031594 seconds)
done (took 26.269318916 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085977023 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.191889479 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.319269848 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089610645 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.654761128 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.317212133 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.734640791 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093087492 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099475694 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067991585 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084779924 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.633019205 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.735296615 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.147644325 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.721072243 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.138779812 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.564397566 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071277041 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067511247 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067455716 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.717349695 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070262716 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068910631 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068743158 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.559565176 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.335797054 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071478812 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.134946484 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070625341 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075083873 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.314657435 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070187439 seconds)
  done (took 14.232558516 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.098405375 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128238596 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073340748 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084148372 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070293175 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069804324 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072375927 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069913851 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11194028 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069313819 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085514181 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066886207 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071856019 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.06889136 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090444849 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06963907 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071548077 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068550217 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069029166 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069689148 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089225392 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06875899 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069166858 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069372176 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068792229 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081336115 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06859107 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068113562 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068035164 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073763882 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075106602 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071478612 seconds)
  done (took 4.291444735 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.130013296 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.131686494 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074108472 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109328992 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116700377 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069942459 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153859054 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093418084 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115647748 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069429672 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086878555 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068281341 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103351106 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070772266 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091034827 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069488046 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07135395 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069252364 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068643556 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069425582 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088081929 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068058656 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068408535 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068550085 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068358134 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083698774 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069230043 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068132841 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067890273 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071808947 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073142425 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068610611 seconds)
  done (took 4.54722397 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07164595 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072250356 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.079637847 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083932143 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069221154 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070237619 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.06983136 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068680382 seconds)
  done (took 2.426484873 seconds)
done (took 27.332064737 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081969221 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069937836 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070115864 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088470075 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075392578 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.112856138 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066799437 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076571733 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073229743 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073329101 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074876143 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069197392 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071570863 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066112921 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072545799 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06700396 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.114409357 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069563167 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.110758864 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.112175914 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067743163 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070393416 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073347039 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111120516 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.111521742 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.11268945 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075920157 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072322835 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067845059 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069185904 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.174831826 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.19032469 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.077329988 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.120483859 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066341268 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066298946 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071762419 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070891346 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.116782085 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.078132456 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.06907901 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076550462 seconds)
  done (took 5.481967622 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.194040924 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.19773044 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.193522143 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079733447 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.09140135 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.07896238 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.195860743 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077752912 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076151395 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.196202558 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076480922 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077664696 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079673148 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074475771 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080502761 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074651605 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078996368 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071986386 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078342365 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077920033 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.193118857 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068299142 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079829521 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.076776148 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072492878 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.07703553 seconds)
  done (took 4.612225252 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075394058 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088597338 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.092542041 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.147043426 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.11151077 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083650298 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082501161 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094308106 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102790464 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068652279 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07188856 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.098667497 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097267195 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075650887 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107203577 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085056308 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078786922 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069038912 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074625854 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102524426 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092194104 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086623997 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101018834 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088046861 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067289434 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077416175 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074745297 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083402782 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075095344 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080625487 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072035608 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071225918 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068535312 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080150112 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071803165 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.066001001 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090824528 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081078429 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083424495 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107970712 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077369773 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.117862159 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095069007 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133808852 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068616588 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070706275 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072381484 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080887246 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069829932 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099124002 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084215055 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068145763 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087287401 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069715778 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069695217 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084545632 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07112742 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070708877 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080272772 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074169722 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088292637 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072572253 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088400791 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067926205 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079819229 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.069758054 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069663327 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066732185 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102878711 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076663711 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12037317 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069582741 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066159534 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082394051 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.082713324 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076981507 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067575769 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086216352 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078976657 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073173517 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080610029 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071422248 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072395297 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105317228 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06704218 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065933548 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065983033 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070288404 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07162859 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068707564 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081331545 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067842806 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071873021 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083362698 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06763022 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068303487 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070597353 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069189047 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067873525 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079196116 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072960888 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070825089 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081898931 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.07046615 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072611997 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084772615 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079248076 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068677589 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.07048205 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073165908 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072775946 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075146857 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073042361 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071305603 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074086619 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07670155 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076838647 seconds)
  done (took 11.25891875 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.210736922 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.196494114 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069273356 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.19246708 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076880129 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.12406852 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.190986134 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.13248251 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068797221 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.069356907 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067861243 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.141380968 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.136434568 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.148060142 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.118051868 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069599886 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095955235 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.14469031 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.19668711 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.194548491 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.095848206 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077013414 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071807364 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070320159 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069993881 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078424973 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085100339 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078471876 seconds)
  done (took 5.200573773 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076010705 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084071975 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.072041599 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091863476 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084408123 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.0669966 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.070370712 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069376112 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087114273 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075115218 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069233378 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073118807 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070683877 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067622003 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067723762 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076372134 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076617443 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068252455 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.072236681 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072500793 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079331673 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.156496447 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072934288 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071544952 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071032981 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069212007 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074892267 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075800449 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066511095 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100355855 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064911907 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071197219 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081842445 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070445042 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.0685065 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068519202 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069372173 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068347771 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068367222 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065854778 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065566658 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07368308 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066391496 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072154336 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083055906 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076968715 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068833347 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069709582 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069516535 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064164215 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070396057 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070334384 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069778469 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075522735 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070606974 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069099056 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068617091 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096015248 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074187169 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066835001 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067069564 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065293603 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068724014 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074901631 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083870801 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068785832 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06590091 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068367398 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076266538 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083300427 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067329905 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073462228 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065605442 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069187709 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070912914 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070873174 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070757249 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068839614 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070782468 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070928698 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071620831 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070569596 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.070774428 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.076373201 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.072980907 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068927412 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.072528392 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070771323 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073917618 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066818756 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070093915 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069295929 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066186122 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070500565 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073672405 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070835122 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090474145 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079007927 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070438396 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066771324 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084693475 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070859529 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068132153 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072174609 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073156546 seconds)
  done (took 9.611004984 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098213852 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067931176 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086532828 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098150682 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076388539 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071116633 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080445712 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067074257 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08864733 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065809786 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075169125 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064264546 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079760434 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07534851 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.06757916 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076539435 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068521513 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087093613 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.080966552 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064565547 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075279327 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080924603 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.084003594 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087058431 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084821671 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086589308 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080984649 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069594093 seconds)
  done (took 4.125782817 seconds)
done (took 42.193564363 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.92041295 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.11523673 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.924242318 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.42033698 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.982168651 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.996707507 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.00719394 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.900226582 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.161039051 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.047415837 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.688927597 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.539224801 seconds)
done (took 69.628733906 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.971922896 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.078217213 seconds)
    (2/2) benchmarking "String"...
    done (took 2.179361462 seconds)
  done (took 6.121560125 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.335869043 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.888787933 seconds)
    (3/3) benchmarking "different"...
    done (took 1.919906259 seconds)
  done (took 8.020202921 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.278352613 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.668014362 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.181034218 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.908768859 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.908851527 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.405044208 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.075900135 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.561893604 seconds)
  done (took 33.576260796 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.908274198 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.277546574 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.270126706 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.343590108 seconds)
  done (took 21.723053132 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.358891689 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.258083606 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.282699907 seconds)
    (4/4) benchmarking "different"...
    done (took 2.434938682 seconds)
  done (took 11.28358624 seconds)
done (took 92.974507658 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.96732762 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.256520658 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.949678377 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.098218018 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.056582851 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.039073349 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.894456173 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.990128329 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.976401273 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.991916761 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.974550636 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.978690825 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.984588929 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.009580588 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.997341759 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.98102598 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.249978576 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.890997005 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.899417777 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.63326478 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.230848011 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.88698338 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.902198884 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.94412497 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.266274669 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.932689444 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.322919465 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.888397035 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.481354821 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.906108377 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.889817715 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.891018186 seconds)
  done (took 209.24035013 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.879311487 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.743152141 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.735822109 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.89220014 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.219679856 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.227907273 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.737854796 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.244475436 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.886644619 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.885057802 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.838037009 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.887523536 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.87716277 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.428205955 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.918933375 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.938600136 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.746775518 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.63336974 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.921477732 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.785913074 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.897496964 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.39554404 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.33769544 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.666612612 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.912472345 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.927930953 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.89037517 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.901175423 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.380507699 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.723964473 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.900587766 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.036091102 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.386571317 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.116437948 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.887661496 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.901928044 seconds)
  done (took 181.519773175 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.118277322 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.909198536 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.933495173 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.995716686 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.809291273 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.684581034 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.887092581 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.886687735 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.883313002 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.889621652 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.888283996 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.956745838 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.030649547 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.91563659 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.891056401 seconds)
    (15/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.883685273 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.882435632 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.005076944 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.946041737 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.449302362 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.917618632 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.021068253 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.266292822 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.032060692 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.925776278 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.929126969 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.017047847 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.933039045 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.946573809 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.061936028 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.938097121 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.096424166 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.075029234 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.981640236 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.014609974 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.991631654 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.225439547 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.983429996 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.982921505 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.980626509 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.017620754 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.967368543 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.059605087 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.092388567 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.978248481 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.996427934 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.435593173 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.531201387 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.964597755 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.957646098 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.967837887 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.992048952 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.048178581 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.277963775 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.889645856 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.921351852 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.289574672 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.887083821 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.887739392 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.889875913 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.884328535 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.885410132 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.893408685 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.927763212 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.526998121 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.717289146 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.239936725 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.592542998 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.893719655 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.555454897 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.948717675 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.8904137 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.060068718 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.889034809 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.885735404 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.887532757 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.889701387 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.881789765 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.899070284 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.889482945 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.997680776 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.89133781 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.888215187 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.326222092 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.028782109 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.952031224 seconds)
    (86/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.958793598 seconds)
    (87/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.969003038 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.972145606 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.046362345 seconds)
    (90/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.964953518 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.952572083 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.989326374 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.00635846 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.995270799 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.98221215 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.981143926 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.97653193 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.362061172 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.976257566 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.989878876 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.343753852 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.076704465 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.369040402 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.82741926 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.891978295 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.884138919 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.901425662 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.886431351 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.883548829 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.895371508 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.884090397 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.883703453 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.886297842 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.884847079 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.884171385 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.888330777 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.902302441 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.88527045 seconds)
  done (took 424.457889747 seconds)
done (took 819.28674346 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.552569671 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.610153075 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.476018711 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.526689113 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.48381949 seconds)
  done (took 14.471856133 seconds)
done (took 16.289563281 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.911683924 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.908624158 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.894123531 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.910727394 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.90717582 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.904395493 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.914786458 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.923530854 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.916747618 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.903280291 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.912078911 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.905943506 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.916967727 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.918504082 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.917899099 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.916455424 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.908074019 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.899623436 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.914105585 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.906544075 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.907665793 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.906965111 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.906497534 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.913456296 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.918606329 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.908249102 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.904831222 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.91298411 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.909047257 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.915976303 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.926321722 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.920007736 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.917781086 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.917335688 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.917114665 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.920243948 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.909919014 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.922322129 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.90916582 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.923222271 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.917539426 seconds)
  done (took 80.240227383 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.899229528 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.084734954 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.177099451 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.939824667 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.902020701 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.186094723 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.965590151 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.05976766 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.067426968 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.188251681 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.184694269 seconds)
  done (took 24.482320421 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.898015691 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.076137453 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.190083811 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.941861726 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.903007341 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.182880252 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.971917483 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.05917734 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.066283364 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.182167444 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.2099921 seconds)
  done (took 24.525497492 seconds)
done (took 131.070545878 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.449041118 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.947195838 seconds)
  done (took 6.220929236 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.892939371 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.911030086 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.072607904 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.892064542 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.891703778 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.892657731 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.893426616 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.892237243 seconds)
  done (took 17.164615757 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.890296649 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.890209265 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.890455292 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.891405942 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.891542445 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.891131493 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.890923233 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.890675623 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.890677231 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.890395218 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.890652005 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.891504569 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.892046576 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.890930591 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.89104025 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.89150407 seconds)
  done (took 32.081821903 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.892048291 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.891289335 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.891475703 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.891003522 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.891176226 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.891504498 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.895063376 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.8921017 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.892897358 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.891573732 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.891406855 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.891232909 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.893247799 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.892275392 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.891868386 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.891922559 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.892442721 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.892883942 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.893632279 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.892093985 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.892973736 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.892448373 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.900690528 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.89218483 seconds)
  done (took 47.249187888 seconds)
done (took 104.557231455 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.459689937 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.059988314 seconds)
  done (took 9.347478498 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.896684696 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.89272613 seconds)
  done (took 5.725611113 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.891881786 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.891885669 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.892082292 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.892357048 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.893754033 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.893272037 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.893006174 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.893176515 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.892871359 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.892977664 seconds)
  done (took 20.755448053 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.893075577 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.893154614 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.893253492 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.893299984 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.893286297 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.893566354 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.893026295 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.893988091 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.893381063 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.893142105 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.892956754 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.894299638 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.893116677 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.894137542 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.893985742 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.893871176 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.893689072 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.894420607 seconds)
  done (took 35.912664597 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.893782701 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.893632702 seconds)
  done (took 5.616794202 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.894305084 seconds)
    (2/7) benchmarking "second"...
    done (took 1.893626454 seconds)
    (3/7) benchmarking "month"...
    done (took 1.894253511 seconds)
    (4/7) benchmarking "year"...
    done (took 1.895342926 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.894190169 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.894163804 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.894119301 seconds)
  done (took 15.089142193 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.895606564 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.04374538 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.086826609 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.387243756 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.895994301 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.896921795 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.551682616 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.896998796 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.899160335 seconds)
  done (took 20.383362241 seconds)
done (took 114.6546411 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.759123085 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.899814599 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.512262895 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.014005358 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.950299683 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.254850449 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.92061543 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.471771176 seconds)
done (took 44.609275286 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.927224017 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.893758317 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.933607411 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.935438454 seconds)
  done (took 22.594466137 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.905445877 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.536788773 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.927493558 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.001176973 seconds)
  done (took 23.302253916 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.396837172 seconds)
    (2/2) benchmarking "read"...
    done (took 2.306832232 seconds)
  done (took 6.547804325 seconds)
done (took 61.200839903 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.896076943 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.896113441 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.895809563 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.896003854 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.896197168 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.89606583 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.895549166 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.896479848 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.896041775 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.896151979 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.89571909 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.896384287 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.897371159 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.896205074 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.896606596 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.896949125 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.896372569 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.896222946 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.896984486 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.896717248 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.896610742 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.896770298 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.896554805 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.897136417 seconds)
  done (took 47.345001026 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.897826797 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.897976044 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.897355548 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.898471126 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.897587253 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.89675122 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.897806478 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.898063096 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.899049467 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.89776161 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.897324392 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.898319234 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.898421628 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.89805504 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.897847329 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.897773522 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.898479583 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.898322077 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.899326525 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.899389872 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.898426748 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.897988031 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.899550524 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.898587753 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.898954883 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.897841469 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.898108518 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.92144661 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.961753896 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.900462467 seconds)
  done (took 58.86891878 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.898564619 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.911976201 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.916913862 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.900116158 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.899332414 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.935309297 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.935211119 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.916213112 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.89980689 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.899303258 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.899216869 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.902179959 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.899358458 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.899262512 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.899930067 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.899823572 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.900434665 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.900200686 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.899928378 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.900269147 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.900036652 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.900459463 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.900519232 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.90067403 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.900514736 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.900016513 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.900429664 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.900327093 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.900796209 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.900581028 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.900939753 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.900692164 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.90080007 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.900984219 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.901642394 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.900615729 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.900803806 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.905056866 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.910821765 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.900666564 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.900448224 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.900446449 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.900147401 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.900892679 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.901291578 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.90061212 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.901116119 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.900893496 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.901267302 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.901541424 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.901398547 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.901252326 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.902080904 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.901380741 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.901397662 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.90139688 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.901445108 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.901907408 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.901617882 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.901732282 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.902641942 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.9022011 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.902122611 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.902151132 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.902388366 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.9031575 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.90290968 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.902237302 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.902142988 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.902682655 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.902798727 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.902908397 seconds)
  done (took 138.834003677 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.902687228 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.903191966 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.903379988 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.903061039 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.902938899 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.902585359 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.902762131 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.90212311 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.903465863 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.902926438 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.903008829 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.903220362 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.903885631 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.902502184 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.903357863 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.903397471 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.903479453 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.903477814 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.902856967 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.903938885 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.904505931 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.903699728 seconds)
  done (took 43.708939749 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.903892642 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.904954476 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.904379252 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.904593707 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.90461311 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.904579623 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.904190374 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.904490013 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.904643864 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.904746735 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.905270684 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.90499075 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.904983743 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.904825327 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.90527243 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.905307709 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.905585872 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.905463273 seconds)
  done (took 36.126257008 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.905831839 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.905331517 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.904697015 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.905462143 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.905323946 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.906025316 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.90587775 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.906224739 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.906062634 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.905499756 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.905938049 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.905900293 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.906156064 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.905684268 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.905781731 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.906558511 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.905994409 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.906249733 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.906387654 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.906312078 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.906456921 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.906708798 seconds)
  done (took 43.771404587 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.906041332 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.906371792 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.906131523 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.907220378 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.906405308 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.906705378 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.906723116 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.906191305 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.906744177 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.906251292 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.906761442 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.907005231 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.907292693 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.907124818 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.906679568 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.907638216 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.907536133 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.906947767 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.907286973 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.906946441 seconds)
  done (took 39.977533105 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.908440662 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.90888055 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.909168734 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.909889266 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.909227117 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.909314242 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.909842941 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.909828898 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.909240751 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.910178021 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.908848242 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.909244492 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.909549431 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.910030073 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.909790256 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.90993358 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.909844815 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.9099914 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.91034626 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.909547103 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.910577253 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.909874994 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.909857739 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.909808166 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.910645332 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.909906696 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.91044531 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.910546053 seconds)
  done (took 55.315897094 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.908643338 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.908556651 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.908738028 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.909279913 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.909621866 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.909178397 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.909657803 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.90939386 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.908500436 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.908471028 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.909040537 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.909541769 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.909080913 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.90896959 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.908817568 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.910038679 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.908736503 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.909549084 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.909509225 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.909240191 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.909999181 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.909203713 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.909747965 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.909801612 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.909607328 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.910433759 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.910041682 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.910331021 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.909959585 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.909559844 seconds)
  done (took 59.125635198 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.934205674 seconds)
    (2/2) benchmarking "in"...
    done (took 1.930669947 seconds)
  done (took 5.709493677 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.909607315 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.910212077 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.91077264 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.915652505 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.930579195 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.914981578 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.929719941 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.916936169 seconds)
  done (took 17.18346062 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.95318341 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.979395527 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.979604384 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.954087482 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.004600519 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.961768615 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.913893586 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.917032251 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.93061294 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.084944811 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.224710217 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.167729171 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.169425725 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.084107918 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.913191454 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.913964729 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.916658114 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.918226335 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.917822324 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.911955876 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.917020596 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.914084195 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.912760358 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.914893659 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.912158262 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.012314476 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.039202627 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.025670455 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.033928561 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.036240407 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.004140421 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.912921814 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.914721683 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.923262468 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.915838272 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.916578916 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.922424891 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.913719928 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.913249892 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.91963357 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.946905778 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.947809908 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.958867326 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.999074283 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.186482556 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.296927873 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.296077823 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.08342883 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.924681541 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.926569309 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.92792674 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.92124206 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.951405701 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.991405492 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.950908272 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.067840172 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.013805365 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.982670198 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.004926717 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.950568847 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.927569653 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.945650365 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.931742545 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.917847117 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.91917581 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.928828929 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.945638329 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.931816585 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.920265158 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.913934651 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.926464315 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.016961547 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.959388554 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.984916753 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.99482055 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.933905171 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.922142024 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.934924501 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.922223086 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.929158127 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.924877984 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.921635364 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.924000044 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.922585803 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.937002288 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.953585512 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.934993548 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.933207123 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.92917118 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.923222686 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.926071929 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.927839012 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.92025251 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.925658728 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.924561715 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.922646885 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.919673888 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.922251758 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.922124735 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.931257374 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.921489894 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.919599596 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.922782539 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.933466358 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.922392259 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.924479799 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.923678779 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.9382651 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.936713818 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.926066493 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.923386163 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.920153614 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.921519497 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.950292854 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.950631949 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.947232576 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.948652304 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.938856996 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.919013391 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.924279117 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.932348161 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.922053453 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.932029356 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.951159616 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.920518922 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.926188449 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.927381676 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.93601485 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.923533925 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.923824984 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.92508756 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.920887547 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.917418832 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.922515814 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.924405957 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.926918761 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.957059552 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.939494137 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.927491523 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.92959786 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.929735834 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.93905448 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.931122792 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.929238671 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.934619327 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.927669904 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.930866497 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.933547232 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.936993179 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.921095481 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.926589809 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.926691371 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.921340537 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.92796003 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.921841488 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.918789596 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.920876402 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.919311643 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.940647253 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.920297006 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.919486573 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.919438016 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.925830199 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.920276267 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.919963213 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.92120908 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.920295737 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.919773319 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.923139759 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.922802843 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.938835024 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.929560494 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.925907299 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.921484049 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.922908124 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.920871315 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.919832119 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.922717994 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.927509491 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.939426075 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.92568391 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.932904724 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.920879645 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.930312671 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.920283514 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.924886272 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.923716726 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.921939681 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.923251047 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.920397503 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.919192452 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.927921356 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.946629341 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.934011227 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.925967063 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.921978934 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.929592705 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.926066803 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.927198958 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.921080098 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.926356136 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.925672089 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.926646383 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.926018438 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.922226156 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.933837218 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.922961071 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.924109548 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.928209847 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.922383558 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.922117245 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.925620912 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.922833947 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.92485955 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.921676853 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.921489719 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.923136423 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.92177533 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.932079599 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.927806884 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.921356882 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.922107214 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.926104053 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.924873406 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.921380791 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.927061399 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.927036863 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.920874095 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.925006501 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.931186437 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.930533248 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.922623153 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.951527254 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.925616068 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.926695046 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.922829969 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.927459087 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.94060928 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.927905431 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.926249638 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.930152294 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.922565846 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.928869599 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.926154682 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.925803136 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.924109734 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.927543403 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.929257965 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.922447722 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.932938748 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.92653389 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.925790341 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.921695884 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.926703952 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.925103732 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.92609074 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.925139971 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.928628235 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.934203184 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.931635318 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.923897071 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.927096975 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.928497483 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.926390976 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.930726272 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.928409413 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.940296203 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.937359807 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.924765207 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.925292268 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.925120935 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.930651826 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.923563685 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.926879436 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.936136173 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.925700783 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.926837625 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.928972793 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.927256501 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.924722729 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.933406328 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.929207583 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.930152807 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.92835707 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.926925549 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.928153377 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.923344079 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.943242669 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.97137681 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.981573657 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.941750911 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.960697808 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.984091811 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.98370256 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.018803875 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.964176708 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.933644862 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.939857973 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.933241136 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.929768027 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.943963173 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.92752513 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.929058626 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.932431314 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.929297121 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.932925946 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.931814887 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.940296131 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.948643832 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.93583334 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.945341892 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.93451299 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.941947001 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.929123791 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.930263073 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.930771748 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.938542029 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.93848514 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.927597307 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.928243739 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.938569791 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.938677246 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.930543317 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.941299039 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.928592651 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.93800865 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.938875864 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.934829315 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.94097388 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.934188336 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.927608125 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.934508767 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.930438339 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.928773886 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.934023671 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.93880819 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.933143316 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.932805567 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.928789097 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.932387459 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.932573624 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.935384683 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.940020916 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.929456287 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.92837794 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.93795092 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.930076298 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.933691532 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.935616893 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.932830687 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.941732995 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.92972454 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.934190697 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.931644906 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.930376689 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.934959432 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.949039629 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.943269405 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.935752568 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.929068513 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.933836672 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.944740872 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.946971108 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.936691679 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.933881426 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.932837927 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.945139979 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.946925375 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.961106938 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.932253796 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.936145875 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.936823986 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.943387537 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.93651451 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.942850489 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.937412376 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.941935466 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.934451516 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.935331663 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.935670318 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.947575061 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.932120837 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.931889722 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.934535151 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.93899258 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.934916768 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.931446068 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.935780987 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.943010204 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.937997792 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.945410477 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.930664268 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.933260501 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.938416892 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.933184992 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.934263749 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.935507727 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.938488768 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.941856744 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.939275093 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.933737799 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.960448563 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.97259153 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.952917883 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.96121463 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.992043322 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.933883808 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.931769262 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.939284811 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.934966976 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.93465348 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.934465178 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.932114594 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.933682458 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.934332821 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.934042417 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.943739416 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.950401492 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.954190109 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.9359117 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.939060977 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.939265125 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.931546809 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.932491671 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.938416377 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.946631168 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.93893345 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.952918801 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.945800721 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.937941801 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.935539203 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.946315744 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.944279778 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.936364368 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.938232175 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.935767241 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.938257404 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.938855889 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.943567872 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.937765509 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.935866411 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.939372816 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.932657029 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.934246829 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.934955679 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.941264148 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.937337583 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.940716667 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.942741562 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.932684387 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.936408578 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.935325658 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.937796163 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.936415794 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.937949297 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.940988147 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.935135409 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.938128552 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.941176421 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.938307977 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.938958303 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.934759517 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.938363795 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.934741663 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.935120613 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.939408896 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.938690029 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.93503878 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.943034382 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.944161156 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.94176085 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.939830031 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.943861443 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.940534341 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.943812002 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.936675443 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.940590818 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.933497059 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.946352748 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.935161358 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.959745739 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.940982272 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.935380684 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.945114904 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.937731042 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.942245481 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.940260919 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.936381634 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.936703909 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.947694539 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.946317197 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.949644787 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.943162611 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.944267845 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.945982392 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.938778851 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.939307096 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.936139652 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.937875642 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.937461138 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.940981054 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.942434894 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.942154072 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.936221251 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.941550582 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.938064813 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.940331183 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.93962904 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.940873755 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.942787344 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.94948051 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.972646113 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.954129223 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.941470361 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.940049775 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.941163364 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.949577293 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.945185743 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.936725105 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.938121712 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.946652729 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.939009352 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.947948323 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.949069183 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.941624254 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.939266696 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.944217267 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.962152317 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.942461785 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.951247711 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.976964621 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.938610888 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.940685871 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.938815892 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.938070397 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.938475978 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.940132901 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.937958007 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.946623468 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.938303123 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.937765134 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.964395695 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.941705224 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.939747311 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.941628899 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.940055437 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.945843216 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.938749061 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.947572338 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.939105385 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.938065762 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.943705899 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.943870616 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.938063711 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.937573433 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.938564468 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.942377385 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.938148536 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.940805894 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.949655701 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.940056951 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.941275714 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.954181891 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.952118265 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.939237435 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.937686553 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.941723491 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.945458315 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.943831401 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.937847528 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.946256833 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.947957839 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.945635656 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.949002489 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.948308394 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.944961517 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.943408248 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.940816588 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.940754435 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.956523314 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.953425015 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.940216075 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.941709609 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.952871895 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.939998553 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.948971928 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.947828457 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.942773941 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.942902015 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.940982558 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.940255556 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.939962643 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.939368721 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.94556806 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.950363648 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.940326784 seconds)
  done (took 1158.572132013 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.939468892 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.93900776 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.939922945 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.939106176 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.944138602 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.939899552 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.959639505 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.943934873 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.939741516 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.940394067 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.940363571 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.93930113 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.942114549 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.940286161 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.940111921 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.940464963 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.94466508 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.94185153 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.940353828 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.94607773 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.941421598 seconds)
  done (took 42.65595626 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.939930501 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.941378868 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.942697929 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.941130334 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.940908789 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.940773995 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.941340253 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.940419451 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.940952066 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.940494759 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.941078606 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.940491203 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.939532387 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.941196114 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.947187313 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.941968446 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.943923884 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.941779825 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.958635839 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.941749486 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.940910599 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.941191781 seconds)
  done (took 44.605993833 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.944147239 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.946425191 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.947660345 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.953336611 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.943386083 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.94436802 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.942529215 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.94619784 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.942487498 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.946752929 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.957346207 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.953177268 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.942089138 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.946400326 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.942228087 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.943739255 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.063073443 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.943742215 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.946143924 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.942854035 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.944653558 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.952166508 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.94513248 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.969392376 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.948551304 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.948509839 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.943883168 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.943343259 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.942838291 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.997093132 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.955002935 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.94354539 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.950359326 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.950436166 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.952668539 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.968867828 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.960146302 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.944786028 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.980071364 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.979941908 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.970468549 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.974206008 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.943197177 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.945315178 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.954830223 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.943915715 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.943308367 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.950271288 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.95399622 seconds)
  done (took 97.614930968 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.943596613 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.944615545 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.94353241 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.944037679 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.944368846 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.944212593 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.944782394 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.944100692 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.944403565 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.944101078 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.944566913 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.944788106 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.944099113 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.944547996 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.944348577 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.944543341 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.944438582 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.944662715 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.944423168 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.944227683 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.944109413 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.944881591 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.945415963 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.946083551 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.94530732 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.94675367 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.944906083 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.945665605 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.945953652 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.945352679 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.945568995 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.945571641 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.946641872 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.946308811 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.945511234 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.945201044 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.946777785 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.94612101 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.94611372 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.945660404 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.946142915 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.945722658 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.946740505 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.947043095 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.946439617 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.946645239 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.946463819 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.945727118 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.947265543 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.946556167 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.9461866 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.947061582 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.946632721 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.94659772 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.946888437 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.947051701 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.94747287 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.94661324 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.946660325 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.946543407 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.946210498 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.946745716 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.947334968 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.946667405 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.946703653 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.947244391 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.947320138 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.947394505 seconds)
  done (took 134.188709003 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.949072708 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.949449106 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.949484315 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.949373931 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.949630377 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.949644241 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.949184117 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.94979431 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.949550753 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.949320399 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.949436353 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.947659086 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.949794676 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.948000491 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.95035861 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.949759271 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.950050741 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.950490763 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.950078009 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.950080829 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.949821976 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.950342269 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.950266582 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.950477591 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.950681822 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.949953411 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.950419285 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.950083994 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.950566122 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.950235654 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.951214208 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.951160453 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.950474038 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.950441097 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.950944904 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.951128364 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.951337796 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.951386893 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.950481037 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.951173959 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.950868446 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.951489284 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.950726125 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.951005904 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.95147547 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.951515993 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.951175395 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.951869216 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.949399903 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.951627453 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.95204934 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.951784439 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.95195386 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.951904605 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.952043004 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.950535702 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.951613569 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.952185743 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.952090311 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.951700527 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.952508453 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.950299523 seconds)
  done (took 122.817257926 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.949285285 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.9502933 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.950655334 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.950213235 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.95016297 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.950827927 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.950063646 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.950294199 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.950059725 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.950136483 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.950073058 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.951257278 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952045482 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.950376149 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.950693651 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.95168269 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.951335364 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.950348167 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.951065004 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.952020512 seconds)
  done (took 40.89728702 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.950406498 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.9509611 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.950925005 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.951201966 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.951616796 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.951277471 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.951252368 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.951138124 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.951029522 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.95143508 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.950959933 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.951610967 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.951403032 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.952013427 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.951517757 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.951748123 seconds)
  done (took 33.104891627 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.951601182 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.952076053 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.954142222 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.953334315 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.95185407 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.952017445 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.951944163 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.952098484 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.951625806 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.952538425 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.952510755 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.951867462 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.953213633 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.954177051 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.952425233 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.952457042 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.952073571 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.95193292 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.952693104 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.954565769 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.954080809 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.952784683 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.953140684 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.952891305 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.952546415 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.953295668 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.952864098 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.953039389 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.953417965 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.95362227 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.953436991 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.954484577 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.953971045 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.953235009 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.955144023 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.953575603 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.953575061 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.954081815 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.954014249 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.953959926 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.954075843 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.956395563 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.954189636 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.954287897 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.954015721 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.953964775 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.953775419 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.954457186 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.953991175 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.95463141 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.954424289 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.956293289 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.954373998 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.955002587 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.954252109 seconds)
  done (took 109.327090277 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.954385896 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.9549994 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.954345568 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.954493116 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.954778994 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.954594578 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.954929145 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.95491487 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.955329063 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.954867266 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.954916619 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.955654834 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.954935366 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.955451653 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.955631889 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.955733097 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.95511588 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.955951862 seconds)
  done (took 37.079370535 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.954683163 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.954727861 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.955421157 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.955298926 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.955751469 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.954929221 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.955179665 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.955348675 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.955820971 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.955157448 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.955474695 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.955745518 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955803291 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.956262812 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.955413291 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.956609105 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.956293411 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.956133289 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.956343257 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.955746698 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.956521378 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.955793784 seconds)
  done (took 44.913659274 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.957667598 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.957171456 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.975572662 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.983698106 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.983318134 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.002439425 seconds)
  done (took 13.748983251 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.957936218 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.957759385 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.957096371 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.957121086 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.956886571 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.95698768 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.957761816 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.957367299 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.957408799 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.957522565 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.957186487 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957742312 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.957535861 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95744141 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.957887995 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.957435125 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.959222664 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.958059885 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.957583401 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.958975322 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95795277 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.958293318 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.957859526 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.957996147 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.958319612 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.958386579 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.958178967 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.958867975 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.958458178 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.95859178 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.958493099 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.959240426 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.959165226 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.958951484 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.958900808 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.959170373 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.959340147 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.958737992 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.959019671 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.958664841 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.958706431 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.959153492 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.959610799 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.95947834 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.959711824 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.959608297 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.959478826 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.959541161 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.959628447 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.958986637 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.958500628 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.95941021 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.959138725 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.959557873 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.959998014 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.959797248 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.959410934 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.959704023 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.959299862 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.960077386 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.960264929 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.959833526 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.960179418 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.960830614 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96015395 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.960171272 seconds)
  done (took 131.167709205 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.96003895 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.960026604 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.960671175 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.960463702 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.960629513 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.961057575 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.960494933 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.960405519 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.960698158 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.960876071 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.960498045 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.960718198 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.960473854 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.960603884 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.960523338 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.960535411 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.961466824 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.9612763 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.961224186 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.961713123 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.960321566 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.960937491 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.961393552 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.960974754 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.961582403 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.961217095 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96139866 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.962196678 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.961487238 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.961585102 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.961485151 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.961319425 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.961828028 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.961325207 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.961902835 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.961873193 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.961535053 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.961451092 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.962234331 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.962315645 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.962279131 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.961968336 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.961774443 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.962521433 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962598991 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962053453 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.962329118 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96186326 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.962571137 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.962708515 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96333331 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.962958748 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.962506497 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963191322 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.963489848 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.962943802 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963212845 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963531261 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.963459563 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.96240452 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.963075592 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.962661441 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.963826776 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963908082 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965829658 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963381528 seconds)
  done (took 131.375970954 seconds)
done (took 2689.865432699 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.030658683 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.093501215 seconds)
  done (took 16.020041415 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.095630346 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.03739569 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.117600723 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.061615936 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.964470814 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.008289199 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.969763767 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.965983632 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.051315491 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.966616758 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.982693417 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.970168502 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.966706434 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.966767164 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.967303552 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.966248763 seconds)
  done (took 54.000830403 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.97169051 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.974889895 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.968436448 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.970093833 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.991760882 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.071375552 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.99591214 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.974738407 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.98772112 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.022085294 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.995636465 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.977274103 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.982775332 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.977532032 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.082255643 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.03233833 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.046330401 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.067608712 seconds)
  done (took 37.986824866 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.070792587 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.980158813 seconds)
  done (took 10.957160778 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.002458586 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.988998997 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.999592804 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.986713183 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.998924714 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.989473199 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.975567319 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.973004321 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.978224725 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.977659178 seconds)
  done (took 71.797827016 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.97567896 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.975487496 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.336260497 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.985341831 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.982686254 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.005061086 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.970227739 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.004974066 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.973691114 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.969838466 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.984610841 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.344593378 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.985908479 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.973051359 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.393002092 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.992095968 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.980463733 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.006962473 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.012646845 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.978622001 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.980260341 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.975260197 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.219624298 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.766714957 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.973573327 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.986331584 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.981496654 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.967469139 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.967562092 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.973939419 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.976806047 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.975642863 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.975366533 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.972150534 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.991111269 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.98004205 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.622327179 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.994033164 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.982196191 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.058212077 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.030439779 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.981544986 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.972550466 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.980143436 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.968558313 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.979917739 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.696326874 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.042104874 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.973799316 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.138842243 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.473183973 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.995272935 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.123945011 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.112898314 seconds)
  done (took 139.530847924 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.967462067 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.417780077 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.11665593 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.971434158 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.348416967 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.180712934 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.560994631 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.01439622 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.972386698 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.180291575 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.135910262 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.092301764 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.971704805 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.968995855 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.972419782 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.970232897 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.140511844 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.039112174 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.972976882 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.970256124 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.991943191 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.200668882 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.092298896 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.97234543 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.989908653 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.187233855 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.021087632 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.089908571 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.378361751 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.970767871 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.03340977 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.973091587 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.971104813 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.971773347 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.012579168 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.083146323 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.072602928 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.973060731 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.696925113 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.970431072 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.583039753 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.175204847 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.084641041 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.098184367 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.212025219 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.183161049 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.662048598 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.970765348 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.687849994 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.135780571 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.182803747 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.18366267 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.068458766 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.974634702 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.41656582 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.970882996 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.97134457 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.202109587 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.132225248 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.095604312 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.975182763 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.97306955 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.972932238 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.209227252 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.974937787 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.082983154 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.975133938 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.972764949 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.084798449 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.097970209 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.132987438 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.196411562 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.006589579 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.286503391 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.941822754 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.179920934 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.037751766 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.204330335 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.976167639 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.972494676 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.071511251 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.434349551 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.128397461 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.21441353 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.280880484 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00880615 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.463436813 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.971945271 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.183391166 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.116400444 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.191806677 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.225899231 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.027245223 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.827449374 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.973082329 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.972958779 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.165345756 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.092419992 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.977472365 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.500688745 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.213503107 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.554886415 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.99442953 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.421864303 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.079893886 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.976979604 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.592552096 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.974337206 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.187434627 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.019100349 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.97596322 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.974492759 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.117718065 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.693630191 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.974482189 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.016350093 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.034973762 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.977014821 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.129906948 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.97748097 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225439731 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.701578714 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.212398301 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.97659981 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.008431593 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.147836352 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.232496244 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.977967157 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.309197582 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.216050529 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.070606999 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.189268013 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.481767154 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.974570516 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.248530259 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.978322834 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.974567643 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.141718457 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.767571484 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.139763345 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.97908353 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.223708367 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.998167389 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.029934884 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.979801753 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.233767872 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.010877358 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.025489389 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.977989276 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.106478117 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.9773484 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.031701229 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.139032739 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.977594348 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.97786785 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.821408134 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.977687753 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.132302024 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.209193802 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.99248874 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.047471833 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.346937887 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.975563734 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.076614291 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.002169848 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.390219445 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.439928331 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.138905006 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.61564516 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.241335503 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.97598457 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.211389605 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.154173367 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.981106061 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.978188144 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.72965301 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.223304005 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.976877082 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.134728794 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.699363727 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.141927582 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.186978167 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.979111298 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.02920092 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.982281499 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.211646358 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.501473761 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.147715263 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.976851215 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.977326955 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.977727588 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.977748874 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.179192924 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.011556228 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.611550264 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.118533959 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.244870868 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.203436659 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.286982135 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.03877465 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.983889871 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.291321715 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.981902345 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.040898955 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.981590559 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.989045136 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.216780132 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.984146872 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.186960553 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.323565643 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.059966501 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.02480981 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.981867437 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.979557732 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.944042599 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.150249611 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.090470417 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.982979208 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.442302823 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.021326213 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.100711393 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.178056182 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.087936204 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.946677681 seconds)
  done (took 909.359469418 seconds)
done (took 1241.545019954 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.979592699 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.982061011 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.981681004 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.983156412 seconds)
  done (took 29.838661864 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.980942565 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.981519771 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.982049327 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.983425597 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.981239779 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.982930946 seconds)
  done (took 13.811649306 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.979671491 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.982102857 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.982082185 seconds)
  done (took 22.856238424 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.462880863 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.286075 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.073689137 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.14628269 seconds)
  done (took 10.884121867 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.988173635 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.983193812 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.983458544 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.982731405 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.981989193 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.983319096 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.984566968 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.983097924 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.98485068 seconds)
  done (took 19.777907047 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.485660142 seconds)
done (took 105.562947494 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.406115057 seconds)
    (2/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.240378622 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.296407858 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.251496031 seconds)
    (5/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.493600568 seconds)
    (6/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.985789364 seconds)
    (7/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.51916535 seconds)
    (8/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.986287379 seconds)
    (9/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.986761621 seconds)
    (10/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.522341537 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.538403534 seconds)
    (12/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.066592527 seconds)
    (13/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.319338071 seconds)
    (14/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.319054792 seconds)
    (15/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.282341011 seconds)
    (16/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.506215462 seconds)
    (17/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.182517057 seconds)
    (18/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.130441029 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 1.997388432 seconds)
    (20/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.716067205 seconds)
    (21/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.099168539 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.177669373 seconds)
    (23/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.08518199 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.001584523 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.111364627 seconds)
    (26/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 1.990235094 seconds)
    (27/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.244751308 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 1.999609752 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.078393797 seconds)
    (30/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.426783739 seconds)
    (31/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.323420233 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.863730192 seconds)
    (33/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.123678965 seconds)
    (34/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.292678383 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.004871542 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.374082093 seconds)
    (37/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.990537595 seconds)
    (38/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.228802021 seconds)
    (39/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.104526558 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.110001685 seconds)
    (41/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.985697113 seconds)
    (42/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 6.988809475 seconds)
    (43/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 5.89275171 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.200537202 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.047274544 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.288281671 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.274806882 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.222252478 seconds)
    (49/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.989769004 seconds)
    (50/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.895848691 seconds)
    (51/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.178070965 seconds)
    (52/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.128993497 seconds)
    (53/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.117138343 seconds)
    (54/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 5.097240077 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.988779496 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.622696635 seconds)
    (57/341) benchmarking ("sort", Int8, false)...
    done (took 5.554292673 seconds)
    (58/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.280172838 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.998197364 seconds)
    (60/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.528804289 seconds)
    (61/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.116165705 seconds)
    (62/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.228126332 seconds)
    (63/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.322052234 seconds)
    (64/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.00224357 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.295276395 seconds)
    (66/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.40121707 seconds)
    (67/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.962719161 seconds)
    (68/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.012383712 seconds)
    (69/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.134646286 seconds)
    (70/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.248499836 seconds)
    (71/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.347341 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.990282341 seconds)
    (73/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.996049771 seconds)
    (74/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.524446887 seconds)
    (75/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.253244941 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.119748582 seconds)
    (77/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.200163048 seconds)
    (78/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.074496694 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.77271411 seconds)
    (80/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.18157758 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.44252181 seconds)
    (82/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.536606949 seconds)
    (83/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.338669195 seconds)
    (84/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.990544923 seconds)
    (85/341) benchmarking ("map", identity, Int64, true)...
    done (took 4.307477106 seconds)
    (86/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.002564537 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.995666607 seconds)
    (88/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.772603608 seconds)
    (89/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.056753084 seconds)
    (90/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.222387734 seconds)
    (91/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.730942863 seconds)
    (92/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.011133086 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.316429411 seconds)
    (94/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.611712777 seconds)
    (95/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 1.993901214 seconds)
    (96/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.134997427 seconds)
    (97/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 9.002119002 seconds)
    (98/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.242979203 seconds)
    (99/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.15790595 seconds)
    (100/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.1157892 seconds)
    (101/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.393816489 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.373326529 seconds)
    (103/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.003886896 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.332735571 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.382793238 seconds)
    (106/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.994320486 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.142901763 seconds)
    (108/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.521519476 seconds)
    (109/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.19092383 seconds)
    (110/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.513514996 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.932571188 seconds)
    (112/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.028457431 seconds)
    (113/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.525232344 seconds)
    (114/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.1184337 seconds)
    (115/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.257972113 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.012445561 seconds)
    (117/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.052210568 seconds)
    (118/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.199565332 seconds)
    (119/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.137486243 seconds)
    (120/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.190413677 seconds)
    (121/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 6.989164441 seconds)
    (122/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.149600296 seconds)
    (123/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.378620118 seconds)
    (124/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.999835279 seconds)
    (125/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.128399661 seconds)
    (126/341) benchmarking ("map", identity, BigInt, false)...
    done (took 4.401879692 seconds)
    (127/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.995782987 seconds)
    (128/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 4.697312675 seconds)
    (129/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.231866155 seconds)
    (130/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.400639134 seconds)
    (131/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.138494858 seconds)
    (132/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.224820476 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.788150683 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.423853741 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.338836945 seconds)
    (136/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.153445554 seconds)
    (137/341) benchmarking ("map", abs, BigInt, true)...
    done (took 6.991105501 seconds)
    (138/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 5.393626299 seconds)
    (139/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.99454273 seconds)
    (140/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.244512167 seconds)
    (141/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.500319329 seconds)
    (142/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.005111246 seconds)
    (143/341) benchmarking ("sort", Float64, false)...
    done (took 6.681753077 seconds)
    (144/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.107728902 seconds)
    (145/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.012665638 seconds)
    (146/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.003458605 seconds)
    (147/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.137587564 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.106427853 seconds)
    (149/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.635807616 seconds)
    (150/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.00010717 seconds)
    (151/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 3.784608845 seconds)
    (152/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.997813707 seconds)
    (153/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.147907036 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.143380804 seconds)
    (155/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.099546405 seconds)
    (156/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.088122263 seconds)
    (157/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.004439113 seconds)
    (158/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 6.988887816 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 4.972820344 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.215671526 seconds)
    (161/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.000700831 seconds)
    (162/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.161399443 seconds)
    (163/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.212912228 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.31616203 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 2.21540299 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.848175678 seconds)
    (167/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.822667762 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.442708729 seconds)
    (169/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.324304983 seconds)
    (170/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.012762097 seconds)
    (171/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.139798016 seconds)
    (172/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 1.993288402 seconds)
    (173/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 1.999988013 seconds)
    (174/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.119865803 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.010799482 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.006944757 seconds)
    (177/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.991663219 seconds)
    (178/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.87126856 seconds)
    (179/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 9.577396716 seconds)
    (180/341) benchmarking ("sort", Int64, false)...
    done (took 6.694007874 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.557718643 seconds)
    (182/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.126164816 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.28963138 seconds)
    (184/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.070563442 seconds)
    (185/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.555530815 seconds)
    (186/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.255020216 seconds)
    (187/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.197033969 seconds)
    (188/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.619683486 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.126006685 seconds)
    (190/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.424206972 seconds)
    (191/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.076767246 seconds)
    (192/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.362488128 seconds)
    (193/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.8922629 seconds)
    (194/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.226161763 seconds)
    (195/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.16641163 seconds)
    (196/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.203855619 seconds)
    (197/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 9.003368305 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.627434639 seconds)
    (199/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.165587209 seconds)
    (200/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.045431641 seconds)
    (201/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.006175839 seconds)
    (202/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.006452669 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.454597265 seconds)
    (204/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 6.999876498 seconds)
    (205/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 4.771429061 seconds)
    (206/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.194350163 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.414382766 seconds)
    (208/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.001795704 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.022029794 seconds)
    (210/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.842275811 seconds)
    (211/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.234950184 seconds)
    (212/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.00519184 seconds)
    (213/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.979909096 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.003479704 seconds)
    (215/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 5.13148185 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.01215692 seconds)
    (217/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.017643647 seconds)
    (218/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.995985514 seconds)
    (219/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.003789512 seconds)
    (220/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.004001424 seconds)
    (221/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 6.993445114 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.382660278 seconds)
    (223/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.043690357 seconds)
    (224/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.024484393 seconds)
    (225/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.095408203 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.17832568 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.065573135 seconds)
    (228/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.028798638 seconds)
    (229/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.333292042 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.040747651 seconds)
    (231/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.137404052 seconds)
    (232/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.499148129 seconds)
    (233/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.307451149 seconds)
    (234/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.029619431 seconds)
    (235/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.380382419 seconds)
    (236/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.164129431 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.745005076 seconds)
    (238/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.538235712 seconds)
    (239/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.750710988 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.424248711 seconds)
    (241/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.345135935 seconds)
    (242/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.773208382 seconds)
    (243/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.362705498 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.000775943 seconds)
    (245/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 5.085902039 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.28890288 seconds)
    (247/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.091035805 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.804309507 seconds)
    (249/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.430651857 seconds)
    (250/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.193383897 seconds)
    (251/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.451948915 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 6.999534749 seconds)
    (253/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 4.804137281 seconds)
    (254/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.465281152 seconds)
    (255/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.04437735 seconds)
    (256/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.198981967 seconds)
    (257/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.392711003 seconds)
    (258/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.180142137 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.048043479 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.124064429 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.186893645 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.043631505 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 3.924630604 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.545596546 seconds)
    (265/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.071985107 seconds)
    (266/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.09856993 seconds)
    (267/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.208288075 seconds)
    (268/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.051617618 seconds)
    (269/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.493590345 seconds)
    (270/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.093418484 seconds)
    (271/341) benchmarking ("collect", "all", Float32, true)...
    done (took 4.977333291 seconds)
    (272/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.573819747 seconds)
    (273/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.318266271 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.283931722 seconds)
    (275/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.858869481 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.078383934 seconds)
    (277/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.109981774 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.478620814 seconds)
    (279/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.68893137 seconds)
    (280/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.339966328 seconds)
    (281/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.149589713 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.065045243 seconds)
    (283/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.551418875 seconds)
    (284/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.934488915 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.044158374 seconds)
    (286/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.027231893 seconds)
    (287/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.274939696 seconds)
    (288/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.114594603 seconds)
    (289/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.343792706 seconds)
    (290/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.223234519 seconds)
    (291/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.41210922 seconds)
    (292/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.028208813 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.01984088 seconds)
    (294/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.005530423 seconds)
    (295/341) benchmarking ("sort", Float32, false)...
    done (took 7.131337625 seconds)
    (296/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.047715905 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.380520437 seconds)
    (298/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.451958877 seconds)
    (299/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.736520549 seconds)
    (300/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.189410635 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.19024524 seconds)
    (302/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.343437801 seconds)
    (303/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.25145741 seconds)
    (304/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.417120067 seconds)
    (305/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.015865 seconds)
    (306/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.55405521 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.209890234 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.41347422 seconds)
    (309/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.006475957 seconds)
    (310/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.324572881 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.567073908 seconds)
    (312/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.357685396 seconds)
    (313/341) benchmarking ("sort", BigInt, false)...
    done (took 7.175652628 seconds)
    (314/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.052145283 seconds)
    (315/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.358647199 seconds)
    (316/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.413362028 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.240483122 seconds)
    (318/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.255869933 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.43212396 seconds)
    (320/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.1821082 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.233672552 seconds)
    (322/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.153738418 seconds)
    (323/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.069580372 seconds)
    (324/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.207359129 seconds)
    (325/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.382878988 seconds)
    (326/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.990577032 seconds)
    (327/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.510233352 seconds)
    (328/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.192756932 seconds)
    (329/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.91377676 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.203581686 seconds)
    (331/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.042453156 seconds)
    (332/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.185466986 seconds)
    (333/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.225048602 seconds)
    (334/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.592761594 seconds)
    (335/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.449745098 seconds)
    (336/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.138031517 seconds)
    (337/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.740118361 seconds)
    (338/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.230952743 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.163643847 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.108344029 seconds)
    (341/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 6.999822266 seconds)
  done (took 1183.027289792 seconds)
done (took 1185.079352485 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.483599223 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.101579518 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.694018065 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.148593584 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.102441543 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.103747004 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.656910643 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.13018501 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.107143628 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.6557857 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.117804317 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.094462267 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.122304066 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.116395062 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.192531474 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.112724197 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.109198826 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.12782455 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.109471099 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.082993839 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.168127213 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.077944518 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.006752565 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.05255435 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.005729997 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.014291152 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.022770777 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.108220473 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.167329764 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.091860889 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.096772992 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.452155859 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.086079023 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.049567139 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.024159201 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.09423761 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.091678466 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.07781694 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.071787977 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.058266816 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.046893791 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.060935229 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.052218615 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.057678918 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.040706507 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.048038407 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.07949768 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.171465305 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.100825787 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.495728227 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.185459849 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.106740524 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.175695729 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.124015705 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.1369577 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.135503676 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.187479965 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.105840002 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.112811537 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.499228348 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.213915624 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.1153929 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.51763846 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.17765215 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.127986504 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.115369308 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.116452809 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.130217185 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.495329709 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.686620278 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.153261753 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.129684177 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.088522203 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.094846532 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.108788911 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.642441203 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.096075501 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.776492483 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.116216294 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.099023209 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.097316483 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.108050801 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.105616466 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.205046321 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.23699715 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.099676001 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.098155425 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.087099745 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.117173525 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.494394378 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.136080205 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.669834821 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.113224981 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.119834552 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.111353404 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.762786828 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.130064077 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.110341985 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.016465071 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.405550107 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.060229848 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.027125666 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.011346647 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.018302709 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.105549932 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.025759356 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.026277615 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.008607558 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.032070079 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.01590287 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.010137064 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.021373266 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.032928914 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.026374806 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.01772119 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.009138667 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.020150519 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.014262408 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.031228869 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.0207223 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.017086748 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.0165685 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.011227373 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.058046776 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.025795393 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.019102994 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.106035298 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.015102082 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.106153853 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.019072173 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.017440881 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.010008531 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.415917825 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.064359147 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.034342096 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.015310792 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.036181381 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.033899454 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.01875397 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.013713713 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.01889843 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.013031769 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.058453572 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.010979119 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.035424841 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.05824451 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.02316302 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.017537593 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.033520626 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.028678564 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.034713377 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.0169696 seconds)
done (took 328.606485257 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.060107583 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.50022748 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.07679442 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.008069217 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.089783423 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.068581878 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.007592912 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.008957966 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.007863684 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.481023658 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.097262519 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.094217304 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.606344588 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.03118832 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.095881244 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.050635686 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.084131536 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.3603853 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.078329721 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.11655888 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.077336017 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.058148089 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.052445067 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.494953687 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.04649782 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.099520899 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.162444583 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.112507532 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.366648267 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.131680979 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.229577963 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.390996879 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.175876411 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.11984746 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.100731166 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.091791113 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.200012082 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.112668634 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.17291033 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.163440894 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.182636311 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.117338439 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.135523479 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.138175801 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.137936727 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.107432644 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.089819787 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.088549115 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.078954625 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.085509819 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.359870932 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.102954477 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.111147498 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.111391286 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.213863268 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.116917581 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.102256922 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.103191302 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.17234431 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.103757765 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.137465076 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.532220925 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.521849623 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.127476784 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.190757107 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.103085921 seconds)
  done (took 165.495458369 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.213691801 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.116636837 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.105505547 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.017863828 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.071858323 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.091412802 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.016898172 seconds)
  done (took 16.668215123 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.105330284 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.095836902 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.122115741 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.096806066 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.039160856 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.214357503 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.031755957 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.048289214 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.109742614 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.094004568 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.444508469 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.086735319 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.057933491 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.066230005 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.06602214 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.102233135 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.049020122 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.059821907 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.196531836 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.163320046 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.096026031 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.10366802 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.145227655 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.110957188 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.104991898 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.133532886 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.152678151 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.146589592 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.124024257 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.109868406 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.122931763 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.110987565 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.112905545 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.104952904 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.103438275 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.125458516 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.13842069 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.150941902 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.105369815 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.491426153 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.101922407 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.089760905 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.093759809 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.108770019 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.016322168 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.040033058 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.091332122 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.100187357 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.09293099 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.090156169 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.092277546 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.036758407 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.045762182 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.055216957 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.120114652 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.096631119 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.086674031 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.058282112 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.061544386 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.047804801 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.06474213 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.132494364 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.078726823 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.051566458 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.108222199 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.130117465 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.105214698 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.104014238 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.117394781 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.137612288 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.096306476 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.154645249 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.149687121 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.230164353 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.116414875 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.29967843 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.141151587 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.117239952 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.104689413 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.086580821 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.142949622 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.120429217 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.12249555 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.132469049 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.128161469 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.12625943 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.124914052 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.12754509 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.141850362 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.117841799 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.151287855 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.106433039 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.129586895 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.201092246 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.09549894 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.214627829 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.140809335 seconds)
  done (took 210.37364479 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.112435947 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.095747839 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.124384291 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.115252586 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.114977886 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.289195529 seconds)
  done (took 14.895719149 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.108425544 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.117593372 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.112518811 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.106350346 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.092302975 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.117983112 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.118589833 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.106377457 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.118581636 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.111738834 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.09787035 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.117978691 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.107229615 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.087766736 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.025865662 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.021051027 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.019240538 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.019774317 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.019796324 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.02021988 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.221088204 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.021595071 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.020753142 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.024853031 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.026690726 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.020171617 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.030506283 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.01987886 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.019727139 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.027916122 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.0256846 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.021695456 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.025737037 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.029497568 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.025325925 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.02557897 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.025235427 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.024026481 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.019813815 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.021607435 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.024042458 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.021794923 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.020732146 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.024727999 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.022994555 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.031143617 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.029497906 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.030943505 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.02085827 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.024263857 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.025001202 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.021153202 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.022974161 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.024549591 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.029631508 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.028930375 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.029740345 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.021039149 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.022365279 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.026577707 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.026331387 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.022523107 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.025175176 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.027431989 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.021944106 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.025163359 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.026199979 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.027478651 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.022730201 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.021737293 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.026247288 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.022130154 seconds)
  done (took 149.197698145 seconds)
done (took 558.565150746 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.102121211 seconds)
  done (took 9.051449828 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.284763898 seconds)
  done (took 9.367663272 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.309760621 seconds)
  done (took 14.269876084 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.07764689 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.061083166 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.033718175 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.030806678 seconds)
  done (took 30.177690512 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.19056317 seconds)
  done (took 9.145467695 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.043331394 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.025076402 seconds)
  done (took 16.113325916 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.128440122 seconds)
  done (took 9.089975005 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.384862936 seconds)
  done (took 9.382306567 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.046606424 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.027046877 seconds)
  done (took 16.063375128 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.025266998 seconds)
  done (took 8.978405634 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.613107243 seconds)
  done (took 10.656868962 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.033247947 seconds)
  done (took 9.019099744 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.085743685 seconds)
  done (took 9.038671908 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.728022585 seconds)
  done (took 9.682194571 seconds)
done (took 171.983420037 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.03708323 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.024061304 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.025029982 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.024080277 seconds)
  done (took 30.061531451 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.063833247 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.062901215 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.065931263 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.069385382 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.052015664 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.052483614 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.063264027 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.064589873 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.052852252 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.082300636 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.064047618 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.081601337 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.069427983 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.06605582 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.066168211 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.082823688 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.082523022 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.063235258 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.052902833 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.067447037 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.082970602 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.082615694 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.025072965 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.025127206 seconds)
  done (took 51.497388551 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.23195818 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.097022848 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.190540741 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.083338404 seconds)
  done (took 10.556472379 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.024544729 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.099493596 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.083832795 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.084370053 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.084015818 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.191751382 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.085609353 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.23251385 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.202138607 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.203634769 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.029918538 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.041076921 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.043443615 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.084404388 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.192470507 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.024849044 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.025457667 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.203059241 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.100990443 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.22349194 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.026838427 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.084319684 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.084371747 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.086769403 seconds)
  done (took 52.497584081 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.025844174 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.039645548 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.039007955 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.027808457 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.026267608 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.027267862 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.03792098 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.027775514 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.056489361 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.030294837 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.027993378 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.027140069 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.027703328 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.03013224 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.027395429 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.044404013 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.044293697 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.027212715 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.029829653 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.038498648 seconds)
  done (took 42.618013976 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.02599359 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.026315666 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.29843086 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.187664792 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.024138045 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.029200743 seconds)
  done (took 34.54708227 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.043161943 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.047822856 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.036337583 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.063808394 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.095587691 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.03914934 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.114633426 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.233619134 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.040242401 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.113770865 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.054424053 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.036537873 seconds)
  done (took 26.878899971 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.024411332 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.029381607 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.028703619 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.052766058 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.040450217 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.03657991 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.038658781 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.026206958 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.044158061 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.051068033 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.036546052 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.045960791 seconds)
  done (took 46.411433223 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.199384141 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.187383482 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.360336617 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.716236344 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.545593577 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.16304715 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.425038161 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.537233566 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.801400056 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.839584739 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.564638479 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.109016006 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.535082699 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.980313501 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.029737213 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30576351 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.031365389 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.998478179 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452004696 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.107135402 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.03414077 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.030420639 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035355358 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.553411911 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.352869924 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.029551554 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.222858871 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.054282836 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.029134906 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25431835 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.028738768 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.065140014 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.174853526 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.326382285 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.542126134 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.113040306 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.120104338 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.005221998 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.083892818 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.067481341 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.043798899 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.046407008 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.03056911 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.04516712 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.27747359 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.031157871 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.034322665 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.627616614 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.983832687 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.157657715 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204081465 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.894523001 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.086106497 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.730784142 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163737388 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30478365 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.03737089 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.016441135 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104234845 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.089567354 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.202027099 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.124410627 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.200746215 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.984651069 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.537194474 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218188343 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.032459203 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.038380667 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.285911163 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.305332655 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.113639304 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.16282215 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.772951425 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.031689056 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.034752492 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.459827572 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145738481 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.031630605 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.756554393 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.539791488 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.984673934 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.13248971 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.76932156 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.039029103 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.03029094 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.043308663 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.247107561 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.98310362 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.115508357 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.102679945 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.395697228 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.032710762 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.032684086 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.064652564 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.034394257 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.018710724 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.68449439 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.108668348 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.983270943 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.582637239 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.030896287 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.998865557 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.032507058 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.053484102 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.438605495 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082755484 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.764574245 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.662921168 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.319410854 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.60665509 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.041128995 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.032295139 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11623829 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1140458 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.031976055 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.72102688 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.018989869 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.131118873 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.210917819 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.031946746 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.984147928 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.04642081 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178650879 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.033378665 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.073866448 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.033520548 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.041111331 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.033258225 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.03868182 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.289459092 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057703449 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.53866602 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.149730245 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.035057447 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.975843626 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.04226706 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.516693445 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.124201755 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.098316668 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.458414392 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.630424112 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.502009763 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.997449704 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.797065392 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.488095718 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.142539095 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.11841778 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.648510553 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.19753094 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.11901737 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.034588928 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.18922248 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.046879525 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.03906252 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.034346777 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.81073349 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.990004983 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.088723927 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.035260868 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.990764438 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.017003168 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.22807572 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.679803897 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.078040585 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.04325455 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.118573652 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19630813 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.037500392 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.987048129 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.393907574 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.284407216 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.547386861 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.418955884 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.680649158 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.122689117 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.050015024 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.228847273 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.119379664 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.657991977 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.243921264 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.369130065 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.472240017 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.032403326 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.036113328 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.126996276 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.433436636 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.061552414 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.789306732 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.030263208 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.951763737 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.072553386 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.022326207 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.98727229 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.04405525 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.501812895 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.045173141 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.600332585 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.133945053 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206643623 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.039175874 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.039162048 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.04649829 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.307132881 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158167794 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111898546 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.115332482 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.990890198 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.638337649 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.085628542 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.040996789 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.037272261 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.434879803 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.273300029 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.061433708 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.038791061 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125270664 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.130846504 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.646413026 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.043255906 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.042763452 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.507738155 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.04657757 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.555936689 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.055771593 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.207297169 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.079451927 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.103483016 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.898297748 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.562174252 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.148810886 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121296757 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.039157285 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.042221011 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.303302923 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052515285 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.305382255 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.521674034 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.648468312 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.720950604 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.143623245 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.665322117 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.060995331 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.041017182 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.695348069 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.079646632 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.042358753 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.185398517 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.637045051 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.170181115 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.198260626 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.123291415 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.040704373 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.491164728 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.633752862 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.041322425 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.972070667 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.156084308 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.040164152 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.233302098 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.79449564 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.043174134 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.040152735 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.050433437 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.212303015 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.186295664 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.432415119 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.553132619 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.383563348 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.993576031 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.048862195 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.140221267 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.323137386 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.040995047 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.076295019 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.673980912 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.691136852 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.808697283 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.566006745 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.285550546 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.660326245 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.489758801 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.146643502 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.057923188 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.966986874 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.238208422 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.00335041 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.171764019 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.992354533 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.822916781 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.343017024 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.067163692 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.496280582 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.08413507 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.557938541 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.412060628 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.12110525 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.150588411 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.073619575 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.041812015 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115535365 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.041935658 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.078700748 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.168673752 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.046171527 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.420659258 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091513902 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.089871245 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.050521458 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.705650866 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.074875276 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.04745157 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.501233899 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.0717952 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172065203 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127087714 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.859709995 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.09208436 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.044972459 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.554640198 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.61315563 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.496111279 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.136213504 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.624742719 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112935273 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.774662044 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.044425772 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.237343497 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.050672635 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.656859124 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099137048 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.433833617 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.05333172 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.215817473 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355360828 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.142509039 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.05217944 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.996699672 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.62117837 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.088366847 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.523104431 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.048577652 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.796411958 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.532312629 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.078878832 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.576451537 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.000211365 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.047486367 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.284740256 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.73210322 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.735952385 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086616157 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.046723553 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.194809355 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.236432113 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.160221156 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.768949479 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.057249514 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.072477738 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.237978307 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169508278 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.987536652 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.570328201 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.794184513 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.325505647 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.062128137 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.190532334 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.194210572 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.228530827 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089255607 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.122370584 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.776892382 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.500920411 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151722797 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.996912798 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.046285312 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.725897423 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.50365731 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.131210979 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.320447006 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.498890329 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.10185829 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.084859735 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.048604596 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.566943202 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.757222168 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.744581773 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.372860603 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.569650477 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.631724951 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.79312792 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.778499883 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.241129315 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162720929 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.44389444 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.960666499 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.418016895 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.329150868 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.054191932 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.998281304 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.194742608 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.053794801 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.131018214 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.890412424 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.325428228 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.127240561 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.845580363 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.633205643 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.050089043 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077534191 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.631336687 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.073385367 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.070168182 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.047585976 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.571561124 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.432467179 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064880492 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.003487291 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.799739568 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.999492013 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.241986807 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.082274065 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.094385072 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.862025094 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.129084563 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.204611234 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.573431027 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.136217108 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.094298239 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.999901141 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.121988671 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.032077968 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.702183013 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.815775693 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.074630757 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.052900236 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19446866 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.033512778 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.095855615 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.057277254 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.360935976 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.500608376 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.507042986 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219416673 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.406524586 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.332118903 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.987243434 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.153880626 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.278620568 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.000609713 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.069674507 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.032122059 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.099193386 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125106232 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.04985262 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.055878908 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.289340829 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.181787463 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.207155612 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.190781246 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.056938545 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.074474405 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.183620792 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.194585189 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.054368649 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.058515219 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.098260319 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.197969662 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.05104526 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.022061106 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.244831886 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132523172 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.436559668 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127694908 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.936346387 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.058521579 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.985697452 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206675346 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.556322796 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.052412178 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.868055039 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.122985921 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.052166315 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.507547146 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.699692681 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.197489239 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.306691586 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.047810273 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.064669535 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.104621371 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.057603604 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.058227918 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.657152105 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.428018486 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.052911271 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.508369094 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132013272 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.061165601 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.813025935 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.53061676 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.053344955 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.113153224 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.167525509 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.544547492 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.309343899 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.067470143 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196232451 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.058999054 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.006363572 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.054680185 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.124544931 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.560415651 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.064858575 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.591748442 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.217290773 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1945364 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.057568513 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.05489577 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.061846677 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.24809335 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.234986825 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.078766791 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.317825901 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19887648 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.053789921 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.578577328 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.729971973 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175202355 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.106702874 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.063822749 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.421683697 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.829941483 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.094891812 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.595127064 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215886253 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.057342909 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.282550215 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.303659326 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.056377974 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.225959982 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123905631 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.305317667 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.35959451 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.618731512 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.1633592 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.036037441 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.451452614 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.079857757 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.586026444 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.507434166 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146557121 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.055288027 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.069032788 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.05558198 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.135613851 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.662372579 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.234337703 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.200390609 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.271423344 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.570248881 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.058823617 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.009269097 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.055845936 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.08291699 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.05989783 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.008420491 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.117898484 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.915730934 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.249033319 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.38270203 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.006810577 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.202790599 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.045636648 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.011311506 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.535299329 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.057169293 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.375054157 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.008246346 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.061327136 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.011416427 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.157396496 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.262742038 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341892122 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.057625055 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.748680458 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.066286905 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.057726929 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.057135673 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.146868454 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.059307717 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302222357 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.514849538 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.292881642 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.221597287 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.912701578 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.118570746 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.028465453 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.102614091 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.876071124 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.604227213 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.173928115 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.25355423 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.848134702 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.038342859 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.589263098 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083502516 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.764453462 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.065307699 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062039875 seconds)
  done (took 2400.192443238 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.09647257 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.185505332 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.112305475 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.097351101 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.127234815 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.145297692 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.09947462 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.071110559 seconds)
  done (took 58.922092774 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.05822712 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.067049427 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.463143514 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.082356601 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.061756888 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.070620174 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.39016892 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.102854763 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.061880893 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.07076944 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.065759112 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.069070131 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.061627357 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.063638332 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.070223215 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.350782296 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.08872024 seconds)
  done (took 81.243239315 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.092031664 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.850453877 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.069036416 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.29499873 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.158349975 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.355447755 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.06757861 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.066645362 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.712539953 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.345229408 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.074616686 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.07317558 seconds)
  done (took 90.158785361 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.063233345 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.062022974 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.061887003 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.062235532 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.061973712 seconds)
  done (took 12.300425571 seconds)
done (took 2939.969345114 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.289162632 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.210905953 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.159969478 seconds)
  done (took 6.359837753 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.121203471 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.193554884 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.253240572 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.201689264 seconds)
  done (took 10.772174296 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.354449092 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.532998141 seconds)
  done (took 6.876562833 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.585984441 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.067949904 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.600538209 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.062654798 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.066570677 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.066460064 seconds)
  done (took 23.20262448 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.062307522 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.062340555 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.063031449 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.0622601 seconds)
  done (took 10.248419957 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.061816281 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.05612685 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.063573405 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.079265189 seconds)
  done (took 22.250262517 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.439452755 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.301881026 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.817475407 seconds)
  done (took 9.548929528 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.875392936 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.437858594 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.855618919 seconds)
  done (took 10.159375241 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.3359771 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.981111184 seconds)
  done (took 8.307338632 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.217867406 seconds)
  done (took 4.208645453 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.538562926 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.542543901 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.915832804 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.935221046 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.072714497 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.372300096 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.425646983 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.452420575 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.745447516 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.570289474 seconds)
  done (took 28.562380332 seconds)
done (took 157.025260311 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.996990282 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.453123758 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.237849543 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.73785513 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.161514995 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.237434267 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.127151923 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.502929996 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.638505337 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.635127859 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.743992084 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.158976011 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.13128142 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.45134768 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.131757698 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.40822301 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.479196151 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.973111293 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.290428135 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.837926996 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.138210794 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.326647633 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.431335125 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.330041011 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.484413227 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.194551649 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.191836338 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.434785211 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.546623052 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.194762253 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.194723238 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.097409954 seconds)
  done (took 181.892244057 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.064207488 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.068259526 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.069673915 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.068018484 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.822006299 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.07041927 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.068321944 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.067122591 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.877537914 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.874708186 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.068902271 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.815954742 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.06981124 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.068411733 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.071020247 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.06903092 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.006800034 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.068885859 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.068675331 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.069736262 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.070037352 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.699311826 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.068983491 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.700888675 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.013303651 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.068802723 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.069607704 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.069419226 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.069578387 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.069298648 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.069239566 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.069209373 seconds)
  done (took 218.469772637 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.066104965 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.06835923 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.071026195 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.070384572 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.069853167 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.071221103 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.072602432 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.069856385 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.06912654 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.070597331 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.070746403 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.069511052 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.070484034 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.070167068 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.074292543 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.070188786 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.07166366 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.070895538 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.069803593 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.070075563 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.072172001 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.07080649 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.070926296 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.070889895 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.070827244 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.070015601 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.070978555 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.070882587 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.072094742 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.070320145 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.071416821 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.072264071 seconds)
  done (took 228.265958555 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.364475143 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.068537686 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.069543111 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.444493679 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.070081878 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.068773678 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.424980692 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.367414908 seconds)
  done (took 21.881436819 seconds)
done (took 652.514961805 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.785509345 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.978202421 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.244004756 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.100506316 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.720734629 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.164804881 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.092366257 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.194321896 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.858750468 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.211188828 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.583801771 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.104029537 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.992495681 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.132045545 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.249283493 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.178187088 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.541119442 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.851390574 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.271111958 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.921879195 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.341438343 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.109319762 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.21984196 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.914083373 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.606131015 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.130161606 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.199906156 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.552920647 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.102331977 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.365984572 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.144469192 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.48635423 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.120755757 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.100319143 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.174887793 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.151383536 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.407118352 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.117742472 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.236234717 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.876792434 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.94046806 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.731873453 seconds)
  done (took 112.203278466 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.079931612 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.078172423 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.078513186 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.078273543 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.079211426 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.078714703 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.078217047 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.078536836 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.078521255 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.078580888 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.078990713 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.079351812 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.079114022 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.079576286 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.078617001 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.079684624 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.079189483 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.080740024 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.079344341 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.079527243 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.079453972 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.079058641 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.074369129 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.07902827 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.079053671 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.079473577 seconds)
  done (took 56.073743268 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.072304714 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.284027825 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.414741717 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.114123549 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.074402436 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.07720805 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.114743615 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.085287701 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.077405145 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.076308405 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.180516102 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.080244831 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.091367807 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.41175281 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.111565669 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.07445169 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.073533168 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.076135187 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.293968421 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.096744305 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.117599615 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.085579975 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.115774511 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.096414321 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.077797137 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.075879931 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.078803958 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.563330746 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.089889417 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.182483553 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.17819105 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.12756523 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.502303627 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.425119143 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.154835369 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.085180292 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.075362248 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.228162262 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.092018429 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.076788473 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.116307497 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.088126677 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.413700195 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.670475198 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.099401397 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.076002599 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.561395493 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.2407104 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.134330051 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.093250319 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.421786394 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.115071869 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.076105751 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.077964212 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.118937263 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.088515407 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.076656719 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.382710807 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.093932369 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.117579862 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.0872568 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.077800508 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.303479392 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.09158823 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.287740413 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.091211238 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.085245875 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.079317348 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.420404484 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.115977265 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.656924558 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.100363824 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.077328224 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.184473104 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.296268881 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.59851862 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.097940919 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.302956117 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.525002685 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.13045273 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.09260103 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.546909266 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.132954234 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.093100156 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.077797856 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.077972724 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.077575848 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.127783193 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.118103195 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.584990109 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.6668858 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.406507416 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.132720962 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.095966712 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.080299603 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.382478841 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.091719533 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.079245049 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.409474039 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.688929129 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.103450841 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.08805187 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.639690346 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.104142534 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.121713254 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.09519913 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.424921008 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.118236065 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.128730726 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.079232045 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.088093918 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.084040354 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.120512499 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.094904902 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.079280375 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.636833884 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.256443332 seconds)
  done (took 259.213096279 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.084266628 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.080533878 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.078933645 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.081697103 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.078343477 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.080446997 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.077612238 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.078715218 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.080069329 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.077451977 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.078780454 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.084293336 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.08277351 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.084660313 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.110811833 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.081194748 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.694170721 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.07987655 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.078115658 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.083233565 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.914796222 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.086145698 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.079407483 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.083290908 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.08303536 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.080749024 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.084121072 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.107453255 seconds)
  done (took 173.792048208 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.080592813 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.14887046 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.096749756 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.149279429 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.095458103 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.081174458 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.112286834 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.106202339 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.090951889 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.081398064 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.08111835 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.121021847 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.092162935 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.184108513 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.127062258 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.125311206 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.191897963 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.09315051 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.081606456 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.08201267 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.150145762 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.102457594 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.121940302 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.161710788 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.096826594 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.151283279 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.103074803 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.082156209 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.082197371 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.207325136 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.107794736 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.122752104 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.13207775 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.11056542 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.21520112 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.210089535 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.197099573 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.125442321 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.090333427 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.083040696 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.083138662 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.088807573 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.152103404 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.098588345 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.084776139 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.217078938 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.107024506 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.083525714 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.107975117 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.08288056 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.101011538 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.107862678 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.132961124 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.221320672 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.146992228 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.11224762 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.115656652 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.108972893 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.08696048 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.186339456 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.101497941 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.209595738 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.110023028 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.090549026 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.085396552 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.088553221 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.154650056 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.130980481 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.195539839 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.097431986 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.186264646 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.166864352 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.099576638 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.085187375 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.085228035 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.155236213 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.203105924 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.166431142 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.169903999 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.134215379 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.103155903 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.084350209 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.09174724 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.124649837 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.096576085 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.209877172 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.213191477 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.096224658 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.0886385 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.086405485 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.086004365 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.119770605 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.168119571 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.140022939 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.208324412 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.136624325 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.136450548 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.096959716 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.104000422 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.094856713 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.129187383 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.097746382 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.102795783 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.556076138 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.140058579 seconds)
  done (took 225.542237051 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.551120969 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.147536028 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.171932532 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.369776342 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.525935233 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.346078688 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.143104565 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.156341929 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.148378515 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.291570221 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.198733919 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.207626532 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.139966765 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.11690543 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.14511756 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.149337507 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.18319793 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.505876634 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.268709305 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.054308928 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.143738456 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.482195027 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.474522235 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.59264468 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.188953486 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.630970042 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.821822468 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.251739476 seconds)
  done (took 69.434032759 seconds)
done (took 898.250932844 seconds)
SAVING RESULT...
DONE!
