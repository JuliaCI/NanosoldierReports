cset: moving following pidspec: 1516044
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.754301035 seconds)
loading group "shootout"... done (took 1.148185805 seconds)
loading group "string"... done (took 0.654893447 seconds)
loading group "linalg"... done (took 8.511884177 seconds)
loading group "parallel"... done (took 0.162924388 seconds)
loading group "find"... done (took 2.986822291 seconds)
loading group "tuple"... done (took 2.060200501 seconds)
loading group "union"... done (took 14.326394943 seconds)
loading group "dates"... done (took 1.420297039 seconds)
loading group "micro"... done (took 0.211167552 seconds)
loading group "simd"... done (took 4.635727723 seconds)
loading group "io"... done (took 1.372428301 seconds)
loading group "random"... done (took 9.541764809 seconds)
loading group "problem"... done (took 1.594281841 seconds)
loading group "array"... done (took 24.977257517 seconds)
loading group "misc"... done (took 1.815297321 seconds)
loading group "scalar"... done (took 42.102595488 seconds)
loading group "sort"... done (took 3.209491653 seconds)
loading group "sparse"... done (took 12.778267523 seconds)
loading group "collection"... done (took 17.961881126 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.437448466 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113227901 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161163234 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.110838648 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.231307071 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.129591411 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128302606 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087714682 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.04388983 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140372865 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135448201 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.422354175 seconds)
done (took 5.555408435 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.320668265 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.240446711 seconds)
    (2/2) benchmarking "String"...
    done (took 0.16147747 seconds)
  done (took 1.548554094 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091187337 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057914538 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064723806 seconds)
  done (took 1.357141045 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063357663 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.139230493 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064264452 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064440724 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064251695 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064100908 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063868348 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063753448 seconds)
  done (took 1.66824956 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072000147 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06550504 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063349056 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065090947 seconds)
  done (took 1.408655316 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065818056 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118480902 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062491339 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062301046 seconds)
  done (took 1.45028458 seconds)
done (took 8.976661859 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.158151626 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.760678254 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.853296694 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.145208909 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.309068798 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.342891505 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119842704 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.200993806 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.11266165 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075062842 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.150877883 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079944158 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.482067779 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.476304868 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071461395 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.185553411 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.607729668 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084166626 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112648516 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.218840411 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.081642968 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.082386203 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087101985 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071230571 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.141065426 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.176626681 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.616519452 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098712582 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068056767 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.192663941 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069829691 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074140807 seconds)
  done (took 10.481789666 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114259277 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110568185 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066567067 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.100479983 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092972916 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067638853 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072848978 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066335949 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085842346 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.130101071 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089920322 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.122203913 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066041208 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067602579 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.09756454 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159343454 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082070831 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080524698 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066715503 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079938887 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.093582418 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078750318 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076996403 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076324885 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.11050718 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.133266605 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.088511993 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.106652456 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066579033 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078800338 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093448513 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.10701158 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067101116 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065054884 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.107423851 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083778703 seconds)
  done (took 4.429049289 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.02858448 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.093208965 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104624795 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100066478 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106142041 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092905412 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.14647908 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120910797 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098607024 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066949177 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.092189428 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.175276366 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.675725051 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.06941415 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070841141 seconds)
    (15/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.113835641 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.14545809 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.360466252 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.902023948 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07211596 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06742703 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096864953 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069104101 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139011443 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066335872 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177095488 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.647655775 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071787117 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06903511 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096832131 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065166777 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.145557054 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095223611 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072584351 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.580691319 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067530734 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065315924 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089960568 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094513993 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06767919 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068727472 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079664401 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066848132 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.121633278 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082014827 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.577940133 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071538377 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.65528508 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.336448375 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075422716 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073528197 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102193752 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067692004 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068352676 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.690133481 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.160633864 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067473881 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.294874058 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071163172 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069050876 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069164924 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101334529 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067644728 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069217607 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073706945 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.088626566 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.016672223 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.154598125 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090178884 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068945313 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.42940558 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077329952 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070456808 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071911659 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.099250599 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.137511278 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067288839 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066728728 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112751465 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.358653812 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090995138 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070226839 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067036546 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065875827 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.530720896 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.067201422 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06621475 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.94767441 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072439234 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.516187962 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065101643 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067200665 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068531429 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088721562 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067138569 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063775175 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06427954 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099704653 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069147886 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.595845104 seconds)
    (100/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065710929 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066871216 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.508504858 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070026662 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097690975 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.12389836 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067331012 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.105840126 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.067080601 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064386294 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072867491 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065291918 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064026192 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06881447 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065278534 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066041547 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068195667 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067869613 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066818388 seconds)
  done (took 23.539181167 seconds)
done (took 40.625865389 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.397864126 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078454716 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07817999 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07738242 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077354187 seconds)
  done (took 1.930776143 seconds)
done (took 3.262237087 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.257651014 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.078811311 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063399004 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.205829245 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087841402 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.179014728 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.219873724 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.293566545 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.090994051 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089326996 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089941532 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.223593713 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.23553198 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090826278 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.164285123 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.235437234 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.092039089 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064665869 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.090105896 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.092088823 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.092396515 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06462035 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.090190556 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.092926886 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162910157 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089756574 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063716983 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.164407764 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091667073 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.167327223 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092574387 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.091712444 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.093174222 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.164809354 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.09279398 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.165188669 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064555263 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.092518344 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.092589935 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.09545841 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.092682877 seconds)
  done (took 6.424794285 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077080139 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079953962 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081313493 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060333257 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06945085 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079806982 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060415533 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079295921 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100319558 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080619483 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080624797 seconds)
  done (took 2.172117111 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071044517 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08071258 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081615099 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.05999518 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070932454 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080619379 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060320089 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080150184 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083873864 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081686474 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080974063 seconds)
  done (took 2.085458898 seconds)
done (took 11.926739861 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190799378 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087581501 seconds)
  done (took 1.512977689 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.256836483 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.499050572 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.262697492 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.121753009 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.099650477 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.113540666 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.228535663 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099196056 seconds)
  done (took 7.101271848 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.126145731 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067661182 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065266289 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065645051 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065976982 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065272775 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066769637 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066026334 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066652805 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066542474 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067726954 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066610995 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066827042 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.06618361 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065702198 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067934078 seconds)
  done (took 2.491538912 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100910572 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.068224501 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096406076 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060224705 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070248657 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061166877 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068970701 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070578359 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068096684 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.068454887 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.06989429 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068282433 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.06939344 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069371872 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070688315 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072813564 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072407975 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068654741 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071234335 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.07255106 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070525862 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071947847 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073153544 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070368439 seconds)
  done (took 3.093690583 seconds)
done (took 15.45379619 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177422639 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072793218 seconds)
  done (took 1.50056897 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093348457 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091194018 seconds)
  done (took 1.449447283 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073124514 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058502714 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075296502 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067690318 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.05922239 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058930153 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074410684 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059337926 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059087927 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.05926465 seconds)
  done (took 1.9131477 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063422843 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.065623576 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063540376 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062062918 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064339704 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060040386 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062590895 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060289695 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.066407816 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059272884 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063173499 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080782258 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06274858 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081347622 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063720018 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063847231 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064918429 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063366762 seconds)
  done (took 2.439928831 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061862293 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059394976 seconds)
  done (took 1.393744123 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064596771 seconds)
    (2/7) benchmarking "second"...
    done (took 0.05965199 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062271632 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06137406 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059649939 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059119866 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059706272 seconds)
  done (took 1.694310714 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427099629 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.19363362 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.424426651 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067946461 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081790748 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.268143054 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063485357 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067511787 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067529969 seconds)
  done (took 2.971368376 seconds)
done (took 14.640525479 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083940958 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180741681 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.109969322 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.417298853 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.07777636 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065609711 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093449281 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.20878443 seconds)
done (took 2.528372084 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.285934872 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.20829504 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.257562832 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146825858 seconds)
  done (took 2.888011096 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418811632 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.167469768 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076163162 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065454078 seconds)
  done (took 2.016526089 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065996111 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069644874 seconds)
  done (took 1.422806454 seconds)
done (took 7.904121767 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073589267 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059321509 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.088248917 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065615008 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061451645 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.061038081 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060377803 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06133415 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059439257 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.061496789 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.061977178 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062292476 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061452355 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061283116 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061493373 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061210014 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061020112 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.060504214 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059747638 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061613458 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062376376 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061350254 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061975142 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061511781 seconds)
  done (took 2.820857048 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080113281 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063664683 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064229659 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06388446 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064741128 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064548119 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064415344 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063623981 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064679208 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063311281 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064948418 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064955896 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063396661 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065945878 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064191394 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065443821 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064949745 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063914292 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063607399 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065138065 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06472751 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064140425 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065723051 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06557599 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066005671 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065911884 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064446205 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064735213 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065838122 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.066894188 seconds)
  done (took 3.256539118 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067293884 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057864099 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058162438 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067881811 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057698216 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057960007 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058601815 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057851048 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058138803 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059130664 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059434022 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05863509 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059011828 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058017755 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058112366 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058706928 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063361648 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.07857357 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058413411 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058206652 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062905547 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058389276 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058207099 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.05802835 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058564724 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058397999 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058340651 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060004196 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059303039 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.0597568 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059007917 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063548028 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065128784 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058984281 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069258831 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064058474 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058737723 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065501585 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059849895 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058700646 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058674042 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058670698 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058831521 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059822892 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069865825 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059191496 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060202124 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062652219 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059176376 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058774166 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.05899734 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060677812 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064730961 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060299932 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058805256 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060060079 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058726145 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059597248 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059028735 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059009503 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059862127 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063265045 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060527302 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059795861 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080088216 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060414345 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069481286 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059121591 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.05976129 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063153111 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059602131 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078086158 seconds)
  done (took 5.699986528 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07267707 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068959038 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076484304 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067839507 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061731896 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059009092 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06212999 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05905128 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068091057 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062458787 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059473399 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062131464 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068111881 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062675439 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06107139 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068195451 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062511974 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06164402 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.0594472 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063162041 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06056298 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062585516 seconds)
  done (took 2.726986473 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144748198 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064622006 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107250613 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068508513 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066787011 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067991027 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064467898 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064473621 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064718302 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065134334 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064900069 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064656284 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066625008 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064990202 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064949669 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06481404 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06589385 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066074257 seconds)
  done (took 2.600198326 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077715254 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064095254 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090505411 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063637655 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06420373 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063928649 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067661903 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067790936 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064395114 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065089918 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067993966 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063878348 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063856538 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064133244 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063996168 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065056511 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065017559 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064380683 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067687969 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067811325 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068131212 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06835057 seconds)
  done (took 2.77987402 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079028198 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063060628 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07881534 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064506943 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058344304 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058627243 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065022782 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063501041 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064867831 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063104386 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063504129 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058774218 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066626936 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064131141 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.0660497 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063678263 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063337102 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063511278 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06323169 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.05850534 seconds)
  done (took 2.594326995 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.097773043 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061056017 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060701937 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066096938 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061405551 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061148064 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076966426 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06094084 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.0608003 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084946089 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060890267 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060849219 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065592858 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063923255 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06088462 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065645994 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065690726 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06611592 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062520116 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061928872 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08581665 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061632153 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066731962 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061708399 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061833725 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061788652 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06184679 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064946367 seconds)
  done (took 3.155794185 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065906685 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062757641 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062153414 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061879768 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061712061 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061519166 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061795699 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064810338 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061640699 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061986167 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061682956 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061746287 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061735784 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061609674 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061941134 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061689232 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061941938 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062896695 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062205517 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061997913 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061701719 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06172935 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06163668 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062110413 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062435553 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061991368 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062591781 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062612042 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062330072 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062589971 seconds)
  done (took 3.183472495 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073662288 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069211592 seconds)
  done (took 1.454181753 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062466932 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075382203 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05747891 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07035692 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066314245 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062175752 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067881553 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067209856 seconds)
  done (took 1.835136431 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092406302 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.115816971 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060049627 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060801038 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089922168 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127266992 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.101582178 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072658934 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074476145 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063153661 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060413869 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099996633 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059684218 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073881119 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061236054 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069642823 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068163064 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078576383 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073478155 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058609993 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074224868 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06153913 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060000428 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061393895 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06111406 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06783458 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07687744 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073437469 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069383224 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058571178 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079846672 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059151485 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060319932 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06913325 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091950804 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060455195 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097780884 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060042367 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064478447 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059044101 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072206018 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081040615 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074378811 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078061328 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061051165 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061319327 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059059567 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061231857 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063568128 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069695294 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059999162 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067677914 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058870546 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060920467 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07072966 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059903911 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064580119 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069145616 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073822309 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070583488 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072293712 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07545156 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068842446 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068144827 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060902185 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080576532 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06132981 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073516894 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075075977 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060708647 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0731931 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059188722 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058582943 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059495724 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094684671 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061527784 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061001076 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060141028 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059899133 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062211086 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070898598 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065423746 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068017756 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063851039 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077923851 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070920831 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061053886 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069675201 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080566556 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065288359 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061584786 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079100262 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065104194 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060596861 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.081069999 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072058817 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06306049 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062554503 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065415483 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07622196 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063221978 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060380653 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070929981 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063586149 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.247563084 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063676288 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068878463 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059592952 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069750817 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064248711 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060016816 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.05741306 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063375569 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059190834 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057261726 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068271286 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058511885 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073147038 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065455058 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073357644 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073961938 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069903143 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075615576 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058589764 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060152298 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076847393 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.06836614 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.05967751 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076883666 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.058003506 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069371372 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.05790033 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059618148 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068166045 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057461816 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059888049 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058254409 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064862972 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060145123 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060078438 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064565086 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067657036 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070854466 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059458019 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067853245 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058775714 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074545221 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069213992 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064037128 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062061649 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.05986227 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071686594 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067261694 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070175695 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059281021 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060503471 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059836783 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071066925 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069629405 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061513351 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068189132 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064668149 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060451304 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060029979 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060728121 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063787217 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063003738 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060373335 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069014488 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069472812 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074287958 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066989493 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069296889 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058817395 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059065486 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061311843 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059073774 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064581565 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069324154 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075614657 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071721151 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081311016 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059769537 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071014575 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061607347 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077242867 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073585843 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060656438 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064162487 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058641466 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061340141 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069520145 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071889798 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074616151 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075578059 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065026171 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064971734 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06041664 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07797787 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061793271 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070446814 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071203902 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067624154 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061584092 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06303535 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070827822 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066156011 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061980202 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077667479 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069047243 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06078594 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076182242 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061994735 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073273768 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060914983 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065715541 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067482762 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063725491 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.07204454 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07835617 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061160985 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063030161 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079164429 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064469277 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064169412 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070972214 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07853318 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.068151276 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071329613 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074008146 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.073110641 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067435806 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072715512 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063517888 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072386951 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066100629 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.075057886 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062395143 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081788247 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061214339 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078583966 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063707702 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.074738352 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063210306 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072567545 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06348858 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080677148 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064326324 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063382568 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.075350848 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061164878 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.072385456 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061860266 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067801586 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.069501522 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072469641 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.065345136 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073036847 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064557045 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072184402 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067505502 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071457321 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072453914 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067444458 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061883837 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071215517 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074337278 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071276333 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064144388 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064234207 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063781967 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072955786 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064337214 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064008866 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0712231 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067583028 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068846235 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064362973 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064638202 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064424453 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07157997 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072792166 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084868525 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071723764 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070451537 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07323753 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062371352 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079266166 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062543032 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.0704583 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061209142 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.071407955 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072615003 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062795335 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083361976 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064287712 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071034055 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076190357 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071744562 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067037337 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081899536 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066168067 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071337595 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071041883 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067332569 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069506493 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064475225 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071291243 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072515544 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073880685 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063572502 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070441334 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072024437 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065171031 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.07398625 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064653191 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071305911 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064445493 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06154904 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067458491 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074945362 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067728491 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067950117 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062772038 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061157934 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062851105 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.072156108 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067484636 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072546348 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079429601 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061482794 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063624627 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061961668 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066318962 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.404954673 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071144326 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068793343 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065374777 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060852915 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062606545 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062324602 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060877768 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063376081 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059371097 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059819543 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071504077 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061911442 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06544148 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060814657 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06147956 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071198021 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064672127 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061071576 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067826261 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061385694 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06625271 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059781979 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061452147 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065067361 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059360423 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064085547 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071006933 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077014074 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067102586 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069672613 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061314856 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.06875802 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076364541 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068305555 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06243429 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070594795 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059429209 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079545733 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070261902 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069268585 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070380828 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060987887 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077367523 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064922386 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070291136 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07586006 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060863518 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06723484 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059829039 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076873001 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064974229 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059483933 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068848021 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068717972 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066450554 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072428825 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060823945 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068577928 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065238958 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.064031095 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061827731 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061676249 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069596636 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077390083 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061765324 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065937493 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06900253 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069236248 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065225025 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07299946 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068933252 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06141145 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061925278 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064246428 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061034355 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072616866 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060706572 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065209643 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065460044 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060514127 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067284224 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077269278 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069977445 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069968049 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059529578 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.05927621 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078736167 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064422957 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063512897 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068747434 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070693123 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072785271 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.06986515 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078588128 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061399314 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066476407 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073007337 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061063793 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060209219 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064339069 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.061855176 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070169376 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070652333 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068335554 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062417789 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070440602 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074326256 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061566435 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066274404 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066839259 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061023447 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071792176 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070149139 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070640929 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062909423 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060987531 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.226742224 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068475906 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066840397 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068253791 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059566506 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066643785 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072987504 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066908006 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061516868 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058224703 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061387576 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068071646 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063526393 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057970348 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063625672 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062696504 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065558501 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068339274 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063610298 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05820911 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076369286 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06817006 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068510162 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060244218 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06023268 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059203793 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058111817 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070112623 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058727458 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060896034 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064819392 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061062673 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.077653602 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068290076 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075965832 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060676373 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065683734 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059498095 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069888373 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064558477 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059749934 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070681038 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.058870871 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0756535 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071833284 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065910574 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059156489 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065314014 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068149492 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075231088 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069856622 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069828547 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062975938 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07005872 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061586068 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071263018 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.05948464 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058756561 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070407846 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068953608 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072713524 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059370129 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070480722 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06163947 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068732348 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068480504 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062451052 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061797947 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061795374 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06989103 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064806175 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.06976071 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.06519944 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077562527 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060976976 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071610623 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069653726 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071478936 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074524553 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072891978 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069101312 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061907302 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068162596 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068673282 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061185012 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065632036 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063219151 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082477853 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061797738 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061323772 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074598961 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067503858 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059928308 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067434148 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06511733 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071098633 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06204373 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07121896 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065767467 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061181256 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065627419 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06554423 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059286836 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059749542 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060080835 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070561003 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064825207 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060412968 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081527889 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06318026 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070956963 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074136456 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068873053 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.220992411 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058356559 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.05985873 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072546546 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07443792 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06234025 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067680523 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059859506 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.06823655 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057437813 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068194922 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068199345 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06794263 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058303118 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058784789 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073965932 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074434017 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063678509 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074854821 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068189562 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059856396 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080438186 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068108425 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.05956436 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069787697 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06128053 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058721524 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057924626 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060088987 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070376051 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058104668 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060711647 seconds)
  done (took 42.285751872 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.103269936 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060017432 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062068692 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058578536 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065877748 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059799047 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058689119 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059812384 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059828905 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060908892 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058674349 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058716871 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064160515 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073783108 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067044642 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062512702 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058765706 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059850402 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059808666 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060483327 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065617048 seconds)
  done (took 2.783794231 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064968277 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062339626 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061801729 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061911599 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061650712 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058697534 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062923836 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059908918 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063018228 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0593774 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06282703 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058920467 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059410653 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059354188 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059285128 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060242511 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062693364 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061975665 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058750797 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062257712 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060323428 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062720034 seconds)
  done (took 2.759522627 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062998211 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059303107 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067677283 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057771649 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057667688 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061003859 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058148433 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063322152 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063482923 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063483006 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068736669 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059988745 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058435249 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064954263 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058344828 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059474621 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103616961 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059812741 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.05971035 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058438761 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061281489 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068474575 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058537545 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059038488 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063943249 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062138719 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059740799 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062164524 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059855717 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064042661 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060222288 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058713382 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069190232 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067969694 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063993491 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06396202 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060728668 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060105111 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.05889129 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058938601 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068180322 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060546055 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060168207 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060839939 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068694685 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059022289 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058705647 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068828495 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058717775 seconds)
  done (took 4.490411063 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07347976 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.10981191 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064837352 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091158511 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071015342 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064002452 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064624672 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091806965 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059849097 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060063412 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071639644 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07180045 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061246965 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062344039 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065561453 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061808386 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06258977 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061112011 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064148848 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061404416 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064181947 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066123283 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071937186 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071788587 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062473919 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06095043 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061362748 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062900409 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071586416 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.065150246 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063860671 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063780187 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072157282 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067301315 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061323727 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061245616 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072417357 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061999707 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061835099 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060636698 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061831414 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063810254 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06676785 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073263033 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062407467 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068074246 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062487195 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.0602863 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072467332 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062039305 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065856264 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073446138 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063415676 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065400637 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063532024 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072645731 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062335431 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061117966 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062519004 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072183767 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061656113 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063325657 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.073232834 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061806275 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06559035 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073528357 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067346053 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063564648 seconds)
  done (took 6.094111816 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071969821 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093928924 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072914651 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073500455 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069070923 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069084707 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069042694 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068873147 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068814006 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071843247 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068869946 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132146813 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066013969 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071469471 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069772191 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069779881 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.06982787 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069650363 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069728733 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069564525 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069705565 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074293901 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06957492 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074201973 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074197209 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066301698 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069448538 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070348413 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075380795 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069762626 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074298472 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.06972765 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069857062 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074503921 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074085516 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069579276 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06023982 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069663518 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070209045 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070013772 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066583058 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075594064 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07112553 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067090067 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070573083 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070156272 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075269597 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.075150491 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07199723 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073280265 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070394937 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075291871 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070379082 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070485399 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075337653 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079193391 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075687775 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075369691 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070610371 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075563243 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075713949 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078540828 seconds)
  done (took 5.971482267 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076754479 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064723041 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077304537 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058757664 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058593392 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06809237 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058502459 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.05862565 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064584935 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064541376 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066137787 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068061315 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069841317 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066381631 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067901607 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070069498 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069107349 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068743642 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065463594 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068699186 seconds)
  done (took 2.791179448 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063506662 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063369615 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058764383 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074219524 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.060094933 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067666428 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059641181 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05950909 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059393433 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05934182 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064741082 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063880578 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059356973 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067148889 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062827215 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066641557 seconds)
  done (took 2.443283387 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064683858 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066480992 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092484709 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060289767 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061623491 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059262314 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060119566 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058974943 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061177726 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073030109 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060075292 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061883476 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060076877 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060274974 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059576957 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062269933 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061139419 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060791272 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060034817 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094388394 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068818831 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060967355 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062579987 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061009751 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06226691 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068585214 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061974346 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062171246 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061179475 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063516511 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062435601 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071484862 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062376558 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064043259 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059480688 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060156082 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060522604 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062756904 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062650975 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060559906 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059543309 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062368581 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060590947 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061039957 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062352914 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063664265 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062152444 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070629695 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060506052 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062650156 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060974687 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06233773 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061630452 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072223222 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063234388 seconds)
  done (took 4.940892462 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079433316 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064118532 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05814075 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058102248 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063469953 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064408035 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064220076 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064201945 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065229634 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059090594 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064563481 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063636134 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064486455 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064591717 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06563627 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064569389 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058480421 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064391974 seconds)
  done (took 2.607316822 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068630529 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063487551 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063800282 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059931619 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.0609583 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065581952 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059112744 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060213222 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060060169 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060491699 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060327012 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060065168 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060030741 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060096284 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063897928 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060320373 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059914075 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058877687 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06038709 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058778648 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065194438 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060280006 seconds)
  done (took 2.789169935 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117769831 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082426994 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157387344 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078910339 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089425372 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071337836 seconds)
  done (took 2.038254973 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09542595 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096177087 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063812242 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063631825 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068044681 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066838778 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067757446 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067231577 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070023914 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072647916 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067074658 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070011243 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069894702 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071698199 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068420886 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068443516 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067103444 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067388144 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064539364 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075150029 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068490383 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071400032 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06780368 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067417702 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067527398 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072377145 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070932481 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07336625 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067429757 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07089408 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069093052 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067519986 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071009484 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07345843 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065142748 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071602295 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067820762 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075363969 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06933544 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072702695 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065012721 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069748841 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071564906 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071035809 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071251594 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068238387 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070885646 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068120279 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068163716 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080875893 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07043327 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07325505 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069955639 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071807561 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071490761 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079937352 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074478755 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073300836 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069949373 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07436581 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073442423 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070155867 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073693725 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07538597 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070355522 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073680852 seconds)
  done (took 6.14250319 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104959682 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064401048 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069371849 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072877721 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072464735 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067292403 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067060529 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06702218 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067106431 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064570719 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10247843 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067271416 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07155803 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07161956 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067188352 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066975875 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067318727 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072766569 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066125648 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07929609 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067734195 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072476112 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072389822 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072303737 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073427612 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069263541 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067524258 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06747571 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067467688 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067630113 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070564819 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06800157 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073373354 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065356997 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072614168 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06784893 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067602538 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070575351 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067713593 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069441318 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073073645 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076071362 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068192089 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068152822 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074336681 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068296116 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069155111 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066028108 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068245834 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065763895 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074464737 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074448805 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074565239 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073430821 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068507204 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068451543 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068343801 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068309881 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068382427 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07009621 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07432432 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06890792 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080554496 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068706095 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068656228 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073557735 seconds)
  done (took 6.158068904 seconds)
done (took 127.682652778 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.26008253 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.225043464 seconds)
  done (took 1.920979176 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074948923 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.265968085 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075910301 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072429829 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132666043 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132284763 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.106699048 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070508241 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072540361 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070091865 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.169273334 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107016999 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070472038 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07002777 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.094405671 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069943634 seconds)
  done (took 3.118552857 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.12161164 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.208475446 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080103526 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068146274 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151841997 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077530509 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071654125 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075060126 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.345492702 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070734454 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.11771222 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084071761 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074739914 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.075161233 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072291567 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073943483 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074838583 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076915777 seconds)
  done (took 3.382671306 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104066529 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.118597452 seconds)
  done (took 1.684899258 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.175316684 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.115477088 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.151572489 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.353594519 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.140959523 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.154607187 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.15712857 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.152273366 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.131082482 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.148984707 seconds)
  done (took 3.139185069 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106871941 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102905679 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306658312 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101971495 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080651119 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.07531076 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07295145 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078121955 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073082159 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074601789 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120748304 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073211009 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070588808 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12346719 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09907144 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105347636 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069676765 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076931949 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078429148 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069281914 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074249198 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078500083 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177816027 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077481488 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.101621894 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074204559 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075639646 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072814287 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072720683 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07662028 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077285193 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100585861 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077162979 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08302118 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075113021 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096636573 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070842873 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.100100864 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073274292 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071053001 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07345036 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077340956 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070873779 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079539873 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073681834 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075816374 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.0789772 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069827106 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073948103 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073722165 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072516389 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075487971 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075145974 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076076757 seconds)
  done (took 6.185620775 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123207703 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.110650266 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068999643 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117870182 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109793658 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06855199 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124630601 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104441393 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122419595 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068060644 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068956693 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068157668 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075578732 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079793791 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120132379 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113667503 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070277552 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06859287 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112651503 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113274594 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067502368 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124979972 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.116323491 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.113581418 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067458973 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068616866 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067170069 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067698932 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075958459 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07567199 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067563269 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078154625 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079559646 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07494895 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066765868 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067052315 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067942378 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07591944 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077400518 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077207112 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074324087 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066729016 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067125213 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067626089 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068038787 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06662882 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077223478 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076764765 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077306504 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068479749 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069053007 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067990599 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068994595 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075589611 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074404163 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075699193 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078608164 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068219083 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067737278 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069166851 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079052377 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076340695 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076156559 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069219162 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078175204 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068003115 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078430438 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080825451 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067784885 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068303242 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067963045 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067828135 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068132719 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074447087 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074807769 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06828579 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069011374 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068183218 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077851608 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075493396 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068012339 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077265823 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067622075 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068265654 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068596146 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069827635 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.081776688 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078837582 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070293391 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070185731 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069338226 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069871579 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069299381 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.228855492 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07477207 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073974638 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075516418 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066986755 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075960213 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074701847 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067142783 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073065286 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066572829 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068138475 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067609574 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073249193 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072810803 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074547471 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066609652 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066345368 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075432167 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076368415 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066677285 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072664819 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075629219 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073059877 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066198285 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077240177 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067241188 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075728422 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066820293 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075039366 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066780842 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073300388 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066765183 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066069184 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066487053 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076043018 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067743181 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066465152 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066644324 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066820762 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07448769 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077384586 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067449797 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074451583 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074462958 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067992715 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076638543 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067554575 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076760512 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067666813 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067766527 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066811348 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078865135 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067862515 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068893505 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070473619 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077134292 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067856292 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076857037 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074335446 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067395802 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077922563 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077029483 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074412281 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077459838 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068458113 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067924006 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068514788 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068538829 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077317716 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078805718 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069288878 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06792957 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074121272 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077724886 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067450875 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074438808 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074549808 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074970769 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067900209 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067984688 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078980619 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079696179 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075328532 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.078114415 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076382871 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068262223 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07524382 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078348391 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068847842 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08323356 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069400419 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080807818 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.0805597 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077501426 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.080846441 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.230831199 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076006122 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075314793 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077354021 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066234085 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066300005 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072847354 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066401161 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066875319 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072813038 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06815813 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068209873 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080140099 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067245626 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075627672 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066286538 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073448053 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066113003 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066928457 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078044343 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06663426 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067044305 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073784861 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066494187 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.073852955 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076176128 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073012149 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066588097 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066939573 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076090387 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076065297 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066612891 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066422112 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067115562 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075107001 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074582883 seconds)
  done (took 18.53517228 seconds)
done (took 39.445622412 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170489404 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.113470871 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224895518 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203000244 seconds)
  done (took 2.266454202 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101517917 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063490258 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106096527 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.116021385 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063868706 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.102390282 seconds)
  done (took 2.053132047 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201900834 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176235477 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251697958 seconds)
  done (took 2.126382226 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.36776385 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150485712 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.259856855 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.517523703 seconds)
  done (took 2.897906228 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.135283087 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131890718 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075932125 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.145898317 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.083065137 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060691475 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.146138773 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068635566 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098550276 seconds)
  done (took 2.513440182 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141386411 seconds)
done (took 13.500491351 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.136556152 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.316223671 seconds)
    (3/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.292349118 seconds)
    (4/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.336142265 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.182911944 seconds)
    (6/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.260794585 seconds)
    (7/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.145583038 seconds)
    (8/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.224059656 seconds)
    (9/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071748791 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.132061318 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.161196069 seconds)
    (12/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.123636823 seconds)
    (13/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.227370773 seconds)
    (14/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069971589 seconds)
    (15/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074278924 seconds)
    (16/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072723047 seconds)
    (17/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.129996894 seconds)
    (18/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.263840473 seconds)
    (19/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.254908586 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075608378 seconds)
    (21/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.213051451 seconds)
    (22/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.212033391 seconds)
    (23/341) benchmarking ("sort", Float64, false)...
    done (took 0.137377965 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.189816559 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07465257 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.076466682 seconds)
    (27/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.241802813 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.07529592 seconds)
    (29/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070525056 seconds)
    (30/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.241383921 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.139581967 seconds)
    (32/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.173871758 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.125582305 seconds)
    (34/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072545603 seconds)
    (35/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.322030419 seconds)
    (36/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.109604348 seconds)
    (37/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.177891794 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074883965 seconds)
    (39/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.231458158 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.129229196 seconds)
    (41/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.207358219 seconds)
    (42/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.28307998 seconds)
    (43/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.166911959 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.210390461 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.192774965 seconds)
    (46/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.266273409 seconds)
    (47/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.092364324 seconds)
    (48/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.212280894 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.080672328 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.086338979 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.078557621 seconds)
    (52/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065784123 seconds)
    (53/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.096849611 seconds)
    (54/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.201010258 seconds)
    (55/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.085599041 seconds)
    (56/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071749925 seconds)
    (57/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.192828843 seconds)
    (58/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.145494422 seconds)
    (59/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.200062203 seconds)
    (60/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.400353091 seconds)
    (61/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.082957679 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079185507 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087311232 seconds)
    (64/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.065240142 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081134867 seconds)
    (66/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.226532675 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064981902 seconds)
    (68/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071753517 seconds)
    (69/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.073396992 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120443398 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.124252566 seconds)
    (72/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.072813349 seconds)
    (73/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.146986573 seconds)
    (74/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.271616597 seconds)
    (75/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068023257 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.160203655 seconds)
    (77/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.208548069 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152052403 seconds)
    (79/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.079567791 seconds)
    (80/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.267784145 seconds)
    (81/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.173689614 seconds)
    (82/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072746981 seconds)
    (83/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072085404 seconds)
    (84/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084719442 seconds)
    (85/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065906584 seconds)
    (86/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068198879 seconds)
    (87/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065108174 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071986072 seconds)
    (89/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.171041298 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15094427 seconds)
    (91/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072165763 seconds)
    (92/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074815105 seconds)
    (93/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064686393 seconds)
    (94/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.185623762 seconds)
    (95/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.068526225 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.095108309 seconds)
    (97/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.137852059 seconds)
    (98/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.157319685 seconds)
    (99/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071991162 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.120608718 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.068943998 seconds)
    (102/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.093968235 seconds)
    (103/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064898007 seconds)
    (104/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.145632696 seconds)
    (105/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072877894 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064787747 seconds)
    (107/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.22939523 seconds)
    (108/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.16383621 seconds)
    (109/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076367573 seconds)
    (110/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074204669 seconds)
    (111/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072217458 seconds)
    (112/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064193334 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.207325492 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086621399 seconds)
    (115/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.176581528 seconds)
    (116/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077805457 seconds)
    (117/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.138984284 seconds)
    (118/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.082181948 seconds)
    (119/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.071994353 seconds)
    (120/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065254818 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083611219 seconds)
    (122/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065157163 seconds)
    (123/341) benchmarking ("sort", Int8, false)...
    done (took 0.154990946 seconds)
    (124/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065493662 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076181852 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069635356 seconds)
    (127/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065138135 seconds)
    (128/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.083140939 seconds)
    (129/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.17229355 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.080619171 seconds)
    (131/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.084483366 seconds)
    (132/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.190910803 seconds)
    (133/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.182383921 seconds)
    (134/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150438673 seconds)
    (135/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070400574 seconds)
    (136/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.074021513 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074610449 seconds)
    (138/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.142794859 seconds)
    (139/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.079900574 seconds)
    (140/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.141638377 seconds)
    (141/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.200869943 seconds)
    (142/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067656803 seconds)
    (143/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068122094 seconds)
    (144/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066210264 seconds)
    (145/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065490583 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071876404 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.084125705 seconds)
    (148/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.06684729 seconds)
    (149/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07553976 seconds)
    (150/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.242554604 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.083734688 seconds)
    (152/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.179581322 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.148103847 seconds)
    (154/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065016847 seconds)
    (155/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066865051 seconds)
    (156/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064965589 seconds)
    (157/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063933191 seconds)
    (158/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077123617 seconds)
    (159/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06616818 seconds)
    (160/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.148765004 seconds)
    (161/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.070025228 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073352532 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.079399529 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070732863 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 0.066168807 seconds)
    (166/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064422389 seconds)
    (167/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064183355 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.148218055 seconds)
    (169/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.215435889 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064142117 seconds)
    (171/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06498973 seconds)
    (172/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082122917 seconds)
    (173/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.074260438 seconds)
    (174/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.06566762 seconds)
    (175/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064092987 seconds)
    (176/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.064350367 seconds)
    (177/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073928453 seconds)
    (178/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066485741 seconds)
    (179/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.070106718 seconds)
    (180/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064789492 seconds)
    (181/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064630395 seconds)
    (182/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.068313841 seconds)
    (183/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064751469 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06834317 seconds)
    (185/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.068629786 seconds)
    (186/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.171636802 seconds)
    (187/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066112397 seconds)
    (188/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064592341 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.200168542 seconds)
    (190/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072084611 seconds)
    (191/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071506023 seconds)
    (192/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.081766137 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.185723513 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064262093 seconds)
    (195/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076039495 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063999109 seconds)
    (197/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064685295 seconds)
    (198/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.06867936 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.156741734 seconds)
    (200/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.233889717 seconds)
    (201/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068659771 seconds)
    (202/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065321609 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121733286 seconds)
    (204/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.068749288 seconds)
    (205/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.071459356 seconds)
    (206/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073117756 seconds)
    (207/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065358076 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092065282 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.079915758 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065845402 seconds)
    (211/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064538141 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150730348 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 0.137490382 seconds)
    (214/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073399315 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071768832 seconds)
    (216/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.209789975 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065340068 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132011166 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09221347 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071266819 seconds)
    (221/341) benchmarking ("sort", BigInt, false)...
    done (took 0.269200346 seconds)
    (222/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065881476 seconds)
    (223/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072117752 seconds)
    (224/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072113586 seconds)
    (225/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090882877 seconds)
    (226/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065274754 seconds)
    (227/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065014472 seconds)
    (228/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.213302477 seconds)
    (229/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071932953 seconds)
    (230/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078469679 seconds)
    (231/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067487737 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085147255 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115392338 seconds)
    (234/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065530718 seconds)
    (235/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.070313643 seconds)
    (236/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.084723439 seconds)
    (237/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066270991 seconds)
    (238/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065811289 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077292058 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065265606 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076946102 seconds)
    (242/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.204021829 seconds)
    (243/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066361676 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072312164 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109896491 seconds)
    (246/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.183757916 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093910611 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.211694213 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09607066 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091303139 seconds)
    (251/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066958429 seconds)
    (252/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069826881 seconds)
    (253/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.389822422 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072685185 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069097021 seconds)
    (256/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065874112 seconds)
    (257/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.148309198 seconds)
    (258/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066189901 seconds)
    (259/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.159482779 seconds)
    (260/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.06574242 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.069375658 seconds)
    (262/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.06691348 seconds)
    (263/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066786347 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.162433584 seconds)
    (265/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.064367555 seconds)
    (266/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.14926916 seconds)
    (267/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066046873 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064871165 seconds)
    (269/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066765081 seconds)
    (270/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065097557 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063613461 seconds)
    (272/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064896419 seconds)
    (273/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063447 seconds)
    (274/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063497367 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.070919655 seconds)
    (276/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064828306 seconds)
    (277/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07159903 seconds)
    (278/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06485066 seconds)
    (279/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.172813675 seconds)
    (280/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.065091713 seconds)
    (281/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.065307131 seconds)
    (282/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06478085 seconds)
    (283/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070377768 seconds)
    (284/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072025403 seconds)
    (285/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077702889 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.063594416 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.158956962 seconds)
    (288/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.064217034 seconds)
    (289/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068185275 seconds)
    (290/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.069151939 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085670651 seconds)
    (292/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088283835 seconds)
    (293/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064319236 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072474263 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084393581 seconds)
    (296/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.065032049 seconds)
    (297/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064010813 seconds)
    (298/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063812792 seconds)
    (299/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064101919 seconds)
    (300/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064459601 seconds)
    (301/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066325475 seconds)
    (302/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071070508 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083930267 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064451502 seconds)
    (305/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064592515 seconds)
    (306/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066638373 seconds)
    (307/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079903851 seconds)
    (308/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067696345 seconds)
    (309/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067912352 seconds)
    (310/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069256315 seconds)
    (311/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065846088 seconds)
    (312/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064655169 seconds)
    (313/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076102346 seconds)
    (314/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065460067 seconds)
    (315/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076370112 seconds)
    (316/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.065327326 seconds)
    (317/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065536715 seconds)
    (318/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092286125 seconds)
    (319/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07243138 seconds)
    (320/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065053463 seconds)
    (321/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068684027 seconds)
    (322/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065532139 seconds)
    (323/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065210986 seconds)
    (324/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.072501844 seconds)
    (325/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069197457 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064510874 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094764478 seconds)
    (328/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065063392 seconds)
    (329/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065141517 seconds)
    (330/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073953509 seconds)
    (331/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.068920131 seconds)
    (332/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064961842 seconds)
    (333/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066971215 seconds)
    (334/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065796473 seconds)
    (335/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066538417 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.248284509 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.142590843 seconds)
    (338/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065854655 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067306588 seconds)
    (340/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06508174 seconds)
    (341/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065281022 seconds)
  done (took 38.717292438 seconds)
done (took 40.239545715 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12622402 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077883686 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075566431 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07251425 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076348284 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076669105 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076294868 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073939038 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078362725 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07635453 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.107194451 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063626327 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071410508 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080638161 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072486805 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079259831 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078869827 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078798538 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064383407 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078931739 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089477717 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077317624 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074147986 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079570389 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065009164 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073084666 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119888291 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084290418 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069193047 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074018548 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071811655 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080366538 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07194576 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071493277 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073920434 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070451781 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074524243 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070585509 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.120039968 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069553079 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064780568 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076654786 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071257429 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072112126 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072705079 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076044026 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069588509 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079775187 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06486016 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.0759383 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120289739 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069897247 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069069837 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072821963 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069743794 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073960973 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.06905374 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075918994 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069384429 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076036737 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073866276 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073107794 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064926513 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073224669 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071522513 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071741642 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063198165 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069790288 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064157123 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064253058 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063489239 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073308717 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07136968 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069355625 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063649101 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064500198 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064829524 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076798579 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071689717 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073480359 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064868797 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069801389 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069373099 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065041897 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070183917 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076187991 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063967704 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065163605 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063734236 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.0793366 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071835603 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065208636 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076545746 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070296347 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070210299 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064847345 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064435744 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070425379 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073176183 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064940696 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063782675 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07069234 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069780531 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073882536 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06531172 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071390192 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070815561 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064113456 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073899521 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072892529 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075285362 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07913117 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075243455 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.079521461 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066432153 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064592391 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076048256 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.224419553 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069730928 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071422916 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068719398 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071266247 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064000102 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062619633 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068875872 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.06901081 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06371605 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063854896 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063699246 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072174515 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070696439 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063376972 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065048988 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072489563 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072124708 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062869707 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062680135 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072091017 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063852552 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069264219 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068482282 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072103652 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062919728 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06362739 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062428009 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062873927 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063256093 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069296366 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.0691493 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063862305 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072068207 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070404801 seconds)
done (took 12.790409999 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068322232 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107112022 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.11477962 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109373919 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078354322 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.066410629 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068469596 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08461726 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.06773326 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089681818 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089679415 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085897887 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128417978 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063097654 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064463336 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065033501 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062731058 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077702023 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.114275774 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088728819 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107374126 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064510485 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081295031 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084894555 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077765525 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083988346 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066175783 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065489583 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067752766 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083070284 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091525738 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064822008 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065973862 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083978198 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.08097315 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073530948 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065645972 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07166593 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065530653 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06456516 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066592659 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083449029 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071815515 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073183544 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066313303 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065849138 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064930335 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.0726234 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078975489 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070996572 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077653362 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081814808 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066520323 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064806726 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063186303 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072728099 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064763913 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066438 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065924387 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064940094 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065483982 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067672269 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070262269 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075501977 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069102959 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072576116 seconds)
  done (took 6.603585752 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083609611 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092297096 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078250924 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078589821 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063964997 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064872395 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064981532 seconds)
  done (took 2.158049552 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068419488 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104207134 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110792319 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111720005 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121211186 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.109851824 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066792517 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098322692 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064468465 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106471785 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.119274357 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.114041155 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068227639 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077062102 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065511108 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114223738 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065951311 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072654447 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.11115837 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.11572996 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069908931 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095869191 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078991782 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066129872 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.11478031 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106670529 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06781273 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066082504 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067654927 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066115204 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065646905 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088313355 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106243664 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.0800564 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065703305 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064445679 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104349839 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06616432 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103461001 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07261693 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.103444274 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067792522 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068548407 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065515916 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066225047 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.108579784 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066393124 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065068834 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064759337 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107650014 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064772941 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106449491 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067795722 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070239323 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072819786 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072701874 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072970041 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065834533 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.109058228 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075621026 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067302231 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.117982018 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.118045356 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.106114453 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.11819835 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075536171 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.110628418 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106611184 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065837174 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065704876 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.06639325 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.11965314 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069682084 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068594839 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071088771 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073370947 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.111907016 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124842435 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.124684542 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081092654 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069610143 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066651091 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.234538537 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119371076 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069483783 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064547278 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06537749 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065090031 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069906251 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066529427 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069427136 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064422437 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074552457 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067273789 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066529053 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.111677745 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064836129 seconds)
  done (took 9.94401476 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069689256 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067129183 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065607864 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065453966 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.0657692 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065532776 seconds)
  done (took 2.051906779 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092310499 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065780417 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077142871 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068558015 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087184785 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108222094 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107192425 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068354378 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.082327146 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07698141 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.108325532 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.109641594 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.109772045 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067051786 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107397129 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066908414 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.108679211 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069522881 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07755522 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068533519 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080045946 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067444512 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067643306 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116577329 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068732652 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067190119 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.074892328 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077480776 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077080523 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067754643 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067337768 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068662006 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076553578 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06788006 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110757803 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075584448 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066626097 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070965713 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068270628 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068450142 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112266963 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067970637 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070329241 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070795419 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067627193 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076312621 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.071155207 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070449043 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110520802 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070788543 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070728614 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066721811 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068340599 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.0707247 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075025019 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067254061 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070539724 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110624626 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068568805 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076087542 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066824169 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068626138 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067703598 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068347302 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071614988 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071040628 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075501978 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067967116 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068105737 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066852942 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071347932 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066785863 seconds)
  done (took 7.228233143 seconds)
done (took 29.595620816 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.541407698 seconds)
  done (took 2.154061096 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.965557997 seconds)
  done (took 2.622054311 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.190486643 seconds)
  done (took 11.851266752 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.34400434 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.430555023 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.761782966 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136250868 seconds)
  done (took 3.346798408 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.865102779 seconds)
  done (took 2.531224899 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239644068 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226911985 seconds)
  done (took 2.145765613 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.42561983 seconds)
  done (took 2.078775466 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.212067371 seconds)
  done (took 2.870394709 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236301914 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162377174 seconds)
  done (took 2.060531708 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.628261709 seconds)
  done (took 2.282693479 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.761607986 seconds)
  done (took 6.424190775 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.330776629 seconds)
  done (took 2.047138396 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.24005429 seconds)
  done (took 1.905867118 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.607352541 seconds)
  done (took 4.266288468 seconds)
done (took 50.26245355 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08663142 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083897624 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083674551 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079216773 seconds)
  done (took 1.968735148 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075756757 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.06877774 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071119038 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071649493 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069028804 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070687833 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072748119 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.068574466 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069621038 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068788166 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066861194 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068525058 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07099561 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068067908 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070522662 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072133327 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068418702 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068675039 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070451307 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067847211 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071149233 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069542475 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066696456 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068120548 seconds)
  done (took 3.333793296 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079424104 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070852484 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074628875 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069215727 seconds)
  done (took 1.961755983 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077567515 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074567765 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083907565 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087890964 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.074096716 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074940967 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081997525 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081998427 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06386551 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084935255 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066217354 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064923092 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064896361 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083475587 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081129258 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06237012 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061939721 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075288651 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07441356 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.07724215 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06644326 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063781629 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074354299 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075311479 seconds)
  done (took 3.447018101 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083294076 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063872337 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079960412 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088745608 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.09060923 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064104142 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078409025 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090750564 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128105961 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06507739 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073150162 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063971177 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103432122 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063997543 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.07936162 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108809859 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112008885 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067831395 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096852957 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064021752 seconds)
  done (took 3.349960796 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079120308 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06905643 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068448554 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063660123 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074658125 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072834208 seconds)
  done (took 2.111151725 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070264844 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067517597 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067540328 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072407935 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06716168 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067996576 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067464357 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065981758 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066083492 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.066622872 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.066404321 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066607768 seconds)
  done (took 2.548550886 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.224061897 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.075819048 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.07296271 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.068054049 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.070175593 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068259564 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.083347782 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069641644 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.092121085 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067463664 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067120576 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069510477 seconds)
  done (took 2.819369012 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107954963 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112263559 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147941844 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119611022 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121994214 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0984788 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.168776234 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096316729 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.163622662 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.142221482 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121542261 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098661254 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090290612 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.07206883 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102814342 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122979928 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143317869 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077261827 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1186157 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.213891464 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136267874 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.139256858 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.152801152 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121701282 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097737257 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153910879 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103935486 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107672772 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127369447 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130502467 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122560389 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.100421886 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073639813 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073328297 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154580613 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.111193038 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12771284 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.096087621 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110404676 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092496137 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112330393 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072191196 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087102116 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.117097743 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08959508 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138456167 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.097104144 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120981299 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084385913 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.315114229 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131996059 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141202268 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090436995 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111495582 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141418872 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114367901 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136746513 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108013759 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084034358 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.123118793 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.110293128 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104298735 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112265525 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082920075 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.18049587 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092570384 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.116290721 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119192908 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.101658132 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103159032 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111833647 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.140818205 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132363379 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.132562156 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145470466 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100774145 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127565609 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.108056641 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.136470287 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108324699 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.077380955 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.126839953 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136068855 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105495731 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109347739 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138735505 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100590666 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082927004 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.108710185 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.128064239 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083299872 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.118573758 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084205114 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.115354907 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144609928 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102387699 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113642388 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123216237 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.257246959 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157137389 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114104688 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07701651 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119051424 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11473871 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159589516 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098361402 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078579399 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104219359 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103558478 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.152912017 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106565919 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078640072 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108419879 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139645313 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093005099 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.220433221 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095528288 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141565416 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109190274 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085824284 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074238437 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089152211 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112897982 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107594618 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111994003 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094770691 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084594851 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08606309 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115181979 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094696146 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081898007 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116005798 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101314923 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076163872 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088874807 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076722554 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147743992 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.083226001 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142997894 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129079189 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079572166 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11190933 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103190082 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114916156 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.103371265 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123574603 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145649977 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117023557 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092109109 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.096681896 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110735691 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.150114794 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.136001219 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.268956152 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078368585 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102219056 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113877706 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097176232 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126251786 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094807404 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106583543 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103707063 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141675176 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143245463 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09849458 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103231216 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109000624 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.12246869 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079712484 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159853352 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107233 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120841436 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085447138 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141942985 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.113591819 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090669604 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088914902 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104248945 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.109111494 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11203092 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149331125 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099202925 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074460758 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097398726 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.150103959 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080675732 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115352787 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09616349 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.0974276 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125079493 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.099907276 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084814901 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071818186 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140138667 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.165619402 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.073839554 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122367992 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11731944 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110432867 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.130992398 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.077253431 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134163213 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.16264012 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138988383 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.352520879 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171010611 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118157014 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118296938 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111750507 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103843283 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077618759 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.12270308 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136597112 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095346382 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090454338 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136071428 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135871957 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.152897212 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.127739247 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1327389 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.118951153 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119619184 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116657565 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.118003154 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159891813 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137207698 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.142472401 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100323789 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123705172 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138854919 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155143378 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095677032 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.159579805 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.098292521 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133555023 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.088243146 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139837548 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.088229846 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.124195855 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08957406 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113047535 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.080067484 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.085403655 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.16066676 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.124795821 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118617742 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111363949 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.150673414 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.152856853 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.087396766 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.12004543 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.127873112 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11235923 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129623538 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.119675696 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.276255544 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099799718 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114745932 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090421372 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086256449 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.12121877 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098889425 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134618941 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091065411 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082292736 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149963474 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111886132 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101952116 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085715468 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114846822 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.132183631 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099724961 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094343736 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129042011 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113073929 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149282255 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.098673922 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.106519979 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132280355 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087230826 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.099686493 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.076448447 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.096340006 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.085012728 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.136977781 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081789317 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124174938 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.073829547 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.140577518 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094082235 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.100558344 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111012163 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118609523 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138571006 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103208262 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.151565258 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096582756 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129504596 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116491219 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101819834 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097901287 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113622287 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.109424711 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132306545 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.105962587 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136572158 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157896465 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113736031 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.156432127 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099692809 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136786237 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120836053 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.314829119 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11861694 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174705297 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14796464 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120959795 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121303689 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083058781 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104272348 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11447813 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.121794531 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.18507136 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130944402 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.077552559 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114773835 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102133558 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.116778157 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112569754 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087634506 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152244715 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107655362 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.094213336 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118876189 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.097258863 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112349226 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083833895 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108672694 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.113564678 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102490091 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105536645 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126355951 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139030718 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12063954 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.153932392 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.108808462 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.099653089 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.127239164 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118668734 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118092332 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092755481 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093521588 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148995789 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.133219153 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.138892961 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.110000609 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117547626 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12385932 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109340742 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135920319 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116557763 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.138506719 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089367425 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.258954642 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.073586633 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.077612078 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129682107 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113357294 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117689841 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104681198 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.077503813 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10986552 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111844499 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076755953 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093238651 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099063371 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10103933 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.097577198 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11221412 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.119217015 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.097289786 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11215695 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106528708 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154185146 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.108409243 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09345666 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151509541 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156109541 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092882074 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09918254 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07697006 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085558622 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119405978 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158621898 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161937744 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.085118244 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093067208 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.09290039 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094512134 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.078029091 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.095317977 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.096275767 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114563307 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109957151 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.122159929 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113790792 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081348582 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110357527 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106662204 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100713706 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.116273659 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131674784 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.137638398 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.152838495 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124382211 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11798177 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083495762 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.087974611 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082129156 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08643612 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110789963 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.086485045 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083944721 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.327175258 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09864276 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112170095 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114366064 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093317808 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081627369 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143952567 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.074774981 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14183645 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.076535925 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086947865 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.087296062 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085541044 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099181256 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142586061 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117138487 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117275018 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113709849 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10986961 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166519223 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16383006 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085651363 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.151403776 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082491211 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082176342 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081224346 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117658176 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096034374 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124095024 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150727836 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097656948 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109687201 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084610502 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153205942 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.10644175 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112672111 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093080845 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085301359 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153026319 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085273724 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.087382258 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09659696 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11992643 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.078340513 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113111451 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092606296 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08745398 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175676833 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.719602837 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099463771 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.082381417 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104916809 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.155744792 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14531465 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106400605 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.293731005 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.126401141 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106608722 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102604622 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114443862 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.199310324 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079889399 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101543469 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.112092424 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104146417 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107426059 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.106668329 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.094226687 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.099311815 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.093803267 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085363892 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114700396 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093990888 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102078697 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116887478 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088486008 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.093793208 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.137738804 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.109455051 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.087827106 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093009277 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.111647005 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092493615 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108967743 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.075937259 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120738735 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098063385 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125905944 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.104993031 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11623583 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136724036 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10280158 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146549469 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.115124386 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130474988 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095015478 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.086646346 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140592707 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.098764331 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087691519 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159358094 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.108401219 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.105539677 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116704551 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.106359851 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122957867 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126525399 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123329356 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106553154 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086673623 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111813435 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.289514887 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093487585 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085067485 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07828769 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.081913172 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113312237 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090680281 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08864913 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120656844 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092856195 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108004269 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10860185 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127782169 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093470767 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106886575 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117248282 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096227092 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114971951 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106862295 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134709431 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.18086057 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129463306 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135278843 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142055196 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.08231558 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079819994 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.073077092 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122637516 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084979038 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.094920053 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086063455 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14208934 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.089377188 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122440794 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.257034536 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0904798 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102797136 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102651383 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07451953 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089321873 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115346103 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095076772 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089273299 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126896464 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089436781 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137321385 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120040261 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107017251 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103640232 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087447288 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124105227 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.116198029 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.144521083 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11162474 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.087493467 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140709472 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.117950507 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15562262 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.083524831 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093075215 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.326234788 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113661761 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141913076 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089436497 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161130502 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.157879661 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109125136 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144879991 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078337637 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097877297 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098475647 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.139892962 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091170246 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118727977 seconds)
  done (took 72.968973563 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147471034 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.180902637 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.126949261 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.1398252 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.29620348 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.306089054 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.157106481 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.128642241 seconds)
  done (took 3.470044784 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.075673593 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.091499185 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.089849541 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.260024195 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.106338942 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.072547168 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.079324765 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.088908781 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072523681 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.072334346 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.108336215 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.072864557 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.073833969 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.557903566 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.072389352 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.080308485 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.0729729 seconds)
  done (took 4.023894083 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.366045046 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.663502115 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.410486425 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.782632937 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.174707637 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.73095009 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.082600354 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.092419875 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.954471641 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.409703594 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.167055418 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.097587044 seconds)
  done (took 21.935743789 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.083512618 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.127732757 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.127889937 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.078821181 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075501567 seconds)
  done (took 2.435937753 seconds)
done (took 128.064030756 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087825735 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.176049465 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.070224302 seconds)
  done (took 2.151938256 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120911871 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.118439665 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.120262659 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.121750388 seconds)
  done (took 2.376640925 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.078284873 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078380993 seconds)
  done (took 2.04198808 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.233508631 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.219837701 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091396707 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085001501 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.07954033 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079611356 seconds)
  done (took 2.122296307 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075001031 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073056987 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072481388 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072099414 seconds)
  done (took 2.183261214 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.17928687 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.074146552 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.075056566 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.076857691 seconds)
  done (took 2.333781806 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087241392 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085945556 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117305718 seconds)
  done (took 2.173342821 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.088238078 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.087235378 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080797093 seconds)
  done (took 2.114855176 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.112113579 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09574727 seconds)
  done (took 2.063275202 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081997024 seconds)
  done (took 1.926173999 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095332268 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098620489 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183385076 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.151501467 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.189369087 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.175743267 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079957081 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080175161 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077267566 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.078944416 seconds)
  done (took 3.050223888 seconds)
done (took 27.056113097 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.087034109 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.19524476 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.444686669 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090488374 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.656652439 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.443398529 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.740123391 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095247867 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11203936 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071516767 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090175538 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.639486491 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.747545855 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.155537297 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.7264709 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.140345828 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.811262138 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075320015 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070434024 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070158402 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.719667043 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071460334 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069784915 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06990777 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.807067591 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.460754796 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074559779 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.141773462 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072255788 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.078484054 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.441696176 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073427532 seconds)
  done (took 15.387771766 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078631931 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.160640005 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077722283 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089039996 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073820451 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073444635 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.076154214 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070589109 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11251097 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073613051 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.092359438 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072657612 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.079563068 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074683334 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.096680549 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073373131 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074070282 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070843119 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072847049 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073229436 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091001164 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070252084 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069483555 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071134599 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07062195 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084300759 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073525548 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.075949397 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.076520779 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.079313654 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.080023952 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07961367 seconds)
  done (took 4.488790359 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.135514757 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.137145551 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075922783 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.116043595 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.122970082 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07509417 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.157435048 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093948298 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.120507893 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.074260645 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.092147315 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073300158 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.110004661 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072944137 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091547122 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070952842 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072537813 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071711805 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069131528 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069117389 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088022961 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069886014 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068556017 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068539577 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073441608 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.088770506 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073787011 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071663024 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070806608 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074470505 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075637361 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07177104 seconds)
  done (took 4.773630744 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071802366 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072238223 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078831462 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083704723 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071133139 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.072081117 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073052022 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069383673 seconds)
  done (took 2.467697255 seconds)
done (took 29.03537634 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080997256 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067358936 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.06924674 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.08584306 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072758455 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.11025366 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064061448 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073588813 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070212702 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070493431 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071927096 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066125872 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068989203 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064608016 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070812134 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064803668 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112680004 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068813884 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.109555951 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.111362768 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067110929 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069956575 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073452575 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111238535 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.111364114 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.111280255 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073600213 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070530729 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065323488 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068080013 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.171093724 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.184665093 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075023396 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117242104 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066342103 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065418546 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069321233 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067780186 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.114109697 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074187174 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067309867 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073847477 seconds)
  done (took 5.397019305 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.190449664 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.193683116 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.187361332 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080218772 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092250159 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079079793 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192736292 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076736036 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074709547 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.192034431 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071935364 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.075464699 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082855279 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.070035262 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075383071 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.071071624 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.076759585 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.069530659 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074564403 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074711373 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.192903481 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068957695 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079895282 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.076422988 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071185483 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077124595 seconds)
  done (took 4.544186287 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074978405 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091438344 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093602217 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.147356369 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111097811 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083064609 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082536661 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093821113 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101741025 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068353319 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073543881 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.102114586 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099160039 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07896156 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.11139449 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087857941 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081225822 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07001228 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075185166 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102789805 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092315748 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088138701 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102814765 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089993821 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068203724 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078104391 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075721897 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084831718 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076224082 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.08110196 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072835522 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072744487 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069749578 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080712537 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075058034 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067323982 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092081388 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083243294 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084821706 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109419926 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079058503 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.119277109 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095474848 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133158892 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067427743 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071810487 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073226092 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081124213 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069725178 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099019523 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084343045 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068862156 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086967528 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068948962 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070910988 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086258896 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069942862 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069429434 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.0802223 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074058662 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088671414 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073746857 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089615164 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069140107 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080768196 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071047882 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070476854 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067184924 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102814268 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077282851 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119406339 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069323925 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065325884 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080702733 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080697138 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076022559 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068220429 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088008202 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080995615 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072979646 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081997454 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071987285 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072782191 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.107434285 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067977543 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066341035 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066006439 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070803559 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072190577 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069098495 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081361316 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067335616 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.0711933 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082997525 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070316712 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069507797 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070276066 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071236894 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068801155 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080118174 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072485633 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069939174 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.083804312 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069895013 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071443764 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083091284 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077406826 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067754921 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069775243 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.07337642 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072195465 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075651135 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073822683 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071777476 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074189551 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.078364525 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.080095048 seconds)
  done (took 11.347118501 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.212410808 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.198159036 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070663542 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.196671949 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078173907 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.126945937 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.195113039 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.133496761 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068244641 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068694446 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067287633 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.140146852 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.136045305 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.146229999 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.119353422 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070062018 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096505056 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.148062658 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.204857522 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.19658933 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.097408239 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078270302 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071930851 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070901495 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070721699 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078910768 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084539245 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076896695 seconds)
  done (took 5.255735069 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076535372 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08357157 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073662253 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096430143 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088514108 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.07010352 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072288483 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071097162 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086927626 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074937382 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069185567 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073952609 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07221249 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069375065 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.069098462 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074183093 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074951896 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067795933 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071951489 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072184519 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078775291 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.155480647 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072276928 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.073018358 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07305687 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069286329 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075930546 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078050458 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069210766 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.104606205 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066722466 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073892216 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.0838191 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069333253 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068131171 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069169597 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.068141805 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067677435 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067959428 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06562049 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067373441 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074437554 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067076341 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074661232 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083430501 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077893576 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069939475 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.070827177 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070800835 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065672597 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071844362 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072571493 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072634071 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079925473 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.07482687 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072794471 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073381347 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.106766632 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.080251863 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.073859195 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.073738969 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068971445 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070705036 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076281928 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085407017 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.0711784 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066926101 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068932425 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07710891 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084665795 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069327891 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074505649 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067437862 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070523804 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072121287 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072164088 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071432202 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067765403 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069082829 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06893731 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.06961791 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068042922 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068237866 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070808283 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067325209 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067302211 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.073011599 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070130987 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073535716 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.06683102 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070564829 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070306526 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067543387 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071390728 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074673238 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072746559 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089282698 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077351734 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069806448 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066500534 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08417221 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070427925 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068865407 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074037906 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074500802 seconds)
  done (took 9.776685631 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09887915 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068868192 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087372803 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099022889 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077459801 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071980073 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083487456 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069133429 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089178808 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066346093 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077860095 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069334878 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083441565 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079183545 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071011363 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079546964 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071977461 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089949045 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083198873 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067937907 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077562576 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080209114 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.08215383 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088806464 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087030867 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088160491 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080812371 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069998928 seconds)
  done (took 4.20246417 seconds)
done (took 42.420159963 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.949534467 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.171989149 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.971137754 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.431537477 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.013260201 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.023754239 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.034110455 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.92758502 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.513466644 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.045086287 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.806696344 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.698593907 seconds)
done (took 69.553103424 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.07565901 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.107370321 seconds)
    (2/2) benchmarking "String"...
    done (took 2.188608334 seconds)
  done (took 6.27217921 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.398232756 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.965204079 seconds)
    (3/3) benchmarking "different"...
    done (took 2.004496823 seconds)
  done (took 8.261634162 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.317209589 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.809478295 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.240686288 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.945998793 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.004997597 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.443648778 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.121008663 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.603723132 seconds)
  done (took 34.067439371 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.953959487 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.22441303 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.286137956 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.362185152 seconds)
  done (took 21.792559397 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.385803013 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.276260611 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.27840915 seconds)
    (4/4) benchmarking "different"...
    done (took 2.376509712 seconds)
  done (took 11.274288159 seconds)
done (took 94.096242621 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.926340375 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.230027203 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.964136692 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.163814359 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.057957352 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.103535987 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.968519701 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.498762229 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.999353065 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.943861556 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.934023855 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.933303439 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.937722313 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.987169668 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.931780495 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.986221426 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.18278147 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.932092779 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.967051003 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.701383959 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.290701721 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.950551172 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.949702044 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.986512656 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.357899058 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.98291567 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.358164627 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.97124255 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.53705498 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.946470397 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.937970145 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.951212911 seconds)
  done (took 210.426819971 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.934582965 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.700459321 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.744769397 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.014768891 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.342354171 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.413301252 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.862856542 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.313094005 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.0000544 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.989211168 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.991300919 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.988856442 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.961045538 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.522785331 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.000345535 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.139969554 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.90719457 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.692095044 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.972511995 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.895008184 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.967481058 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.52341131 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.530629286 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.742448984 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.943191679 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.991946969 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.95831898 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.973461888 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.509307869 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.770434955 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.972759743 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.960275122 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.125194228 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.174850606 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.957866332 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.995906971 seconds)
  done (took 184.367235512 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.164734523 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.943569677 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.97093204 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.04055723 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.867026562 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.715869663 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.929313407 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.93561413 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.930002871 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.927581151 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.933992656 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.932565 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.99396976 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.641916733 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.107760786 seconds)
    (15/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.925699596 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.926901341 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.931235404 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.40040896 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.936034295 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.924045696 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.919227644 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.05176559 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.272248061 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.25474283 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.935048896 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.938272648 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.041359387 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.936766053 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.927590179 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.03671828 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.933286704 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.053910811 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.038843028 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.940949598 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.987479 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.934146427 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.1252036 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.931542916 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.930424644 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.927300534 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.978475425 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.934234603 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.998645827 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.034459946 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.945948989 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.941252853 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.397831015 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.526474447 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.937488739 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.929245152 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.930873796 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.928415314 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.926038835 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.02018555 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.023000022 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.979195572 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.965530262 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.922953793 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.920203756 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.924444473 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.925091511 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.91924624 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.925549208 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.963663351 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.454397474 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.698262995 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.296817838 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.568034164 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.921262236 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.10558342 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.989115602 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.92180756 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.083715609 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.923337372 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.915966368 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.921659522 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.92297736 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.93893515 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.867631436 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.923537535 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.028131201 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.921476734 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.920995822 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.362169055 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.922378056 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.918659684 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.367560958 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.947204555 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.987671296 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.925384447 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.920392143 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.926160131 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.841636083 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.927059008 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.924673777 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.922346811 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.083216125 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.927878061 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.401287692 seconds)
    (100/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.923516953 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.280637288 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.019338292 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.325094199 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.67883925 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.930280464 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.922251462 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.938637479 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.922821529 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.920136395 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.936319505 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.92552774 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.924288164 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.92269778 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.921552563 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.919820733 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.920546828 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.94032398 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.92502203 seconds)
  done (took 424.646762232 seconds)
done (took 823.552833981 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.58374166 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.692071577 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.489311301 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.553935886 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.501598354 seconds)
  done (took 14.676315332 seconds)
done (took 16.533970653 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.94620756 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.946706998 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.930221175 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.949890215 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.947752015 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.941740631 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.950661169 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.960629927 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.953037643 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.939463518 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.947661407 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.944129175 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.954679194 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.960160621 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.970595107 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.957689022 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.946283858 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.941006179 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.969395287 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.95483596 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.957085065 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.95182298 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.956940565 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.986432082 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.022113702 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.017556946 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.992776435 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.988107168 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.032356873 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.956720875 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.964753065 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.960747304 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.092660918 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.260415754 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.217288352 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.2316522 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.290494676 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.390341449 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.340125065 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.30010139 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.076171454 seconds)
  done (took 84.855772923 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.033573695 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.172337755 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.28646027 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.033986714 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.957131933 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.22766416 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.044887388 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.121638397 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.105456818 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.251431145 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.23038025 seconds)
  done (took 25.421176893 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.94246811 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.169454498 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.226118518 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.989671172 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.953011348 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.232664179 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.018499573 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.115038456 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.107977699 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.237676649 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.238743706 seconds)
  done (took 25.12270841 seconds)
done (took 137.263508795 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.570114366 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.077465575 seconds)
  done (took 6.593675622 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.94728166 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.975657287 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.151027847 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.99753205 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.988738674 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.037273622 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.045592374 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.096037903 seconds)
  done (took 18.179471152 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.143783052 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.178329666 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.118371709 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.100458077 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.092215357 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.057045841 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.04994463 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.071901726 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.079845566 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.976069066 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.970270931 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.957950683 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.951152658 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.979892307 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.947480106 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.947574653 seconds)
  done (took 34.750204537 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.981504521 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.971491333 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.951798095 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.945848204 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.954629555 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.10268539 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.173268752 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.94062659 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.947348803 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.964764119 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.129381425 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.024630695 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.022400277 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.111478151 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.102848234 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.09919659 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.979189785 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.968261266 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.975709357 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.995821728 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.957382137 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.045677832 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.008395774 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.999217538 seconds)
  done (took 50.235482806 seconds)
done (took 111.681861139 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.668499069 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.971005908 seconds)
  done (took 9.538812094 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.985223768 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.974105327 seconds)
  done (took 5.949273506 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.961410429 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.958525747 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.976094296 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.972916859 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.962295578 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.966144719 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.968825189 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.9716183 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.980066943 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.9697547 seconds)
  done (took 21.581152603 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.964227757 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.971336221 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.983931052 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.962062678 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.962482268 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.962130334 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.97110774 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.970993885 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.956302642 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.9549006 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.963403616 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.966660135 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.979624161 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.051247798 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.062895042 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.065195044 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.154452588 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.156756087 seconds)
  done (took 37.963493284 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.173841649 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.238281374 seconds)
  done (took 6.440892282 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.168568337 seconds)
    (2/7) benchmarking "second"...
    done (took 2.251822553 seconds)
    (3/7) benchmarking "month"...
    done (took 2.213138995 seconds)
    (4/7) benchmarking "year"...
    done (took 2.233089993 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.302205311 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.262800824 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.200888148 seconds)
  done (took 17.621878609 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.233422059 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.312449378 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.369825116 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.671553589 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.130274581 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.104587801 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.696560426 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.122026776 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.1597992 seconds)
  done (took 22.847836071 seconds)
done (took 123.866201911 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.927659861 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.001865109 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.751583278 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.252342326 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.228248229 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.462791671 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.16601171 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.571285316 seconds)
done (took 46.449713178 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.246517322 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.09500286 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.095028495 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.005047472 seconds)
  done (took 23.229192496 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.998002215 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.63994576 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.066412375 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.05426728 seconds)
  done (took 23.765475092 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.495429165 seconds)
    (2/2) benchmarking "read"...
    done (took 2.469592669 seconds)
  done (took 6.880097837 seconds)
done (took 63.162091399 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.009495887 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.999075894 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.975348547 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.08266493 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.113751233 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.068091169 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.002295457 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.997536012 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.972406571 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.956372676 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.951381072 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954185316 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.994270666 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.010360425 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.978813454 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.953885038 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965035656 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.968628794 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.963290736 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.955044455 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.966231036 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.956523996 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.955971905 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.957041325 seconds)
  done (took 49.742324229 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.959369305 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.943848041 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.955110274 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.965616691 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.95615917 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.954640269 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.953317569 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.951732647 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.960893686 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.956725674 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.960592145 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.963813917 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.9562519 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.947501288 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.955797191 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.948194367 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.952680647 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.948506685 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.945427408 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.951444675 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.946568473 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.944300668 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.941660326 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.948783357 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.949614167 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.951555055 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.949165836 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.950683659 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.945942073 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.945901788 seconds)
  done (took 60.444802411 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.945814073 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.951391224 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.949955644 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.947870049 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.943196371 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.941367109 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.937431482 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.93668292 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.936889894 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.939044613 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.946984753 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.944730169 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.94041704 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.941039275 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.939565347 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.936335246 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.936298532 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.935373212 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.94117164 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.944496592 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.941172792 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.938586029 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.938705935 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.937749351 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.938451327 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.935928869 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.94205728 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.946450484 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.941829473 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.939596481 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.940605728 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.939609166 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.938466475 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.93679498 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.939370461 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.94182138 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.944799313 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.947069488 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.949245066 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.942360397 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.938157317 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.939475504 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.938193014 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.954517851 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.952864727 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.950776044 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.942189489 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.940316356 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.940054003 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.941147903 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.938219332 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.942221526 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.941997182 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.943076794 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.945288231 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.941600753 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.939918493 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.941181177 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.942074441 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.938719152 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.940259433 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.944986992 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.946711937 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.943355065 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.94175701 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.942204057 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.944664336 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.945573999 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.938902833 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.938891574 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.944211778 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.944936767 seconds)
  done (took 141.702292057 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.943063405 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.940358301 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.94533904 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.940114516 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.943739826 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.947151112 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.943265541 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.942423474 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.941795643 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.941165256 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.942269811 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.93843138 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.938341597 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.944143678 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.945314942 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.94454444 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.942923164 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.940699107 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.942048655 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.94406651 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.940880081 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.941997945 seconds)
  done (took 44.607007088 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.943080932 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.942128561 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.942627402 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.941200726 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.941494341 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.94046776 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.944085821 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.952246543 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.947539065 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.95952363 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.945459282 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.942795408 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.941877532 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.94190425 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.940697503 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.945726434 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.946681764 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.945948463 seconds)
  done (took 36.881445967 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.943296954 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.942036849 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.990921001 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.940580436 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.94093582 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.946726075 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.948549355 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.96377624 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.973382379 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.94531928 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.943812824 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.942812503 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.979240204 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.97902262 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.957757779 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.942102808 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.945494281 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.948133712 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.947067582 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.94437825 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.944228276 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.943413227 seconds)
  done (took 44.828961341 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.940384105 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.947131352 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.947061999 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.947065152 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.943805039 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.943576149 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.943357799 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.943371074 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.942856694 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.943771256 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.946310307 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.947971902 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.946996936 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.945197879 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.944182077 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.943814347 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.943274598 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.942729335 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.942230922 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.947118597 seconds)
  done (took 40.765569477 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.944918547 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.945085711 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.945394009 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.944885269 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.944506705 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.944657174 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.948145164 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.949946592 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.949245325 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.946577846 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.945435089 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.945237627 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.945511431 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.944366959 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.943158084 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.946489254 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.948717037 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.949279463 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.947709586 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.94628759 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.946646359 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.946598499 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.945413039 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.944945416 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.947353748 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.949404359 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.951997908 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.949288566 seconds)
  done (took 56.388046308 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.945943976 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.944827637 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.943524483 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.943374313 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.94886426 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.950483525 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.949366062 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.94682683 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.945936739 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.946057948 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.946363227 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.945219173 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.944150596 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.947108086 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.951067046 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.950831835 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.948222563 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.947195781 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.946350412 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.94632505 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.946903983 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944511852 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.944271081 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.950492477 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.950017056 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.949860575 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.947801813 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.94789652 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.947021355 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.946880184 seconds)
  done (took 60.291185577 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.97011869 seconds)
    (2/2) benchmarking "in"...
    done (took 1.973961044 seconds)
  done (took 5.821624847 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.946997008 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.946366543 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.947144665 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.946849253 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.946080632 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.945241956 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.94879182 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.951834333 seconds)
  done (took 17.45991814 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.947347124 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.951075235 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.947888037 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.947801047 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.947547318 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.957530935 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.952667027 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.955037223 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.954567261 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.951131316 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.954323927 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.953421389 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.958040387 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.95460467 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.947221518 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.947117049 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.95191581 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.95413283 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.955057627 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.950552853 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.952781167 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.949010749 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.948654871 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.949714926 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.949123298 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.951673528 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.962874931 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.954165495 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.955456066 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.952155486 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.95913577 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.949303224 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.949862803 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.952282651 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.949651619 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.947975471 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.955481016 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.949844043 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.952356323 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.953975168 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.955706497 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.953635929 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.954193233 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.958886494 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.950564693 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.949393878 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.948682685 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.950270182 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.954364053 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.960889176 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.964142248 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.954145144 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.950004939 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.950091196 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.954551287 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.950904727 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.949754523 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.952960708 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.956518653 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.961497449 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.959211388 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.980177788 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.966124426 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.952961008 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.952270425 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.964633797 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.982120163 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.953947433 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.952986239 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.950261415 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.958801116 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.951590962 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.95382875 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.956770408 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.97067253 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.964685749 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.951952272 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.950996133 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.950919261 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.952799542 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.954545545 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.950574564 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.950185221 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.954596377 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.968927784 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.988142025 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.955808825 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.953989336 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.955568693 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.954724002 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.957756996 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.95621916 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.953112279 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.951016103 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.953403222 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.958699169 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.958011599 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.957732387 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.955903914 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.963217107 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.953061692 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.952326794 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.957306795 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.962514679 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.951206808 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.95055266 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.955629292 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.956335292 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.966186805 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.957560131 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.95551754 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.953164988 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.954670838 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.959312779 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.95339388 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.958304943 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.962247552 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.962068665 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.956712684 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.962554735 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.964630724 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.96042279 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.96864773 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.986221786 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.952664747 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.958256442 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.961657457 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.969862175 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.958408723 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.952297989 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.954712598 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.953175565 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.956631468 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.961436681 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.958407997 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.956805322 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.954225299 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.955463572 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.953983881 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.95556189 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.95709951 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.95607758 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.957536948 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.958522228 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.964520696 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.960571306 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.961959176 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.963330893 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.955940362 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.955466139 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.954321032 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.958450674 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.956650888 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.954638772 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.952131867 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.95764775 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.959417902 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.960612139 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.963211626 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.957655731 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.95557858 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.956836809 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.960447846 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.95651752 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.955867822 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.955236879 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.95822782 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.959594012 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.962557653 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.962117433 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.962398806 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.957090205 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.962062139 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.956138645 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.955414178 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.95667704 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.954674292 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.953748609 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.959687456 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.972034681 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.965290731 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.972148304 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.960670008 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.967191452 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.95606386 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.958885951 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.95860252 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.957873507 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.95798285 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.955460513 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.955542393 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.962889855 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.985147396 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.974169245 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.964533848 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.964867168 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.96786837 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.962347893 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.964378238 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.957318182 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.959949648 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.960406301 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.957955562 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.95634638 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.955515083 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.960869319 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.961122083 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.960888632 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.966908966 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.960992866 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.958791083 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.959403683 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.957861627 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.961209103 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.957409474 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.957520257 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.957255802 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.957805514 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.969987658 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.964813069 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.963977095 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.962797935 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.964467491 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.960085646 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.957693638 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.961370433 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.963370183 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.958985875 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.960368732 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.965213434 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.958242507 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.959394464 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.961575631 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.964289261 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.967677992 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.961326857 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.964813809 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.969594202 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.963885602 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.958952266 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.965733285 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.959553156 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.963308921 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.958971728 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.960777571 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.963101285 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.967657024 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.965430425 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.963812332 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.970590134 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.959332845 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.9622967 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.959467009 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.963715859 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.962505239 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.963228003 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.959035346 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.962678251 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.969594109 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.971068906 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.964216882 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.969435882 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.967739276 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.965574035 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.966116374 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.962065382 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.977450813 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.973927312 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.960695382 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.961014326 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.961429377 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.964625232 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.960866076 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.963677346 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.973359772 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.966138951 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.969405265 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.969557284 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.964024099 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.963422487 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.968973842 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.96434438 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.966142706 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.963415249 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.963781166 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.962341983 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.959552602 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.963022584 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.963744818 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.968118099 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.969794583 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.966662539 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.967049715 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.963218942 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.972877646 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.962742551 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.964393087 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.971034542 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.964347062 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.962952092 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.96393997 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.960487423 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.964960709 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.967510413 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.968620982 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.971082686 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.967240973 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.971048347 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.977317676 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.968561822 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.97400016 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.966166211 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.976081335 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.963621335 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.963045798 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.962567355 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.96722873 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.971998074 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.963066395 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.965771171 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.976577347 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.968246245 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.968436851 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.971021873 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.963748163 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.965002802 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.964352707 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.966769507 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.970738905 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.967971558 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.963285337 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.963320049 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.962807944 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.965412439 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.971801701 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.972504976 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.971161633 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.969166865 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.967014958 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.96603524 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.965711227 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.965630679 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.965237927 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.964064616 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.963835339 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.972930513 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.963881416 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.964230215 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.968236111 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.966517456 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.978496452 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.968851132 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.969788721 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.96907092 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.967174976 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.969827562 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.965169378 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.965975382 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.966061644 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.965970848 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.96774584 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.978760873 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.973446383 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.967890557 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.967768073 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.969097571 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.972209924 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.983026244 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.000429004 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.972607533 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.973715085 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.974187748 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.975227774 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.970115454 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.973029543 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.972129322 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.976909978 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.968646536 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.966537993 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.970842008 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.981510584 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.965726906 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.964031646 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.964402398 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.974792405 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.971768086 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.970750252 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.972735081 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.974280845 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.971242423 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.980490461 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.967733563 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.968969039 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.968237238 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.966732634 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.967216002 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.966957212 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.969682999 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.969809182 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.966234413 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.968443114 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.974396712 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.977934624 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.972485871 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.978649196 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.985297687 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.972127454 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.970494358 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.971191833 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.969235198 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.970812182 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.969521961 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.967991121 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.970741861 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.967108348 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.968938354 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.971715487 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.977571326 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.968359969 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.969518991 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.970192273 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.97712987 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.972151602 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.973097155 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.973825067 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.980359069 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.975296199 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.98418037 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.980813421 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.970530565 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.971273621 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.979671449 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.978885173 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.969723474 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.969705334 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.969475974 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.971771047 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.97175208 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.972503175 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.973701604 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.976692233 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.982051403 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.974118039 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.974353611 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.973240026 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.970595771 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.973039798 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.974224985 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.976634423 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.969678938 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.96947462 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.969398257 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.970908261 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.9710643 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.971877109 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.968145312 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.969100539 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.976889444 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.975912656 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.979270262 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.974159763 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.974268747 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.977296506 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.972727356 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.970087691 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.972282399 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.971706948 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.970561588 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.976106097 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.981552017 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.969875744 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.973282989 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.972187272 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.975193768 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.97076536 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.972357777 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.974406287 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.975635612 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.984779093 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.976001664 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.976564489 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.976049022 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.974074009 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.979168106 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.973791789 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.977801668 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.97291481 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.972411575 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.971223859 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.976111905 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.983664653 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.976869479 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.976084882 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.979948365 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.975293598 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.973452217 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.970048385 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.974566084 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.974631598 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.977333566 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.98088002 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.978807345 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.979925575 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.975271739 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.977289166 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.973413241 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.975335738 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.97238 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.973072635 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.978230598 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.984559657 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.982618692 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.972711304 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.975014471 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.973169842 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.977887379 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.985259899 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.97269156 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.97495725 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.977121878 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.980514229 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.980119699 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.989303346 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.9893428 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.983329879 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.977635094 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.983795827 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.001734709 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.977969459 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.987754 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.013207876 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.976236278 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.975381629 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.976146294 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.975577812 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.975390755 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.978109045 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.975134702 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.981632717 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.973919302 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.97323816 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.981908489 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.972397943 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.972621766 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.974251328 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.979252349 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.98469119 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.97815561 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.987576902 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.979436609 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.97911442 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.97954053 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.980011157 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.975926875 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.974847867 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.974414892 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.978875166 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.975572589 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.975696276 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.985962541 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.97618711 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.9775251 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.991228766 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.989022861 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.97570779 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.974948649 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.974936614 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.980737518 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.979736744 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.977630606 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.985368482 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.990009315 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.986062939 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.99039728 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.983197495 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.983673419 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.981675003 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.978807358 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.979441888 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.992890323 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.990912417 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.977933377 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.978459457 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.985865398 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.976680738 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.98473502 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.983719333 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.977372269 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.980442798 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.977522785 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.975649477 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.97620843 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.975265116 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.980195899 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.984756204 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.976272364 seconds)
  done (took 1174.11152239 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.981060666 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.980975936 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.980269804 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.979419662 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.978448039 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.9775533 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.977584695 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.97697092 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.977378825 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.976848241 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.977340452 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.976976419 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.977665844 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.977281746 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.976729368 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.976630627 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.97649516 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.975369361 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.977704091 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.979032388 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.981036736 seconds)
  done (took 43.451389025 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.980489682 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.979990892 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.978515804 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.978107972 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.978252794 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.977989259 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.977726538 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.97820336 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.978166451 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977943839 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.978238916 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.977638354 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.977641304 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.977205616 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976099358 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.976871132 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.975862168 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.980065086 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.981037803 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.980918987 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.983291099 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.982238011 seconds)
  done (took 45.445405995 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.980547414 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.979992066 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.981520192 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.978859776 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.978972141 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.980167672 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.979523954 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.981823809 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.979965714 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.981300771 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.98939564 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.989223314 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.979131752 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.982160219 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.979037996 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.978929021 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.099438974 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.981076714 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.980502409 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.978900121 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.980275035 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.986865495 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.979617499 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.980639927 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.983383067 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.986097565 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.984456122 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.985666965 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.985454274 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.98796615 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.991934076 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.985141246 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.037674428 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.989070026 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.987146309 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.98692798 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.990606943 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.985154315 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.983908611 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.981878534 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.994754815 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.012076476 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.981888184 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.982161478 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.990733014 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.981291257 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.982255355 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.987321233 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.991576177 seconds)
  done (took 99.317792115 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.981519336 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.981497036 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.980625381 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.980101964 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.979877175 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.980357247 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.979790177 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.982091186 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.983855715 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.983460685 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.984586083 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.985739047 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.985974692 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.985671185 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.98630417 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.985256009 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.982827618 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.982780558 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.982600218 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.982882346 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.981694947 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.982094312 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.98269816 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.983224148 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.981955176 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.982434389 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.981840134 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.981999137 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.982697557 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.982461497 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.982302338 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.982715932 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.982030344 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.981343857 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.980569457 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.981502497 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.982629984 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.985265278 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.986082075 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.985562674 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.98751192 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.987684184 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.988771214 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.98902927 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.988341225 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.988515449 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.98643331 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.987401547 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.986491727 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.984253238 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.984247463 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.984507311 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.983066725 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.984115951 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.983757749 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.983792998 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.983469474 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.983034898 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.982492673 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.983828174 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.983798304 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.98297949 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.983498066 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.982968336 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.982625635 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.982119003 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.982525494 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.981460815 seconds)
  done (took 136.796921507 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.987919314 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.989682046 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.989018022 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989613338 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.989460701 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.990076715 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.989622727 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.98814521 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.987222263 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.987437578 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986296702 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.985317068 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.986553999 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.984615893 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.986415616 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.98638819 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.986629431 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986171068 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.987370491 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.986233401 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.985489725 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.986284843 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.98643504 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.986641874 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.986887991 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.986035841 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.987127136 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.985553215 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.985505089 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.985419136 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.985481177 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.985008216 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.986049792 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.987272276 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.989626917 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.989750322 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.990368521 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.989939625 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.991001858 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.992353558 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.992306572 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.992208233 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.992831793 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.992281564 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.992403379 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.992567419 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.992169454 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.991794106 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.990100745 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.990818604 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.990019506 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.989954646 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.988249406 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.989060505 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.988186419 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.986828106 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.988633874 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.988777763 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.988196412 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.988529674 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.987724524 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.986803905 seconds)
  done (took 125.19695559 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985984193 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.986134325 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.986831395 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.985361405 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.985239449 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.984505873 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.984804017 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.985291232 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.984708729 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.985894799 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.98779188 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.989371309 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.99173267 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98916338 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.991924313 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.99263941 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992316948 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.991912151 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.991291118 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.992447809 seconds)
  done (took 41.681842477 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.989153593 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.989808999 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.988323878 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.98990051 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.988692124 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.989342033 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.989220354 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.989377999 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989303741 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.989096402 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.989196748 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.989313747 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989701995 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.989136532 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.989166111 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.990162242 seconds)
  done (took 33.750698765 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.988228516 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.988084502 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.989585034 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.988750679 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.988277825 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.989690397 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.990082129 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.991832961 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.994187588 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.994492018 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.993145022 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.994224971 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.994733548 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.997732488 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.99533391 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.995362608 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.996035908 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.995864516 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.995806625 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.99588362 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.996862588 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.996680728 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.996573969 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.996878568 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.996566838 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.997097236 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.996313107 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.996192459 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.997753124 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.996162762 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.997118783 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.997180068 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.99585995 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.997028261 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.997269123 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.996116434 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.99576507 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.99500082 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.995700912 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.994175552 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.994809722 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.996837301 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.994008924 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.992443209 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.99305588 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.99250625 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.991809562 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.993045593 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.992653711 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.992155433 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.991844324 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.993414776 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.992264218 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.993086276 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.993832595 seconds)
  done (took 111.603084111 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.992316341 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.992861827 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.992527449 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.992137729 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.99281123 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.992424488 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.99231944 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.991896749 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.993235747 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.992864042 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.992225146 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.99151725 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992096649 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.991167298 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.991625604 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.990906688 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.989918182 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.991444126 seconds)
  done (took 37.777871114 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.995970171 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.996538012 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.995643523 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.996865044 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.997324582 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.997404159 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.997144526 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.997586754 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996805468 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.997620062 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.997152403 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.996982325 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.998130251 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.99723414 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.997810285 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.99868591 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.997550199 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.998056377 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.997036011 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.997972946 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.997650305 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.998658916 seconds)
  done (took 45.867759579 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.995223662 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.995584233 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.013396153 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.023340334 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.02307085 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.043862419 seconds)
  done (took 14.02033637 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.996350705 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996921876 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.996093191 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.995836019 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99629646 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995506476 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995644521 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995635516 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996394413 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997039787 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996307136 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995945605 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.995915913 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.995849447 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996152005 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995901038 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996089655 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.996187696 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996849893 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997354325 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997390889 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996373848 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996281325 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997034278 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996639187 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996955351 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996810356 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.997144267 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997371839 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997218576 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99697338 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997294103 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997301375 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997612607 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997352039 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997425392 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997480376 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997161211 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.9977095 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998093939 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.99771575 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998045094 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997017375 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.996887309 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.996975072 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997062289 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997813321 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997394598 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996883813 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997508921 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99702244 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997718511 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997755218 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998092424 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997370998 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997781116 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998156037 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99698898 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997611915 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998262709 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.99858062 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998389541 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997606077 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998616141 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999079145 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998158553 seconds)
  done (took 133.737903893 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997910661 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.99762658 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999063337 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997829432 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998292937 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997835929 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998707411 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998832005 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998225093 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998250507 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998762292 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998092989 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998243014 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998197213 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999287305 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998368324 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998714237 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998393302 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998215996 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999394138 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998505866 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998550053 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999032459 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998892222 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999194627 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999207727 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.999173491 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.999465065 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998675814 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998407853 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.99892604 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999140991 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.999216626 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.998684249 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.998528985 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999109851 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997773737 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999013021 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999317058 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998915744 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998623942 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998839371 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998912869 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999159358 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.999594258 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.999704371 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.999760971 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999306653 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998825021 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.999508009 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999560986 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.001432809 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.999858619 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999611727 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.999950968 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999984009 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000069109 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.000366259 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.00033708 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.000038933 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.999956928 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.999492836 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001009781 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999479801 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.001332963 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.999641021 seconds)
  done (took 133.86879547 seconds)
done (took 2737.623813786 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.050489178 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.119981937 seconds)
  done (took 16.106531122 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.136131282 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.048139224 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.158317407 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.103665489 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.051578801 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.042257564 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.009532162 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.006126944 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.090940741 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.007776845 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.079720237 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.011088263 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.007329797 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.00798826 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.008136573 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.007974459 seconds)
  done (took 54.751647215 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.012706383 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.009885725 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.008464761 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.005579766 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.033104001 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.112581712 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.042288935 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.018185913 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.02880417 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.054444569 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.036823601 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.018042302 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.023827615 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.018290907 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.122255956 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.07260104 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.088396224 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.109400724 seconds)
  done (took 38.747507142 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.109178926 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.02752021 seconds)
  done (took 11.078249077 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.005564946 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.012674956 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.0070374 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.038329433 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.025786102 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.009256632 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.010245147 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.009508716 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.02329904 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.007961162 seconds)
  done (took 72.114419169 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.009545734 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.00956455 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.343314751 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.019679706 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.016360418 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.039737499 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.009433533 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.044845671 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.011193311 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.00443939 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.02160783 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.348893625 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.025616304 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.006529037 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.424020392 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.024625669 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.013364621 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.045713372 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.046425639 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.012874204 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.014434839 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.01429245 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.255036711 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.759463861 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.014167952 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.02180873 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.016480503 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.005514526 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.005106104 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.007829693 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.011655999 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.009595193 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.018197763 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.007149836 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.026243982 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.017984631 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.673193798 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.033121738 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.017170381 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.09752051 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.065640026 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.016925928 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.006661487 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.015346973 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.006494404 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.014900001 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.760035654 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.075615107 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.011940051 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.156184476 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.448846339 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.031185119 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.157783702 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.151885226 seconds)
  done (took 141.366682169 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.002783806 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.44664852 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.159467426 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.009193945 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.385246904 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.214983332 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.565556439 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.054904871 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.012724631 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.222428495 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.171996742 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.130071115 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.013956578 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.015378058 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.015947435 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.011020752 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.184750013 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.078003841 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.016340005 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.013721184 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.114458313 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.312448806 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.175041331 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.105094553 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.134045947 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.537798278 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.339789229 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.413346961 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.808068307 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.404442623 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.155393843 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.103934271 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.090264319 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.017225363 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.062364909 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.125163077 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.118848333 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.016370239 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.640496455 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.021426962 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.614994402 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.220551132 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.125626852 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.166523313 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.262727312 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.229009378 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.677568556 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.012001473 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.723896711 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.181708937 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.221302664 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.232549782 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.108443029 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.011851483 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.455705115 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.012229078 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.019350182 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.299107832 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.290955203 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.212824841 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.11878419 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.018192191 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.01220499 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.252004435 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.048618738 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.203901619 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.157591532 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.230334933 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.295762099 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.260100504 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.289353477 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.383378719 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.238013103 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.372196151 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.005766144 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.241336021 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.100063884 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.257390458 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.050328721 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.029667188 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.133492776 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.483913643 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.18424067 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.281426652 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.346214884 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.076241391 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.543878043 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.035903875 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.242355051 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.203614962 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.529120808 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.346856907 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.086197285 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.888027177 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.189309675 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.19754116 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.283449986 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.165916515 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.119464175 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.573536069 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.307710505 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.653544931 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.072695286 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.498800932 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.155938007 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.053267808 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.667516934 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.050857312 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.261758546 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.09122121 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.048596459 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.040772315 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.193612193 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.793465122 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.066241387 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.097603901 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.170324089 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.153076515 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.416771884 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.314370441 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.560879359 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.058167454 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.554340195 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.228636878 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.15944415 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.257895335 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.380822324 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.248143101 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.618896822 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.460698051 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.30787374 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.379882422 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.64836177 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.233145513 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.411916316 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.260778613 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.286242519 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.451432695 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.210260036 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.380008403 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.136187366 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.338906157 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.160101075 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.239853474 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.240814448 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.343405944 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.156958671 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.207526442 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.164906183 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.187431097 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.068088951 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.095869653 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.246279706 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.076587837 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.056721806 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.927322532 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.073584823 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.294798793 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.284432279 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.094051316 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.211797006 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.600069934 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.13727849 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.140184915 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.062912547 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.467239607 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.546465802 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.200197197 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.67387098 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.330754321 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.041552631 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.289987171 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.216431902 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.038774212 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.034731071 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.801026822 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.473483138 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.036715743 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.188148492 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.7269999 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.406090793 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.238526687 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.037566793 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.08371638 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.042985579 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.283494183 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.538243533 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.27341803 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.016461818 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.018164576 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.016256847 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.017755359 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.219922571 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.05593165 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.662757535 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.158284906 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.28184996 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.233304591 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.325512028 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.076724546 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.019699037 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.332746644 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.034848361 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.08139199 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.017883946 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.032312069 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.25650782 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.024696693 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.228182432 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.361891573 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.092359158 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.063787026 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.019549524 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.020863969 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.999736644 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.192445712 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.139720951 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.021820671 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.331705843 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.066968056 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.153506899 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.214803612 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.316130654 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.988548134 seconds)
  done (took 932.736736169 seconds)
done (took 1268.836786341 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.0177953 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.020457299 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.018053426 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.019972438 seconds)
  done (took 30.020734198 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.017915603 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.024903417 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.084657244 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.071883034 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.035660839 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.043208457 seconds)
  done (took 14.234258005 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.05074963 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.111194845 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.293930742 seconds)
  done (took 23.406513501 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.603953988 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.450265974 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.245970846 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.361325311 seconds)
  done (took 11.774990638 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.048147087 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.053110778 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.031822821 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.058948086 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.071272881 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.041897805 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.046154183 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.050252717 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.036694385 seconds)
  done (took 20.522342473 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.533993945 seconds)
done (took 108.443313977 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.055227604 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.477191376 seconds)
    (3/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.432022072 seconds)
    (4/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.045381073 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.338051365 seconds)
    (6/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.268122886 seconds)
    (7/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.347702776 seconds)
    (8/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.199074986 seconds)
    (9/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.211761722 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.22703218 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.444313406 seconds)
    (12/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.180094016 seconds)
    (13/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 5.231066314 seconds)
    (14/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.219992564 seconds)
    (15/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.963576086 seconds)
    (16/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.21477139 seconds)
    (17/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.042994715 seconds)
    (18/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.745537467 seconds)
    (19/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.529130194 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.074145421 seconds)
    (21/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.063237073 seconds)
    (22/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.053783842 seconds)
    (23/341) benchmarking ("sort", Float64, false)...
    done (took 7.956805002 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.9720315 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.320333572 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.143015283 seconds)
    (27/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.537122925 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.253060034 seconds)
    (29/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.316784673 seconds)
    (30/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.632360324 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.442941393 seconds)
    (32/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.452373832 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.838916197 seconds)
    (34/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.686753511 seconds)
    (35/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.635923572 seconds)
    (36/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 3.059855665 seconds)
    (37/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.323831186 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.112545558 seconds)
    (39/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.440573682 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.124020937 seconds)
    (41/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.332652708 seconds)
    (42/341) benchmarking ("map", abs, Int64, true)...
    done (took 4.34150422 seconds)
    (43/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.394108541 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.32928229 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.432932622 seconds)
    (46/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.667737735 seconds)
    (47/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.983328362 seconds)
    (48/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.601661681 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.316486085 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.312477046 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.435208437 seconds)
    (52/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.547587415 seconds)
    (53/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.296451614 seconds)
    (54/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.702385472 seconds)
    (55/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.532492198 seconds)
    (56/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.304835103 seconds)
    (57/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.195669173 seconds)
    (58/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.877593004 seconds)
    (59/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.474082426 seconds)
    (60/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.396863041 seconds)
    (61/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.423368595 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.605047111 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.817604904 seconds)
    (64/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.445254399 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.502598563 seconds)
    (66/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.206981037 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.484291337 seconds)
    (68/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.332654405 seconds)
    (69/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.271325523 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.079447981 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.631274416 seconds)
    (72/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.340435771 seconds)
    (73/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.18810928 seconds)
    (74/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.488051194 seconds)
    (75/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.144295011 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.895496359 seconds)
    (77/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.571158261 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.085947893 seconds)
    (79/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.471680308 seconds)
    (80/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.199493139 seconds)
    (81/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.41753632 seconds)
    (82/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.102765605 seconds)
    (83/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.175562779 seconds)
    (84/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.146801769 seconds)
    (85/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.48696688 seconds)
    (86/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.74098284 seconds)
    (87/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.488894494 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.082358076 seconds)
    (89/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.24400215 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.076227623 seconds)
    (91/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.07963535 seconds)
    (92/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.05124455 seconds)
    (93/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 4.723976967 seconds)
    (94/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.04727765 seconds)
    (95/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.179351119 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.192348851 seconds)
    (97/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.245642779 seconds)
    (98/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.466625492 seconds)
    (99/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.166461339 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.172725583 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.191108096 seconds)
    (102/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.03897078 seconds)
    (103/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 8.64118796 seconds)
    (104/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.142836047 seconds)
    (105/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.157536311 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.370437454 seconds)
    (107/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.99226142 seconds)
    (108/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.037019243 seconds)
    (109/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.04312828 seconds)
    (110/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.164326518 seconds)
    (111/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.044855404 seconds)
    (112/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.07258417 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.034451129 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.554672475 seconds)
    (115/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.182317574 seconds)
    (116/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.062469325 seconds)
    (117/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.041828044 seconds)
    (118/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.380977846 seconds)
    (119/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.03736409 seconds)
    (120/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.927595175 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.226149847 seconds)
    (122/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.970668391 seconds)
    (123/341) benchmarking ("sort", Int8, false)...
    done (took 5.618596979 seconds)
    (124/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.17649877 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.457211698 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.377006614 seconds)
    (127/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.154833885 seconds)
    (128/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.298051732 seconds)
    (129/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.620231721 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.306204144 seconds)
    (131/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.195802546 seconds)
    (132/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.199176043 seconds)
    (133/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.265330966 seconds)
    (134/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.054106489 seconds)
    (135/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.040392979 seconds)
    (136/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.025872822 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 4.72582168 seconds)
    (138/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.608739938 seconds)
    (139/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.15138681 seconds)
    (140/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.277510327 seconds)
    (141/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.304502679 seconds)
    (142/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.03592454 seconds)
    (143/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 8.020026856 seconds)
    (144/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.149722179 seconds)
    (145/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.296191363 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.165652063 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.324758766 seconds)
    (148/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.570101049 seconds)
    (149/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.044749493 seconds)
    (150/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.027722734 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.434542665 seconds)
    (152/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.239177607 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.265006776 seconds)
    (154/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.15631502 seconds)
    (155/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.035445371 seconds)
    (156/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 4.242193572 seconds)
    (157/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.235594665 seconds)
    (158/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.717107466 seconds)
    (159/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.257686351 seconds)
    (160/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.844413228 seconds)
    (161/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.209752763 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.044335834 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.336654603 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.052219439 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 7.028509327 seconds)
    (166/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.300422479 seconds)
    (167/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.400867633 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.167441903 seconds)
    (169/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.039620069 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.261287004 seconds)
    (171/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.185872352 seconds)
    (172/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.198066202 seconds)
    (173/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.038825667 seconds)
    (174/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.301035186 seconds)
    (175/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.125312401 seconds)
    (176/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.469040098 seconds)
    (177/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.049649574 seconds)
    (178/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.512617997 seconds)
    (179/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.198613917 seconds)
    (180/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.593348016 seconds)
    (181/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.03228973 seconds)
    (182/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 4.059937016 seconds)
    (183/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.189440359 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.192785227 seconds)
    (185/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.182196189 seconds)
    (186/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.352560347 seconds)
    (187/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.182118258 seconds)
    (188/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.650867685 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.174200432 seconds)
    (190/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.528326624 seconds)
    (191/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.359625545 seconds)
    (192/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.323478268 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.040179789 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.536410044 seconds)
    (195/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.030872108 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.45449038 seconds)
    (197/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.196232059 seconds)
    (198/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.138870033 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.030460582 seconds)
    (200/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.039099288 seconds)
    (201/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.099659704 seconds)
    (202/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.528563279 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.033134101 seconds)
    (204/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 4.800867406 seconds)
    (205/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.147951084 seconds)
    (206/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.076745028 seconds)
    (207/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.339298977 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.140278325 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.570379112 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.372194788 seconds)
    (211/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.396386326 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.080366977 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 7.068641868 seconds)
    (214/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.082739345 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.052368004 seconds)
    (216/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.035739778 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.548698217 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.274112581 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.265425399 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.226309475 seconds)
    (221/341) benchmarking ("sort", BigInt, false)...
    done (took 7.077913563 seconds)
    (222/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.640718414 seconds)
    (223/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.119287504 seconds)
    (224/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.097012931 seconds)
    (225/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.086913959 seconds)
    (226/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.219940708 seconds)
    (227/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.495402114 seconds)
    (228/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.415767531 seconds)
    (229/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.204261448 seconds)
    (230/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.056341728 seconds)
    (231/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 4.47047717 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.166733543 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.212036066 seconds)
    (234/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.579481914 seconds)
    (235/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.209759602 seconds)
    (236/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.300765888 seconds)
    (237/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.057982931 seconds)
    (238/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.668039404 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.871154659 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.491403235 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.528601923 seconds)
    (242/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.451240831 seconds)
    (243/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.48183422 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.117325044 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.223721164 seconds)
    (246/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.337458513 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 3.000741247 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.701033677 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 3.002774796 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.26805111 seconds)
    (251/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.198350228 seconds)
    (252/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.155521897 seconds)
    (253/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.100564145 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.125019173 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.187339543 seconds)
    (256/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.095754666 seconds)
    (257/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.542996867 seconds)
    (258/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.244335429 seconds)
    (259/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.520065472 seconds)
    (260/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.341280634 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.191288138 seconds)
    (262/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.889758095 seconds)
    (263/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.114064027 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 8.94326349 seconds)
    (265/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.107140847 seconds)
    (266/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.698913219 seconds)
    (267/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.120558008 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 4.096540208 seconds)
    (269/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.176365002 seconds)
    (270/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.102177234 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 3.871225738 seconds)
    (272/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.492193186 seconds)
    (273/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.417971275 seconds)
    (274/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.539516638 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.116318399 seconds)
    (276/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.494678349 seconds)
    (277/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.124411254 seconds)
    (278/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.525882066 seconds)
    (279/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.274171086 seconds)
    (280/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.609358151 seconds)
    (281/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.648909619 seconds)
    (282/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.613065117 seconds)
    (283/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.118510756 seconds)
    (284/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.112337379 seconds)
    (285/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.19978374 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.476257314 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.109512765 seconds)
    (288/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.352209652 seconds)
    (289/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.238308154 seconds)
    (290/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.254858392 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.737386347 seconds)
    (292/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.110541536 seconds)
    (293/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.50164511 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.13060433 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.407502738 seconds)
    (296/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.668196891 seconds)
    (297/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.088736324 seconds)
    (298/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.621714478 seconds)
    (299/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.455068497 seconds)
    (300/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.244406237 seconds)
    (301/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.313855908 seconds)
    (302/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.245502706 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.424729594 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.453125729 seconds)
    (305/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.336530583 seconds)
    (306/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.06922241 seconds)
    (307/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.182194973 seconds)
    (308/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.267423244 seconds)
    (309/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.249822375 seconds)
    (310/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.381197646 seconds)
    (311/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.353763907 seconds)
    (312/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.870264479 seconds)
    (313/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.842423203 seconds)
    (314/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.115769997 seconds)
    (315/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.355924149 seconds)
    (316/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.733172615 seconds)
    (317/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.095318892 seconds)
    (318/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.142615009 seconds)
    (319/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.107314729 seconds)
    (320/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.224483854 seconds)
    (321/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.263719542 seconds)
    (322/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.010945922 seconds)
    (323/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.328302205 seconds)
    (324/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.323215966 seconds)
    (325/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.217483748 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.602938257 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.058488141 seconds)
    (328/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.120707532 seconds)
    (329/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.425911145 seconds)
    (330/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 9.028618891 seconds)
    (331/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 4.980436093 seconds)
    (332/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.107472264 seconds)
    (333/341) benchmarking ("perf_sum", Float64, false)...
    done (took 4.914243331 seconds)
    (334/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.132539262 seconds)
    (335/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.10956191 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 3.98225738 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.284995972 seconds)
    (338/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.36966192 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 4.020672399 seconds)
    (340/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.455557767 seconds)
    (341/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.199631018 seconds)
  done (took 1215.011532039 seconds)
done (took 1217.119945314 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.137026156 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.109975881 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.686177889 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.119633668 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.116134412 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.113250661 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.660087814 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.148799751 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.123341823 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.665660179 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.124318644 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.111238425 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.119216461 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.129810351 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.11551308 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.111273876 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.118159446 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.137739998 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.128228552 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.106160266 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.173227548 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.116066233 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.118631797 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.155239196 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.111606113 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.123157403 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.124421706 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.169712128 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.17434697 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.114553411 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.112896873 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.524163334 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.2017057 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.149489763 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.145757246 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.150419023 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.130910999 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.122684372 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.125095437 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.113171781 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.111396596 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.112784398 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.112587906 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.11743614 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.109373549 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.108394599 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.106084804 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.216510512 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.135532642 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.520621015 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.200069151 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.140295468 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.18206042 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.114302303 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.11022455 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.105227722 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.192290134 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.123786376 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.116245763 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.535787314 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.263188394 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.15975219 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.492503618 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.138946306 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.164935992 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.199865963 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.190526746 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.205040074 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.576944776 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.736903301 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.172990264 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.161578331 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.137126196 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.175665099 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.159694206 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.679854753 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.148545036 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.811911017 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.166036703 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.122457027 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.101080142 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.117822615 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.12364722 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.083461766 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.081948001 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.058135383 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.098136237 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.142196009 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.193563065 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.577899137 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.232910132 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.765668449 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.193393807 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.198046551 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.205603667 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.863239566 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.118090374 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.118639775 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.113202515 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.516128174 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.220896398 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.206447955 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.191589648 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.199859139 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.284519024 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.204596171 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.203949264 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.193649042 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.211337859 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.123786016 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.095555717 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.129932221 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.142868994 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.122868103 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.181186332 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.172703961 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.18792264 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.179805944 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.191957535 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.188040686 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.183470065 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.184989546 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.175566126 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.223672546 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.201591772 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.184498095 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.277672876 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.18372976 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.262205898 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.107582124 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.111980867 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.105188672 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.524096992 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.175321352 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.20616301 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.184982413 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.197553088 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.207736109 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.187624683 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.175748597 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.176669594 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.112356179 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.152981646 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.111973202 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.136622336 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.200956682 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.127850886 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.13278332 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.152869174 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.136275084 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.160877943 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.1607913 seconds)
done (took 336.982784342 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.210166799 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.462376285 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.16320003 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.127855956 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.326342187 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.319827243 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.259921397 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.264177083 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.266668213 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.707576481 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.252045627 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.249054141 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.628017623 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.270105492 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.306502419 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.251463994 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.255898251 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.524404493 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.269984739 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.311721726 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.255767144 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.254719168 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.269603266 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.712585323 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.254085094 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.260798169 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.321362397 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.260152526 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.537862835 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.26961364 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.271373648 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.542593447 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.314815283 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.263520962 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.243787676 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.251383097 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.328088287 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.265886662 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.296376929 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.303544955 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.318793574 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.251212698 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.234103294 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.273689952 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.252518576 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.260797509 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.240874163 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.242754534 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.217715414 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.104292919 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.384744157 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.107770262 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.105268078 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.107071023 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.114989491 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.108207262 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.104293199 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.108193512 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.16646763 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.107634916 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.155677916 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.555761194 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.570848433 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.125713381 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.137193341 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.1213014 seconds)
  done (took 173.46153397 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.209213515 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.223683282 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.21566862 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.119603041 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.186254791 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.22413772 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.142736022 seconds)
  done (took 17.37328374 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.150289659 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.137377368 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.166995053 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.160785649 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.143329191 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.316541332 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.152864833 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.139160529 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.170104608 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.143496155 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.528482297 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.164064504 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.128480786 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.134482143 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.158206673 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.182748149 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.14400425 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.15373704 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.254061302 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.185789946 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.109621671 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.108878031 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.16571701 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.144271708 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.161456958 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.167590776 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.170043617 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.162081488 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.152080071 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.151768552 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.156750675 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.167592884 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.152485044 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.139685332 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.152614544 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.150812148 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.149607567 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.149274815 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.151214102 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.535285359 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.155579363 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.158388994 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.166517458 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.15313297 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.150485629 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.17918151 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.152093586 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.152403522 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.154265858 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.159076485 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.199417087 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.159005502 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.154871078 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.15418884 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.190454384 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.173222818 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.166550632 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.173161923 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.168836827 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.177079049 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.174833567 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.262303713 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.2142519 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.183745418 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.209685593 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.2248948 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.186789147 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.183140546 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.177968681 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.177941677 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.155143316 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.185010948 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.14224156 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.223961096 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.145172738 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.319966028 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.176178425 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.154688731 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.176334409 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.116532845 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.177730981 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.172641291 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.17699056 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.161938372 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.159207799 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.181312578 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.172080636 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.141113767 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.190459504 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.162016625 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.210825249 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.155636636 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.157140275 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.249898897 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.153133143 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.266061686 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.188115944 seconds)
  done (took 216.350308579 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.169593623 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.159779061 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.173746907 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.16260289 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.164902121 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.164716427 seconds)
  done (took 15.082761974 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.160684475 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.163425418 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.152039096 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.163953316 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.153767805 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.170819228 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.165369055 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.162710861 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.164323315 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.157716036 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.160573668 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.155725038 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.156543941 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.157283205 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.151285386 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.160205885 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.154624548 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.160071368 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.16092118 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.156827539 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.365125061 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.15230593 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.155674765 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.163853255 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.164934007 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.155650661 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.166852866 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.167381363 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.154394788 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.169641754 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.163494919 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.16258485 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.156464044 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.175677823 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.16883679 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.16259571 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.166352645 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.156092168 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.162157287 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.162825217 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.16635242 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.15798115 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.16034567 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.165559401 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.161646938 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.170598536 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.169534633 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.171384517 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.155268085 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.163135459 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.148563634 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.162527738 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.165575352 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.162252622 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.163624732 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.170211871 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.16296539 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.163290383 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.144931542 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.177196031 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.147233676 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.158831918 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.169521306 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.177246149 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.161563866 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.159530359 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.156878987 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.175255307 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.162611898 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.159324248 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.162048433 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.160771911 seconds)
  done (took 157.946182118 seconds)
done (took 582.285496037 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.17445866 seconds)
  done (took 9.260441964 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.197266697 seconds)
  done (took 9.411350515 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.568588364 seconds)
  done (took 14.675566497 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.188643637 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.269237599 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.170665428 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.154981382 seconds)
  done (took 30.892535371 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.324484625 seconds)
  done (took 9.424155218 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.156408307 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.136379386 seconds)
  done (took 16.46069752 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.346318713 seconds)
  done (took 9.415423391 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.500299542 seconds)
  done (took 9.583584754 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.165792384 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.161740006 seconds)
  done (took 16.451881568 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.151764804 seconds)
  done (took 9.229809541 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.848005291 seconds)
  done (took 11.001225283 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.167184947 seconds)
  done (took 9.269879141 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.199454357 seconds)
  done (took 9.287385559 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.892426124 seconds)
  done (took 9.981879724 seconds)
done (took 176.44124557 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.163556927 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.168951357 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.151084362 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.168635671 seconds)
  done (took 30.7383593 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.200373522 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.205422138 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.202429655 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.210394367 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.196217841 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.193496698 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.197401665 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.2067178 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.194681942 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.195402415 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.210584659 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.2065892 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.225330367 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.192938327 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.184985564 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.224070819 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.215277049 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.196475497 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.190305845 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.200298515 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.198814497 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.205055695 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.164170668 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.158607936 seconds)
  done (took 54.870007562 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.369616913 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.248699059 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.301920325 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.221885854 seconds)
  done (took 11.230018779 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.169630229 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.239974714 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.214849236 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.213046351 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.224517548 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.333124442 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.212635264 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.351445253 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.301605067 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.296006877 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.171045707 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.178992131 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.169582355 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.227807663 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.319731952 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.161127713 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.161987863 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.296944934 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.243172845 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.415992012 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.160088415 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.218593454 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.219293578 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.218044748 seconds)
  done (took 55.819307148 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.158296223 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.187534007 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.181338294 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.167962738 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.163695956 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.161011594 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.172971145 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.163058709 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.194420177 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.159648538 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.164773867 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.162923891 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.157658985 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.156857986 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.157368825 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.168439261 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.184049877 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.172918427 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.157287355 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.186317636 seconds)
  done (took 45.473170218 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.160733156 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.173083816 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.420186145 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.325152946 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.167415182 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.158669298 seconds)
  done (took 35.492208007 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.181763971 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.184231219 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.16506244 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.202077243 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.227384954 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.17549381 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.256843654 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.373938551 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.175008334 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.241961976 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.185117503 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.177560028 seconds)
  done (took 28.650234242 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.151202885 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.158238591 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.163774542 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.179747144 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.177370757 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.170566254 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.170287417 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.173057848 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.178947162 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.181211279 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.171320713 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.18107858 seconds)
  done (took 48.149296438 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347570328 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.318499217 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.48352628 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.893368535 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.684036774 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.233644208 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.558387436 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.675856731 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.967939374 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.012111755 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.65681197 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.192337162 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.67991097 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.101454173 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.160857533 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.442210391 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165326236 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.138504502 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.592614103 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.237261524 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165379808 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.163122387 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163537351 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.692256404 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.47877229 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.171811235 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.340211459 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185976118 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.167711595 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.372932483 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.195109435 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.175981311 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.320611178 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.457919057 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.684809626 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.248227061 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.248880874 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.211194997 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.208503086 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.199944088 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.177863156 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.181901939 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.696291694 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.181381025 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.408174166 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171788769 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.16187427 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.749323862 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.105657472 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.349199667 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.332389856 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.760696636 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.199191898 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.111344324 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.297941933 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.443249951 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.174607242 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.207372724 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230091165 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.245775683 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.302976499 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.212705151 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319066105 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.08870125 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.669129723 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318490371 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.13539985 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140528504 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.4214038 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.413517393 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.223301048 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.309127281 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.879508644 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.136694138 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142996572 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.174610999 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.255079478 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.109397372 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.838814474 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.617842683 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.062773987 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.225989995 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.731809183 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116112474 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.106503279 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118839825 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.713308922 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.057804282 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.191362397 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.225785926 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.447845907 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.231430677 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.265582038 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.307797052 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.271543141 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.250667395 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.980763793 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.34854184 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.240062715 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.660581081 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.152205102 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.062509825 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.130088178 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.106926494 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.487805185 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.145436043 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.866059988 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.721899833 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389423493 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.677281254 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.113905605 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.922750886 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189509569 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192685635 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.10914011 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.850984073 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.119233649 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.285653682 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.278595559 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.10443322 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.054495861 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.119518612 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264290168 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128420106 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129776489 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.102230281 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.111812881 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.103958688 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.111363513 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.140450004 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1318477 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.615574824 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.220723054 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.112983139 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.050081729 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.115693488 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.592394181 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.215841585 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148887744 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.532388804 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.696993696 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.662167989 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.071653866 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.952710279 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.562846479 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.212689842 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196457252 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.707991166 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.259534884 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.190317563 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105082934 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.267961178 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.117336865 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.112029056 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.107584997 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.780028177 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.05375445 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.159608546 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.107207499 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.06209671 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.136551847 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.313349863 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.787599136 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.15310626 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.114593829 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.195560561 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.273281001 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.115056679 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.05926804 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.456710885 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.328822497 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.617148477 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.472471828 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.787062244 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.19559345 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12069326 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.282776876 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.191963156 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.765351527 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.493283067 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.429380377 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.594882927 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.112318635 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.624646998 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.239462202 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503519446 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.13201806 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.870396105 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.147912931 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.81959703 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.144059637 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.086629323 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.065682627 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12037067 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.566279952 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.114759024 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.666838563 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.213250703 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.275941683 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.108772675 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.109652222 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126867895 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.141958063 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233692058 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186912412 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19074625 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.062662455 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.587363018 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.161986798 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.11764612 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.110137311 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.396075767 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.081591575 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.13070543 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.109284584 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196652693 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.974852201 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.814357949 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.113490923 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.114530359 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.613575606 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.124868307 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114760848 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.120549707 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.03349984 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150036667 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.232648725 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.23956585 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.640444272 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.213098525 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190581765 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.110490475 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117788855 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.388903547 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.125332451 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.379052994 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.602594376 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.715389609 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.809923337 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.213449586 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.922421574 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.314011844 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.14122777 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.724534678 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.160605802 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124686138 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.280904409 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.817632959 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.329309455 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.159100391 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.20438917 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.116740905 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.576592977 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713026737 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.195624037 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.064394106 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.226358059 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.115893818 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.290000947 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.009713872 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.126589714 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.628876613 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134224831 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.304197705 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.275723226 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.494973121 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.622213809 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.806461951 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.069211338 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125194682 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.207987001 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.400068809 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.116474165 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.154580979 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.75101712 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.814027464 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.90639816 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.652697914 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.393346432 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.255904476 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.572869239 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.217260613 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.128591386 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.059359546 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.312286905 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.082198831 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247112407 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.075558818 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.223220003 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.41948752 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.141566653 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.576855094 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.155524227 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.638880301 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.481498848 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.232579709 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.255535574 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.272846479 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.302381509 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.268364309 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.190660077 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.327034447 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.314292496 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.197700804 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.601581048 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189263066 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177613901 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.156821608 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.747887723 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1491521 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130223576 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.695027503 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.408201142 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.510796311 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.457046805 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.247079546 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393723014 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.437029405 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.852594515 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.936518429 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.828729235 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.452351589 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.948143247 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427254814 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.116261304 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.360526862 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.538475886 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.370047789 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.11040425 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.418896655 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.744162246 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.37041763 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.547483749 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.669253383 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.44061827 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.308095657 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.180087273 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.737136224 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.236683759 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.638532641 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.161270624 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.918484492 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.674717334 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.226751559 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.70995856 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.091145298 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.149669158 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.447883813 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.836765073 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.870661451 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192072238 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.169999118 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.340804257 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.297215225 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.331433305 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.862355649 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.103076948 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.118553044 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.264120582 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227943353 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.033763681 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.654526773 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.837867156 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.352863499 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.121230664 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.269190265 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.310073064 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.244973847 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127610006 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171012757 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.879405404 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.569061438 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.188353729 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.039461597 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089561585 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.340954475 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.557652536 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.17512456 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.358703827 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.507400591 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.141691177 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.141365397 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.096440957 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.636763551 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.7960515 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.779485462 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.403092716 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.593694146 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.659611559 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.086339056 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.836175828 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.26155892 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203573851 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.472193914 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.999864481 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.45274105 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.36854219 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.098210719 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.042648437 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.249235123 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.103052849 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.158957548 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.823770557 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.369849412 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.219401633 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.866105294 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.662893308 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.080841007 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.116088098 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.121141055 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.113176601 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.111166024 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.088875771 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.613551625 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.475283256 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.102953543 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.043230938 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.838816055 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.039261336 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.264019524 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.0700857 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.132269966 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.902780351 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.224674881 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.254173506 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.613798952 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157475263 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.133768042 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.042944997 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.195212574 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.07087726 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.775553261 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.872489755 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118110844 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.092161672 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.245709951 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.072422906 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139449267 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.094439348 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.387706553 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.525715382 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.554327438 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254032595 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.436689722 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37073431 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.090947298 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.192654122 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.322251804 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.041385351 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.141725681 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.071647817 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.137853209 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162923294 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.087967619 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.098258237 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.327048471 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.266287402 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.243726281 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.237775817 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.094549966 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.112223289 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.264965129 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.229115296 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.093366504 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.099639982 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.192672368 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.250727522 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.094826295 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.063747804 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.267389749 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.171435804 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.471155121 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.170753764 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.679923018 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.100088892 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.828900713 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.248533386 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.593565005 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.091572767 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.224486476 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.165857825 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.089317477 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.554907168 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.753200852 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.2519908 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.772464193 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.009422679 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.082305791 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14344124 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.094265688 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.105899455 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.687033267 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.46245327 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.090755012 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.555306669 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.165204488 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.106106102 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.855655683 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.57506468 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.097138661 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.912995223 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.146293664 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.573466924 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.692353034 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.108815885 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.225261723 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.098993394 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.044419868 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.09492734 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.108409532 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.599209972 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.09661637 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.611092056 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.301629312 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.230823731 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.099642614 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.09786012 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.091826136 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.268674948 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.688527023 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117977126 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.356714327 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253059722 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.098618953 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.624307846 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.785392078 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.206184964 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.144929469 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.082040709 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.449041139 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.903258624 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.083239274 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.633902585 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255579081 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.095051396 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.327305482 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.341873953 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.096065965 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.279102653 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198513398 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.348627755 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.396302844 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.653678832 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.199353637 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.0381015 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.417283532 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.10776066 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.620816665 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.552530617 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180932543 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.096763014 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.108328565 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.09327664 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.198907355 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.699642354 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.268673446 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.277575209 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.335840905 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.606117267 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.097669383 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.047404956 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.095702502 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.125152398 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.098382292 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.045421128 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.195269374 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.953504761 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289121502 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.412977119 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.04679986 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.255195718 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.083342908 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.054537979 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.580023993 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.097236673 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.411869641 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.046300682 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.100436581 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.048429965 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.252887121 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.320587819 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.378657608 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.095552463 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.789531551 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104438182 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.093593097 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.113051805 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.190173381 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.096127375 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339780365 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.55922515 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.380201863 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.254762668 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.893652881 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.194861997 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.066793079 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141958119 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.911601021 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.648936342 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.262247835 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.292199947 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.903958759 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.0773204 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.624239858 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121209966 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.803942313 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.104472449 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.099711661 seconds)
  done (took 2441.305634636 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.136024803 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.195431545 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.178550895 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.157759976 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.175912491 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.190446521 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.174133238 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.133763699 seconds)
  done (took 59.363552643 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.096142021 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.119543347 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.116146661 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.096104444 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.098583192 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.107541764 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.315767866 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.136453467 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.09942916 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.112766851 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.096832937 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.132344805 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.098346183 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.1018022 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.112318152 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.351163261 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.131750226 seconds)
  done (took 81.392757354 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.123296193 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.798334341 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.103337535 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.32733362 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.118553153 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.295883546 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.104809923 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.106695557 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.125923031 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.370217802 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.173485138 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.111159497 seconds)
  done (took 89.790169301 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.101652731 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.105262928 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.098452987 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.099022188 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.099971606 seconds)
  done (took 12.535235027 seconds)
done (took 2997.025763241 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.318480175 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.226364858 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.200003224 seconds)
  done (took 6.452730463 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.154893413 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.231920957 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.288586292 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.237493872 seconds)
  done (took 10.947660835 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.377026682 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.57736084 seconds)
  done (took 6.974052964 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.541800171 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.109433643 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.641663131 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.106175422 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.097935861 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.104820389 seconds)
  done (took 23.347862469 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.100152196 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.100872166 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.105228358 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.097988615 seconds)
  done (took 10.436332321 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.097595139 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.105400073 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.105461978 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.124630455 seconds)
  done (took 22.455848604 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.305926082 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.183499132 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.850332768 seconds)
  done (took 9.364062594 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.908241903 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.525333815 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.893551392 seconds)
  done (took 10.357069017 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.043770046 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.031457776 seconds)
  done (took 8.104153855 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.258284537 seconds)
  done (took 4.286502182 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.595452171 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.579334136 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.942091335 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.950990108 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.099207297 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.411776768 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.460743201 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.415651429 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.757898004 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.60429296 seconds)
  done (took 28.841658885 seconds)
done (took 158.203298847 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.103792164 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.513719146 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.290319633 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.771894932 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.200077975 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.295244713 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.175602361 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.556865053 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.373659185 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.36747368 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.263578162 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.200716951 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.164653489 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.496446968 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.16744142 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.442868351 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.267413826 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.079966193 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.59289244 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.990565539 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.176770367 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.6432668 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.948217648 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.644915202 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.267725003 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.24247859 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.237240638 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.445975655 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.852570641 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.238795028 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.244900053 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.257664177 seconds)
  done (took 184.545231573 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.101152392 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.105942054 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.106492978 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.108284705 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.171500261 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.106467224 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.105506308 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.10829379 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.779421657 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.7662443 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.107413203 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.165590219 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.106774333 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.110602026 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.109760107 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.106100967 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.013607285 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.106875448 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.106941987 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.108628756 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.106018276 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.960105514 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.10614907 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.961836132 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.025123633 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.106949775 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.105961497 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.111920618 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.105828333 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.106245446 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.106329128 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.107667249 seconds)
  done (took 220.456457971 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.108064464 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.106488792 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.106452037 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.107823071 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.112762236 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.108999343 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.10990444 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.107469591 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.107675307 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.111659761 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.107096875 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.106782522 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.108679058 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.11081055 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.107785119 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.106867417 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.105784458 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.106369501 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.111568587 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.104361042 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.109565316 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.107917492 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.110336693 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.111886282 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.107566546 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.107735781 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.108263167 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.110927272 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.107060889 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.108613667 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.10821023 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.110084783 seconds)
  done (took 229.512759816 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.405153218 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.109297239 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.109362946 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.435520809 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.1060336 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.10583231 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.432121411 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.405962096 seconds)
  done (took 22.15332816 seconds)
done (took 658.715281108 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.83824553 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.000816027 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.281543147 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.138483488 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.737504931 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.20625807 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.131435142 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.231323789 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.898001602 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.250672679 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.621980105 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.144494172 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.004648716 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.172055492 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.281415098 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.20758597 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.534757262 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.847113841 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.30952179 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.948815759 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.380163266 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.141891277 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.251226731 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.948901833 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.63462709 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.18193213 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.254819651 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.549417621 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.140717903 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.417774294 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.201063638 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.536759738 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.159070201 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.138339497 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.204675217 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.18757534 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.46177458 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.154927174 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.277531302 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.917423293 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.958253011 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.769618452 seconds)
  done (took 113.683156862 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.120547168 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.117405282 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.113826948 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.115083162 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.116614732 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.118847891 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.116201331 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.114453887 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.114933274 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.120339182 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.113939642 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.116314719 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.115845041 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.119097124 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.116175074 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.115660482 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.115972581 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.117639526 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.120326999 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.11528176 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.115937734 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.116218588 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.114838386 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.115866919 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.115967006 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.115889945 seconds)
  done (took 57.087525567 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.115594523 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.324031934 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.45720012 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.152699707 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.114387006 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.113505258 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.150827449 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.122174638 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.117632758 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.113963175 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.240208513 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.123157874 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.126588299 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.449168223 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.1484807 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.111348813 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.115303211 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.11143743 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.335643906 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.13739799 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.155349557 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.122444483 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.15711737 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.131786276 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.114314651 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.112295561 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.119213554 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.613291765 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.126707087 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.240075578 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.164778778 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.160984928 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.585019792 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.465534434 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.197526176 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.120478501 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.11154431 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.293966177 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.129345699 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.114159996 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.154017254 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.125269449 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.45002819 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.7232058 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.134741044 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.116682399 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.607915647 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.304688305 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.173604675 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.130221069 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.458880936 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.150647658 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.114275997 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.11601955 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.155369392 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.124052833 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.116608366 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.457297439 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.132375722 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.153744836 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.122629976 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.116275502 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.344688291 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.127090253 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.328965302 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.128355465 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.126394866 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.114749629 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.453986892 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.150913386 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.715152596 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.139582169 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.113287642 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.243952567 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.336405269 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.64852181 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.137933363 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.340934493 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.611071336 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.165047077 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.127226257 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.591043311 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.174857461 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.127643534 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.113387382 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.113125773 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.117223458 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.161876286 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.153496729 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.64669336 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.720877701 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.475059823 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.170551136 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.136847455 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.115117572 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.449964826 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.128380854 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.114849015 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.445957817 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.748507341 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.138125952 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.124169669 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.699610603 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.140048067 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.156444057 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.130652568 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.468415232 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.158819775 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.160549483 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.113651033 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.122620554 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.123008401 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.157459637 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.129496615 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.117300645 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.690227067 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.319243621 seconds)
  done (took 264.102574242 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.117747238 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.117897525 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.118351287 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.119989683 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.116144789 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.118537344 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.11446934 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.118907672 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.122997779 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.114189647 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.117270144 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.118913841 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.122773812 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.125460614 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.148807769 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.118261765 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.915179113 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.120734767 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.118447184 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.118681517 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.827947693 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.121186822 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.117396889 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.119508996 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.120890867 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.117254045 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.119320494 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.143801285 seconds)
  done (took 174.945401737 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.121827234 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.182702549 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.134134637 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.18885515 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.1321378 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.117687385 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.148114607 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.14618786 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.127254101 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.118103654 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.11880493 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.16014179 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.128649202 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.220653418 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.165161214 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.161512684 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.229109151 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.128398595 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.117863892 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.118314503 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.189869929 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.137529051 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.159661648 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.200480393 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.133356356 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.187001002 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.145193813 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.117146564 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.118593409 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.244334537 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.143170073 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.159265217 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.170631745 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.146467813 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.251880496 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.252039274 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.233643709 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.166850642 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.126058261 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.119489676 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.119540213 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.129036291 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.188422678 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.134899612 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.124898468 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.252894314 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.145524609 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.122974773 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.14380821 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.11906741 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.136027337 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.149658026 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.168380734 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.260101067 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.184795491 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.151979512 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.152656023 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.14149788 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.121522791 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.223172155 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.138376076 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.246395029 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.1515713 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.125431832 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.121752109 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.125169237 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.191278944 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.166531912 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.232870167 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.135504119 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.223444854 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.20173025 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.135395809 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.12079149 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.121775761 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.195034699 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.241401831 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.203447704 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.204881088 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.170895181 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.143871148 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.119939126 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.127030289 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.160834925 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.134168484 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.247586067 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.255522757 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.133752652 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.122928166 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.124402967 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.123444431 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.156887119 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.202400476 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.177365753 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.24432498 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.176112297 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.172711782 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.132809631 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.144750223 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.128440894 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.165040247 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.134143604 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.143278218 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.478936395 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.1769404 seconds)
  done (took 229.373094519 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.525541436 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.182738695 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.217006509 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.399424209 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.534242142 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.359214056 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.173537736 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.187631667 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.191881238 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.329668873 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.232850284 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.24044783 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.182602598 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.153856108 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.178198316 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.195594679 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.218260198 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.526975847 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.313889375 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.197780745 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.187007797 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.49065038 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.503727703 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.596444785 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.228889957 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.642612415 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.842477081 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.29023241 seconds)
  done (took 70.383528955 seconds)
done (took 911.603577387 seconds)
SAVING RESULT...
DONE!
