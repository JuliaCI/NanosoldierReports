cset: moving following pidspec: 2076882
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.769368013 seconds)
loading group "shootout"... done (took 1.141104463 seconds)
loading group "string"... done (took 0.653593798 seconds)
loading group "linalg"... done (took 8.513339424 seconds)
loading group "parallel"... done (took 0.160801919 seconds)
loading group "find"... done (took 2.839231546 seconds)
loading group "tuple"... done (took 2.039914851 seconds)
loading group "union"... done (took 14.24687603 seconds)
loading group "dates"... done (took 1.416361318 seconds)
loading group "micro"... done (took 0.210281404 seconds)
loading group "simd"... done (took 4.61993874 seconds)
loading group "io"... done (took 1.3715794 seconds)
loading group "random"... done (took 9.599041413 seconds)
loading group "problem"... done (took 1.643273674 seconds)
loading group "array"... done (took 24.740491696 seconds)
loading group "misc"... done (took 1.879660191 seconds)
loading group "scalar"... done (took 41.823728623 seconds)
loading group "sort"... done (took 3.2084875 seconds)
loading group "sparse"... done (took 12.770154452 seconds)
loading group "collection"... done (took 18.266517411 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.436928264 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.112940238 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161017237 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109323646 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.228653235 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12416308 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127962509 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087602481 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.084282956 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140157275 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135316104 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.425262446 seconds)
done (took 5.571806557 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.305653886 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.240148749 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161482966 seconds)
  done (took 1.52970896 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.090891223 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057756774 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064655674 seconds)
  done (took 1.338028174 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063070775 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138848932 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063816502 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06434866 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064196373 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063875018 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063715867 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063541139 seconds)
  done (took 1.648791181 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071815382 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065361766 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06324549 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064983686 seconds)
  done (took 1.390755041 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065616384 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118148579 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062185732 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062142907 seconds)
  done (took 1.429989187 seconds)
done (took 8.850069462 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.157773841 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.760309803 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.848773267 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144111588 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.31210599 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.342505261 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119150206 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.199526571 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112425149 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074787141 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.162168974 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079752172 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.480323523 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.474922453 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070726056 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.186540123 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.608802207 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084229011 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112275457 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.216064852 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.081374923 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.082497961 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087009112 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071236239 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.120330377 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.17658578 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.614191127 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098529719 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067846185 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.192841845 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070244968 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073895924 seconds)
  done (took 10.439644722 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114319091 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110407931 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06637808 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.100265552 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092791747 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067490435 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072704646 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066132133 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085691282 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128882202 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089184548 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.121157073 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065739386 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067345126 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.096935564 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159472088 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082064262 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080347969 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066535144 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079475116 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092448594 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078517578 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076414179 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076102349 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.110275075 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.131844978 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.088577982 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.106436557 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066553344 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078659972 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093486325 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.106239105 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066926942 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065607644 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.108515972 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083784784 seconds)
  done (took 4.397277914 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.024974064 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.093173026 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104539364 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099581392 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104576738 seconds)
    (5/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.09289029 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.090834448 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146119122 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120589246 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.09870315 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067131914 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.174490498 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.679060473 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.076586422 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070787277 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.147963314 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.35977264 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.896208068 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.0722662 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0672779 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096488414 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069042992 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139003206 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065974677 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177817886 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.646363965 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073709804 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.193499624 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096256453 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063981882 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138843446 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092529973 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067904009 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.576907294 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06561475 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062779873 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.083565769 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.09166119 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064953931 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.065925024 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076381722 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063751834 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114500804 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078963976 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.547581279 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068659579 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.625292589 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.332559863 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072703339 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070930265 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100977796 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063722044 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069641876 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.666047307 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.150287064 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066507729 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.283352273 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069900035 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067168146 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06801745 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099020018 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.0665172 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067424545 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071927072 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.08360417 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.016443961 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.151345938 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.085398661 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068389877 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.422473315 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076693696 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069401416 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.0706205 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.095976505 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.135479988 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06679307 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066077734 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110006277 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.094325212 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.091746905 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.211386438 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066498741 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065590863 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.582554856 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.95767117 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06922919 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066689829 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.502669212 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064075991 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067841469 seconds)
    (90/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.107329281 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066709469 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.08702606 seconds)
    (93/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063187446 seconds)
    (94/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.062405967 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06463113 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062028895 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062920475 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098929506 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067570187 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.548020666 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066704126 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.483539899 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069136082 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097275473 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122114086 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066450988 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.104734789 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066622458 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06381427 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072151571 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064657156 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063571479 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068429615 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064942757 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065641557 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067901326 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067668189 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066535548 seconds)
  done (took 23.231906116 seconds)
done (took 40.223183715 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.460358342 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077281342 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07684984 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076644362 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076562715 seconds)
  done (took 1.94071954 seconds)
done (took 3.222803489 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.25441951 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076871228 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062640259 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203619142 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08710309 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.17743595 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.21732491 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.291442849 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089836026 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.0886043 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089125745 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.222651336 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.233611311 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090041102 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161986089 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.235299157 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091366509 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064283016 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.08942801 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.090704826 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.090775472 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064217142 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089491024 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090755108 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.163743775 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.091132253 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063901396 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.165408227 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.092086533 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.1674115 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091754035 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.09090673 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.09139135 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163780422 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092087551 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.165024436 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064243632 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.092649715 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.093783394 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.096761871 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093900324 seconds)
  done (took 6.348702023 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077152106 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079676326 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081090338 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060155324 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069262929 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079409384 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060338314 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079089829 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099850134 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079665429 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079345954 seconds)
  done (took 2.121394995 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070885848 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080065231 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081217494 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059880335 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070546729 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080289901 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060128055 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079781511 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082709235 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080392284 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080250019 seconds)
  done (took 2.034436951 seconds)
done (took 11.702743294 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.18980841 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087624375 seconds)
  done (took 1.466914401 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.256084527 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.494763217 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.23526211 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.125233718 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.103045566 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.118504131 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.231682643 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099563845 seconds)
  done (took 7.035072448 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.098399475 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066127243 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.093882876 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066516257 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065754956 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066505799 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067570718 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065375568 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065296942 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065213116 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06668012 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065486075 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066556905 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067291709 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067631872 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065668199 seconds)
  done (took 2.452032296 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100409373 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067189594 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096039935 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060097706 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.06983525 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060932778 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068791715 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.069858072 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067800781 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.068045753 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069208367 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068036763 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069135492 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069088423 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.06995268 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071391622 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071499789 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068285819 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070319969 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072431661 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070915541 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072010003 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073159482 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070228204 seconds)
  done (took 3.039655521 seconds)
done (took 15.205443672 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177215313 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072825134 seconds)
  done (took 1.452575179 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093382603 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.090887375 seconds)
  done (took 1.405212659 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07287281 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058348358 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07511379 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067409543 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059092877 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058785905 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07423855 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059085372 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058882084 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059183999 seconds)
  done (took 1.867424055 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063236649 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.065547489 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06349791 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062019172 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064252026 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059952805 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062239823 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060116552 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.065950654 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059111375 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062830456 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080536764 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062522893 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081085774 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062539696 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.0631337 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065068867 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062912076 seconds)
  done (took 2.393966718 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06177719 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059327856 seconds)
  done (took 1.354943658 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064665771 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059412502 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061390585 seconds)
    (4/7) benchmarking "year"...
    done (took 0.061159785 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059409188 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058839226 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059456659 seconds)
  done (took 1.65130709 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42694157 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192621814 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.424864044 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068165482 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081694678 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267108926 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062986937 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067052034 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066967667 seconds)
  done (took 2.926886403 seconds)
done (took 14.28933114 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083729459 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180791447 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.109528984 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.416268977 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077811322 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065599577 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093744425 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.208695395 seconds)
done (took 2.486719829 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.285447626 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.193846689 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.255444049 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146128373 seconds)
  done (took 2.830264824 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418500918 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.165433413 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074686784 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065379356 seconds)
  done (took 1.968395254 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065950529 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069482398 seconds)
  done (took 1.37828968 seconds)
done (took 7.71348173 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073489917 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.094069497 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059029196 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.06086201 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061257243 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.060753813 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060157572 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061117459 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059192332 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.061253632 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.061100263 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061031196 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060753571 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060752664 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.060386146 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061307776 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059206721 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.060916657 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06095351 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059904962 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061856865 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062208376 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061329539 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061917279 seconds)
  done (took 2.767473469 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080286169 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063400392 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064178726 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063858394 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06481353 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064494385 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064503635 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063506352 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064558782 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063165448 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06474559 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064755767 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063211191 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064872886 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063247169 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064811595 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064539605 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063631068 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063241394 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064811596 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06431359 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063784769 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065432694 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065422912 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065800911 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065766472 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064297891 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064544853 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065527992 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065886791 seconds)
  done (took 3.208150765 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067310668 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057720026 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057966992 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.06776784 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.05751892 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057846538 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058510523 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057643903 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058046004 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058810107 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058395701 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05792992 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058694632 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057778184 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057829687 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058418173 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06298322 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078285928 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058108202 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.05790616 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062576244 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058134744 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.057926299 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057870694 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058354613 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.05787149 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.057944016 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058975645 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.05853211 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059346151 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058553063 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063041287 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064633035 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058502362 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068879186 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063806904 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058636287 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065372801 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059602258 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058637747 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.05858317 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058396895 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.05867109 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058733169 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069195791 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.05910619 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059962433 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062009508 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.05893311 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058427105 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.05867705 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060337766 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064330078 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059945392 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058639117 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059996341 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.05861553 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.05935424 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058701695 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058653768 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058673255 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062931873 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06021721 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059455631 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079698888 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060307019 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069584868 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058823844 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059286074 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06287133 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059336363 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077845777 seconds)
  done (took 5.637794734 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072637596 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068912782 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076522209 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067807066 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061615945 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058879694 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061877296 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058824549 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068029887 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062493046 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058938732 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061825608 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067981337 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062296096 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059714002 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067756616 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062350406 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061410881 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.0587628 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06259584 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06022263 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062636715 seconds)
  done (took 2.681463881 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144652641 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064308064 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106136094 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067883675 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066454618 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067646904 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.0641286 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064299862 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064470837 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064699803 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064685679 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06423789 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066232012 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064811932 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064770518 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064713305 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064527282 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064889004 seconds)
  done (took 2.554401997 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077575084 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063931993 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090315617 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063569119 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064029478 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063686531 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067279318 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067699801 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063624709 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064022179 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067818137 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06389195 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063799776 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064017625 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063645429 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064592661 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063816436 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065120373 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067584853 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067428671 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067556456 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068045326 seconds)
  done (took 2.735550284 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078932252 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062930613 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078773075 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064329208 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057992963 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058276224 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064748783 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063232601 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064730453 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062816074 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063319261 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058297133 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065319836 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06327347 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065302702 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063348163 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063123475 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.0634433 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062974701 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058308685 seconds)
  done (took 2.547006591 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.097364704 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060838746 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060573298 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065022708 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060845244 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060896597 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065408602 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060813157 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07216819 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08461237 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060752022 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06065486 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065657053 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063886626 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061065003 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065555035 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06538984 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065456024 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061377217 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061418707 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085714907 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061688617 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066530198 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061737516 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061542525 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061582752 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061552065 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064468107 seconds)
  done (took 3.109426625 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065499518 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061627705 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061624439 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061531319 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061402667 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061298041 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061760143 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064691349 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061577477 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061824347 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061458936 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061392354 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061494104 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061439059 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.0615833 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06168322 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061232618 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061744951 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061691506 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06172187 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061355376 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061432979 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061285109 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.0617841 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061817064 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061485371 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061653634 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061830808 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061726258 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062120566 seconds)
  done (took 3.128866451 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073590478 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069049609 seconds)
  done (took 1.413133039 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062282834 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075207687 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057420836 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070467456 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066124715 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061960785 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066625393 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066473223 seconds)
  done (took 1.790653283 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092287533 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.115853186 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059795515 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060125112 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089126753 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126172795 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.0995598 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071997402 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073759095 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062506585 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.05998466 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099350659 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059409982 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073369378 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060869287 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069163749 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067312628 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078296572 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073471442 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058397477 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073350843 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061042388 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059799711 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061139626 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060794733 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067934299 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076718734 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073244757 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069195619 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058229542 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079744303 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059272868 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060293574 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069260782 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091704888 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059504551 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097315273 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059726904 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064230904 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058840822 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072038631 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080767915 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074276006 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078091485 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060831503 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061122586 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058789607 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061110159 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063360496 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068974729 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059010592 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067227332 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058454104 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060688177 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070280539 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059573328 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064285797 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069098417 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07357682 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070467672 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072229697 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075406621 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068751105 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068180325 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060188935 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079864379 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06131435 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073516041 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075109206 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060795733 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073433227 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059328998 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058635022 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059634834 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094491421 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061344708 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061598373 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060881587 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060732197 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062526213 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071099064 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066438122 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068800217 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064410486 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077686334 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070763331 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061250352 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069734523 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080501347 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065175538 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061650885 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079981359 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066087577 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061479727 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.081252385 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072699969 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064030768 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.0631073 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065933265 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076891967 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063618896 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060881812 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071231542 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063950209 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.251780002 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063807846 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068016951 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059142354 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069684574 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064308943 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060049337 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057558482 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063312605 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059260757 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057350379 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068380533 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058502413 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073157748 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065479117 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07334909 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073921292 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069273913 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074699413 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058317213 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059995739 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076744933 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068074635 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059444237 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076570669 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057828569 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069222404 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057713803 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059439165 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.06803051 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057408767 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059798783 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058157499 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063701044 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059475008 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059737473 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06460022 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067523102 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070932173 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059444517 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067723537 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058778498 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074507884 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069080411 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063919469 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061769297 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059666223 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07162246 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066496979 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069348015 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059073499 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060349383 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059940284 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070850543 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069627508 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061189593 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067852324 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064587338 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060155893 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059746527 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060595268 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063680946 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062750785 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060145442 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067820629 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068670251 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073985082 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066561536 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069043132 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.05858936 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058942777 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060909274 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058998748 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064501416 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069291623 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075613946 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071686606 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081436241 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.05970392 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069757172 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060932772 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076862898 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073327399 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060812575 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064445157 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058922087 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061859106 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070886097 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073173916 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075785264 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076746451 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066060344 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066369065 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060530459 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076694294 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061327642 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070014974 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070942723 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067242618 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061304512 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062919779 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070908854 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066622514 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062718973 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078296951 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070622319 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061668697 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.0771964 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062362366 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07364757 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061683395 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066048108 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067742345 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064186853 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072714663 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.236717478 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058627096 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059687138 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075093452 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060429322 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060081142 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067353356 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074220393 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063676811 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066953681 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069405254 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068965701 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06348097 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068757644 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059099294 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068148216 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061120246 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070278478 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058218765 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076584068 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057257884 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074008754 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058728796 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069654649 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058940892 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06820858 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059239211 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07564367 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059978447 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.05927592 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.07037405 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05716057 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068155668 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057921188 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063995679 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065428731 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068238751 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060142196 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068277567 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060129157 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068005194 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063539947 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066939779 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068133949 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063658792 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058686617 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068001379 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070682406 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068046248 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060615364 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060616956 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059850307 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.06903126 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060813777 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06073277 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068223211 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06477466 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065765068 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060979516 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061259782 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061098558 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068572252 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069477258 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080929219 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068665306 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067477715 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069221434 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059053822 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075724255 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059595979 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067565576 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058376446 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066322873 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.06931492 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059683059 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079283526 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060980519 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067953834 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072445907 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068665622 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063712653 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078292015 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062830024 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068658661 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068399336 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065006058 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067103811 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061732818 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068900037 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070000805 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072094385 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062145131 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069085535 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07085966 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062890306 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070977943 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062915052 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06995942 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063005023 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060204695 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06642001 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073776205 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066520117 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066940667 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061926296 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060940843 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062692902 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.071748045 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067477234 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071502101 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078742835 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061027425 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06328965 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061728774 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066166052 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081653335 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.234501347 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068310813 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064435751 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058185553 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060301039 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060304958 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058958738 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061416002 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057649729 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058081584 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069381169 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059977541 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063305303 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058635662 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059154384 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068774436 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062329793 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058975594 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065490712 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058045091 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063951605 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057510859 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059564504 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063318777 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.05782637 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062599366 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069294226 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075386048 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065545741 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067914309 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059525441 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066985791 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074300861 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065704175 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059724537 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068090532 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057618705 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077322317 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068184768 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067499765 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068579018 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059389211 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075458152 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063427872 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068614609 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074870117 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060406209 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066648778 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058874925 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075502318 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064328172 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058856074 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067811418 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067720964 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065471481 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071450713 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059900165 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06799625 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064562367 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063420841 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061113918 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060890619 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068780939 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076306474 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060199316 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064972594 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068020855 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068413617 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064414733 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072087529 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068149195 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060699074 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061220741 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063659215 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060318674 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071805859 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059909423 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064412148 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064463545 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059040365 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066623442 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076798581 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069483087 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069575553 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059050984 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058775741 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078529134 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064068227 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063420108 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068696624 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.07053833 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072834117 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070907986 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079002445 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06195393 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067485899 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074124239 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062063782 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061005874 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06520607 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062795816 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070957924 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071883475 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069421916 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063717274 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071374102 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076100926 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063691225 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067342424 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069419583 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063286994 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073468108 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070870366 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071394559 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.0637549 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061800559 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.225661062 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069138408 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067123983 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068436971 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059697092 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065525121 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072561949 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06665163 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06126453 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058011274 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061105435 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.0678975 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063363997 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057823629 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063598589 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062615489 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065168053 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068002525 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063300162 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057824197 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075534744 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066824895 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067889376 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059936951 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059980887 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058962357 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058061467 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069868326 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057945139 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059799959 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063608681 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059757299 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076458641 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067077757 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074484106 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059224787 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063386045 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057840241 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068418339 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063364271 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058700347 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.06921649 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057730396 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074308703 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070532921 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065325144 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058844093 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06490327 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067884785 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074898899 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069416172 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068819094 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062734249 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069403834 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060920197 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070592881 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058956006 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058304213 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069726943 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068511237 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072442631 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059132581 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070115011 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061408304 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068325612 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068205164 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061243921 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06116928 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061303672 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069507804 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064574812 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.06937994 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064786212 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077028503 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060576977 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07108332 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069120046 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070864604 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074177411 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072632616 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068225271 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060231334 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067589831 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068317405 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06100238 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065314674 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063191703 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08298882 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062105811 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061766876 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075308455 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068080164 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060815895 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069703481 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066343738 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072136769 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062350775 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072258778 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067263953 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061973669 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066657178 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066690667 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06024248 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060976677 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061354586 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072328756 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066963747 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062635441 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083348553 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064018121 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071573882 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074450939 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069543156 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064232553 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.219954803 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060653265 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072964402 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07495803 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062809278 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067931184 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06020717 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068337648 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057610807 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067684877 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06699492 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067466023 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057965498 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058810038 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073773846 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074332027 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063501933 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074722097 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067883673 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.05960101 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080268262 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067998067 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059384955 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069698493 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060397804 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058352729 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057671252 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060395689 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070259649 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058127969 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060600662 seconds)
  done (took 41.758291451 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.10323656 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059871985 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061063972 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058304004 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065791792 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060197451 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058575116 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059830324 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059751894 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060814503 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058557673 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058599037 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064046154 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07357663 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066293809 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062064984 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058615895 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059763038 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058620984 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059689836 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064778843 seconds)
  done (took 2.706025303 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065065672 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06233991 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061801029 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062050842 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061568756 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.05868761 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062136362 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058646578 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062662243 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059017767 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062566388 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058822784 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059032021 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059133794 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059199516 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060146643 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06257382 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061903375 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058802757 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062160122 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060040449 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06231399 seconds)
  done (took 2.698964926 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063288527 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059274807 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067726446 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057884243 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057839544 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061100666 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058195886 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063358996 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063229566 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063350144 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068075227 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059179882 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058050107 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064660694 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057950186 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059086235 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103171707 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059568685 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059449688 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058146944 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061005984 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068021809 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058244679 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058295611 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063554109 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061697695 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058559992 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061293735 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059424019 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06370885 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059901133 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.05840815 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068340406 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067660406 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063648749 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063675829 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060302609 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059716211 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058624485 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058675504 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067776377 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060233098 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.05896844 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060290567 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068361887 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058764384 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058655722 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.06860863 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058409971 seconds)
  done (took 4.416078861 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073552016 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108873602 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.06447837 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090812695 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070741493 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063746038 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064418881 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091707428 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059571725 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059982702 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071399534 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071330937 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061061004 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062255973 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065497952 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.060953294 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06168222 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060825158 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064002384 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061178005 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.06382846 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065970889 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071037099 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071483592 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062407488 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06079301 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061148284 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062690477 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071218151 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064342187 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062869941 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063314251 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071609393 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065114217 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061885714 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061193538 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072760566 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062255461 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061768364 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060357391 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061623009 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063180883 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066476477 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.07304077 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062124044 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066891309 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061859756 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059971114 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072150519 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061697809 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065279487 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073020898 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062936602 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.06489509 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063334659 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072301572 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062090948 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06086793 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062257366 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07193475 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060560901 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062846558 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072910942 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061615434 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065225408 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073077164 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067063452 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063112141 seconds)
  done (took 6.01389153 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071289968 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093438436 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072860664 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.0730121 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068753483 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068849341 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068786915 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068793225 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068875667 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071347288 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068766964 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131584717 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065931784 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070324848 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068901233 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.068974937 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069479074 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069513404 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069410801 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069309206 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069354587 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074375399 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069334402 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073968656 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073924854 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066150681 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069309604 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069296731 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074256874 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069461865 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074017405 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069497235 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.06995892 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074336145 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074073713 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069607344 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060322569 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069638347 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070022911 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069869621 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066427208 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074913923 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069907686 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066464354 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069909689 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069674339 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074931717 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074606771 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071564467 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072840548 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070215333 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074963403 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069935071 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070348519 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075182529 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078248163 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074990969 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075207695 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070357646 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075161663 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07528958 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078384403 seconds)
  done (took 5.893329163 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076344944 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064149525 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077074027 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.05851178 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.0583662 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067671925 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058547467 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058554566 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064383989 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064434922 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065776225 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067848459 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06961906 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065742757 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067693775 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069561266 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067687211 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067648074 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064923725 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068392831 seconds)
  done (took 2.72832877 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.06362812 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063493386 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058901858 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074235885 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059132526 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066612406 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059193384 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05925245 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059306596 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059189337 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063582112 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063596348 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.05910768 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066969108 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062505975 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066530811 seconds)
  done (took 2.383019857 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064703119 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066386612 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092376471 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060167349 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061570611 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059141297 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059878716 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058874256 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060992048 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072914348 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060100133 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061740843 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059860188 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058992474 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058957563 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061674743 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060820895 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059868798 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.05967685 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093069258 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068410574 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060714214 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062201003 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060886212 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061971253 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068169636 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061564323 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061836655 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060126757 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062341215 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061986135 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071037668 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062096722 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063756696 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059295123 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059960082 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060314823 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062445806 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062394275 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060407506 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059248087 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061900912 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06025955 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060674511 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061435184 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062505506 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061719029 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.07059003 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060825721 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062576583 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060805072 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062183621 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061369299 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.07204752 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063111545 seconds)
  done (took 4.862424277 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079650983 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064060613 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058051168 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058084097 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063499333 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064439356 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064240123 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064155747 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064562787 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058425398 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06441593 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063508056 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064474167 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064113376 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064468615 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064137279 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058323768 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064181076 seconds)
  done (took 2.547989123 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068708443 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06372382 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.0638574 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059796465 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06015801 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064410972 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.05869186 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.0599277 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059872787 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060203701 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060216946 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059985141 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059973725 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059953792 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06378177 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060214441 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059862962 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058826905 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060142141 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058535345 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06437455 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059078742 seconds)
  done (took 2.729240851 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117756957 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082538179 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157295298 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078801118 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088907064 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.07032637 seconds)
  done (took 1.981327646 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09536012 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096086585 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063786923 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063718479 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067906775 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066572757 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066547378 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066574966 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06946279 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072106617 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066427428 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06968901 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069302912 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071126374 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067966465 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068090978 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066560747 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067514154 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064296922 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074699713 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067165821 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070243064 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067199995 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067003923 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066985656 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071958513 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070221746 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073010367 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067077189 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070497981 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068839953 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067235691 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070770516 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073229191 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064514493 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070529195 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067534979 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075093165 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069464268 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072754677 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064793158 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069564686 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071009696 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070810728 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071254213 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067968272 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07074945 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067903205 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067894453 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079484334 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069747373 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072778896 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069629539 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071581388 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071032659 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079714464 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07419264 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073033281 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069917722 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074256159 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073140576 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069966569 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072988618 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074970824 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07166728 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075450577 seconds)
  done (took 6.064302591 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104828278 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064449316 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069516882 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072011578 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071379602 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066815994 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066840345 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066894636 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066741932 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064486677 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102470593 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067046727 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071472317 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071444736 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067001901 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066744673 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066824955 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071949294 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064956015 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078615966 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067467696 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072158534 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07200669 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072104226 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073120558 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069136577 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067468118 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067401315 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067396496 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067341686 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070518013 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067505137 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072344303 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064872007 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072294016 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067664723 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067443473 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070327326 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06773353 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069557015 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072817893 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076067998 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067897263 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067825366 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074012839 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067955012 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067770331 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065278869 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067860444 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06529124 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073837959 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074099757 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074138591 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072896429 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068208376 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068312519 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068206459 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068271071 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068291395 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069888008 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073056987 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068062305 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079943847 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068351654 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068211798 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074880447 seconds)
  done (took 6.085093543 seconds)
done (took 125.683312097 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.260458155 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.220188215 seconds)
  done (took 1.855618618 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.07514379 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.267360158 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075998731 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072311225 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.13265901 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.13180079 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.106644211 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07039537 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072461348 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070001699 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.169890286 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.106893823 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07030761 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069935453 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069894006 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069742257 seconds)
  done (took 3.035941745 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.145174603 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.207687842 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080044028 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067954164 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150883342 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075643257 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071235874 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074593172 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075829702 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.351249201 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.118459725 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083118146 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073580094 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07479077 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071093856 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073351575 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074451241 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075583336 seconds)
  done (took 3.349793191 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104237748 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.111791998 seconds)
  done (took 1.625686817 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.161132166 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10729559 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145281109 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.35310379 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.14087017 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141472033 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.147866624 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.140973427 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11498214 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.138745751 seconds)
  done (took 2.995628669 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.10693759 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102742416 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305591643 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100898545 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080120267 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074960246 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072893167 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077785677 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073031461 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074412031 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120227703 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073027959 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.07035284 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122404283 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097634746 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104688971 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069055216 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076740046 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078186855 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069029393 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073927988 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078351851 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177715662 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07729563 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100151434 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073480433 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075324797 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072646313 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072511751 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076489521 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077224097 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100604241 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077156054 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082873136 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074884429 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096586963 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070428162 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099184256 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073019161 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070962144 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073255817 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077149434 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070838771 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079287398 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073700887 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076106577 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079130153 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.06955742 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073847215 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073155722 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071315845 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074680338 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07454675 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075521756 seconds)
  done (took 6.111519838 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123429657 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109935816 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067977457 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117643851 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109062762 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068324185 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124435251 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104248157 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122270826 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067856069 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067917941 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067066681 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074747988 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078879342 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119462226 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113071998 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069878938 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068406963 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112650389 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112885556 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067192932 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124709795 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115669399 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111674793 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067080031 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068395307 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066862933 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067590741 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075774646 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075319937 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067550633 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078123446 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079415467 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07506808 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066725846 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067014951 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066916017 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075528157 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077161773 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077181337 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074100292 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066662774 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067017721 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067556544 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068084076 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06663063 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077067835 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076075989 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077460187 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06847191 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067941785 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067217856 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068641959 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075325583 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073975807 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075751837 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.0786179 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068482276 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067800384 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069244181 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07921377 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076709912 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076117261 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068783615 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077206352 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067687509 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078336571 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081369143 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067783809 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068359405 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067981526 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067979147 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068409014 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074675076 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074812974 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069314064 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.07001634 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068959648 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078103362 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076681319 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068988234 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078962216 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068637832 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069628881 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070377093 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07111441 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.082039777 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.080063748 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071029015 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071056169 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070377991 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070308216 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.06959596 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.236613198 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075432965 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074674878 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075801552 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067198933 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076100772 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074628313 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067064729 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07296446 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06651042 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066677396 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066630339 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072995538 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072503304 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074404893 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06641382 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066100792 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074204704 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076790389 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066531493 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072575412 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074801303 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073108859 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066061553 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076054395 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066638952 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075454658 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066506177 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074839275 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066710126 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073001217 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066530094 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065789524 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066420274 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076038427 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067819458 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066464793 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066768828 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066342411 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073218129 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076881765 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067152171 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074090032 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074076485 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067806746 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076460447 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067351014 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076591947 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067573001 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067696362 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066577418 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078794966 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067349604 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068192069 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070271981 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076739389 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067594948 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076582992 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074037242 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067033258 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077527706 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076953422 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074153376 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077468632 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068373483 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067824573 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067438079 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067714136 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077044712 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078545041 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070006074 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068643114 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074075397 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077604996 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067308471 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074479243 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074694572 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075172094 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068198743 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068173103 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078418718 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081481391 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076994421 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080037358 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07784048 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069229241 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076757212 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07993937 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069610965 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08463203 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070400623 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082111123 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.082135425 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077866757 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081873294 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.238493531 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075674533 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075541389 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077477122 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066236636 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066378216 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072638328 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066419423 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066441036 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072268795 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066770068 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067623728 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079721755 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066754381 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07548461 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066047433 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073318044 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065803388 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066783014 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077577564 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066527843 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066877195 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073590766 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066515944 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07251256 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075287432 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072621507 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066302019 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06680842 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07596212 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075983366 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066352549 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066269848 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06707995 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075084049 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074407621 seconds)
  done (took 18.487091362 seconds)
done (took 38.890148738 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169925716 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112436687 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.223952097 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.202754518 seconds)
  done (took 2.21458815 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101518984 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063422025 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.105895484 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.115860456 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063727564 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.101743624 seconds)
  done (took 2.001693922 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201978014 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175802847 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251140204 seconds)
  done (took 2.072083937 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367442292 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.15046822 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.257933901 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.515394459 seconds)
  done (took 2.835642504 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.13517254 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131643874 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075593128 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.145181119 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082584599 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060388369 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.144754466 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067508433 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097484981 seconds)
  done (took 2.443969586 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.14076738 seconds)
done (took 13.157879895 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.13345266 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.315523466 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.15587636 seconds)
    (4/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.317404731 seconds)
    (5/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074837236 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.124359455 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090099259 seconds)
    (8/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.356772092 seconds)
    (9/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.337880634 seconds)
    (10/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.159224982 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.1547729 seconds)
    (12/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075179206 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.248466274 seconds)
    (14/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.273607063 seconds)
    (15/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.298815627 seconds)
    (16/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073761323 seconds)
    (17/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.24590323 seconds)
    (18/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.127623775 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075020621 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.101226316 seconds)
    (21/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.108258968 seconds)
    (22/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.305195024 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074524238 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.074866918 seconds)
    (25/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072136633 seconds)
    (26/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.206906498 seconds)
    (27/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.123597926 seconds)
    (28/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.070417431 seconds)
    (29/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.164361326 seconds)
    (30/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.141981528 seconds)
    (31/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.243573274 seconds)
    (32/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.150227578 seconds)
    (33/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.293052119 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074617478 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.092230047 seconds)
    (36/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.160870079 seconds)
    (37/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.244412178 seconds)
    (38/341) benchmarking ("sort", Float64, false)...
    done (took 0.137928503 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.147684144 seconds)
    (40/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.183800775 seconds)
    (41/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.09441488 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.115291174 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.086327695 seconds)
    (44/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065884723 seconds)
    (45/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.239567524 seconds)
    (46/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.29340479 seconds)
    (47/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.21075789 seconds)
    (48/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.212304074 seconds)
    (49/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075804925 seconds)
    (50/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065762481 seconds)
    (51/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.153247304 seconds)
    (52/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077452988 seconds)
    (53/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149541667 seconds)
    (54/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.171819663 seconds)
    (55/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076333324 seconds)
    (56/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.066764976 seconds)
    (57/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.147802356 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.088650496 seconds)
    (59/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.151033704 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.07698685 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.09079664 seconds)
    (62/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.313056008 seconds)
    (63/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.080839801 seconds)
    (64/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.192534841 seconds)
    (65/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073387334 seconds)
    (66/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.196383928 seconds)
    (67/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072851858 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.090862325 seconds)
    (69/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.188388436 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066691255 seconds)
    (71/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.076657421 seconds)
    (72/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.0665773 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072003431 seconds)
    (74/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.289162334 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06461855 seconds)
    (76/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.083824124 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130761734 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.208990475 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07184401 seconds)
    (80/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.223834492 seconds)
    (81/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.136374029 seconds)
    (82/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.194635145 seconds)
    (83/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.078755852 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091768754 seconds)
    (85/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063537107 seconds)
    (86/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.28402799 seconds)
    (87/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06524484 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.206093178 seconds)
    (89/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077888679 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084566256 seconds)
    (91/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.08242483 seconds)
    (92/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.175385442 seconds)
    (93/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.162336808 seconds)
    (94/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.196611169 seconds)
    (95/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.071112448 seconds)
    (96/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.06983373 seconds)
    (97/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.066968146 seconds)
    (98/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.082603307 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.272811252 seconds)
    (100/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065397669 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086374929 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064699245 seconds)
    (103/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.083323663 seconds)
    (104/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.068550809 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.087097105 seconds)
    (106/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.06488822 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071817982 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153356221 seconds)
    (109/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.075520961 seconds)
    (110/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067899058 seconds)
    (111/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078140181 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.097979127 seconds)
    (113/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.136670867 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090352005 seconds)
    (115/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076292938 seconds)
    (116/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.08855685 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064845868 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.118818481 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.092223386 seconds)
    (120/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069038848 seconds)
    (121/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.082665289 seconds)
    (122/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069240097 seconds)
    (123/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076846539 seconds)
    (124/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.228223809 seconds)
    (125/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072236419 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122844402 seconds)
    (127/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072807435 seconds)
    (128/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.174947912 seconds)
    (129/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.176469145 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066206934 seconds)
    (131/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069531459 seconds)
    (132/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065937244 seconds)
    (133/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.175006903 seconds)
    (134/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147762236 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07484628 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.081220182 seconds)
    (137/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.17752493 seconds)
    (138/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066907771 seconds)
    (139/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082517676 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072060799 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07602428 seconds)
    (142/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.145133563 seconds)
    (143/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.092445229 seconds)
    (144/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.151486121 seconds)
    (145/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06839991 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091102446 seconds)
    (147/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077031568 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 0.148560357 seconds)
    (149/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.369416732 seconds)
    (150/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073713085 seconds)
    (151/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065416942 seconds)
    (152/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.073222559 seconds)
    (153/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.138128133 seconds)
    (154/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064354546 seconds)
    (155/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.072882492 seconds)
    (156/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.064104974 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.07067472 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073140823 seconds)
    (159/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068237589 seconds)
    (160/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064140357 seconds)
    (161/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.063833444 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 0.065008664 seconds)
    (163/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.089898613 seconds)
    (164/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063451472 seconds)
    (165/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.21399132 seconds)
    (166/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064589198 seconds)
    (167/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.180138595 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.149087345 seconds)
    (169/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.081765448 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.086218861 seconds)
    (171/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064403376 seconds)
    (172/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.212365656 seconds)
    (173/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.141333833 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06359101 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08168605 seconds)
    (176/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064607525 seconds)
    (177/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065434832 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072764838 seconds)
    (179/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.074451921 seconds)
    (180/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.068374402 seconds)
    (181/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064590285 seconds)
    (182/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.080082907 seconds)
    (183/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.070778515 seconds)
    (184/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064051656 seconds)
    (185/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067685325 seconds)
    (186/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.063809705 seconds)
    (187/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064005143 seconds)
    (188/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.089386667 seconds)
    (189/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.199730714 seconds)
    (190/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.064212283 seconds)
    (191/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.081792569 seconds)
    (192/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064162413 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.154815561 seconds)
    (194/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064544905 seconds)
    (195/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.069118181 seconds)
    (196/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066508895 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064648831 seconds)
    (198/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.172940604 seconds)
    (199/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.065101098 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06837114 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.06553324 seconds)
    (202/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064960704 seconds)
    (203/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.064547805 seconds)
    (204/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064340156 seconds)
    (205/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07282226 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109961137 seconds)
    (207/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.07375739 seconds)
    (208/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064513793 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064379054 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071570951 seconds)
    (211/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.071534122 seconds)
    (212/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073722768 seconds)
    (213/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064917877 seconds)
    (214/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.06653215 seconds)
    (215/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066006482 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150744269 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.064090434 seconds)
    (218/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.146705901 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070345875 seconds)
    (220/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.0657762 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07157232 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064765273 seconds)
    (223/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066671947 seconds)
    (224/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.065062519 seconds)
    (225/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065516417 seconds)
    (226/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066781209 seconds)
    (227/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065756077 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.141102843 seconds)
    (229/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.070542549 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066083351 seconds)
    (231/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071930352 seconds)
    (232/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.22988957 seconds)
    (233/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065640357 seconds)
    (234/341) benchmarking ("sort", BigInt, false)...
    done (took 0.270265138 seconds)
    (235/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.0705154 seconds)
    (236/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065757884 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.072588895 seconds)
    (238/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073590388 seconds)
    (239/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070406408 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077311255 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075575862 seconds)
    (242/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.18156614 seconds)
    (243/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.0715965 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072311728 seconds)
    (245/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067752773 seconds)
    (246/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.065375521 seconds)
    (247/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.08322906 seconds)
    (248/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.213992433 seconds)
    (249/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.067014641 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073949135 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071100692 seconds)
    (252/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073835356 seconds)
    (253/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071131395 seconds)
    (254/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.071803649 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134700946 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.195661525 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.096198097 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.268849533 seconds)
    (259/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.08154269 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.070401666 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.187873865 seconds)
    (262/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.143945169 seconds)
    (263/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065119408 seconds)
    (264/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064927954 seconds)
    (265/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.187560675 seconds)
    (266/341) benchmarking ("sort", Int8, false)...
    done (took 0.147230608 seconds)
    (267/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.185724732 seconds)
    (268/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.112969131 seconds)
    (269/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064877325 seconds)
    (270/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064727046 seconds)
    (271/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092710098 seconds)
    (272/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064067658 seconds)
    (273/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084495118 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063497178 seconds)
    (275/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.064363683 seconds)
    (276/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064564093 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063814802 seconds)
    (278/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063884881 seconds)
    (279/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066497523 seconds)
    (280/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067305841 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.070909199 seconds)
    (282/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.06432134 seconds)
    (283/341) benchmarking ("sort", Float32, false)...
    done (took 0.136243548 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.199335382 seconds)
    (285/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.071241541 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063570671 seconds)
    (287/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064358476 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159159746 seconds)
    (289/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064605809 seconds)
    (290/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.068156664 seconds)
    (291/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064270879 seconds)
    (292/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.068278865 seconds)
    (293/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06407382 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063867286 seconds)
    (295/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064263367 seconds)
    (296/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064117599 seconds)
    (297/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064537307 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083351344 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083756833 seconds)
    (300/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.066156265 seconds)
    (301/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.06833457 seconds)
    (302/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.06440952 seconds)
    (303/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066335323 seconds)
    (304/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066422491 seconds)
    (305/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064339116 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146044679 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.06460157 seconds)
    (308/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065358325 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064558215 seconds)
    (310/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.072364767 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064526237 seconds)
    (312/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.06422556 seconds)
    (313/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067021521 seconds)
    (314/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07044971 seconds)
    (315/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.155919047 seconds)
    (316/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.207561197 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067894427 seconds)
    (318/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069048477 seconds)
    (319/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066309737 seconds)
    (320/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.064911033 seconds)
    (321/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079730592 seconds)
    (322/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.077459656 seconds)
    (323/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06544948 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076212792 seconds)
    (325/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.064618183 seconds)
    (326/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09182622 seconds)
    (327/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067226135 seconds)
    (328/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066012036 seconds)
    (329/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065578965 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.18477496 seconds)
    (331/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065185659 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065113394 seconds)
    (333/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072513878 seconds)
    (334/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065090057 seconds)
    (335/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072118827 seconds)
    (336/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07190913 seconds)
    (337/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069229851 seconds)
    (338/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.065324909 seconds)
    (339/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066308138 seconds)
    (340/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.076578667 seconds)
    (341/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.06768976 seconds)
  done (took 38.610323585 seconds)
done (took 40.074739044 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12493723 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078336383 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075836685 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07268013 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076558321 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076798097 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076525111 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074134731 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078717507 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075390712 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.10647418 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063849214 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071292871 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080707225 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072545844 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079143305 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078774681 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078742253 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064594683 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079026897 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089321803 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076815288 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073103669 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078843696 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064841004 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072885891 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119818134 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084256721 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069166059 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073877963 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071576144 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080243675 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071765151 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071313052 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.07393769 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.06930307 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074263605 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070433565 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.119852201 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.06938355 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064647385 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076563264 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071288378 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072040499 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072713779 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076101953 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069384363 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079810638 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063785932 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075357661 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12036599 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.06985172 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069082129 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072722457 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069589452 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07387803 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068970709 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075902737 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069191288 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075942472 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073721987 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07200848 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064150134 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072932535 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071345103 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071564328 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063038699 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069716283 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063984098 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06435316 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063553751 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073116173 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071093753 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069315437 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063678905 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064397294 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063739901 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076274954 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07152717 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07337119 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064784935 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.06971121 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069265797 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064938618 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069951278 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075983106 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063993023 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.0652896 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063895405 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079556423 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071402383 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064741432 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.07660934 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07051345 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070254495 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064865263 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064126891 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070338078 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072843305 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064853306 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063615861 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070507865 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07059016 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074913184 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066367217 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071511199 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071311916 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064673291 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.0750194 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073618116 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076175673 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079908431 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076206888 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080534759 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067434612 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065755318 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076734245 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.229753555 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070195765 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071622261 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068971687 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071579909 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064008053 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062569581 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068798138 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.06901436 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063754312 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063811073 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063583944 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071955545 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070337168 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062293647 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063171391 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071759016 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072686346 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062695937 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062537256 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071876797 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063726907 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.06900776 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.06821041 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071825142 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062762169 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063476865 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062206222 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06273407 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062437424 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068485627 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068920248 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063666831 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071882391 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070413434 seconds)
done (took 12.7403132 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068304434 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107156234 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.114947658 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109187468 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077535306 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06543714 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068086366 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084068429 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067545502 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08950188 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089517251 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08580303 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128162555 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063058245 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064355029 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064987257 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062572574 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076347694 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.112925213 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088489047 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106950496 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064275841 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080826331 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084790919 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077665665 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083762173 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066003978 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065329624 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067561533 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082107238 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090571725 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064585074 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065670759 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083789234 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.08099857 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073648191 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065548063 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071657063 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065587475 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064629805 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066627726 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083498372 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071808107 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072113324 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.06578335 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065794521 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064902577 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072492181 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078891594 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070880441 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077443451 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.08164737 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066334881 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064711263 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063002661 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072693292 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064718436 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065498075 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06531401 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064698503 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06529206 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067563327 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070500233 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.07536239 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068940374 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072404458 seconds)
  done (took 6.540811136 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083633168 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092410218 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078374791 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078586017 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063765363 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.0646243 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064678763 seconds)
  done (took 2.114060201 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068457769 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104239806 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110905746 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111662533 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.120811107 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.109517648 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06576772 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097476948 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064121178 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.105815089 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.118786278 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.113286188 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068068145 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077079336 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065218191 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.113461436 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065855641 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07207955 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.109650574 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.11512635 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069734795 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095605114 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078849277 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065980593 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114493275 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106319948 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067635404 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066052234 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067386293 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064891457 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064757901 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.087901045 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106225422 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080021064 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065969066 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064633674 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104116151 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066162687 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103248162 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.0724176 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.103335918 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067219431 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06751846 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065093092 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.06629324 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.110153079 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066329977 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065062701 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06468746 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107458456 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064760171 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.10626096 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067766981 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07036634 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072590308 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071941365 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072750452 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065866753 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.109985227 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075767014 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067292187 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.118804502 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117656584 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105485773 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117928484 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075023638 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109183847 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106104817 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065839045 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065540828 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066275647 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119644487 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069847483 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068998589 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071494107 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073913085 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.112801929 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124403764 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.12623489 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081788187 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070235168 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067531091 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.241667825 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119517677 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069917356 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064703015 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065502679 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.06428246 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069458442 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066306455 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069337962 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064272154 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074305502 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067019514 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066374219 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.111281662 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064738521 seconds)
  done (took 9.891412527 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069873756 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067232782 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065747123 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065617851 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.0658722 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065557822 seconds)
  done (took 2.003374293 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092540476 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065736172 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077376155 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068298396 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087332041 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.107751874 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.106852861 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067216712 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081615341 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076717963 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.107625228 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.10926561 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.109486182 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066993498 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107144842 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066764124 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.108101424 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069405009 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076646486 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067632958 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079774222 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067240891 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067521382 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116100242 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068435388 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067062614 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.074576082 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077245807 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076678196 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067362939 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067148908 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068380392 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075242928 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067470222 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110273362 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075440998 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066636843 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070854344 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068068324 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068368379 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112124521 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06786297 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070475603 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070874702 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067554632 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07498357 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070814022 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070097385 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.109964622 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070918346 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070743122 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066679456 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068199292 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070551607 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075091806 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06731913 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070562943 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110306864 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067628896 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07524507 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066644662 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068514271 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067769041 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068490753 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071649895 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071108246 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075472755 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068002765 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06795458 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066720467 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071142308 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06700998 seconds)
  done (took 7.160586062 seconds)
done (took 29.281554593 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.555066828 seconds)
  done (took 2.121167967 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.959123665 seconds)
  done (took 2.570887109 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.154171588 seconds)
  done (took 11.768904454 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.399477042 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.481471245 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.759771143 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.140113206 seconds)
  done (took 3.420015243 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.877556399 seconds)
  done (took 2.496924264 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.23946233 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225761537 seconds)
  done (took 2.1033704 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.450649105 seconds)
  done (took 2.059080776 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.208647034 seconds)
  done (took 2.823900382 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235735381 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161308667 seconds)
  done (took 2.013170497 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.626805551 seconds)
  done (took 2.234933075 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.691011559 seconds)
  done (took 6.304923181 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.32507967 seconds)
  done (took 1.993218811 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.237916667 seconds)
  done (took 1.855430733 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.600858224 seconds)
  done (took 4.212550511 seconds)
done (took 49.611474798 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086612689 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084051198 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08378449 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079108711 seconds)
  done (took 1.924446711 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075695052 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068918183 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071199534 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071568293 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.06895447 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070683052 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071503098 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067931106 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069306233 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068402811 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066596846 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068204452 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070775009 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067864559 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070302051 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071812021 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068295536 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068472805 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070211353 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067829596 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070810624 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068142217 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066071529 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067727029 seconds)
  done (took 3.283413293 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079432268 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070205363 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073167485 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068787001 seconds)
  done (took 1.915069812 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077703976 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074387012 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082918141 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087404507 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073930494 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074651385 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081519254 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081911404 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063669501 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084725081 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065968361 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064699136 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064763268 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083340673 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081070726 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060271594 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061553798 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075103079 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07408775 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076975267 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066368436 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063480201 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074076468 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.07477596 seconds)
  done (took 3.39103042 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083215723 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063761554 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079970979 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088692114 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090020158 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063658003 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077983673 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090208694 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126647149 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064054336 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072679198 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063766483 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103353943 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063826707 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079046919 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108317685 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11117546 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.06765182 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096382027 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063778133 seconds)
  done (took 3.289596752 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07848364 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068605505 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.06837828 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063773102 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074436417 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070498564 seconds)
  done (took 2.058717585 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069589288 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066385762 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065357898 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070194918 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06582458 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065629672 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064979989 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064180179 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064252281 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064988556 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064905811 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065362132 seconds)
  done (took 2.416798644 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215556161 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.07094579 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068369628 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063920766 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065986562 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064846594 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.07887284 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066928502 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087520902 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064999116 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065035081 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067339741 seconds)
  done (took 2.607800597 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106267733 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108974824 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141774292 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113677665 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11230815 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093755582 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.163320805 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092413222 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.158625729 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135664777 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115948915 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090501613 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085950011 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068270969 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099190457 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118862976 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137846552 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071346864 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112104826 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.205013387 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131981126 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134923778 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147138451 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116093466 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09162208 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146666369 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095773468 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101631461 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122113349 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126841087 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118228841 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097181696 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070530051 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069629055 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15132719 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108852272 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120652414 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092499876 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105892571 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08858128 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10875946 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069205165 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083530304 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112810458 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086170398 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13504856 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093959878 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118760323 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083352166 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.316012122 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125574166 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135242659 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083930871 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103079079 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13464779 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109354308 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131484653 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10379825 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080083658 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116343971 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103397338 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096975381 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105452825 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077539678 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173068098 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086752746 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109393943 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108895745 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093306884 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0938964 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10456495 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134425689 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126736384 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126740283 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139850959 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092054356 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120400841 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101046338 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128586818 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104138507 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071924067 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122705354 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130018613 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100443219 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101862149 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133296061 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093173412 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075757974 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101824374 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120509041 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080422714 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115311447 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080841879 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.11118299 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140938213 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101318704 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116246163 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124909547 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080655661 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.326800588 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106713991 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071070237 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114208194 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109766093 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152757292 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092681159 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074280345 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098336619 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100255213 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149839863 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104909061 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077553553 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106708394 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136730654 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091595637 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.214993071 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092905532 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140674393 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108146789 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084847563 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073020723 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088638917 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112619449 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107299181 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111589765 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093384657 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083296996 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08574861 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114593595 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093269928 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079866973 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113622393 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098538348 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073890699 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087439713 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075489112 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142105845 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077692705 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138397846 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127650607 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.07678923 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108232149 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096356491 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107778831 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098127413 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120424377 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144301394 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11650458 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091918873 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097774143 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112956302 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.153444799 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135443235 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.271571072 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076154739 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09902002 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110195821 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095422218 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121216317 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091567456 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104485171 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100380335 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137520635 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139753311 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095668925 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098495313 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104038015 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119239367 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072569515 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152798377 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101212696 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116097325 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085281742 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137908402 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.109839139 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087539877 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085592069 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098972118 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104287517 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107395337 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144282776 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095432441 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071796595 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092527756 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144727644 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076903093 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109541006 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090612658 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091945141 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118960192 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094963236 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080644234 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067834824 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128894765 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.162273011 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070067852 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114100849 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110712656 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10464402 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125256893 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069679168 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124090477 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144169897 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124317945 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153124373 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.343671615 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116629296 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116524874 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110774327 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103281296 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077187888 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122360265 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131642088 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093068126 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092554871 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132218284 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116515439 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132836483 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114014611 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115807615 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102827229 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103919954 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100326674 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102869531 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141872804 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121211255 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.1236976 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08256303 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105573369 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11788124 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13662487 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081182228 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141912139 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084706903 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120239871 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077789051 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123850402 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077032294 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108635958 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078935439 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101473394 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069071205 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073787578 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144943438 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114233473 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109035514 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103025109 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141038219 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139663838 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079043878 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109274746 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117414599 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104091334 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121513831 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113696244 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092733928 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.272045649 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105976873 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083492875 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079425301 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112850404 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091428528 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121995422 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082005044 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072702067 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135841787 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101619375 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092005323 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073838069 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104530739 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121012402 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090543412 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084455799 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115127483 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102862564 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137697008 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088595629 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095128582 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121937872 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077781607 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090732009 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.0674874 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083353986 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07448318 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.127422009 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074791929 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116842745 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067994919 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130891291 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086997176 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092356788 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101955624 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109608301 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127765946 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094157318 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141097581 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089080241 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12061731 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108270866 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09502721 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08736295 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10426299 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10167526 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.125286892 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096660735 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125894375 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147936833 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104966598 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146999876 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093364745 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128459554 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113200488 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133302881 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.285691371 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164911206 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13578813 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109142727 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107442411 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073157498 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093226244 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1022213 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109862355 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169619853 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122309033 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070280763 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102178968 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091845597 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105902047 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100885119 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079612098 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141360252 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099761449 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085680325 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109374344 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089687062 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102756131 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074956507 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099845899 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.10426281 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094938685 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097261823 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114682798 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129635158 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112508091 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145034085 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100377285 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091542703 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118664067 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110647295 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109692164 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085792262 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086494809 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140990888 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1227077 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129463659 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102867378 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11099298 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113369723 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102131361 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128742654 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111255462 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.135160929 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083817506 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080285127 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070234569 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.24771317 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122838575 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105644374 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109339409 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096182016 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070546839 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100710751 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100743071 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06985518 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085442846 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091071611 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095826856 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089613375 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104242128 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109785881 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.08910938 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101140258 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094916664 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143517931 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099096342 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08599955 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140447746 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145888965 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085402107 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089878967 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070121765 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077460984 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110969398 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149067132 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152530406 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077899344 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086198088 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085503514 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08630535 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070649351 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088607545 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088006623 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105534908 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097974325 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113265846 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105351354 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074842573 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102574735 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099285687 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093133736 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108982053 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123235962 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129557308 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.145003514 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116304743 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109707459 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076540142 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080983469 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075923038 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080353962 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103712052 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079895634 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077524808 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.32496921 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090893471 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103111913 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10577888 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085884934 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073450752 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133705617 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067696626 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131447825 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069456389 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079590746 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079771444 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076644911 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090560545 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133729238 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106277169 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108667339 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105280971 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101474439 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157533093 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15472123 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078774042 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138381246 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073632734 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074159599 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074188272 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109104346 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08809794 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112449917 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141697052 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090003923 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101370806 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077344235 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14378447 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099571589 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104241508 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085744324 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078683094 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144169105 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078944745 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080659579 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089327896 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112462163 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07246108 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103141824 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083416776 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079662069 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167406906 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.712202344 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09123621 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075824472 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096932461 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.144348912 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137152842 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100163421 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114707771 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.297071736 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099745587 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092403247 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105394232 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187817915 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072544701 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091966798 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101109638 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095019675 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099138508 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.09627648 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086169556 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089734969 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084627023 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077182684 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104805559 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085854954 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094240515 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105272728 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081232379 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.086012461 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128402777 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101438661 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080270994 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085572311 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102729493 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085478278 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100546109 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068098119 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110065634 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087336492 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117584819 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097385221 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107420502 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125426594 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094051271 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138255851 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107716178 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123182186 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087043313 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077699748 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127202366 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090143886 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077500542 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146921724 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.09808823 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091416608 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10474942 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097432167 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11492572 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119053325 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115014327 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098746491 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080814694 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106160227 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.107408038 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.26637748 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078950677 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073160507 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075159183 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105154621 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083837134 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084510217 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110313001 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086734755 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100393753 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100816538 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119951836 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085649654 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099312104 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108697299 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0893288 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107495877 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098899146 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125761247 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169935248 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121581544 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126502726 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131444659 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075672797 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073364768 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067092595 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112427416 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078285273 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088289379 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077389815 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13309669 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081492715 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112746731 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243074943 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080478846 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094613474 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096415056 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069074147 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083326062 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10776743 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086827017 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07969462 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119336631 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081178281 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129225037 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111195327 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100103949 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096164073 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081530406 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116348245 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105327494 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132063554 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099147516 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075970896 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12682162 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104961765 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143381527 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074105051 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084187059 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.138879166 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.285774608 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12961623 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078599579 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146144535 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139148237 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098017319 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13085273 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069220814 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085833266 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087647561 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123989293 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081546962 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108439839 seconds)
  done (took 68.308223828 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.184096652 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.175404854 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.120673365 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132626942 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.290177582 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299581142 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152640748 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123675047 seconds)
  done (took 3.263047283 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070438339 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082003833 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079509749 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.24221054 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096783677 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066466229 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072070607 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080754567 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066058777 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065760449 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099889444 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066101596 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066275905 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.523251322 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065598439 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07137022 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066125667 seconds)
  done (took 3.662590675 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.348154698 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.59634438 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.320942144 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.760272963 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.168384784 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.723940299 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074672554 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082022564 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.941578221 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.213122944 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.159432708 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087801552 seconds)
  done (took 21.25258248 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078030938 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.118765816 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.117570866 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072948566 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072494816 seconds)
  done (took 2.222727841 seconds)
done (took 121.244949271 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085569374 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.170990459 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067234032 seconds)
  done (took 2.036849798 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.12075521 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.11636913 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.115871686 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117402347 seconds)
  done (took 2.242987144 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076627772 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075072514 seconds)
  done (took 1.92360669 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227369082 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.212616237 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089778832 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084627624 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079159856 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.07934031 seconds)
  done (took 2.022455644 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073115831 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069784045 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069825299 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069992586 seconds)
  done (took 2.047752971 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.169806636 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065793154 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067977119 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069874398 seconds)
  done (took 2.140317485 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.0871405 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085412939 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114555524 seconds)
  done (took 2.059802784 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085213585 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083408713 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077516822 seconds)
  done (took 2.018639734 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111072136 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095240038 seconds)
  done (took 1.979777714 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081034934 seconds)
  done (took 1.854370041 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095090964 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097057585 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.182149586 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.147567928 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.183363987 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.17044532 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075760586 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076313661 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07234041 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070992464 seconds)
  done (took 2.966898529 seconds)
done (took 25.681288337 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086134708 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.193436243 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.321467583 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090666908 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.657733561 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.316817825 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.734153146 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091629909 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098572675 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067062764 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08371847 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631960713 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.731621757 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.146882774 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.717666353 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.13703273 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.560741915 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067748911 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066600246 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067024168 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715848212 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066681965 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066956921 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067539071 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558526429 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.335027539 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070942148 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.137315011 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071192157 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074659278 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.314863499 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068884494 seconds)
  done (took 14.210090688 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078873233 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.147992602 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.0736829 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084436201 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070391461 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070387727 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073229056 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070230267 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112023394 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069591574 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087700652 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069157444 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07421371 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071160685 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088761962 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067817832 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06990722 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06837835 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067935051 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.0684417 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086828604 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067732541 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068126465 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069260422 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068451591 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082210325 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069749277 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068311087 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068700382 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072533516 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073420733 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069389977 seconds)
  done (took 4.283138098 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.130082629 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.13077963 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073983916 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107876041 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.117814667 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071194491 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150757821 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090870913 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115014641 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068880348 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085270465 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068101935 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103449038 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069410282 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088564432 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068243407 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070213925 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068302903 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067293687 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068082072 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08666223 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067578856 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067773616 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068107061 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068093053 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08306152 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068709941 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067558097 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067435085 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071518046 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073182727 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06955564 seconds)
  done (took 4.489321994 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071235701 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070110808 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076752752 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078980731 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065011834 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067569879 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068159358 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066500768 seconds)
  done (took 2.37265612 seconds)
done (took 27.173832728 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080690318 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066465919 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068989362 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086060424 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074726211 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.111080676 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064378606 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074574438 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070761819 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070963853 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07334581 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067247392 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069609913 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064118662 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070489179 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064286504 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.111871209 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068470841 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.108812237 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.110287678 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06687403 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069861608 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072776769 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.110128158 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.109563757 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.109463651 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073200301 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070118318 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064529295 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067193858 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.169310534 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.183153983 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074196834 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116244635 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065172153 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064637071 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068961536 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067362665 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113037534 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073925625 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066826808 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.0734462 seconds)
  done (took 5.339873995 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189720767 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.192486421 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.185699449 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078737963 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091077376 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078346099 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.191180687 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076042753 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074234451 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.190740236 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070362608 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074434791 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076655827 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067466955 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074240325 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070283883 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.07571975 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068287993 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074082654 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07391066 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190703544 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.067966442 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078837497 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075616698 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069819844 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075393596 seconds)
  done (took 4.447707659 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07445818 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087725905 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091075438 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145068679 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108953038 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081858406 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081548263 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092521433 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100095256 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066875788 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070692137 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097373898 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09529901 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07352211 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105960595 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084489355 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078659253 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068174392 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073157112 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100603447 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089243369 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084848719 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099340915 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086554098 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065791877 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075835893 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073546023 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08219984 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073904277 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078846658 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070401119 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069836999 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066957472 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077911516 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070613588 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064456736 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.08937597 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07988266 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081906198 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106689189 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077105448 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068406314 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094164774 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.181015126 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066816479 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069203675 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070851259 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.0795524 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068359336 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097906577 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08254108 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066783811 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08588824 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068494593 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068470688 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082935105 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068737309 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.06865161 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078579509 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073027975 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087786611 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072347075 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087909835 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066820457 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078413748 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068486634 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.0686131 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06572009 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101026821 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074362198 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117206266 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068245782 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064878804 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079306158 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078481927 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07373175 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066657002 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086167048 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078877173 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070761478 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077852461 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069534529 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070064606 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103239574 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065720689 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064902315 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064745076 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068860678 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070509949 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067817215 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080101514 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066556149 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070592491 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08226614 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067386406 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067808236 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069504363 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068458887 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066751972 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077847797 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071631041 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069349808 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08045423 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068787513 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070950173 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082834376 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076730103 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067204341 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069118466 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071237922 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071115139 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07380065 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072636949 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071099974 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073967174 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076996884 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076115155 seconds)
  done (took 11.037834717 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.215359113 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.2020702 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.07271293 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.198288317 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079852188 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.129542765 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.198593487 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.135158733 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069780339 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070644706 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069348036 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.142366724 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.137318879 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.148054367 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.118272403 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069944244 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096887123 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.147500035 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.200585022 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.194447129 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.095857367 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077388307 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072507792 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071411551 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071633998 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079621989 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085876061 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078999498 seconds)
  done (took 5.2446921 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076217028 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082825281 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070573477 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091138089 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083414944 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066926631 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069089156 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068090189 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083920514 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072548043 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066691024 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07133725 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070041949 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067531539 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067691921 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073260137 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073577129 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066124917 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070691352 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071212402 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077721467 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154680309 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071466577 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069989597 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069242693 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066963566 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073264094 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07489966 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066411054 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.10004825 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063822481 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070933092 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081401266 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067758192 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066764013 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067667864 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.06712982 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067090423 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067534428 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06507761 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06494134 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073157354 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065998969 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072207447 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081727852 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076160872 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068565695 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069694918 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069484292 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064128994 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07047201 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070622358 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070116043 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076095302 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071044358 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069491867 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.06889433 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098232065 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073353627 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067125733 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067191141 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065626783 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068845405 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075138051 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.0840819 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068926635 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065706494 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067225033 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074802622 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081830273 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.06673126 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072713668 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064133955 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067291173 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069461959 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070219202 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068913626 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065723544 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067424746 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067448902 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068317925 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067070981 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067549409 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07015018 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064948515 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065668725 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068260782 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068804496 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072735601 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066177358 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070259647 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069230732 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066580013 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070753142 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07402605 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071075988 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088251832 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075828513 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068324944 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065580359 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082809842 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069460381 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069241289 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073846601 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07524704 seconds)
  done (took 9.481038082 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098769196 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068504346 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087662272 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.100358332 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.082553209 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.073805592 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081741817 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067835998 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088633154 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065773354 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075313254 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064541003 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080185815 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075866407 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067891341 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077189612 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068966344 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087783473 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081424157 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065003052 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075750923 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078907661 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.07913757 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085074286 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084675411 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085546908 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079058641 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.06896665 seconds)
  done (took 4.120859166 seconds)
done (took 41.50111494 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.892491379 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.07898089 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.882760546 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.403424045 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.088736295 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.907142787 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.015883999 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.917301235 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.103320517 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.28153012 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.930845054 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.840016352 seconds)
done (took 70.223194472 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.285740098 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.365076617 seconds)
    (2/2) benchmarking "String"...
    done (took 2.468817828 seconds)
  done (took 7.012999109 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.655476223 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.210182031 seconds)
    (3/3) benchmarking "different"...
    done (took 2.247518857 seconds)
  done (took 9.255476608 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.538532884 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.850063289 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.482227263 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.208303249 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.212418466 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.697817593 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.673289335 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.849965323 seconds)
  done (took 36.117813019 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.218443009 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.572247738 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.610001743 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.691838092 seconds)
  done (took 23.308582521 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.652809743 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.533221031 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.530740981 seconds)
    (4/4) benchmarking "different"...
    done (took 2.677331781 seconds)
  done (took 12.626315452 seconds)
done (took 101.429231122 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.212384617 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.726740531 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.093883165 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.285873182 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.186304305 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.157211116 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.169480749 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.167926086 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.123870552 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.143728506 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.157225772 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.159837337 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.158032935 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.788177885 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.155695695 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.156988506 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.597208779 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.158442134 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.14486775 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.082929259 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.523089949 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.155623134 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.140778037 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.195947653 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.692915049 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.206628566 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.526909103 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.123347801 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 3.233892559 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.163731485 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.166247027 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.141085221 seconds)
  done (took 218.241694688 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.146346515 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.993621995 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.995024917 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.171340429 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.533369063 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.517837727 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.016386851 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.536364517 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.159261175 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.181762416 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.136374597 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.152497947 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.172518941 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.701132343 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.169047812 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.164064019 seconds)
    (17/36) benchmarking "trmv"...
    done (took 4.017606417 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.918012242 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.166863802 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.117040985 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.16985199 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.727965127 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.665422203 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.933408129 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.170735292 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.144951599 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.155645751 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.151216791 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.638008307 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 4.029379574 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.14048867 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.158659994 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.582720924 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.38215414 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.174519538 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.141124584 seconds)
  done (took 191.448487329 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.381263706 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.156622277 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.194871691 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.268058966 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.157244268 seconds)
    (5/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.133613824 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.045941917 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.163336555 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.116399753 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.130949461 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.156361503 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.15554741 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.242034547 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.69521805 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.022985629 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.996461023 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.958404282 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.629752797 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.116716913 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.098510154 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.115650762 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.225252628 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.455044026 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.253005838 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.123103572 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.120417767 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.217919426 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.105450602 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.10193261 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.12662704 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.022413755 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.163351324 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.127625183 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.026548179 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.077601937 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.017872632 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.262273528 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.99583854 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.935170977 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.928865018 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.966475192 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.893793886 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.971692807 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.013704027 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.877030019 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.891799459 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.348054393 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.425225014 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.879308903 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.873889938 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.87303423 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.873308255 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.873753278 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.292851331 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.034802991 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.926715858 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.280968969 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.878036751 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.874115273 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.874295982 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.874620827 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.914086596 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.931294276 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.914879257 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.597349073 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.924514052 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.22961518 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.578800387 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.878913427 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.57924542 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.936410578 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.877929784 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.049248651 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.877929915 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.874304437 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.873593232 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.875244713 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.78039423 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.77460084 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.879267409 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.982581702 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.878012251 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.874540472 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.088637119 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.952233043 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.065628375 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.894113315 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.942333641 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.877341075 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.875861038 seconds)
    (90/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.874591055 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.901466759 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.027315766 seconds)
    (93/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.879594711 seconds)
    (94/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.87569748 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.875333714 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.874899163 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.874495281 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.589863113 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.879517523 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.3313209 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.260553203 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.975005793 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.299033124 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.81603493 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.880802481 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.875606007 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.893725248 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.87761236 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.874793238 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.887492791 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.876517176 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.875181904 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.876626576 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.876538551 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.875737344 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.876546338 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.8946157 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.877195998 seconds)
  done (took 429.160478486 seconds)
done (took 843.445414721 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.525751083 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.597028408 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.44407879 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.497848507 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.452817415 seconds)
  done (took 14.329788766 seconds)
done (took 16.1394518 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.905885941 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.906576022 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.892214184 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.904357696 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.899364837 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.896590019 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.906815192 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.915777395 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.908898444 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.896432084 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.903963863 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.898900924 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.90895334 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.911677806 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.923146704 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.910503061 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.900472819 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.891211005 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.906787843 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.899121742 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.900222505 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.928936251 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.898344823 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.904760557 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.917284501 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.901805204 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.895575615 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.904349247 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.90142122 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.906758355 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.917615129 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.912791503 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.909275698 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.913722843 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.911656293 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.912903434 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.906722165 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.914865276 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.901455591 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.914890223 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.90863179 seconds)
  done (took 79.985480085 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.888338311 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.053530315 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.172600615 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.92866733 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.888124713 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.167852529 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.955170138 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.040179831 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.059189821 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.173666523 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.175581126 seconds)
  done (took 24.321448605 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.886747422 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.053843941 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.170149709 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.931751121 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.888880344 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.169416925 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.960343434 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.065184331 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.053650205 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.17270133 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.195716697 seconds)
  done (took 24.381673134 seconds)
done (took 130.501549192 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.424660612 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.938119792 seconds)
  done (took 6.179236954 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.881860816 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.902359507 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.062266467 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.88146356 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.882535068 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.887495963 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.886997215 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.882818856 seconds)
  done (took 17.083851381 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.882946392 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.881998354 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.882156135 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.882461903 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.882602579 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.883080506 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.882384477 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.883177313 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.883425115 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.88349102 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.884050234 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.882611519 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.88383064 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.884024781 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.883017171 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.882276994 seconds)
  done (took 31.9445515 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.883712702 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.882420527 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.883298138 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.88375646 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.883069429 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.88392403 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.935902123 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.967454895 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.946063333 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.939130486 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.949388912 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.928570162 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.886745391 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.886624598 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.887867591 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.890936391 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.943670381 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.913693319 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.886727865 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.923518048 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.240302045 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.230719132 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.246235635 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.236845738 seconds)
  done (took 48.958477062 seconds)
done (took 105.999452977 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.843511957 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.257457585 seconds)
  done (took 10.273971191 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.242044645 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.232951202 seconds)
  done (took 6.735279692 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.236089678 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.236962271 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.241613918 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.238962818 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.23539183 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.235265852 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.239887036 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.236530054 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.243601303 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.238234941 seconds)
  done (took 24.548961707 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.242510722 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.242992613 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.241465029 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.23735349 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.241293881 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.239148042 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.242683022 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.244304888 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.239840822 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.238044107 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.24153246 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.24249462 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.240460487 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.242420413 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.247679233 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.243981401 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.23931577 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.244937485 seconds)
  done (took 42.523496346 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.245046692 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.241250836 seconds)
  done (took 6.660325827 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.243835803 seconds)
    (2/7) benchmarking "second"...
    done (took 2.241436122 seconds)
    (3/7) benchmarking "month"...
    done (took 2.239728841 seconds)
    (4/7) benchmarking "year"...
    done (took 2.251471916 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.240739279 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.247910816 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.250540513 seconds)
  done (took 17.894781756 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.247858551 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.385435051 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.425763186 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.720779213 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.244324267 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.243637194 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.873453015 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.251679125 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.245753756 seconds)
  done (took 23.818259709 seconds)
done (took 134.624607479 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 6.071745691 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.246843384 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.904017568 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.344205421 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.293658304 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.597135624 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.26738306 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.822599381 seconds)
done (took 47.721031448 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.375267444 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.23743369 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.276598272 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.274059329 seconds)
  done (took 23.964542146 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.267986671 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.883444569 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.269077073 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.370443163 seconds)
  done (took 25.043200466 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.7503842 seconds)
    (2/2) benchmarking "read"...
    done (took 2.762772167 seconds)
  done (took 7.689280722 seconds)
done (took 66.243709236 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.252923873 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.24857961 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.242176728 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.247004403 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.243573721 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.245615928 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.242633105 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.245108403 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.242392524 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.249892147 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.251783103 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.2389408 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.246144336 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.24454764 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.239943083 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.251998375 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.251356414 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.251854322 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.244711159 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.241613016 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.245413741 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.249221698 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.244395846 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.243938952 seconds)
  done (took 56.082632871 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.251489696 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.246688297 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.245073846 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.2415263 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.250579236 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.245416796 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.246608476 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.247402128 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.246734013 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.241766332 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.247869952 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.251480451 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.249619833 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.243086947 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.251265939 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.243746699 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.247053963 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.242046193 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.245807166 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.247124643 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.250535387 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.2485991 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.246627751 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.252389332 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.246921222 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.247730026 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.253784339 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.258076074 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.252510624 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.263564547 seconds)
  done (took 69.636501741 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.251918621 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.254699903 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.268637049 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.255795417 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.260762083 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.253661399 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.258546924 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.258762403 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.265856722 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.256388861 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.25714411 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.258715394 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.253461331 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.254955197 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.256089779 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.255903465 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.262385679 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.256567902 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.269914955 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.259436361 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.263854149 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.258674808 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.254282582 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.25505176 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.260300841 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.2513127 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.256603845 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.255730345 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.250499513 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.256603621 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.255143394 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.257474065 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.269518535 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.262536554 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.273461743 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.261580874 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.266130521 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.259031748 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.268555147 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.263457435 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.260870671 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.250273189 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.255724561 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.257242539 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.251754557 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.253672179 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.255310335 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.253745169 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.255769296 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.252420885 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.258109421 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.248667771 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.253549343 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.261788786 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.252989657 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.248025323 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.262044822 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.261377625 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.255165659 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.259082252 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.256867895 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.251739504 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.25052248 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.248752361 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.261771086 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.254177792 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.255929714 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.261162058 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.25715282 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.255427237 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.255220089 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.254622383 seconds)
  done (took 164.7296885 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.247533958 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.256851879 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.261059347 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.255584647 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.252723989 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.247034183 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.250014975 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.254424774 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.249683387 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.252695013 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.255891686 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.253074433 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.265573627 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.259565258 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.26054693 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.251187288 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.253625042 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.260260644 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.259674953 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.245679475 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.258141179 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.258080867 seconds)
  done (took 51.795888506 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.255828077 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.253234903 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.253613992 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.25538367 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.252595161 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.259188135 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.249771487 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.247552898 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.254601097 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.259976817 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.261070765 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.255018552 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.254812264 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.254763547 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.26116888 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.25783968 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.255685953 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.245335559 seconds)
  done (took 42.772096989 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.228360848 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.218687378 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.194048297 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.149295311 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.025642577 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.131535994 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.132574811 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.145026173 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.152114192 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.191453782 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.238977703 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.1291731 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.117125021 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.133673097 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.203982306 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.234459468 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.184132435 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.148765258 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.160120546 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.148729451 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.189691788 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.208178668 seconds)
  done (took 49.836349612 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.145398455 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.192450456 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.166695035 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.177927201 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.186722545 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.173786117 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.191715492 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.178875773 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.147364377 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.165838708 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.164578663 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.171368182 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.192400497 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.193474075 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.203058591 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.165493626 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.148176061 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.181478362 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.184181275 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.165802666 seconds)
  done (took 45.595878215 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.176259881 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.191400396 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.191544993 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.172514044 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.157452295 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.183730626 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.180874936 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.176919393 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.197469999 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.170595841 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.176943126 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.181345773 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.15982736 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.179852289 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.192641134 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.177099423 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.164746446 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.179484545 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.173069567 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.176357467 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.182368136 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.189389781 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.183395759 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.168934987 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.17918803 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.167263802 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.185302295 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.203323892 seconds)
  done (took 63.127096826 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.169565712 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.167620364 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.167527857 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.183021977 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.199382347 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.172699518 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.146802573 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.179612736 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.191999192 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.193709822 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.204038269 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.184994124 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.162990579 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.168942727 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.189889067 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.181060102 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.167249166 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.192877162 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.186933424 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.1716271 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.166017975 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.176281155 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.177032954 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.197339885 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.197698458 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.166392233 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.170353663 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.184578208 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.165570808 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.187919899 seconds)
  done (took 67.484725952 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.201093697 seconds)
    (2/2) benchmarking "in"...
    done (took 2.200041386 seconds)
  done (took 6.521208913 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.1664737 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.18968553 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.18236161 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.179732843 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.193207537 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.167767633 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.181106825 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.193282682 seconds)
  done (took 19.561614807 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.184876709 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.195243189 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.162880073 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.194015479 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.202937212 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.170579763 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.176402245 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.192726809 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.179204743 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.179483339 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.191968368 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.188705493 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.18847608 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.202660717 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.190193308 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.181754763 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.162108731 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.197221926 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.196611727 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.187047887 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.183600511 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.163417723 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.160596311 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.185363326 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.211349121 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.208068866 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.174109057 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.172298674 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.174010724 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.19467279 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.227043146 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.174754187 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.154447942 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.176960928 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.208828049 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.19598888 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.205419514 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.190631281 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.164605955 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.186139494 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.190970758 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.198483667 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.193415979 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.195321104 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.160151796 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.14959487 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.20469471 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.187221099 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.18769869 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.206900624 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.195642905 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.171340296 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.194608649 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.202771149 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.169085304 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.178569555 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.174723663 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.179784205 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.199067057 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.189699215 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.188534057 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.221242293 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.232247353 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.190178358 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.184344902 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.189620342 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.184045907 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.1598944 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.206197484 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.208768923 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.195613656 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.1776731 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.187614706 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.191191096 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.197742716 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.18520802 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.180665585 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.177369599 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.193971753 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.197585835 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.176040038 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.173498144 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.206195099 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.198150897 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.204535024 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.215983425 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.177046546 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.189634201 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.192560313 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.192600773 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.189738088 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.197990384 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.19470293 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.191943561 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.201463444 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.183585651 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.184891595 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.189850649 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.183585753 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.211042461 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.189745266 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.1780562 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.214239348 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.196701873 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.165880885 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.211253402 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.18480072 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.199237809 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.192674403 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.163743418 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.184568603 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.200831798 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.18552318 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.192799555 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.203560105 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.165866152 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.192481096 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.209111169 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.180067616 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.203844583 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.185222185 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.179239948 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.209450901 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.227640891 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.183413585 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.177099289 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.164696774 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.19527907 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.217508614 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.186330509 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.181594607 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.180104001 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.172512075 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.199157618 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.204351488 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.175803393 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.17296428 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.194775139 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.161527467 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.184946516 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.199647418 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.194324668 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.194214212 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.178687207 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.188422211 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.206890409 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.201046871 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.214219955 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.179409382 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.16891926 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.168113743 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.194394386 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.190437277 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.203349366 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.19579625 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.199529216 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.180319455 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.19792566 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.193167823 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.191478671 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.215008664 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.181614033 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.198235151 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.180595852 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.193877182 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.178338276 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.192711149 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.202930092 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.203655329 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.197995425 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.180646511 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.183108359 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.177598355 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.200845209 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.212558153 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.200746675 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.176465939 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.188625278 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.174825471 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.225764237 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.205567712 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.200111846 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.182055622 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.221968325 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.188651758 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.204963741 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.186240824 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.182608795 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.185479218 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.204739469 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.211597238 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.225054921 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.218692856 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.179050525 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.162369244 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.187301731 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.226266429 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.231676345 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.179177547 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.166655658 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.184676564 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.199365057 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.202298188 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.20733534 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.179439568 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.188303747 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.20470828 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.200008304 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.183779402 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.202776415 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.192126101 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.198501152 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.2137295 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.178408672 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.177317611 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.197223806 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.203585259 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.188508275 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.205826321 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.160648068 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.187854487 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.205425198 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.213122656 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.204549552 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.189289327 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.157912059 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.171955404 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.203335038 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.207675119 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.207094057 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.183565211 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.185858756 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.173558365 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.189021776 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.204274441 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.204343582 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.218675083 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.186009623 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.172415003 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.213854779 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.201913332 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.195227294 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.210049658 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.185978654 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.166403642 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.230995843 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.196413479 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.162668173 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.185984465 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.207439489 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.19394065 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.210618967 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.195998925 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.173634487 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.198208096 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.224827311 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.182168588 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.173005161 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.181145803 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.178242935 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.207774512 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.227541525 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.196460188 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.186195389 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.191070827 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.197178975 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.230727072 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.215030484 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.191033535 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.17448329 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.155096511 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.19675294 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.208576315 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.211535941 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.228869183 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.193879768 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.184954725 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.188251769 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.207164301 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.20540376 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.203571065 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.17837128 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.20266836 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.195056648 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.222165836 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.220152223 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.177461075 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.170456431 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.191612438 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.209004572 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.225297787 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.175844498 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.195622878 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.188574051 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.197954727 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.210898148 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.218056082 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.216568333 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.204822318 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.194343945 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.207557725 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.184301606 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.184788439 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.200658344 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.224282157 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.203080859 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.209146983 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.169674681 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.200657115 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.221094568 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.228580017 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.203770211 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.220580522 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.186316397 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.183787433 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.217438152 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.220546288 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.203391706 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.192837839 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.18768071 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.222004905 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.217704866 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.198118417 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.207222968 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.166914105 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.185943827 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.214661786 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.228933876 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.210191398 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.189808651 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.180435876 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.191457751 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.22749692 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.212428526 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.205615762 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.199634331 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.183642686 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.196574754 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.214547081 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.202483688 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.216585363 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.191421003 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.179174613 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.195222436 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.208854376 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.21548275 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.200304964 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.207442968 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.209525958 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.201321527 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.223147691 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.211783251 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.203947146 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.207039984 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.197196941 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.188872905 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.198873278 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.197534392 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.202123098 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.215735933 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.202884315 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.222584807 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.244127116 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.211757325 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.189537067 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.195688511 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.21059495 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.221521364 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.244111316 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.189243795 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.208940268 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.225801885 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.226318878 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.208975556 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.198737773 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.208627585 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.210065599 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.231600451 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.201795889 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.208759942 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.197471393 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.194576751 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.206466702 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.218513525 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.210451427 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.191549551 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.188161424 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.219961148 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.220391785 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.190000205 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.183491628 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.204011246 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.207431866 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.208875792 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.216073267 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.186573178 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.173997097 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.203770594 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.211383726 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.235469653 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.194761091 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.177077149 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.187981561 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.213610698 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.225983319 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.216839712 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.186535647 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.195926693 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.218675093 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.216539906 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.216414498 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.198805386 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.185935741 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.216549125 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.207353932 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.218928902 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.194528851 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.218902809 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.197692162 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.201621157 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.186940018 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.217659789 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.227512945 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.204627783 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.188403943 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.189044425 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.212182426 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.245875675 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.229813802 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.207997719 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.206648686 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.196012569 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.213458771 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.207945266 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.203669553 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.211394156 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.221745396 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.214090928 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.212183918 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.185506726 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.207142989 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.23395193 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.209528693 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.209010964 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.186120025 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.179981186 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.228678068 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.235134391 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.214565543 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.195894584 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.210454518 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.201983237 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.208534402 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.225324836 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.200429255 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.224887807 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.197772642 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.200473426 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.234498959 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.215813952 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.224703216 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.202218955 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.198758237 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.182103745 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.198550737 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.219584529 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.227486261 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.203117524 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.203591077 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.21063653 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.20191859 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.224651898 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.219188165 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.205425163 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.223746378 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.189582532 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.193650406 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.197919816 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.223091422 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.215821116 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.224468788 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.182855083 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.198874044 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.216697262 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.200849556 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.238501132 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.212579935 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.197996741 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.219122168 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.205388193 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.207214266 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.234977412 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.225321042 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.212797624 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.209466121 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.202092845 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.218332157 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.217525961 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.202200097 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.20415964 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.216901146 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.205474883 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.243993005 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.209142741 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.193867547 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.192626176 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.211359551 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.210287613 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.213022733 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.219756709 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.216025503 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.219001586 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.228475286 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.217742202 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.219329314 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.200317905 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.213311947 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.231409023 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.225385713 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.21277879 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.214972341 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.210004898 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.214399682 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.234293032 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.224437604 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.199484231 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.211259973 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.24893674 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.225321776 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.235923136 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.243798914 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.19120896 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.200448933 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.217571998 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.221728075 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.228485657 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.22436735 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.202071332 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.20909144 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.217326911 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.206000648 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.224328294 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.239961988 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.195178947 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.188000865 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.208416087 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.211680854 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.233122891 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.262463796 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.191849521 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.202280273 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.211455783 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.213331591 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.22049465 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.2332566 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.203827039 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.227700311 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.208138044 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.199025138 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.229453656 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.240111845 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.206213395 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.20668329 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.227208433 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.209637746 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.221805139 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.231506639 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.211466776 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.233682606 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.216924744 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.212094658 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.220528708 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.228191894 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.232266732 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.206918997 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.212036979 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.212392666 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.201575568 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.234634707 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.23695366 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.230113699 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.224519605 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.204377542 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.220301053 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.226457676 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.224344911 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.230952717 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.219711202 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.221685012 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.187743409 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.18655735 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.228947571 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.215094471 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.238702571 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.229165435 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.187644911 seconds)
  done (took 1314.100744216 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.233815431 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.216664786 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.226679975 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.182903669 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.176117459 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.21990486 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.239954066 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.217134985 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.204366668 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.211748164 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.216890914 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.211576458 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.230821439 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.208594198 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.21386207 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.233251315 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.206963233 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.210891344 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.208071163 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.22061763 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.217049922 seconds)
  done (took 48.648189804 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.224262934 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.227935136 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.216929053 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.238344391 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.212470293 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.205427136 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.239470807 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.214347126 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.216233821 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.208351132 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.212798907 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.217562128 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.223649494 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.203828453 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.246325593 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.256665739 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.201198612 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.197259667 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.196071091 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.21327593 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.242558457 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.211996632 seconds)
  done (took 50.966102287 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.203514903 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.22688899 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.246660702 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.236993038 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.212531146 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.189454863 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.207728303 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.231779257 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.241964921 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.219376596 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.238182088 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.209740597 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.208975555 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.230830502 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.224782049 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.229883033 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.331809609 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.190732029 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.218940773 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.233983343 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.230296111 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.235836118 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.215464263 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.192029129 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.22560933 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.22209841 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.219663753 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.229479547 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.231424664 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.218599824 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.211820904 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.232659054 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.238694897 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.229423331 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.221369948 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.221107287 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.216603447 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.21705313 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.219884027 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.223365972 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.25678423 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.244380793 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.197364444 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.245205777 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.233879438 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.223617608 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.218387612 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.229130085 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.227660249 seconds)
  done (took 111.18361658 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.217022257 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.248061424 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.214302446 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.199650575 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.209896921 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.236222367 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.24499076 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.210816331 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.211982584 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.205826572 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.236376634 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.216363766 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.213972282 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.220803362 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.212819811 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.220572701 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.208336859 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.214324989 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.228419499 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.207225238 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.23698585 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.228533243 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.212208502 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.224596819 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.224824842 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.206031251 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.233135029 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.208747914 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.220236899 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.218081488 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.240915952 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.235002447 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.204705628 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.214969319 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.211583832 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.235781592 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.254915965 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.227777811 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.199260162 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.199025133 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.227047463 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.225019595 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.239081013 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.218477789 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.216272621 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.23195824 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.238516432 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.200736522 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.230555654 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.236157608 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.19886337 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.221768784 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.233375317 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.221357482 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.220478185 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.217187899 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.216869231 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.245123416 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.216780426 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.214710653 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.242386474 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.227398257 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.234549098 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.202602058 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.193831837 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.216584287 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.246351058 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.218888901 seconds)
  done (took 153.229932331 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.222370945 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.226426576 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.242741271 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.239156795 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.218594945 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.200660224 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.213710683 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.209997895 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.233870814 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.251277781 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.235534981 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.210026911 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.204506436 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.214325649 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.24723991 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.242525754 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.233292246 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.224996017 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.203681558 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.206414801 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.239890304 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.220451956 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.239002234 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.226945741 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.220058694 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.235928714 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.208760365 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.23492353 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.228970155 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.213246749 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.245858388 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.227865986 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.20639623 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.23764346 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.199593886 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.236743288 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.245008026 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.197155367 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.215214337 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.241554938 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.225110843 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.236150633 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.230293226 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.215527842 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.220899923 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.257376831 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.252669712 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.230210989 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.203038939 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.192668156 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.218046539 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.240699013 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.278086679 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.213018913 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.201502401 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.210025013 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.238113941 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.256701951 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.22260927 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.21257932 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.218812828 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.204883306 seconds)
  done (took 140.145120149 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.227043199 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.211609492 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.223657584 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.225958394 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.228705436 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.25933096 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.248080879 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.204842039 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.20769899 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.214867449 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.22461861 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.22975552 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.230970733 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.246458848 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.226724126 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.221227568 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.214025133 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.21805608 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.244483783 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.247136037 seconds)
  done (took 46.73169669 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.206452538 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.230049145 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.222795096 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.24244484 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.231652099 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.224667235 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.215883388 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.227944064 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.233449515 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.232763552 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.223134523 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.22160735 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.217741362 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.234395971 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.244195199 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.236718382 seconds)
  done (took 37.796111495 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.221026966 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.209980397 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.226495935 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.252204653 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.221475978 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.232208192 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.231748817 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.208484707 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.235861084 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.247846779 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.215416124 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.217555294 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.224039257 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.233293868 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.241031864 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.221444845 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.213606956 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.242896471 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.224914695 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.223285474 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.247701528 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.226583275 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.224525504 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.228285785 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.233737792 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.237015783 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.233476343 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.218559576 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.22192702 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.229751826 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.226284079 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.244962547 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.220028876 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.224376323 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.20217408 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.214975468 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.223988407 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.242030817 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.219762894 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.186012533 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.210142222 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.228051694 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.198324189 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.180928083 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.168272934 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.173248557 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.146959042 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.135724429 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.10744314 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.091433741 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.069365535 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.066404562 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.077178443 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.065959798 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.098990138 seconds)
  done (took 123.211246383 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.313559596 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.324280645 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.335040527 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.32565466 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.299712912 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.330979604 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.322345216 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.307244352 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.303174228 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.285027237 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.267300976 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.284131795 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.26570743 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.203069994 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.189969393 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.197007346 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.188851115 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.188022607 seconds)
  done (took 43.182287473 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.191080955 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.195244927 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.191551339 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.200568792 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.188774073 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.190778329 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.190190352 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.195146715 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.200797771 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.199837944 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.182465083 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.187305335 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.194858345 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.204141958 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.197697143 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.199439505 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.21043497 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.201710058 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.206645726 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.216924981 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.216392183 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.214549714 seconds)
  done (took 50.497741761 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.219206509 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.192651238 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.221829043 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.205965177 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.218613628 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.215897958 seconds)
  done (took 15.418042468 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.192937142 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.193414655 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.184330877 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.18622644 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.193470238 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.198035734 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.203781574 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.209553056 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.224730426 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.212672574 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.228402718 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.217631743 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.21224584 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.218395428 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.218868456 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.216693473 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.228299169 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.20464169 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.209483664 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206560655 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.200589839 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.184849281 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.22200127 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.208027389 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.207414813 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.193365691 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.21762245 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.206462917 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.197093855 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.192372014 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.208983926 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.22493859 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.209523526 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.21246682 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.216068823 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.225552192 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.215870586 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.194573382 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.197164156 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.17796994 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.184144949 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.212338418 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.221381873 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.211935846 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.220139706 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.20756061 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.207554592 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.215077026 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.208006721 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.227202635 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.216913272 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.207284329 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.19080934 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.227759269 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136247263 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.09534655 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.112906639 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083898862 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.093380435 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.103213028 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.097571727 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099927776 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126936351 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095301219 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091157425 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.106507944 seconds)
  done (took 146.584925157 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095746921 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.099406089 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.107424864 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.110080493 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093532854 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.100896725 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.096514039 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.104149499 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126748133 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.100825947 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094158688 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.106734189 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.095969476 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.095515386 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.106475622 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.107482381 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088100741 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.104920463 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.101970659 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.096191444 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099209713 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.100789166 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.10389578 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.102833644 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.094398513 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09794243 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.111982974 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.106558725 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.099399327 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.098117622 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.075240343 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024877706 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012669278 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.012957146 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.01381946 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.012121022 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004623632 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014027247 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.014171324 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.010480693 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.012884564 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013259391 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0146349 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.99592601 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955257681 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955067935 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015321734 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.012123399 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014433927 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012048718 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010192703 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.006450846 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.013607798 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.96022707 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.955066236 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.990403173 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015690737 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.960841818 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.955383342 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984181281 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974463937 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.95473237 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.955152209 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.954821923 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.955424297 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.957164821 seconds)
  done (took 136.893602536 seconds)
done (took 3057.910988336 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.030395679 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.131368493 seconds)
  done (took 16.046637038 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.087561704 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.02897606 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.103455346 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.04962238 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.987426505 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.988302751 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.958807819 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.956137472 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.039569523 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.95560204 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.984468972 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.959919866 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.956032386 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.956499869 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.956653136 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.956264909 seconds)
  done (took 53.822160771 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.960826998 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.960341915 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.957955567 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.95664811 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.981690837 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.053114875 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.98367117 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.9622815 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.97711013 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.007498286 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.98415173 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.966529044 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.971526707 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.965784919 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.059849276 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.015752273 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.028403089 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.049994436 seconds)
  done (took 37.728374675 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.058256783 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.97277567 seconds)
  done (took 10.926693341 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.996335833 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.996867774 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.000871437 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.971438852 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.974179556 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.993846052 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.989798904 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.978591586 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.982907319 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.997408079 seconds)
  done (took 71.794644396 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.961017811 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.96155345 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.303796826 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.972896397 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.969748288 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.990352885 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.962031882 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.994794078 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.964744611 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.955467749 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.971582033 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.308410209 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.976280331 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.958772877 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.380971877 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.978348121 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.998998949 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.090107222 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.091432977 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.025028808 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.033145649 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.009810475 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.208380009 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.679745754 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.965537683 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.972968689 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.968030099 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.963832344 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.092684952 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.302034422 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.31360605 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.314417897 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.317937166 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.314418095 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.329998424 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.323786587 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.965616903 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.341753239 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.324178494 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.404049687 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.407674672 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.329981005 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.316467533 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.323296049 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.318366524 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.324268841 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.064146875 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.417217878 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.320584188 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.476389621 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.828914874 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.332729508 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.470163475 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.441019721 seconds)
  done (took 148.231499623 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.314627324 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.766576159 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.485819462 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.320272586 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.68263949 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.53773322 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.118390422 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.366360442 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.314294812 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.523787667 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.480086555 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.449468861 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.321674258 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.319763224 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.315325097 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.317929336 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.489151815 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.393418383 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.322680388 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.315601555 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.341594875 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.557236544 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.443418638 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.317891899 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.333897338 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.537727517 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.371799367 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.445294377 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.705735534 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.313559543 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.379341535 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.31993929 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.319838816 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.315307999 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.36158701 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.432117083 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.413729065 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.319271895 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.065354844 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.319428787 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.915122535 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.52264849 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.434317829 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.449660231 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.46452961 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.513641524 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.940895498 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.162335177 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.956801788 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.386729851 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.512877503 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.494117823 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.288182373 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.226006147 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.726236568 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.253018207 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.239280454 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.532599107 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.401348998 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.37945223 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.289576917 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.26524038 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.254009386 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.50278089 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.286373596 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.337400011 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.261464751 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.218032506 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.380287105 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.396773037 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.389289099 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.474433433 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.286350947 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.221355158 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.547629547 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.459690865 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.288323755 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.505063182 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.265745145 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.240302001 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.341157246 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.723957442 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.409159258 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.485833831 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.551389447 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.265907849 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.761672868 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.266505765 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.473279911 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.383089268 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.53374658 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.386856886 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.344968004 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.111490282 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.225070151 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.272248253 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.49036134 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.378523398 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.224128528 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.821212187 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.483986827 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.968078804 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.283689443 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.750631725 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.341119447 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.251851759 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.862632436 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.256210588 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.463894504 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.315694047 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.253791478 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.223115239 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.427241066 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.184517017 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.24633827 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.594006319 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.327744024 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.239743167 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.423246949 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.277419177 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.487111341 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.998056627 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.448023647 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.246669076 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.332598988 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.424560005 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.365431427 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.253265538 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.598846224 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.476367312 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.330602633 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.555032242 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.291307024 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.244276893 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.539421238 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.276607568 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.26678561 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.395917979 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.181753139 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.445771156 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.262349669 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.596246726 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.292197082 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.318090425 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.262139018 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.482018758 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.33109646 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.318255626 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.249057819 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.407549319 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.26770484 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.189197593 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.441854293 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.268181662 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.2608947 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.264455523 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.226897601 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.425820267 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.485676792 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.260042047 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.330013605 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.659653281 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.252928892 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.361329762 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.274697971 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.669236636 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.771091659 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.421187692 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.273054444 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.220834823 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.283386431 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.486773113 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.557434775 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.291942776 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.263560568 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.995970242 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.675381392 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.279487014 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.428764954 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.055376464 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.621927704 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.474889237 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.263980318 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.329955749 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.28280781 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.608318282 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.822290779 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.474256952 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.270921831 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.249342704 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.26414772 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.262049561 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.473563378 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.278302833 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.996477541 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.410835378 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.537881377 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.501186218 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.543246732 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.303632069 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.293634163 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.483850029 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.25534137 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.312756516 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.256395066 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.304973817 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.503753504 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.256356005 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.568514775 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.611033169 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.456404941 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.318319346 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.228970083 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.256402382 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.241590089 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.427131777 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.388112548 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.280369573 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.544343299 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.329056989 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.367535473 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.478350862 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.522838597 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.235347269 seconds)
  done (took 978.528931724 seconds)
done (took 1318.959951608 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.248068651 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.265551448 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.245338053 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.232364293 seconds)
  done (took 31.169915104 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.247356934 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.254740036 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.246833634 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.295665212 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.276763403 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.239506947 seconds)
  done (took 15.731530164 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.253191982 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.256023362 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.284501989 seconds)
  done (took 23.970171776 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.659844682 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.567432768 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.35862959 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.415097213 seconds)
  done (took 12.202613322 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.265029102 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.277355627 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.247890708 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.226984317 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.253781571 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.190234852 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.089264569 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.126239868 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.094469359 seconds)
  done (took 21.975480935 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.49097691 seconds)
done (took 113.719316891 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.497700027 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.832266172 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 3.274716711 seconds)
    (4/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.602015104 seconds)
    (5/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.25440426 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.383575488 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.391304177 seconds)
    (8/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.692978894 seconds)
    (9/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.650394687 seconds)
    (10/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.151290304 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.217515658 seconds)
    (12/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.309828701 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 4.890169711 seconds)
    (14/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.389994211 seconds)
    (15/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.229482941 seconds)
    (16/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.406267539 seconds)
    (17/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.747336154 seconds)
    (18/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.534210566 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.270835004 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.61788088 seconds)
    (21/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 3.066289532 seconds)
    (22/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.414682207 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.285477871 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.138599176 seconds)
    (25/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.251479739 seconds)
    (26/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.27975903 seconds)
    (27/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.140370156 seconds)
    (28/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.401218847 seconds)
    (29/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.122112392 seconds)
    (30/341) benchmarking ("map", abs, Float64, false)...
    done (took 4.122471373 seconds)
    (31/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.511915965 seconds)
    (32/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.612657625 seconds)
    (33/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.228256195 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.05920119 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.156105216 seconds)
    (36/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.415863419 seconds)
    (37/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.172866926 seconds)
    (38/341) benchmarking ("sort", Float64, false)...
    done (took 6.726646481 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.168116956 seconds)
    (40/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.014691122 seconds)
    (41/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.370498652 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.309931347 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.397394828 seconds)
    (44/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.612238372 seconds)
    (45/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.482448848 seconds)
    (46/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.36684391 seconds)
    (47/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.414841533 seconds)
    (48/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.555981242 seconds)
    (49/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.115157999 seconds)
    (50/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.635434892 seconds)
    (51/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.943005632 seconds)
    (52/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.115879881 seconds)
    (53/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.254645668 seconds)
    (54/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.260797043 seconds)
    (55/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.228552768 seconds)
    (56/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.274254707 seconds)
    (57/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.417915301 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.570698835 seconds)
    (59/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.327839791 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.415268768 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.595350973 seconds)
    (62/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.258019046 seconds)
    (63/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.217139067 seconds)
    (64/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.370639143 seconds)
    (65/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.144725355 seconds)
    (66/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.506624106 seconds)
    (67/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.134160862 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.803574343 seconds)
    (69/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.564014001 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.951675698 seconds)
    (71/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.627050875 seconds)
    (72/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.316834736 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.166602558 seconds)
    (74/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.612130223 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.511951059 seconds)
    (76/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.332833949 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.315581388 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.37800958 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.131816562 seconds)
    (80/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.031944591 seconds)
    (81/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.310492667 seconds)
    (82/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.648782458 seconds)
    (83/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.234661124 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.233223285 seconds)
    (85/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.201604425 seconds)
    (86/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.246518737 seconds)
    (87/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.63835489 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.127392106 seconds)
    (89/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.879842253 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.452587454 seconds)
    (91/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.281784431 seconds)
    (92/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.294352729 seconds)
    (93/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.140258815 seconds)
    (94/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.43053853 seconds)
    (95/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.310498573 seconds)
    (96/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.282343549 seconds)
    (97/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.992436999 seconds)
    (98/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.983697219 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.402081644 seconds)
    (100/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.298723745 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.442601846 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.615768672 seconds)
    (103/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.262493776 seconds)
    (104/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.321813808 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.424098501 seconds)
    (106/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.640950001 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.147201366 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.158405178 seconds)
    (109/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.128873031 seconds)
    (110/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 4.272950123 seconds)
    (111/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.187894195 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 3.11607712 seconds)
    (113/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.337919093 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.32002295 seconds)
    (115/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.134808811 seconds)
    (116/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.270424166 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.487160086 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.263616335 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.230468333 seconds)
    (120/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.291287207 seconds)
    (121/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.559539986 seconds)
    (122/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.445969627 seconds)
    (123/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.135928211 seconds)
    (124/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.135777718 seconds)
    (125/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.213130459 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.138985339 seconds)
    (127/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 5.171975543 seconds)
    (128/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.269284158 seconds)
    (129/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.518743016 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.386578449 seconds)
    (131/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.456642279 seconds)
    (132/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.387591445 seconds)
    (133/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.367814515 seconds)
    (134/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.175049464 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.15755075 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.534604377 seconds)
    (137/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.395078419 seconds)
    (138/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.618099569 seconds)
    (139/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.221044598 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.303180994 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.428433252 seconds)
    (142/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.677396073 seconds)
    (143/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.13924751 seconds)
    (144/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 5.254120808 seconds)
    (145/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.141151447 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.116074946 seconds)
    (147/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.434451826 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 2.346074856 seconds)
    (149/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.156022614 seconds)
    (150/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 3.147761266 seconds)
    (151/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.331102236 seconds)
    (152/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.134347946 seconds)
    (153/341) benchmarking ("sort", BigFloat, false)...
    done (took 9.434906589 seconds)
    (154/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.138209909 seconds)
    (155/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.272116016 seconds)
    (156/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.293569722 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.153853683 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.146358109 seconds)
    (159/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.290194244 seconds)
    (160/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.57260111 seconds)
    (161/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.323848617 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 7.062419584 seconds)
    (163/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.14505277 seconds)
    (164/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.608010804 seconds)
    (165/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.135171961 seconds)
    (166/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.575931352 seconds)
    (167/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.374182674 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.249439029 seconds)
    (169/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.696507551 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.595296629 seconds)
    (171/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.481849905 seconds)
    (172/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.185397299 seconds)
    (173/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.687242932 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.36367236 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.327763371 seconds)
    (176/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.668018574 seconds)
    (177/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.152695717 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 3.129495646 seconds)
    (179/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.176861418 seconds)
    (180/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.381570098 seconds)
    (181/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.554114946 seconds)
    (182/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.477576553 seconds)
    (183/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.553743216 seconds)
    (184/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.160872632 seconds)
    (185/341) benchmarking ("perf_sum", Float32, false)...
    done (took 4.895698379 seconds)
    (186/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.546327134 seconds)
    (187/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.398373586 seconds)
    (188/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.145935488 seconds)
    (189/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 5.353671179 seconds)
    (190/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.246515053 seconds)
    (191/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.697714347 seconds)
    (192/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.314522683 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.148047874 seconds)
    (194/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.493680333 seconds)
    (195/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.218207144 seconds)
    (196/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.12928894 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 4.697328924 seconds)
    (198/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.512323107 seconds)
    (199/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.466743181 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.15202256 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.293803421 seconds)
    (202/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 4.827007748 seconds)
    (203/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.476128022 seconds)
    (204/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.145800505 seconds)
    (205/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.259615592 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.281104186 seconds)
    (207/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.358399953 seconds)
    (208/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.27446282 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.610228789 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.153618298 seconds)
    (211/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.285549217 seconds)
    (212/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.13992447 seconds)
    (213/341) benchmarking ("map", identity, Bool, true)...
    done (took 4.975617986 seconds)
    (214/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.422103802 seconds)
    (215/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.21478674 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.141758365 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.267247453 seconds)
    (218/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.289277371 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.304569454 seconds)
    (220/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.147967951 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 3.898785096 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.532410151 seconds)
    (223/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.288276522 seconds)
    (224/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.136708841 seconds)
    (225/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.508681274 seconds)
    (226/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.927776908 seconds)
    (227/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.170740131 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 3.965199789 seconds)
    (229/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.315529228 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.190463929 seconds)
    (231/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.270544364 seconds)
    (232/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.150810962 seconds)
    (233/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 3.043416941 seconds)
    (234/341) benchmarking ("sort", BigInt, false)...
    done (took 7.144948474 seconds)
    (235/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.288277039 seconds)
    (236/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.144991128 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.478746153 seconds)
    (238/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.156870081 seconds)
    (239/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.161491541 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.9233512 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.471803391 seconds)
    (242/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.355924695 seconds)
    (243/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.149422991 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.151496879 seconds)
    (245/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.08517151 seconds)
    (246/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.522129607 seconds)
    (247/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.41085062 seconds)
    (248/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.627736297 seconds)
    (249/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.50506129 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.154854071 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.269320862 seconds)
    (252/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.164371584 seconds)
    (253/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.282317971 seconds)
    (254/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.240496171 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.283766058 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.278510242 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.081261747 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.202517955 seconds)
    (259/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.16180864 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.303854795 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.138204743 seconds)
    (262/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 6.35481022 seconds)
    (263/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.4517286 seconds)
    (264/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.157308693 seconds)
    (265/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 5.988497413 seconds)
    (266/341) benchmarking ("sort", Int8, false)...
    done (took 5.742364124 seconds)
    (267/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.150065736 seconds)
    (268/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 3.960259691 seconds)
    (269/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.132048194 seconds)
    (270/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.177445245 seconds)
    (271/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.179267087 seconds)
    (272/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.35704936 seconds)
    (273/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.166912163 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.187393506 seconds)
    (275/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.623935902 seconds)
    (276/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.596431706 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.52545031 seconds)
    (278/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.9362163 seconds)
    (279/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.426645837 seconds)
    (280/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.23590595 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.155552178 seconds)
    (282/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.246309503 seconds)
    (283/341) benchmarking ("sort", Float32, false)...
    done (took 6.805011354 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.312320865 seconds)
    (285/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.191075413 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.445242407 seconds)
    (287/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.283369021 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.1457422 seconds)
    (289/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.783426586 seconds)
    (290/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.312424354 seconds)
    (291/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.568508477 seconds)
    (292/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.431052947 seconds)
    (293/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.439298015 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.568115673 seconds)
    (295/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.580021037 seconds)
    (296/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.585870606 seconds)
    (297/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.539805728 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.805817308 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.67833026 seconds)
    (300/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.321578007 seconds)
    (301/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.70345236 seconds)
    (302/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.737682837 seconds)
    (303/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.595241233 seconds)
    (304/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.311562449 seconds)
    (305/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.561442137 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.181757017 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.312124949 seconds)
    (308/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.136854429 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 4.141466187 seconds)
    (310/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.353753707 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.466895065 seconds)
    (312/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.59414823 seconds)
    (313/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.975723266 seconds)
    (314/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.161270421 seconds)
    (315/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.143753502 seconds)
    (316/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.141812714 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.211465462 seconds)
    (318/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.440900536 seconds)
    (319/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.516409479 seconds)
    (320/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.409023579 seconds)
    (321/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.198764265 seconds)
    (322/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.487882636 seconds)
    (323/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.168933761 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.414564697 seconds)
    (325/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.346457703 seconds)
    (326/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.180162491 seconds)
    (327/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.558690811 seconds)
    (328/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.268978826 seconds)
    (329/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.251325992 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.152588983 seconds)
    (331/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.707535722 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.169688912 seconds)
    (333/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 4.786916723 seconds)
    (334/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.447364002 seconds)
    (335/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.169079216 seconds)
    (336/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.162375206 seconds)
    (337/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.38394478 seconds)
    (338/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.706187922 seconds)
    (339/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.405873306 seconds)
    (340/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.960030641 seconds)
    (341/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.226547756 seconds)
  done (took 1235.425181052 seconds)
done (took 1237.771246702 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.183292278 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.173298957 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.75822512 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.168955563 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.143012958 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.138780647 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.714656086 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.178687907 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.173041624 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.721060741 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.171862361 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.145531535 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.148512988 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.161007689 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.162109162 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.165726703 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.16063736 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.161108396 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.158250151 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.161980988 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.237763488 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.189690888 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.150613395 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.190275899 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.152723599 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.153720889 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.185000897 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.220361321 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.204168488 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.15097537 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.156280819 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.520826558 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.198923468 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.142077453 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.139227999 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.128312343 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.137056949 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.133299611 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.158355138 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.136889244 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.138517793 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.152299563 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.122692498 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.123885033 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.122832165 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.102679555 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.133661515 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.233884511 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.130695065 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.543133151 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.192364197 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.142944992 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.17497647 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.127322907 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.110286022 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.11638275 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.194007088 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.112813543 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.127629063 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.549241102 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.254996183 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.139636982 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.511863761 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.190603124 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.139965019 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.11893228 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.083062107 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.096583509 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.445953322 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.653085776 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.075047163 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.068775793 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.065268327 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.052302873 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.062568052 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.5846415 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.048670596 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.710660052 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.060714919 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.04035211 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.030423003 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.036370657 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.034832025 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.036107988 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.072862227 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.031976681 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.032049831 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.040931211 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.025649881 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.422602493 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.199581997 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.726627136 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.160278109 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.154803002 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.136331644 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.790591613 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.139210083 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.152141671 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.147468584 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.530421503 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.164796818 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.162652154 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.151402928 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.138324402 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.204794562 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.128706773 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.141228261 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.144546829 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.165133235 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.13677159 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.112273998 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.122199978 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.161916232 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.105692683 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.064672172 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.029729247 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.010103733 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.017724649 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.016921433 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.008230889 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.004706675 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.004163004 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 1.998813002 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.045008262 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.016722922 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.006224807 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.093354159 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.002503514 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.092989854 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.006511687 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.004259688 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.997672626 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.402813188 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.055018972 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.021939267 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.00298602 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.023199606 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.022144094 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.007074516 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.018628605 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.018592139 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.001122044 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.046405479 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.038331037 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.064174105 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.058813037 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.011064709 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.005530877 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.018103993 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.016853251 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.023061602 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.004640424 seconds)
done (took 329.988748171 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.051639822 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.371775872 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.070897995 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.999081643 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.08031963 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.063625268 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.998567781 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.998449773 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.999395239 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.444135585 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.999421181 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.999372034 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.374564467 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.999462505 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.057845002 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.999748829 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.999144176 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.273710263 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.999477422 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.059572373 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.014706352 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.999560518 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.99966576 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.450433125 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.997389258 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.006392903 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.059934972 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.999832144 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.27827033 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.009435948 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.014996743 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.280051052 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.05991138 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.001611944 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.001314581 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.000874441 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.081183455 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.006443014 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.052317201 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.052880563 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.072262428 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.005482166 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.011109092 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.030225727 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.005940292 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.001087862 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.000485567 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.005937107 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.998678037 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.001678239 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.271356633 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.002208397 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.001695515 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.000816781 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.000953692 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.003709702 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.001503642 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.001212289 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.061143936 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.001182787 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.052911004 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.451278263 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.435691253 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.001200647 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.016576243 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.001223388 seconds)
  done (took 159.573016042 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.086146479 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.106770183 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.083744888 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.007910666 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.065458441 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.09196838 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.00982762 seconds)
  done (took 16.380528481 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.009089063 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.002133052 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.027932662 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.032875546 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.002763829 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.168653723 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.014342481 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.002909518 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.030980006 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.002354988 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.36016593 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.033875685 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.002895107 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.008679244 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.015271488 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.033263716 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.004270602 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.002220865 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.109548855 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.076989617 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.0026846 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.003442501 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.039842543 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.015711595 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.00320906 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.002826182 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.002693307 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.010941613 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.00272597 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.003024656 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.00279629 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.018623643 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.003229266 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.992115313 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.002719942 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.003788124 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.003254161 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.002849099 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.003562673 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.390271141 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.003546805 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.003622667 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.003811523 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.003388253 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.002983425 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.029335441 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.00399224 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.003917729 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.003637268 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.003827725 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.040993811 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.004853339 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.004217882 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.005194386 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.039654727 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.005274578 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.003841785 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.003944654 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.00546974 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.004649628 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.003929078 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.079970588 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.033156272 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.004483599 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.033395684 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.044956843 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.004873681 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.004524478 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.004648995 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.033142067 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.004470342 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.036132868 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.005401288 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.099315718 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.004051384 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.181723861 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.031094055 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.00821696 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.00933958 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.963242445 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.013808655 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.004583904 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.007545103 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.012580142 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.006017115 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.004767369 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.005519948 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.007259161 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.014225705 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.005309279 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.0564292 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.005721894 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.005065185 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.096399028 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.005895168 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.113970409 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.034271397 seconds)
  done (took 201.554522254 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.012091461 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.007735606 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.022851103 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.008403533 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.007488577 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.01332023 seconds)
  done (took 14.005613856 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.010503666 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.012454457 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.007003419 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.007186133 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.006892644 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.007185089 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.007227982 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.010048827 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.012109717 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.007820375 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.007248621 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.007178866 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.00735788 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.008022458 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.008478356 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.007397983 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.007467845 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.00747778 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.007470159 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.006965091 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.208358353 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.008322377 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.007727078 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.011134169 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.012979206 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.007755778 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.018319341 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.007885551 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.008302424 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.016668245 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.013048732 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.008041927 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.011433711 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.016377278 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.013362616 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.011814678 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.014045212 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.007906881 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.008675561 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.008398402 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.008210113 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.008825204 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.009012606 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.009168475 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.012572523 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.017510629 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.013537878 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.019243459 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.009592127 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.008990911 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.00918762 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.009717879 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.008999885 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.008834096 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.014825205 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.016526833 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.013796437 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.008991169 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.009401734 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.012920425 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.015230272 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.008716005 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.013246196 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.014888357 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.01119806 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.009490104 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.012657677 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.014603948 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.009860728 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.010041614 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.009803581 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.010648147 seconds)
  done (took 146.890815706 seconds)
done (took 540.327515653 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.034489002 seconds)
  done (took 8.971447395 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.067797829 seconds)
  done (took 9.141902941 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.324315171 seconds)
  done (took 14.273152796 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.042191721 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.043219676 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.01727755 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.018097022 seconds)
  done (took 30.082627357 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.207124054 seconds)
  done (took 9.148595767 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.028449072 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.012016035 seconds)
  done (took 16.071020069 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.089099332 seconds)
  done (took 9.036910184 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.297683199 seconds)
  done (took 9.248377944 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.036598201 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.02080824 seconds)
  done (took 16.032131431 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.012879042 seconds)
  done (took 8.950502817 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.457649417 seconds)
  done (took 10.481572413 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.020125857 seconds)
  done (took 8.992425856 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.067183762 seconds)
  done (took 9.006668958 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.726284144 seconds)
  done (took 9.664545399 seconds)
done (took 171.036335007 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.02569681 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.010533325 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.010643275 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.010822422 seconds)
  done (took 29.995344546 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.051243945 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.050994554 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.05389343 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.057830393 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.041273786 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.040773462 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.051758902 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.050999702 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.040794933 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.068771988 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.051438805 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.070537403 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.057775361 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.054176054 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.05427492 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.070113932 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.06032764 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.052648152 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.0410488 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.054517322 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.071397219 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.071442134 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.012358839 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.012585603 seconds)
  done (took 51.184656543 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.218500498 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.084022712 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.178758225 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.060691236 seconds)
  done (took 10.480669369 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.012153152 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.08696468 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.071314707 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.057894502 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.071502871 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.179144276 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.071853964 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.219629446 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.160146463 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.189887955 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.0169346 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.02944478 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.030394993 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.072571878 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.178846649 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.012406865 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.012308687 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.190702111 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.088017754 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.210297921 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.013530875 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.072189766 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.072264864 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.07260602 seconds)
  done (took 52.133231115 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.014341979 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.025722329 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.02525932 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.015182769 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.014808113 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.014073454 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.025281065 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.015289124 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.042756022 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.018053723 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.014097175 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.014743611 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.01470813 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.014943549 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.014593329 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.031933564 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.031451671 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.014963824 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.016709895 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.026474743 seconds)
  done (took 42.34621335 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.013204875 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.012112962 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.230163182 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.179121107 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.013137969 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.01481584 seconds)
  done (took 34.404255472 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.030847604 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.036423929 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.023408362 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.053787107 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.08411993 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.027995533 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.104380031 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.240383768 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.028752218 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.100805695 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.042778304 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.024824158 seconds)
  done (took 26.744410633 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.013659213 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.016852376 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.016243242 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.030266872 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.028324715 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.024947744 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.027524742 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.013014492 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.031013536 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.039661294 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.025429807 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.033050717 seconds)
  done (took 46.242761795 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.199211246 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.265043225 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340834085 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.659478769 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.514075866 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.078127093 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.422952736 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.525299536 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.066934131 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.111436144 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.504153233 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.04666477 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.520906936 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.966229156 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.015254782 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.328599671 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.017969306 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.970391714 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.437416551 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.086095316 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.020516421 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.016167811 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.017539238 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.534820439 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.323310896 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.024097792 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.167535137 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.041144513 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.016074222 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.267946025 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.016132574 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.051831235 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.172325986 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.311849881 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.526002946 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.101461169 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.096568967 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.974210343 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.072399663 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.053955978 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.030055744 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.033032474 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.540322552 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.030591238 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.260562457 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.018811936 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.021052038 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.602460244 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.970617791 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.165154882 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186218009 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.883657588 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.073335588 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.769243298 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151725479 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.329527422 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.024243874 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.969513504 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09293097 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.090372542 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.186779872 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.097803275 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.199359797 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.970920977 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.538898307 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199172299 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.019633003 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.025096922 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.279023895 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.334075467 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.107781019 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.161348332 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.754616838 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.019560725 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.021736472 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.906256886 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.134363415 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.019682711 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.745730228 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.526910289 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.972410173 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.119571822 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.550332309 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.026200595 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.01827462 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.030972902 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.865585442 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.969605699 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.102769448 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.078279216 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.334498233 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.019633185 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.020239282 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.04873885 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.021368452 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.973125493 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.610579395 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.097849563 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.970401589 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.57167908 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.019052292 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.985470674 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.020041976 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.039904991 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.412339394 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063660433 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.74753758 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.68647925 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.344504082 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.592958558 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.027215454 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.835091607 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.110304486 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.10120978 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.019905803 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.841316225 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.985458728 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.151771407 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.191822895 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.019630979 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.970608119 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.034243111 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.176558536 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.020629117 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057599894 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.026456066 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.030375485 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.021521251 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.027022167 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.276807849 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047723618 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.53626872 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.131143022 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.024244055 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.965188347 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.031436416 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.501243578 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.105739642 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.087196544 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.443092846 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.610971382 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.496754911 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.987565954 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.861327204 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.483134521 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.124565255 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.109027834 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.635179132 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.179995415 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.107593784 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.024522886 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.188727523 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.036221766 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.027850308 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.023320847 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.609991792 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.785998393 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.071965097 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.024414165 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.979291028 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.984020607 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.228719789 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.699784095 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.066313769 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.031735458 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.109443624 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274930293 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.024740898 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.976359461 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.381056695 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225610353 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.527102301 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.247276618 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.693727251 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.110643177 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.038229608 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.17598736 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.108261507 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.656698692 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.219887616 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.35667651 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.454933328 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.023030018 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.026092295 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.127247482 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422400303 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.049701227 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.789805965 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.025067842 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.48443995 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.062753544 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.47800503 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.976180146 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.033720664 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.481735313 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.028888638 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.569196751 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.111291562 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196611449 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.028103495 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.02748616 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.037442687 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.811396805 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.146230882 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.103834228 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.103186134 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.9797901 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.433074236 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.075468677 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.030071624 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.026907041 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.336947869 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.961495327 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.045258428 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.027433796 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.113849842 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.899144663 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.726884754 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.0323029 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.032301202 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.489028892 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.036751898 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.027038703 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.036193464 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.928591309 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.066130709 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.105100001 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.145646874 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.552210822 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.128630523 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.109618369 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.027686029 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.034530585 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.311725095 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.041463508 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.294537554 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.512539368 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.630426349 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.714740844 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.127575605 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.705032672 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.0503651 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.029465947 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.604952655 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.065697704 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.031185441 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.184429734 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.722643608 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.188383116 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.066592611 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.124761455 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.029246326 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.487520455 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.614930078 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.030151671 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.961238099 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.134170055 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.029678791 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.314600684 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.784665756 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.031396572 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.029150695 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.038724518 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.211989346 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.186717007 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.420249695 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.521744574 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.722048571 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.981944358 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.03784126 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.133607665 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.349458251 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.030104743 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.066713036 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.631531745 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.694589386 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.790967667 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.552595144 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.27912654 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.174199974 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.474700123 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.127531917 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.046365501 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.958860861 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.217255677 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.992228506 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161709665 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.980461541 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.086311944 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.331297895 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.056283828 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.489306987 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.064946443 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.541440282 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.432117663 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.10344259 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.164936959 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.06299128 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.031041325 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104906768 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.031668743 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.053295319 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.165507216 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.038193589 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.422508503 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.082603525 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.078062632 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.039528322 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.695627377 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.062319892 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.037060209 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.498177833 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.059540364 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161578116 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.116591693 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.851445165 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.088654836 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.047103835 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.512612549 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.60335829 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.490494903 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.117208414 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.607451872 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096520192 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.759673815 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.033116464 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.183442361 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.040755706 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.656461304 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089503374 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421804669 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.035883481 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.215499409 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344726067 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.126269504 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.040647486 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.987165843 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.611175354 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.092017573 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.512970225 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.037410496 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.783626454 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.538558824 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.029547095 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.579556522 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.013800653 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.036581868 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.463986061 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.710436292 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.756188343 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077206614 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.036922172 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.201940779 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.22066646 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.163944712 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.765119726 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.046369333 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.064363365 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.185191952 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162617962 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.976043722 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.56100134 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.785225032 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.309661963 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.05200541 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.19067354 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.194819563 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.177099855 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079849059 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.111793501 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.76209933 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.495938411 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.132652745 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.985962019 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035544804 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.715999236 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.194641308 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.119514109 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352508764 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.478478419 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.085605802 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.08088994 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.010550096 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.606918202 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.717734642 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.73086137 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.361196601 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.543141127 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.612073194 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.779684337 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.762720803 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.18713084 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154492014 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.430390208 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.951255291 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.420522628 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.35669537 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.044297395 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.987767643 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.19812912 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.047743869 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.104517738 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.671915122 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.318662901 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.136605223 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.851515636 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.628732437 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.012162569 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.067404395 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.068958577 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.062312062 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.059433631 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.037505513 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.562520675 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.424503817 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.055997277 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.993559823 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.788757142 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.98925285 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.18917095 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.040398398 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.085408939 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.859550258 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.149621837 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.196033424 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.556545265 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.091625737 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.085225507 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.988544652 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.111407414 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.01887073 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.711254082 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.799250619 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063804368 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.042154674 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.194683409 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.022654108 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.084810502 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.046168643 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34844032 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.718172589 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.502685129 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2022406 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392830574 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.31657474 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.786940749 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.135654456 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.267318448 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.990201977 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.06745914 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.020040815 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.089654162 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.115026942 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039528974 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.045129681 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.280295621 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.188517474 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.184686648 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.175860685 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.046759383 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.063093103 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.201213822 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.176379435 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.042730318 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.04813382 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.102919317 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.199867861 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.041615466 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.019728771 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.191921961 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121493301 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.422905692 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117634232 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.631965716 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.048707089 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.571935548 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.189970718 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.546492271 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.041335383 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.856081794 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.114363898 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.041146178 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.503280253 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.677953103 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.197476641 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.295560724 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.965576734 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.031587904 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.09411453 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.045743925 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.045260105 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.632759707 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.45172864 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.041448527 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.495380014 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.113407292 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.051491648 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.808295273 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.520454126 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.04211334 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.115395277 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.987000415 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.520903659 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.29662254 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.043635896 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177697928 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.047460376 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.995725011 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.04356262 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.057133337 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.549704818 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.046314265 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.553976229 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.212086785 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177831527 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.048159031 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.044039743 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.042826284 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.194879084 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.633648023 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067569952 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.305889011 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.200233958 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.048827326 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.568910921 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.734030902 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137410138 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.096970446 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.016885038 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.407521773 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.949487657 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.081515113 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.585541431 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.295258365 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.045867345 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2755942 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.293788818 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.044901912 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.226759849 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.122663882 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.300832575 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.180698943 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.589103801 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.14567177 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.014536538 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.193699168 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.046449463 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.576879236 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.491735281 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127957036 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.044733952 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.057739625 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.044444205 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.130071129 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.637647437 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219529726 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.212517673 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.981457561 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.559498494 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.047924606 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.998499356 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.045632927 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.072690162 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.049287612 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.997057616 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.845507223 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.870511226 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.257379754 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.366191832 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.995838712 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.203319522 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.035915277 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.999550936 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.523988664 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.045842549 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.401537457 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.997400538 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.050267648 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.000368128 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.173435051 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.249178909 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.367995326 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.046155374 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.00268962 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.054563293 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.046648627 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.046393792 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.136773263 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.048157368 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.29087285 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.490172823 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.309978156 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.203809018 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.903305048 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.844457446 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.014933195 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.091116236 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.046049884 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.597257995 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.164035231 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.233313348 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.836146517 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.024674882 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.578511847 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073004842 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.753828218 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.05364476 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.051030596 seconds)
  done (took 2377.116780654 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.0812558 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.109454627 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.131854736 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.551638582 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.117886617 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.139978332 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.211046394 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.08119248 seconds)
  done (took 59.39779166 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.047944141 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.091494682 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.064745355 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.056341361 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.05001825 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.059447599 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.381735306 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.09252839 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.050015618 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.060652838 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.051814554 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.057541861 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.050034173 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.052805444 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.06019559 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.331204401 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.07763773 seconds)
  done (took 80.665357409 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.06941588 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.916459333 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.057915836 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.280910138 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.100347481 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.341256237 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.055138371 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.050114115 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.073014125 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.328082221 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.064712153 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.061785043 seconds)
  done (took 89.393840976 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.053279647 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.051764275 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.051800274 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.05150415 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.051606817 seconds)
  done (took 12.236489927 seconds)
done (took 2914.40754888 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.270679299 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.18270398 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.151409172 seconds)
  done (took 6.31075039 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.111139741 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.174135966 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.2420044 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.187765785 seconds)
  done (took 10.703928697 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.327756754 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.534219883 seconds)
  done (took 6.83850132 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.574339313 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.059096058 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.597862615 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.051601926 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.054773403 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.053171982 seconds)
  done (took 23.153710391 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.051948059 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.052374956 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.052277949 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.052749183 seconds)
  done (took 10.194362948 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.050138429 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.035840209 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.053207978 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.067361196 seconds)
  done (took 22.18365203 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.21113027 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.302433514 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.79663077 seconds)
  done (took 9.287505493 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.857396078 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.425703202 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.844239583 seconds)
  done (took 10.104245868 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.996354209 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.069008147 seconds)
  done (took 8.043150513 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.204289786 seconds)
  done (took 4.182220456 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.535231059 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.531175163 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.903050648 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.922483324 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.072060848 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.364250718 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.415560895 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.366501312 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.735731823 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.578145515 seconds)
  done (took 28.40298016 seconds)
done (took 155.881110404 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.997842298 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.458542065 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.229506853 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.727183114 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.150289153 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.236522309 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.120261294 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.49843637 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.337788439 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.33466436 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.100617029 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.149781794 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.11887664 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.449227899 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.117543008 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.398422944 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.460413815 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.97520881 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.55026967 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.065265314 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.129904715 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.320834539 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.780296649 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.324392395 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.466579311 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.186127286 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.133000594 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.404392106 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.813411907 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.136710184 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.191285609 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.346897478 seconds)
  done (took 182.690180846 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.055066368 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.058269998 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.058935304 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.058493481 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.990529534 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.059914309 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.059906903 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.05834393 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.76513528 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.76319357 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.058979529 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.005331831 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.060422831 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.058641253 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.058920775 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.059243509 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.974063041 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.060026641 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.059076055 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.058789343 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.062833837 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.726689417 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.060058077 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.726260507 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.97563596 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.060672095 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.060230148 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.05881163 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.060382016 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.059852472 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.05952248 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.059546948 seconds)
  done (took 218.344332813 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.056099974 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.060433232 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.061632078 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.059815774 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.0609458 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.060793258 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.060754479 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.060253938 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.060463553 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.061640312 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.062063031 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.061305335 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.059943411 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.060887394 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.059348743 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.061352124 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.060015164 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.060113538 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.062155789 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.060695285 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.063002421 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.060682889 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.062220231 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.06165891 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.06213197 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.060850878 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.061536976 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.060699443 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.060303156 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.061535593 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.062613354 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.062025471 seconds)
  done (took 227.94391205 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.356009035 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.058879144 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.059874694 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.829853689 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.06057595 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.059670779 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.828725573 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.35730198 seconds)
  done (took 22.604795358 seconds)
done (took 653.578794857 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.805508527 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.951120538 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.234315139 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.092256708 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.705223522 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.159557048 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.083707275 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.180894215 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.850162606 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.203521716 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.573808875 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.096025673 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.962871599 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.127872661 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.236724655 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.161171232 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.524783632 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.857086572 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.26163498 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.897675864 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.330005195 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.104757749 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.202314461 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.912175014 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.594417534 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.134482592 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.197079114 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.53013441 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.094511591 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.364813476 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.152151219 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.478463136 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.113249979 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.091867377 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.152920041 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.142383503 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.404879753 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.107881409 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.227277735 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.87379167 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.909536744 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.724436542 seconds)
  done (took 111.794971867 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.070086607 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.068282555 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.068213141 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.068114642 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.068967795 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.067785963 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.067744987 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.068033125 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.068186081 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.068000119 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.069219982 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.069032034 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.068875154 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.06951677 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.068876523 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.068153545 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.068341859 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.069228298 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.068581895 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.068890392 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.068508174 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.068312816 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.063416171 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.068854143 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.069462563 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.068512819 seconds)
  done (took 55.791772847 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.06343813 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.277801525 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.425353938 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.104370688 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.064501697 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.067276336 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.104771914 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.074760925 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.06686091 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.066481044 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.171331835 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.070832548 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.081010945 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.419660377 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.102237085 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.063652218 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.064136213 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.065414033 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.28726684 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.08657734 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.107352985 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.075273582 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.106476605 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.085884281 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.068341987 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.065683516 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.069175353 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.546738469 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.08002939 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.171905985 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.167932068 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.117204299 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.529944309 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.435618766 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.145226968 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.075597962 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.065598077 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.21896996 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.082796253 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.06748561 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.106396978 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.078019086 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.421749527 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.71148457 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.088617829 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.06510962 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.547945229 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.230436302 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.123153087 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.082895414 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.430272403 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.104673694 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.06597028 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.067325581 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.108633005 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.078106233 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.066349762 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.407070633 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.083723872 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.106794484 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.076788585 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.06753013 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.292498786 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.079911163 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.277414765 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.081337757 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.075136191 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.069081202 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.425677083 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.105751136 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.703254142 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.090227408 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.06606272 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.173553952 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.284798204 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.5829222 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.087498246 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.291945053 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.548564451 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.119829975 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.082089412 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.531593071 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.122465502 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.082050655 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.067862498 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.067786826 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.067466434 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.114350908 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.106462996 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.626063182 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.710450563 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.432039421 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.121803619 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.085018974 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.069384837 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.410284218 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.0802042 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.067849012 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.417905765 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.733409114 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.091815636 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.076767116 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.686177736 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.093329799 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.109870235 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.084100082 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.433219403 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.108061345 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.116699654 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.067621669 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.077129523 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.07249701 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.109988212 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.082930418 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.068519813 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.675832926 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.246110402 seconds)
  done (took 258.674804774 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.072768531 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.07196738 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.069830701 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.07132324 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.067952412 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.069989443 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.068084806 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.06721338 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.069583716 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.067645892 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.068089101 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.07069639 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.070994003 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.073381157 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.100707106 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.071463324 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.682640826 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.068351193 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.067730618 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.07204476 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.902762894 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.077013489 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.068069491 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.073903229 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.071017173 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.070438897 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.078216912 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.096232157 seconds)
  done (took 173.483992894 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.070946799 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.138731867 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.085531968 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.138784616 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.08470729 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.070540529 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.101170448 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.094787136 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.080149494 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.069997471 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.07066745 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.110503082 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.081867225 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.173112268 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.116547363 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.114141244 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.18104256 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.082540765 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.071420654 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.071205067 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.139746414 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.091416046 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.110581006 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.150949509 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.086465332 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.140062239 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.090797873 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.070877043 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.071494974 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.196880699 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.098267076 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.111197702 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.12144625 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.09959319 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.204637589 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.201909842 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.186283428 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.113719094 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.079589649 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.072007518 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.072422826 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.077082542 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.141035621 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.086825776 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.073773013 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.205360933 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.099429036 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.073013868 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.094812243 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.072386706 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.089866443 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.097656551 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.121305041 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.21159033 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.140046579 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.104085956 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.104613407 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.094068759 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.073608454 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.174939492 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.089540744 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.198151007 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.10105882 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.078675371 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.073940479 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.077123803 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.142718207 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.119137173 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.183941433 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.085965456 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.175608069 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.153623478 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.089125099 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.073621508 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.073612418 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.143385976 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.194356923 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.154819795 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.158451792 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.123016026 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.091440584 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.07409642 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.079725094 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.113058087 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.084648938 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.199341577 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.203852756 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.086008462 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.075269417 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.074213946 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.074577872 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.108941139 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.15640939 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.128683383 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.19632866 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.125366484 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.125690633 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.085574478 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.092208655 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.082987508 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.117695273 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.086009789 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.091721488 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.439825848 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.129223016 seconds)
  done (took 224.267187854 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.52900743 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.139118604 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.166825902 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.356051874 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.495130846 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.323344433 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.133015718 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.145680366 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.136772873 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.275977041 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.2023491 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.195275663 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.128796531 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.107063451 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.135090654 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.138318285 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.18040117 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.496063548 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.26598485 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.089837475 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.136779266 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.445531967 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.466244836 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.513979887 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.181506396 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.59064153 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.79656218 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.238247887 seconds)
  done (took 69.022881187 seconds)
done (took 895.017621004 seconds)
SAVING RESULT...
DONE!
