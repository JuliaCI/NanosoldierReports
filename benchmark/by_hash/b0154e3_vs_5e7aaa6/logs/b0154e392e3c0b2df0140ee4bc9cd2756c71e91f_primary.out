cset: moving following pidspec: 2070512
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.755192272 seconds)
loading group "shootout"... done (took 1.141920845 seconds)
loading group "string"... done (took 0.653766807 seconds)
loading group "linalg"... done (took 8.498482486 seconds)
loading group "parallel"... done (took 0.164762584 seconds)
loading group "find"... done (took 2.960827611 seconds)
loading group "tuple"... done (took 2.056283819 seconds)
loading group "union"... done (took 14.23265205 seconds)
loading group "dates"... done (took 1.418957913 seconds)
loading group "micro"... done (took 0.211089259 seconds)
loading group "simd"... done (took 4.629957439 seconds)
loading group "io"... done (took 1.373807044 seconds)
loading group "random"... done (took 9.530058617 seconds)
loading group "problem"... done (took 1.587001848 seconds)
loading group "array"... done (took 24.956077356 seconds)
loading group "misc"... done (took 1.814219767 seconds)
loading group "scalar"... done (took 42.216276962 seconds)
loading group "sort"... done (took 3.247444984 seconds)
loading group "sparse"... done (took 12.854232119 seconds)
loading group "collection"... done (took 17.864339007 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.439501774 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113361559 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.162812229 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109994451 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.230519192 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124489631 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128034047 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087495814 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.04486551 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.144805164 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.136459043 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.421029641 seconds)
done (took 5.576230293 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.304986739 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.240576578 seconds)
    (2/2) benchmarking "String"...
    done (took 0.162253165 seconds)
  done (took 1.566835446 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091644712 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057936115 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064781339 seconds)
  done (took 1.376335772 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063352282 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138944862 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064130666 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064309244 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064255006 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064027617 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063865803 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063805275 seconds)
  done (took 1.686973364 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071970055 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065438294 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063340836 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065113748 seconds)
  done (took 1.427238446 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065725651 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118382125 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062328259 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062276402 seconds)
  done (took 1.467437234 seconds)
done (took 9.071287591 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.158572821 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.758445489 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.849694018 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.145319069 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.311854227 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.341254906 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119282409 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.201694462 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112808997 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074680041 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.146494346 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079669548 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.480754285 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.474354775 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070682114 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.187478778 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.607175965 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.083919674 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112626102 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.187631123 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.081198616 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.082049505 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086894055 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071191205 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.114792552 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.176184551 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.6186529 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098482771 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.168888211 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.089303194 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069739429 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07399383 seconds)
  done (took 10.427681545 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.115087886 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.111053069 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066528931 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.101218629 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093121605 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067699144 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072764608 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066338255 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085442787 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.129057502 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.08947031 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.123243808 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065227433 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067418537 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097847995 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159429454 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082134275 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080353861 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066585622 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.07974861 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092460077 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07854501 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076612649 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07613763 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.110275191 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.131436276 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.085643435 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.109646412 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066435572 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078563318 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093716357 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.106335276 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066993367 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065727188 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.10854583 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083718107 seconds)
  done (took 4.443282403 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.024772629 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.093210934 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.105501904 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097101238 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.095405902 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104909583 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092877409 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.147121748 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120569619 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098655948 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067375382 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.175723152 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.679622902 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.080038994 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070710973 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.148852623 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.35829089 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.898569955 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072010079 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067380312 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.097379866 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069036277 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139105039 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065815954 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17584068 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.641783757 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.189306525 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071997177 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095955105 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063995103 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139068514 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092733368 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068156698 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.579291821 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065570663 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062919416 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.08355641 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091945395 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065052177 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066077499 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076583038 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064104211 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114807876 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080065463 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.546228637 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068670064 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.625672291 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.331042362 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072384319 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071011003 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101150357 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063670101 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070018863 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.626928889 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.149846282 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06642192 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.285780483 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06984499 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067434621 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06825702 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099223681 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066576671 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067677907 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07209264 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.08350727 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.010408103 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.151302163 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.085158346 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067653236 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.416657368 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076258019 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069237599 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070442422 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.096866851 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.135911385 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066970343 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066164245 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109964521 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093440451 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.227303499 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.06900104 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066001344 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.062631255 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064695054 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.555971818 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.957376664 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069185637 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066582139 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.503170045 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.066847561 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065159736 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066565036 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.086783992 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065587992 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062481188 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.0632789 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098864329 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067939833 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.592045086 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066576527 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.481845929 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069185536 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097094293 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122000707 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066713201 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.111832584 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.104870255 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.06672491 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06388942 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072429097 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064669848 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063602958 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068369004 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064877468 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065384078 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067716413 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067376402 seconds)
    (117/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063711181 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066381789 seconds)
  done (took 23.233802173 seconds)
done (took 40.292701852 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.406004955 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077404332 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076957933 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.0767974 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076672341 seconds)
  done (took 1.922368958 seconds)
done (took 3.238769016 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254144922 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076913667 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062704746 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.20380759 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087170624 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.177367729 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.217335625 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.169104773 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.211790624 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088663631 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088950997 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.221309114 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.232297826 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090276629 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161412551 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.232519181 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091160641 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064338432 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089176336 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.090543679 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.090674446 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064220544 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089221393 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090796943 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.161712082 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.08895855 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063343782 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.162882159 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091885069 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.167363039 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091736283 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090658905 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.09126818 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163436243 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092051354 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.16348873 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064261631 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.091637588 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.091915619 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.094569339 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093328205 seconds)
  done (took 6.361477553 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076990718 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079567113 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080715321 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060269212 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069077457 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079403712 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060250279 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078887841 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099988454 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079585722 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079397746 seconds)
  done (took 2.150520987 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070842864 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080234253 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081478748 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059771258 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070791047 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080282056 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06023048 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079724501 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082918159 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080412143 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080464553 seconds)
  done (took 2.068815591 seconds)
done (took 11.812476675 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190795966 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.08784405 seconds)
  done (took 1.503296059 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.257314915 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.499079284 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.261326706 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.121777494 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.101353098 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.117286466 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.229611334 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099704306 seconds)
  done (took 7.090185576 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.096329918 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067619091 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.094283087 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067549827 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066713169 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.06659175 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06573967 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06539213 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06549048 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.065985629 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066367374 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066597317 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067818872 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065936875 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.06784504 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065901778 seconds)
  done (took 2.483486863 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100656056 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067225432 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096249785 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060133017 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069990381 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060896326 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068704813 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070371296 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067905043 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.06818644 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069723843 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068175525 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069104252 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.06916541 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070045276 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070724546 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072645771 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069937146 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070974698 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072488219 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070856578 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071935364 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.072949104 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070303107 seconds)
  done (took 3.080803854 seconds)
done (took 15.401752936 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177565319 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072908312 seconds)
  done (took 1.487648332 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.09406984 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091964321 seconds)
  done (took 1.44399385 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073172281 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058632379 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075201751 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067586026 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059136368 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058938236 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074381158 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059172517 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059051927 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059247193 seconds)
  done (took 1.904716791 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063396961 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.065760555 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063447384 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062182652 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064134102 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060038567 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062313069 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060170836 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.065841219 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059089672 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062919751 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080898947 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06271698 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081251384 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062527786 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063201744 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064722927 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062942737 seconds)
  done (took 2.428221844 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061751831 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059392877 seconds)
  done (took 1.3859758 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064640452 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059333168 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061250178 seconds)
    (4/7) benchmarking "year"...
    done (took 0.061177931 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059475541 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058860814 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059454241 seconds)
  done (took 1.68197281 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.428598919 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192963261 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.426225463 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068108734 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.08183496 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267198238 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063127094 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067188557 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067543264 seconds)
  done (took 2.962340427 seconds)
done (took 14.563924419 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083864014 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180827531 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110622054 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.416371489 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077848226 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065586517 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093524248 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.210092444 seconds)
done (took 2.518731968 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.285702506 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.201689387 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.256498084 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146873184 seconds)
  done (took 2.871435759 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.419100702 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.166470601 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074824506 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.06531186 seconds)
  done (took 2.003038364 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065813469 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069595967 seconds)
  done (took 1.413725423 seconds)
done (took 7.855248387 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073736269 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059307213 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.09423125 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.061145399 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061322405 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.060940932 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060343753 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059577467 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061365861 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059348591 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.061490176 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.06133497 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061414803 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061169461 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061160892 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061305306 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061051555 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0608434 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06116356 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062142516 seconds)
    (21/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061397742 seconds)
    (22/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061890157 seconds)
    (23/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061283708 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.060204558 seconds)
  done (took 2.805938165 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.08004335 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063647497 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064188498 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063990349 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064679969 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064486285 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064518671 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063520223 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064577409 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063375148 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06483566 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064927557 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063378891 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065065299 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063590241 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06507883 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06476211 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063655554 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063460892 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06507965 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064587816 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063756649 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06555206 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065496003 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065862238 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065753168 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064314788 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06454119 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065344935 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065611556 seconds)
  done (took 3.241233218 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06738583 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057950872 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.05806833 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067921384 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057695919 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058050904 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058673828 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057793935 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058158444 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059157165 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058766679 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057913989 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.05856895 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057858554 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057980025 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058548933 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063133239 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078514303 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058432499 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.05803335 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062751952 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058253259 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058051592 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058063273 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058458142 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058071534 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.05827468 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058884389 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058781464 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059449955 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058633484 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063215431 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064910126 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058678901 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068933876 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063925171 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058682457 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065415669 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059615462 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.05841924 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058382943 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058388154 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058624614 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058706724 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069087547 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058885227 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059922669 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062157915 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.05890837 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058632172 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058849402 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060466082 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064532103 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060088923 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058684125 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060077514 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058567419 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059511441 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058875813 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058603619 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058738954 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062704283 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060048287 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059491677 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080031967 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060308987 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069407763 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059004514 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059330274 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063078229 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059412708 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078173715 seconds)
  done (took 5.676782552 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07279464 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069017855 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.07696357 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067946172 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061780023 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059477249 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062244022 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059044257 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068085541 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062510173 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058930244 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062078955 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068123141 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062658622 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059942716 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06802935 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062413906 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061569335 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059015025 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062914768 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060465384 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062570187 seconds)
  done (took 2.717626485 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144721948 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064335847 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106243358 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068190362 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066733312 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067978147 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06465676 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064481207 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064573036 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064953506 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064971594 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064695307 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066501393 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065036901 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064989334 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064643428 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064581912 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065193709 seconds)
  done (took 2.588809041 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077619631 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063934583 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090435798 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063589415 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064144228 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063866248 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067551205 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067834012 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063689733 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064101769 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067828276 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063776684 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063744214 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064288235 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063736304 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064107515 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063967032 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064228658 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067723231 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068232497 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069143984 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068606402 seconds)
  done (took 2.767370941 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079210771 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063172877 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.079036816 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064445279 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058323421 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058588411 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065063423 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063590183 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064888165 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063139435 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063592676 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058620786 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065499288 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063912476 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065990629 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063692378 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063308728 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063589069 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063130679 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058669154 seconds)
  done (took 2.582310534 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.09834079 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060931145 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060644976 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065248951 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060885706 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060996625 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065606035 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060916939 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061020396 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084987807 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072623758 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060959447 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065705788 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063898862 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06098479 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065672581 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065628115 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065909417 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061644137 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061536671 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085439616 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061855679 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06670063 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06172308 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06169894 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061941576 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062030447 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065054007 seconds)
  done (took 3.144251618 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06597397 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061762969 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061832738 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061640362 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061577572 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061451743 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061734617 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064745324 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061572308 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061863793 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061606032 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061691999 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061556621 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061485035 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061739865 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061698653 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06166445 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061952696 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061851673 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061934953 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061636265 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061952756 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06194003 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06209891 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062237983 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061778659 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062223679 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062586963 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06209392 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062506407 seconds)
  done (took 3.165699017 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073731283 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069068219 seconds)
  done (took 1.442650524 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06260629 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075461276 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057604454 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070427598 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066380909 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062137784 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067006916 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066808315 seconds)
  done (took 1.821063907 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.093015793 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.115112086 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061278611 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060656903 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.090348832 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127548678 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.100407453 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072194782 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074135658 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062877286 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060225479 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.100318752 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059543359 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.0735316 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061070592 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069350769 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067869057 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078501891 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073444316 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058462625 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073238923 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06095364 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059775345 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061247124 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060976613 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067791661 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076769115 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073334812 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06929871 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058328825 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079535113 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059151804 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060289478 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069345695 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092358984 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059584054 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097709517 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059751603 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06415072 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058944499 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072042659 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08080551 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07422266 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078048913 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060948964 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061071504 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058836207 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061112147 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063466036 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069020703 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058981592 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067320241 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058512103 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060680938 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07052961 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059706396 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064386069 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069245789 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073689642 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070411302 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072334998 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075597704 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068732068 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067998382 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060068819 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079728273 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060950209 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073093045 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074667339 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060590387 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07312627 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.05898952 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058576073 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059417009 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094364516 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061280779 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060909035 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.05988441 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.05962905 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061151203 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070297428 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066647639 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068936813 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064669609 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077840774 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070886033 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061007796 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069298026 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080296863 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065035937 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06130908 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078904275 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065009272 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060734271 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080254979 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071872974 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063189028 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062255373 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065452837 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076345651 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063371523 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060907557 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071478844 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064210501 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.246101831 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063715435 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067950768 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059001411 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069815421 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064061682 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059990986 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057434581 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063417722 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059221662 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057300834 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068296815 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.05855189 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073217263 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06552411 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073388739 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073822018 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069479452 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074789256 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058676513 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.06002009 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076695363 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.0684129 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059699063 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076661703 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057880707 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069312013 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057861274 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059658053 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068079971 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057411913 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059901903 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058366808 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063913539 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059445984 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059922959 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064634012 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067528067 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070801599 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059368744 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067828212 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058853418 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074854711 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069202509 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064030419 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062529366 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.05990379 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071813371 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06677629 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069499836 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059184985 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060357108 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059809749 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070752186 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069734439 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061339602 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.06779134 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064588787 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060155754 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059747275 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060589629 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063645199 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062760071 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060107175 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06780504 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068759138 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074055451 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066690756 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069067024 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058606937 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058993903 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061087971 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.05901734 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064346297 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069188055 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075553796 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.07163972 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081372435 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059616628 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069774472 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060946776 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076918657 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073400577 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060587941 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064221685 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058667841 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061119664 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069650235 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071879806 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074380986 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076590022 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066064954 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066018376 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060662077 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076920883 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061584656 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07021488 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071139797 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06745131 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061218613 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062893111 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070909168 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066091268 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061922475 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077847835 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069377832 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060804945 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076279697 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061768123 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073232688 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061632239 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066123914 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067770378 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.221481485 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070104061 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075033144 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057894589 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059394459 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074829592 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060300493 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059902568 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067200179 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074211521 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063606249 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066874627 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069541734 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.06913379 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063533689 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068682491 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059190483 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068091129 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061098844 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070395813 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058283384 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076707593 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057335971 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074111127 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058866093 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069973096 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059213082 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068514267 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059364393 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075792845 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059933796 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059075074 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070437251 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057362029 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068000692 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057915804 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064016317 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065506718 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068060595 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059953529 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068360683 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060019717 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068036206 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063622697 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067183805 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068596206 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064035147 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058770503 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.06812485 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070633149 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067948796 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060592154 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060707402 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059878629 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069472962 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061022184 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060787728 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068351813 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064700426 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065942052 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061053837 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061301901 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061068526 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06856686 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069590655 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081076402 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068696602 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067466404 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069363063 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058996055 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075645799 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059618516 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067566531 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058315753 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.06634629 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069182901 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059691256 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07933709 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061060664 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067919278 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072341272 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068573535 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063747405 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078062973 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062627626 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068425622 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068201805 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06472869 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066866121 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062103206 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069110046 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072919278 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.07240303 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061117836 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068332082 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070758054 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062908267 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071339136 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06298793 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070132626 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062989416 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060210629 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066169952 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073387604 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066502571 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066628878 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.0617187 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059886026 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06161441 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070130275 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06657484 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071262029 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078451961 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060896597 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063344076 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061814996 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.226778804 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078221175 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069108011 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067408479 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063991175 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057818906 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059900411 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060085863 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058776828 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061384943 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057557595 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057922795 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069438742 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060048195 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063322475 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.05872194 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059198567 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.06877607 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06246006 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058940777 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065452173 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058247749 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064147939 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057724289 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060018195 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063596191 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057946132 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063869761 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069850288 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075488655 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065664986 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067916826 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059498275 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067122178 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074465533 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065930586 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059521992 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068296415 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057713343 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07755732 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068215452 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067524601 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068667403 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059440441 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075563771 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063939396 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070385894 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075471126 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060517593 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067210485 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059144906 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075702889 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064563648 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058913446 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.06789127 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067833457 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065620528 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071894011 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060323079 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068323742 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064761436 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06351962 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061236402 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061100745 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069014899 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07609063 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060421492 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065093348 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068096821 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068369488 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064630194 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072177595 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068198036 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060816506 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061230536 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063692164 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060458971 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072184497 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060119936 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064556359 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064549719 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.0592378 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066953547 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076726071 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069456388 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069576383 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059231708 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058973422 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078224516 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064917095 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064680321 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.06910003 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070530189 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072903384 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070162864 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078692996 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064469381 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.070095116 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076214331 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064270579 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063121341 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067105437 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064289698 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072099437 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072893697 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070237324 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065102103 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.073272054 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077459721 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065090841 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.068853087 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.070056055 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064157831 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074182255 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.072048031 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072098238 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.221262617 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059249436 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063051705 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068187433 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066888332 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068068967 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059479551 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067026359 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074769757 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067633729 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062152641 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059556465 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062929785 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.069021202 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.064626681 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059349143 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064821779 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064427157 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06666488 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070015841 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065353114 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05920019 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.07683335 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067933465 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068943636 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.061018699 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061498011 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061041977 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.05995308 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072516574 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060581539 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063802205 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06889842 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065474579 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.083669695 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07426062 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079029801 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061524928 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066901432 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061016064 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072164231 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066443817 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061187094 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072103797 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060059417 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077997657 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.076992937 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.070080333 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.06210584 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067217936 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071111374 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078395658 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072047438 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070904073 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06541016 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072783293 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064745036 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073798912 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061850955 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061363757 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.074201744 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071812273 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075945827 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061824656 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073365821 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064543359 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071649345 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.072012079 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.065076045 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063849393 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064675769 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074808497 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.068867179 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.075154844 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.068476201 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081310869 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063954699 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075306358 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073634132 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075922821 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077036698 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075902396 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071417657 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064398842 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072147409 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.07184814 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063570849 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.069556147 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066123443 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085453325 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063566297 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064176344 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078467767 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070682338 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062729787 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.072243538 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.069690763 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.075768985 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.065167858 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074519867 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.070081032 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.065934738 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.070602679 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.070160933 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.064628136 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.064586123 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.065254442 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076218011 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.069833861 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.066078488 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088972527 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.067310558 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.075464964 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.238171886 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070553104 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065562503 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062801448 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06552987 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.079174133 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.08102697 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066415879 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07104274 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063612291 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072633873 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062047415 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072042402 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071639565 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072726868 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062085847 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063256837 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077418811 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076316785 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064756594 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.075891921 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069193285 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06087247 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08163636 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069982797 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061682232 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071092494 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06185173 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059387296 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060250163 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06166268 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071735589 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059560782 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062140938 seconds)
  done (took 42.21670991 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.103781689 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060592625 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061856169 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059032081 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067041577 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060728518 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060621437 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061482261 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060824645 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061849287 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059185265 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059085648 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066669847 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076313073 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068621564 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064139526 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059547067 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060476906 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059324246 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060862772 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067359434 seconds)
  done (took 2.778949065 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067228706 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067821748 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066616465 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066725949 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066473821 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.064605141 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068192848 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065610334 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069278061 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065341601 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065528489 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060158295 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060152373 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060715467 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060807425 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063089782 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066442484 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067420445 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063929515 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068324952 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066337175 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067265591 seconds)
  done (took 2.906264219 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063282598 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059381043 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067842608 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057989975 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057856241 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061544062 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058206178 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064398293 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064288688 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066584646 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071069994 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062207514 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.06139164 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067315928 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060224796 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061007051 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104768907 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.05993893 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059639873 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058286263 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061317715 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068266607 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058274878 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058751238 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063722261 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061916805 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058666182 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061525249 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059508089 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063684095 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059962841 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058461802 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068426607 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067807286 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063821409 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063659864 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060602636 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059751464 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058607361 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058667081 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067691368 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060306345 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059626632 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060319446 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068359174 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058784836 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.0584961 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068665716 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.05994747 seconds)
  done (took 4.517258639 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.075107073 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111458749 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066041464 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091838994 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071186293 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064934483 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065400111 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09448368 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061695365 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061745392 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072439976 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072408922 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062202046 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064112839 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065697637 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06223876 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06329482 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061582699 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064357895 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061549243 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064410048 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066584914 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071579401 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072519037 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065121145 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062452849 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062261285 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064526096 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074728888 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068685124 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068604078 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067206993 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075898903 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068850043 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063855531 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063646996 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076143574 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064419518 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06422957 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062606614 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064427777 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065282382 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06757171 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073820967 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063462015 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06851412 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06404092 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062089671 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.075955065 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064946592 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06875793 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.076593184 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066191238 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.068007306 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06617236 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.075533353 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065451794 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063963103 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064389479 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074067848 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061578395 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064574409 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.073222327 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061816503 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065305106 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073316725 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067354081 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063472101 seconds)
  done (took 6.208070067 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071482568 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093694374 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073328358 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073342186 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069100147 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070332701 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071616408 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069565814 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069901385 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072180537 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069213131 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132639173 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066647058 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070827814 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069385259 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069400376 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069858942 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070213864 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069858641 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069698397 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069828751 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074262276 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069741199 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074449421 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074122233 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066389348 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070515659 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071100741 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07622186 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071395569 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07718098 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.072002133 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072221797 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075160035 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074678969 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070280071 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061608397 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070338529 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071521996 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070390706 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066728637 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075947837 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070076272 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066871389 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070185979 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069928989 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075347684 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076048665 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072454594 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073259271 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070300016 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075292373 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071723423 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072442774 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077193377 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079686404 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.078009088 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077478381 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071661181 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077701438 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076935276 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078943306 seconds)
  done (took 5.984024963 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075762073 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064332293 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077185839 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058570658 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058542036 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068062498 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059574342 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058616787 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064541732 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064626298 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067413501 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070207227 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073276045 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067814589 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068608607 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070024436 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068172042 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.0694864 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065803301 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069102082 seconds)
  done (took 2.779964241 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.064819812 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06566884 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.061127986 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.075673659 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059643164 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067837269 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.060369922 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060250081 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059863643 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059638465 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063917138 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06390119 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059296084 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067719476 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064827996 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067819684 seconds)
  done (took 2.47087892 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064976115 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067544202 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.095320903 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061320091 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06291814 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060741363 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062111959 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061976805 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063246584 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07373825 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060436166 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062057232 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060152737 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059729119 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060652163 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062557132 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061998308 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060868457 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061272635 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.095651247 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069625058 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064348965 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064942462 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062933023 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065620563 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071775622 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064510505 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064197074 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061293309 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062818397 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062261033 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071156804 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062734026 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064509249 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.05957465 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060098195 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060576933 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063487439 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062937307 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060692393 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059371919 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062176049 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06038156 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060842373 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061646523 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062573867 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062007783 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070906737 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060837394 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062716106 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060940878 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062352045 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061443144 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.07360549 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063557074 seconds)
  done (took 4.958827673 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079664721 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064345764 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058340639 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058356228 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06363141 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064725574 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064305903 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06421827 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064794942 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058759733 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064576089 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063757004 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064810709 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064243701 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064721471 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064333247 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059035092 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065433887 seconds)
  done (took 2.5816782 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069224798 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064795102 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065110486 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060806081 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062583395 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066608209 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060125197 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061352866 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060763285 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061381887 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061452601 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060895206 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060800617 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061604762 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065057033 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061245014 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060633586 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059405033 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06095878 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060039902 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067084949 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062455881 seconds)
  done (took 2.798878428 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118868593 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.083456399 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.160017782 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079031332 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08909896 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070487074 seconds)
  done (took 2.034907582 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096258981 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.097922492 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065361826 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065394731 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069420181 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068238867 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067926725 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068013114 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070939334 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073376329 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069065194 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071784917 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071198058 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075204234 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070448278 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069083167 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067678349 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068465706 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066294948 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077375249 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068960763 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071784585 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068347023 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069739999 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06950106 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073922687 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071903705 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075038239 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069108122 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071184194 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070552693 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070439623 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073273561 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074405565 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065732569 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071752304 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068476242 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076734335 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070739271 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074137911 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066636771 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073622953 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072557126 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071238968 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072459134 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070368813 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074085842 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069536873 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069419308 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080793047 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071171967 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075208635 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070655683 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071997189 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071377203 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079542088 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074054903 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072952013 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070170822 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076168803 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076215997 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071767107 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074038037 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075993104 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072961044 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078918649 seconds)
  done (took 6.218806828 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105898914 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065086266 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070135806 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072722433 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072046428 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068082968 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067578614 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06800188 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06794321 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065321367 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103370199 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068016825 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072319083 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072415831 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067642334 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067440015 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067610742 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073042605 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065651618 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079553517 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06899151 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076577021 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075683821 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074560995 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075219211 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071320944 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069611667 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069087074 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06896959 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069098341 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072170823 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069973707 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074551865 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066990185 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075150482 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071584636 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071958771 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072164436 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072848699 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07416586 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078581174 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07857044 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070392588 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069689458 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074712674 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068720846 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068144078 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065451592 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068096467 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065624875 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074186172 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074348358 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074273187 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073185957 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068252357 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068259861 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068190858 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068611944 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068565846 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070089295 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073511403 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068278535 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080388486 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068437407 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068539962 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075946734 seconds)
  done (took 6.217440049 seconds)
done (took 127.898344855 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.259244986 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.224354353 seconds)
  done (took 1.899803896 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075150946 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.270282436 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076062004 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072538819 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132470392 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132048852 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.107232178 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070633546 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072583146 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070036062 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.170325212 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107842577 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070443772 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07022336 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070046215 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070169633 seconds)
  done (took 3.071777682 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121781559 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.232019036 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080289468 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068193113 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151545423 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076507771 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071567861 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074973459 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076180609 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069296231 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.384615989 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084303439 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073962704 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.075125445 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071295913 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073504651 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074807838 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075925069 seconds)
  done (took 3.365793318 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104410295 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.112225533 seconds)
  done (took 1.646364379 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160774385 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.108804104 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147352794 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.355079005 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.141667464 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.143162028 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.146921727 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.145761455 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.119187095 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.140229419 seconds)
  done (took 3.035746426 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107019205 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.103067224 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306012926 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101107333 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080281515 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075185186 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072869298 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078029126 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072965302 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074490522 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120454976 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073584957 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070615178 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122850821 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097961099 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104902686 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069499708 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07707452 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078554712 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069424526 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07406964 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078451984 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177741013 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07742496 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100758332 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073739862 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075410054 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072626873 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072610226 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076437918 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077206884 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100368045 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077787273 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08338672 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075005187 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096733529 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070481624 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09935315 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073257725 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071179365 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073635742 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077498382 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070939782 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079603078 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073938625 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076204008 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079250273 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069687756 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07402931 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073330645 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071496608 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075035164 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074763714 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07582202 seconds)
  done (took 6.150352392 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123547921 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109984108 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068100163 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.1156241 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10926292 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068497353 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124246113 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104514314 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122571705 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067997705 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068007859 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067297513 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074875043 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078918683 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120308937 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113812204 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070547551 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068622769 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112710847 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113391931 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06735056 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124792033 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115721089 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112387648 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067321323 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068559445 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067051597 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067633788 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075828097 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075539293 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067625132 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078967785 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080414925 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075191453 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067206134 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06739078 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067174495 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075933939 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077187601 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077234186 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074205085 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066799517 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.0671582 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067591874 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068086444 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068548661 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078923996 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076962743 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078152512 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069065646 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068475191 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067844168 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070199453 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076356767 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074340413 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075816127 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078545951 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068473736 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067701554 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069017918 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078973061 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076192926 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075910744 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068925861 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077370489 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068068996 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078394881 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080641217 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067688529 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068277975 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068526154 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068392197 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068327576 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074934522 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074939155 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068740715 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069016818 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068279372 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079048542 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077531354 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069328909 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079222028 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068859266 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069341905 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069736067 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070598755 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080985075 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078504912 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070570519 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07116807 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070718181 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070707973 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069682181 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.23229506 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075284402 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074755963 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075967469 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067370416 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076221246 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074825859 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067165004 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073096298 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066627547 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066974588 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066911377 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073053927 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072770201 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074444702 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066620055 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066427494 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07452587 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076506851 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067028559 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072844001 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075482813 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073237709 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066270498 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076280211 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066735815 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075786071 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066784816 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075028866 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066902106 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073318198 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066654578 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065949593 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066574174 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075885009 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067688246 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066394021 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066812089 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066375872 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073254886 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077095804 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067462662 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074352811 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074435454 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067853298 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076695719 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067661541 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076777792 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067658566 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067705365 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066762029 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07900243 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067711855 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06860584 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070463793 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077112355 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067712083 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076879242 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074280509 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067217182 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077765803 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076946604 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074361031 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077325259 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068601406 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067930775 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067747555 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067821431 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077148698 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078553394 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069209284 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068020496 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074333695 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077750337 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067836952 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075758819 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074784998 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075118914 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068441019 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068332914 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078542589 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.0803629 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077160622 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080519033 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078258993 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069678375 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076818418 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080336675 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069474381 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083543592 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070069889 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081486397 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.082291921 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078118068 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.237281606 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.078114475 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076178652 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07621105 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077436466 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06682749 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066677419 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07303601 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066567622 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066821181 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072629434 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067012485 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068618758 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079721247 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067073949 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075605648 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066370425 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073441131 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06611167 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066916153 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077937807 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06652967 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066933183 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073703995 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066590897 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072736502 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07575289 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072899894 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066400606 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067451989 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07645561 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076174672 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066642396 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066619904 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067358194 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07523769 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074671272 seconds)
  done (took 18.536360173 seconds)
done (took 39.154846059 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170211722 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112466977 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224437033 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203221798 seconds)
  done (took 2.234816422 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101886146 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063470697 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106898035 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.116808513 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063743584 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.102791457 seconds)
  done (took 2.025195682 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202007793 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175941107 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250711995 seconds)
  done (took 2.095591789 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.368373801 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150946787 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.258620211 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.517640739 seconds)
  done (took 2.866146128 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.13627473 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132711278 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075788873 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.145997143 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082749192 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060514806 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.144903993 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067819438 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097637404 seconds)
  done (took 2.474116873 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141130346 seconds)
done (took 13.303934853 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.102354333 seconds)
    (2/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.361543793 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.322401496 seconds)
    (4/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.309585854 seconds)
    (5/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.080360069 seconds)
    (6/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.144597116 seconds)
    (7/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.243547596 seconds)
    (8/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.128310093 seconds)
    (9/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.122814356 seconds)
    (10/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.258233948 seconds)
    (11/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069497521 seconds)
    (12/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.251744706 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.124334927 seconds)
    (14/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.330962931 seconds)
    (15/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.280738113 seconds)
    (16/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.072525918 seconds)
    (17/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.265073728 seconds)
    (18/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070001122 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076173215 seconds)
    (20/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.188224754 seconds)
    (21/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.278081437 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.155916596 seconds)
    (23/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.14914676 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074942368 seconds)
    (25/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.13343844 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075304273 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.193838544 seconds)
    (28/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077282445 seconds)
    (29/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073233093 seconds)
    (30/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.076312542 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066897894 seconds)
    (32/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.098464818 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.195978804 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.155335823 seconds)
    (35/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.233941793 seconds)
    (36/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.098378077 seconds)
    (37/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.198775435 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.077084642 seconds)
    (39/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.114308482 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.129247388 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.149651781 seconds)
    (42/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.258853813 seconds)
    (43/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.078895268 seconds)
    (44/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.346161868 seconds)
    (45/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.076592242 seconds)
    (46/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067633282 seconds)
    (47/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.164861034 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.088272036 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07347964 seconds)
    (50/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066453803 seconds)
    (51/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.220864721 seconds)
    (52/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.103969649 seconds)
    (53/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.20366155 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.10501332 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089829484 seconds)
    (56/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.086228545 seconds)
    (57/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.154542637 seconds)
    (58/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.07585841 seconds)
    (59/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.254408671 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08129123 seconds)
    (61/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.076709056 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.095310952 seconds)
    (63/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.085047968 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.149499829 seconds)
    (65/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.271363947 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.087944835 seconds)
    (67/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07508489 seconds)
    (68/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.086164939 seconds)
    (69/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.142506162 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.127819784 seconds)
    (71/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071343655 seconds)
    (72/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.07510395 seconds)
    (73/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.206944069 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.157253368 seconds)
    (75/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.203402112 seconds)
    (76/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069940963 seconds)
    (77/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068019434 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.217145447 seconds)
    (79/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.07533406 seconds)
    (80/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067995789 seconds)
    (81/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.207476881 seconds)
    (82/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.168544542 seconds)
    (83/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.189422513 seconds)
    (84/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070088902 seconds)
    (85/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.068098499 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.091755693 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.076057546 seconds)
    (88/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.141035204 seconds)
    (89/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.099005765 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075576582 seconds)
    (91/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.206544278 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.101259282 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075818596 seconds)
    (94/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.11030254 seconds)
    (95/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.216114524 seconds)
    (96/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068553987 seconds)
    (97/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067451511 seconds)
    (98/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.201839241 seconds)
    (99/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079205804 seconds)
    (100/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.068005544 seconds)
    (101/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.217415106 seconds)
    (102/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.084413011 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.094285648 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.127205958 seconds)
    (105/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.067098875 seconds)
    (106/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.07020752 seconds)
    (107/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.068619239 seconds)
    (108/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.177032973 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.114680298 seconds)
    (110/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.076298549 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.252984743 seconds)
    (112/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.164876822 seconds)
    (113/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.096384524 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.091944059 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.083452856 seconds)
    (116/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083085352 seconds)
    (117/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.219095969 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.067385697 seconds)
    (119/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072694593 seconds)
    (120/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.181903205 seconds)
    (121/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075439578 seconds)
    (122/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145756448 seconds)
    (123/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.07499731 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.094245884 seconds)
    (125/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067400265 seconds)
    (126/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.087020883 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088948578 seconds)
    (128/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.080308988 seconds)
    (129/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.153904068 seconds)
    (130/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.092783837 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067977164 seconds)
    (132/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.214909114 seconds)
    (133/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.068215577 seconds)
    (134/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073609254 seconds)
    (135/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.067278614 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.090036824 seconds)
    (137/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070604669 seconds)
    (138/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.068216439 seconds)
    (139/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067447123 seconds)
    (140/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077954634 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088308553 seconds)
    (142/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.07287187 seconds)
    (143/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.238128678 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067980371 seconds)
    (145/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.083783041 seconds)
    (146/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077431254 seconds)
    (147/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.089555473 seconds)
    (148/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072770712 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067628385 seconds)
    (150/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096318327 seconds)
    (151/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.218936472 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.41821105 seconds)
    (153/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.155168592 seconds)
    (154/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.072136611 seconds)
    (155/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072410753 seconds)
    (156/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067464603 seconds)
    (157/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071009303 seconds)
    (158/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076926343 seconds)
    (159/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.181102207 seconds)
    (160/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.074149258 seconds)
    (161/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.069196738 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066402788 seconds)
    (163/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06920495 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07642505 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 0.150771135 seconds)
    (166/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066960129 seconds)
    (167/341) benchmarking ("sort", Int8, false)...
    done (took 0.151758349 seconds)
    (168/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067894599 seconds)
    (169/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.200811913 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.116595189 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066574446 seconds)
    (172/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080736153 seconds)
    (173/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066356668 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072767155 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075451818 seconds)
    (176/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071180558 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 0.06699581 seconds)
    (178/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066065913 seconds)
    (179/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065759935 seconds)
    (180/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065048105 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.193779975 seconds)
    (182/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.193154392 seconds)
    (183/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153673778 seconds)
    (184/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069335541 seconds)
    (185/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.084366702 seconds)
    (186/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065065941 seconds)
    (187/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084822441 seconds)
    (188/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.068602767 seconds)
    (189/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066191648 seconds)
    (190/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074953992 seconds)
    (191/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074049407 seconds)
    (192/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069731777 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074503849 seconds)
    (194/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073207741 seconds)
    (195/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.082225281 seconds)
    (196/341) benchmarking ("sort", Float64, false)...
    done (took 0.138074283 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.070424876 seconds)
    (198/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.183310296 seconds)
    (199/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.152532896 seconds)
    (200/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06889197 seconds)
    (201/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.190575275 seconds)
    (202/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148997687 seconds)
    (203/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074719287 seconds)
    (204/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.175318069 seconds)
    (205/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.141507621 seconds)
    (206/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065691205 seconds)
    (207/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066276382 seconds)
    (208/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069407699 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.157608112 seconds)
    (210/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153911352 seconds)
    (211/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.074149606 seconds)
    (212/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074464241 seconds)
    (213/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068086655 seconds)
    (214/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.065385556 seconds)
    (215/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071099739 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065198067 seconds)
    (217/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.141513488 seconds)
    (218/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073259437 seconds)
    (219/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066145171 seconds)
    (220/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.065500526 seconds)
    (221/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.213190653 seconds)
    (222/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073862885 seconds)
    (223/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.182963514 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085586028 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.202166747 seconds)
    (226/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067779907 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.072565883 seconds)
    (228/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.231797996 seconds)
    (229/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.074110945 seconds)
    (230/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070883195 seconds)
    (231/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074321344 seconds)
    (232/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153537938 seconds)
    (233/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068783442 seconds)
    (234/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071220686 seconds)
    (235/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072273976 seconds)
    (236/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.220052328 seconds)
    (237/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074509167 seconds)
    (238/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065591974 seconds)
    (239/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068051036 seconds)
    (240/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.069541338 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067898847 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066118437 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065297447 seconds)
    (244/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.066717255 seconds)
    (245/341) benchmarking ("sort", Float32, false)...
    done (took 0.139420401 seconds)
    (246/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072827825 seconds)
    (247/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067306262 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066276617 seconds)
    (249/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065896091 seconds)
    (250/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065574048 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093203131 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066660027 seconds)
    (253/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065581563 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077445321 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.260095309 seconds)
    (256/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079229715 seconds)
    (257/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074703589 seconds)
    (258/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065817517 seconds)
    (259/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.069308548 seconds)
    (260/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065141824 seconds)
    (261/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065025526 seconds)
    (262/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071223017 seconds)
    (263/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065266134 seconds)
    (264/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076039186 seconds)
    (265/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064236919 seconds)
    (266/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064807517 seconds)
    (267/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064037862 seconds)
    (268/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071032139 seconds)
    (269/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069057276 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091764565 seconds)
    (271/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066482755 seconds)
    (272/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071088815 seconds)
    (273/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06435684 seconds)
    (274/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.068927902 seconds)
    (275/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.06469735 seconds)
    (276/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064328663 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.063922434 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084223822 seconds)
    (279/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064749646 seconds)
    (280/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.085128307 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130257555 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092701726 seconds)
    (283/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066295275 seconds)
    (284/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065352956 seconds)
    (285/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.173140153 seconds)
    (286/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07072485 seconds)
    (287/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063972498 seconds)
    (288/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065709516 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.071175482 seconds)
    (290/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065760767 seconds)
    (291/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.228997723 seconds)
    (292/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.07280315 seconds)
    (293/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.070198779 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072609974 seconds)
    (295/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065043824 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092728031 seconds)
    (297/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071512143 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.160986583 seconds)
    (299/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067143931 seconds)
    (300/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.138746361 seconds)
    (301/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268869812 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.186694289 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.164053626 seconds)
    (304/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065542683 seconds)
    (305/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087877537 seconds)
    (306/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065098893 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.06444336 seconds)
    (308/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072683243 seconds)
    (309/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064963704 seconds)
    (310/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.176244384 seconds)
    (311/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065960678 seconds)
    (312/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065202724 seconds)
    (313/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065427808 seconds)
    (314/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065085423 seconds)
    (315/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065069769 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130864866 seconds)
    (317/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067384963 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064799168 seconds)
    (319/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085939064 seconds)
    (320/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066547475 seconds)
    (321/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076931927 seconds)
    (322/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065830339 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077093478 seconds)
    (324/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065813228 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.185346704 seconds)
    (326/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070411928 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.208441753 seconds)
    (328/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066121746 seconds)
    (329/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065290461 seconds)
    (330/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.067096902 seconds)
    (331/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.0648677 seconds)
    (332/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065043823 seconds)
    (333/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069847674 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065997351 seconds)
    (335/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.065373668 seconds)
    (336/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064560159 seconds)
    (337/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065339605 seconds)
    (338/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.144921002 seconds)
    (339/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067637558 seconds)
    (340/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.065918134 seconds)
    (341/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065656745 seconds)
  done (took 39.445491373 seconds)
done (took 40.935559881 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.127239389 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079075131 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076557671 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073096956 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.07685492 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077017142 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.07898405 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07740116 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080172915 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076225918 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.108020655 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064231671 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.0719409 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081080701 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07299025 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079449324 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079155614 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079059913 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065134546 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079477362 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089948291 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077388515 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073286941 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079194998 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064978465 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073021946 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12078934 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084615636 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.06950613 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074243584 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.0720911 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080663498 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072100411 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07168625 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074160831 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069837103 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074513152 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070796325 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.121265127 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069906398 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065057081 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077106925 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071364968 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072462461 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073402747 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076661169 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069733577 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080150086 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064111498 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07561501 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.121596122 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070505675 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069398595 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072954328 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069691675 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074108669 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069348195 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075990832 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.06958364 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076164301 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074182878 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072436018 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064690174 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073307028 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071682041 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071840125 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063207444 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069994661 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064475395 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064443318 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063757955 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073094697 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071429248 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069975543 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064048549 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064836318 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064470707 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076773077 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072041987 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073935833 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065103879 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070216865 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069884333 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065210204 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070367278 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076298764 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064205878 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06509848 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063899555 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079681699 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071474461 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064723951 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076651355 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070385093 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070444899 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065032633 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065072953 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070396985 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072907458 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065109157 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06380085 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070642776 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069965105 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074033974 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065303643 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070520934 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070623803 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063970458 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073777964 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07215796 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.07412014 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077930523 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074449021 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078549528 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065751528 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063961026 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.229595033 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065355637 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069667661 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071471081 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068622842 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071488737 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064022794 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062616238 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06889762 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069095415 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063896383 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063957039 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063761582 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072384333 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070748897 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062653869 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064641507 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072643578 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072215581 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062807852 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.0627326 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073512062 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064074793 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069373572 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068641108 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072167676 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063337481 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063848557 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062672877 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063011395 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062718896 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.06872519 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069106619 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063950758 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072262284 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070772019 seconds)
done (took 12.868051728 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068235175 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10686611 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115704523 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109905106 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077632141 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065597095 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.06819974 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084411333 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067826334 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089941594 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089882236 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08606131 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.129244135 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063446311 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064702491 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065411436 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062887802 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076773793 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.114266944 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089279989 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107776584 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064860171 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081257066 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085220556 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078027516 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084108671 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066549919 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065889297 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067883712 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082367677 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090921831 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064737941 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066092992 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084047814 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081474721 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074627343 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06615447 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071901432 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065805804 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065238667 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067814301 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084715235 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072404939 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072685857 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066270982 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066093242 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065183365 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073140479 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079511827 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071363271 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07795378 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082226942 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066856888 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065253051 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063429124 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073116926 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065386054 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066436722 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065907636 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065136457 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065774484 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067796965 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070622291 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075438615 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.06980457 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072849124 seconds)
  done (took 6.648513473 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083759709 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092595181 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078457794 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078750896 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064069949 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064895705 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.06494 seconds)
  done (took 2.191203318 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068577239 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.105177603 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.112195332 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.112901461 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121910214 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.110670761 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066172009 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098125678 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06453191 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107168264 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.121105849 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.115044739 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068654156 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077606116 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06560801 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.115640873 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066321643 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072593691 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.111498598 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.116906997 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070162892 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096126626 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079318458 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.06629047 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.115598459 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.107762685 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068011 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066408797 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068325358 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065513379 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065310873 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088521171 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.107647352 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080501677 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066135783 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064692618 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.105618336 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066412525 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.104591938 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073363597 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.104539375 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067623779 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067824135 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065425337 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066524373 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.109472911 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066652676 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065429806 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064884453 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.108843148 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065071878 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.107742825 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.068020486 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070536305 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072685423 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071898429 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072815222 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065987645 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.110232487 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075853315 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06750479 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.119649313 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.119310491 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.107005411 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.120794716 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075426209 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.110746196 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.107390912 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066054897 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06584249 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066584793 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.12023785 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069624977 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068600456 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071086323 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073558196 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113244585 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124024727 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.124151995 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080563349 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069132699 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.225957079 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070841199 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.120039785 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069655621 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064499623 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065404107 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064051736 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069430516 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066338803 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069389732 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064504273 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074726618 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067303357 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066649116 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.112926053 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065578992 seconds)
  done (took 10.006761687 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069863528 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067095261 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065801525 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065694009 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065904133 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065572548 seconds)
  done (took 2.082345557 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092489843 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065839269 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077271117 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068508826 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087499193 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108608268 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107912397 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067406282 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.082078183 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077079655 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.109120943 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.110521012 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.110508129 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.06728931 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109128934 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067116791 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.109757488 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.06986602 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077232347 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067991204 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08141286 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070040229 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069213805 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.120250494 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069976655 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068009818 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067811355 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078408597 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080227173 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.077690658 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.068083925 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068804303 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075450687 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06778473 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.111777273 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075777605 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066906071 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071126944 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068351318 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068533223 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.113262157 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06828214 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070518196 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071100074 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067805393 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075493416 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.071122457 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070568189 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.11129943 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071411764 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071046811 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066945323 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068597373 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07102318 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075508525 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068831837 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071533605 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.112096549 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068069146 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075680999 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067041553 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.06898374 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068628424 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069587439 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07255683 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071551132 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076197532 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06930381 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068340264 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.06704762 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071920844 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067017646 seconds)
  done (took 7.294184336 seconds)
done (took 29.865415202 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.539818689 seconds)
  done (took 2.183175931 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.994057851 seconds)
  done (took 2.680321249 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.356987407 seconds)
  done (took 13.05602103 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.33796231 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.458323088 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.762851914 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13678569 seconds)
  done (took 3.40869891 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.854189406 seconds)
  done (took 2.550425123 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238310951 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225677988 seconds)
  done (took 2.170514094 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.458766392 seconds)
  done (took 2.149552 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.220094866 seconds)
  done (took 2.908826922 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235562139 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163160918 seconds)
  done (took 2.090706651 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.628580274 seconds)
  done (took 2.312758376 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.558446005 seconds)
  done (took 6.251739182 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.325185737 seconds)
  done (took 2.075301624 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240626951 seconds)
  done (took 1.938866869 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.651462675 seconds)
  done (took 4.343952364 seconds)
done (took 51.824275874 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086215564 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08384148 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083542389 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.07919775 seconds)
  done (took 2.004759906 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07547275 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068815349 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071136558 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071525312 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068896148 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070800225 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071478503 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067691884 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069238875 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068344927 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066598867 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068453069 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070788043 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.06791448 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070590022 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072002175 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.06834322 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068513245 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070267538 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067783965 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070949442 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068493491 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067466046 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068349782 seconds)
  done (took 3.357846503 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079156854 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070005399 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072956744 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068702726 seconds)
  done (took 1.990260984 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077420924 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.0742715 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083149366 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087633001 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073859326 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074753725 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081733096 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081924575 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063688516 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084706341 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06614923 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064977593 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064957963 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083465133 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080917599 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060385257 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061550372 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075011598 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074164759 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.07700922 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066320211 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063560513 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074212429 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074890904 seconds)
  done (took 3.466975242 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082632992 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06362164 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079598471 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.0884598 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089972916 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063759889 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077943618 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090150704 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126843513 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064077418 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072623978 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063701272 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103135169 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063964622 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.07921272 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108761388 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111743986 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068008865 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097311936 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065094592 seconds)
  done (took 3.367760629 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078495238 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068423933 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068110545 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063378592 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074327553 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070438212 seconds)
  done (took 2.137215645 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069285588 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066000753 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06519256 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070080149 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065827304 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065628496 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065208831 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06446622 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064319395 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065046538 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064967454 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.06539498 seconds)
  done (took 2.494147643 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.218035084 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071031994 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072009245 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064269277 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065816039 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065028444 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078786857 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.06687091 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087877497 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065176316 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065276819 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067417071 seconds)
  done (took 2.692037994 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105693584 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108732523 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141066653 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113433946 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112430591 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093746844 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.16366195 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092214665 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.15846172 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136180387 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115493483 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090187228 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085131083 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068271736 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09866752 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119841437 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137993179 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071437489 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113011441 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.206030553 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132334668 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134822381 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146514533 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115991238 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09164977 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146453312 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095836437 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101600693 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122311659 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127268666 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118120931 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097242742 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070861704 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069939708 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150679695 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.107325822 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120245419 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092622887 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106429058 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088793333 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109086393 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069418793 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083665128 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112839552 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086308796 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134278742 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093456902 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116837844 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08107348 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.303998314 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124712581 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134188391 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084866589 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103637413 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134894123 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110093743 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131703436 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103869273 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080376235 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116456761 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103155753 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09752842 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105904463 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07776506 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173964711 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086961627 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109538613 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109392189 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093421998 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09392599 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104474967 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134672395 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126823779 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126750716 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139847893 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092204329 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1201651 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101023281 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128787169 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104170612 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071937857 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122982466 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129624084 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099249943 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101704361 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133267682 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093077584 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075670084 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102053923 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.12036976 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080187514 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115267815 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081362451 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111351509 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140476446 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100082376 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112020019 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120100815 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.246705236 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15050333 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105956037 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071003072 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114102723 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109945644 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152811101 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094256753 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074980357 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098772677 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101185507 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151380127 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105623763 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077960134 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107154646 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137096517 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092018273 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.216428286 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093638123 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140678985 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108633659 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086265668 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07464469 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089499589 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113296917 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107678623 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111889607 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093976226 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083698783 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086169136 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11500797 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093536756 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08015128 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11376035 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098768966 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074230761 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08800235 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075526418 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141500059 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077899953 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138501884 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126031682 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077267189 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108427993 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096424454 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108149795 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099107584 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120528991 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144089009 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116450449 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09176766 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.096645493 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109922245 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.147530247 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.298877325 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091126561 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075155489 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098452991 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109613412 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095384455 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121395844 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092785995 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1057064 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101120891 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137824224 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14042214 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096464351 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098612121 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104710005 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119555587 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072980842 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15315164 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101484253 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116389807 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085472778 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138397917 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11038693 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087852465 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087023705 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098883838 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104277214 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107567766 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143867349 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095385151 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071732077 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092560975 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14451452 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076855633 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109579897 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090631753 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092267424 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119228492 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094940023 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080987537 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067581006 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128861121 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.160383287 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070049952 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114332298 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.111034067 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106272557 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.127840311 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070157443 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121715624 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14114898 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120080179 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.315672525 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164604743 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116216502 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116857056 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111862482 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104113817 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077907086 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123379815 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132815352 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094321207 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090166959 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133150504 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117543067 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134040963 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.1197972 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117446687 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.104469697 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10499697 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101610714 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.10315966 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143361104 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122519148 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125092968 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083269634 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106614487 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118569857 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137615835 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081973209 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142640306 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.085674842 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121452417 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078606429 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125077538 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077635575 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109020514 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079208025 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101193899 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069752349 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074235253 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145236226 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114978085 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109764626 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103080096 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141432952 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.14018787 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079945401 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109852473 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117071019 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103382532 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11989849 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.281745114 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088541652 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093709706 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105935084 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084028414 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079965905 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113538309 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092422912 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123246057 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083112379 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07359539 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137394751 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103000344 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093265471 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074933804 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105776751 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122261095 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091569281 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08537544 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116413151 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104021361 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139334649 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089983251 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096138892 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124117913 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078766529 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090930223 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068407703 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084758575 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075301401 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128478931 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075745665 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118171542 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068698935 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132802747 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088880843 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093075917 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102597712 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110562292 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128418101 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094560874 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14186191 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089876252 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121372938 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109064927 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095211368 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087840109 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104522604 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102027686 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.125466847 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097430163 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126015446 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147657599 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105842179 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14689531 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092897737 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126248332 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110071711 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.292560102 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110448542 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164944365 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136685149 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110380481 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108880489 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074066589 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094214268 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105606363 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111000799 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170925086 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123847339 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070944083 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102906227 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093377794 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107686002 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101829949 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080567654 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142085505 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100898456 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086819622 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110500131 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090126601 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103619436 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076534204 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100704346 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104899629 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095289685 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097233773 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114711447 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130052007 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113540524 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145217828 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.1008813 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091919091 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118873064 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110880505 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109788357 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085800639 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086389695 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14033253 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121936846 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129256572 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102383597 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110250512 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113214195 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102123617 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128786536 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110437963 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.130269228 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.248805867 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075540254 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067034439 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070603278 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12110057 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104701451 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110085583 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096740543 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070555062 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100958402 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100900205 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070135533 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085730057 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091587644 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096095138 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.090093505 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105006857 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111778009 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.090639482 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101776341 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095323629 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144159481 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099568877 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086218096 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140947944 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146578008 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086244365 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09107208 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070377168 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077943512 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111287976 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150216693 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152579717 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078214362 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086351364 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085772428 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086431382 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070875436 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087974266 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088008237 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105774793 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09812764 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113385216 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105770219 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074905288 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102210348 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099125498 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093313754 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108989007 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123062524 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129476022 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144738539 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116422997 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110053825 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076748218 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081072332 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076242893 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079920715 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102278599 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078999259 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.245607193 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140847968 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090002634 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102631071 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105413402 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085721561 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073581364 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133820302 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067667894 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131659648 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069514205 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079813951 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080065465 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076946925 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091168964 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134335665 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107346837 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110338895 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105786776 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101888062 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158088623 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154693174 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079350524 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139306191 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074656369 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075063615 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074515725 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109507039 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089367382 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113796645 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142712108 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090639303 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10172106 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077697723 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144309842 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098999911 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104306597 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085844495 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079084662 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144221112 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079274327 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.08136828 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089669021 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112579843 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072918343 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103366485 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083527362 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079510775 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167246954 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.71216718 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09271732 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07610822 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097131871 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.144252425 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136763771 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.267413781 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106815357 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116565557 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098724135 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092051581 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105233879 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188626391 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072681309 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092030367 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101518978 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095433394 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09978306 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096959846 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085821818 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090514994 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085345016 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077436306 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105361542 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086337485 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094459874 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105564761 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081646857 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.086266757 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128253149 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101644446 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080629503 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086019792 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103519329 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08633826 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101748312 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068685867 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110916594 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087885243 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118456363 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.09835592 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10764948 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125574961 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094212081 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137807193 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107602016 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122613828 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087307058 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078039983 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126822619 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090361234 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077585457 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147665373 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098306886 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091747029 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104942244 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097346529 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114793391 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119177137 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11476329 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098431811 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079427449 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103219888 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.27220852 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084659918 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077494179 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073213808 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075745404 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10534851 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084221128 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084792758 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110365468 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086997294 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100947713 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101508477 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121002796 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086576488 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099548249 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109295654 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089619068 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107468035 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099096673 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126118001 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171170976 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123361033 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127828601 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13238832 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076601691 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074335467 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.06746849 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113034694 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078716629 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089023513 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078366355 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135029808 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084523314 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113587981 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.244779178 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080909411 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094960473 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096833629 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069185326 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083233254 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107354785 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086723244 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079521322 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119338934 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08119289 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129307086 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112126645 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100343438 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096512897 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081350521 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115945062 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10562905 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132487799 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098951248 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075906669 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126710368 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105176583 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141799449 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074175272 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.251460739 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128556578 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101736612 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128621258 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078235584 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146394208 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13940536 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098414095 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13147043 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069559807 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086357846 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088155435 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124664735 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082502609 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108820656 seconds)
  done (took 68.357598134 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.182297793 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.179060567 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.120873491 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.133259473 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.290577019 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.300394029 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152839155 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124245242 seconds)
  done (took 3.32948785 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.073573898 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081723413 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.080222661 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.24772541 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.100586666 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067058069 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072090051 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080873364 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.06979098 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06622047 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103689078 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066423331 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069799822 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.540008783 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066075151 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071680082 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069663513 seconds)
  done (took 3.777461317 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.351961071 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.533215915 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.320278447 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.654835192 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166410092 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.724006713 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074840995 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081732092 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.80203386 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.402676501 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.16169366 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088807295 seconds)
  done (took 21.203484468 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077668854 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.119311877 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.118453599 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072999472 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072580876 seconds)
  done (took 2.291385562 seconds)
done (took 122.193476858 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085483748 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172551113 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067356713 seconds)
  done (took 2.107436211 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.121124981 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.118508785 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.117418213 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.118753921 seconds)
  done (took 2.319017043 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076285677 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075000535 seconds)
  done (took 1.996963421 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227318469 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.214156097 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090101659 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084357523 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078924779 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079397899 seconds)
  done (took 2.092774887 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.07280916 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069663315 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069615256 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069901584 seconds)
  done (took 2.114779286 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170670978 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065900763 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068056472 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069905422 seconds)
  done (took 2.214829893 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087004674 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085661799 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114833704 seconds)
  done (took 2.127375861 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084988454 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083307538 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077316327 seconds)
  done (took 2.085966617 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110713083 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094910898 seconds)
  done (took 2.040850377 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080829267 seconds)
  done (took 1.921623832 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092898012 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096585832 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183155727 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.148958624 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.185471826 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.171393172 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076115843 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076301611 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072032083 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071081793 seconds)
  done (took 3.012440554 seconds)
done (took 26.491409212 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08628095 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.193901673 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.441742914 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08654899 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.653657298 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.437270278 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.732344816 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091466827 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.0987371 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067442706 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08412605 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.632309466 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.734375594 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.147777785 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.717880423 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.136323576 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.56090273 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068732535 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067055826 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06741278 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.716834908 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067159112 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067326141 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067875106 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.559182075 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.454140946 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068769064 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.135189794 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06770503 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074076404 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.436806552 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068302587 seconds)
  done (took 14.705371131 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077063378 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.145072 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071778075 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082602283 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068976272 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068782258 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071078223 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067876669 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109454868 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067464283 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084670759 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066827294 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071893183 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068620273 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087847167 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067289989 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06944711 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067791266 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067290496 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067969304 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086267563 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067109738 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06784923 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067839956 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067600229 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081348775 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068549127 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067253103 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067305807 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071362198 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072404838 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06871518 seconds)
  done (took 4.262664122 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129332796 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129702285 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072765917 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107051215 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11596491 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070413524 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149607949 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089874121 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11331437 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068081045 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084779334 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067419777 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.1029594 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068716192 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087863852 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067337552 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069981594 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068005391 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067179086 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067979619 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086468598 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067243918 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06767145 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067940153 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067895987 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083288827 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068554182 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06740861 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067386754 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071509731 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073413407 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068868658 seconds)
  done (took 4.515205084 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071102116 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070638011 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075973861 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078715193 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06507537 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.0671066 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.06814578 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065241926 seconds)
  done (took 2.431569141 seconds)
done (took 27.771271507 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.08045192 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066182718 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068636953 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085615223 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072104829 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.109806237 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063462748 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073000835 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.06961099 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069923598 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071456134 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066123457 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068608847 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063315349 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070352026 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064336966 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112954511 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068740584 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.109967408 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.111572273 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06704704 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070020821 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072932511 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111696919 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.110707031 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.110775482 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073515277 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070571155 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06537043 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067663579 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.18489178 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.184978337 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074338773 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117555873 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065337152 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064941055 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069226719 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067765222 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.114528743 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07403125 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067290153 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073720757 seconds)
  done (took 5.369199165 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.19067876 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.194157496 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.188366574 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078979905 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.09145483 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078618703 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.193313497 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076363518 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074657937 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.192660721 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071831627 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07549564 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.077115008 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067831179 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074649391 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070813799 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.076166101 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068731109 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074333924 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07448455 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.192545823 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068268119 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079121751 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075909491 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.070012556 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075891673 seconds)
  done (took 4.535064438 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074338989 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087421456 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090975586 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145160115 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109203441 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081830951 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080898664 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092452083 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100300818 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066896314 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070893097 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097645245 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096026902 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073727469 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106251095 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084695896 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078733311 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068499158 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073439688 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100997072 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089453315 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085175806 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099460972 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086786068 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065896993 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075952379 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073682792 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082405375 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074053394 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079038118 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07065268 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070144206 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067265375 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078044973 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070754145 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064668346 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.08938636 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079858703 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081807774 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106894453 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077424928 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.0686294 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094288098 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132470237 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066808184 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.11939944 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07102361 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079921733 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068429278 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097692457 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082991193 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066913211 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085888559 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068481426 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068313965 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083035366 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068751791 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068820921 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078733626 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073209778 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087760764 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072445329 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088028489 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067000931 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078417927 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068552569 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068752389 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066004666 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101187244 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074625257 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117586818 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069164768 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065062919 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079633946 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078504045 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074227703 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066838305 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086395356 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079211666 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071020022 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078282638 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069874275 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070386713 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104231071 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06713054 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065157904 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064914883 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069006928 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070379034 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067835502 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080099014 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066784022 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070792212 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082426743 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067667266 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067973637 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069526353 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069246193 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067624931 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078227072 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071616347 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069563246 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080474211 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068624929 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070940327 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082864195 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076865824 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067268741 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068572987 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070047341 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069516142 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072331718 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.07115409 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069820537 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072585272 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07537823 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074258235 seconds)
  done (took 11.113162272 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.208422824 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.193865008 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068202843 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.192077791 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075801023 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.125085892 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.192665244 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.131470956 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067628934 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068527265 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066679406 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.139292688 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.133756105 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.145040961 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.11601098 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068082937 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.09394895 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.144703991 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.197556643 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.19271833 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093616028 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075502301 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070011844 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068987288 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068990348 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077008823 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083576669 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076556224 seconds)
  done (took 5.15992819 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075737662 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082578732 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070455178 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090986435 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083535012 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067014559 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069047466 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069229886 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08547359 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072998643 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067118972 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071601605 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070523199 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067846626 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067929333 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073307012 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073454985 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06581106 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07068747 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071407119 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078086648 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.155088977 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071692301 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.07026913 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069385902 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067259671 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073590868 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075256627 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06649796 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100244967 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063995003 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071120608 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081263737 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.06792151 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066942546 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067830334 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067235507 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067077313 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067542669 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065335653 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06516654 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073283353 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066033163 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072354496 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081949383 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076228543 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068728949 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069847095 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069761078 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064286476 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070511001 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070637029 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070200804 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076021709 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071056249 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069607255 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068886407 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09820786 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073269647 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066892621 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067147018 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.0655226 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069245001 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075377695 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084165522 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069039636 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065734832 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067263003 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074945698 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081853975 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066863746 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072938179 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064346205 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067432555 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069546084 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070266697 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068968623 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065497928 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067077905 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067462105 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068236296 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067296115 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067822837 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070148675 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064938322 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065478068 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068097859 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068708207 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072632699 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066132989 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069998499 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068901594 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066511701 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070482593 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073680559 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070737656 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088045224 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075713561 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068213582 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065547377 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082755541 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069457118 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066890917 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071268242 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072258025 seconds)
  done (took 9.504127991 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098825427 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068497514 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086893522 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098513628 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076997792 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071700983 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081093836 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067566831 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088465048 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065717982 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075618239 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064799579 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080509305 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077322152 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068414692 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077369798 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069150952 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087991834 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081769721 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065290925 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076086902 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079447043 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.07958735 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085270363 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.0848571 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085726902 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079212842 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069219805 seconds)
  done (took 4.126932563 seconds)
done (took 41.669091716 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.997523433 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.195892601 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.95034327 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.482740531 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.022884949 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.012322707 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.066707598 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.976710985 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.574460762 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.01008204 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.747348489 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.643407156 seconds)
done (took 69.638089733 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.007808627 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.089441608 seconds)
    (2/2) benchmarking "String"...
    done (took 2.164435313 seconds)
  done (took 6.215501924 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.375857528 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.938803851 seconds)
    (3/3) benchmarking "different"...
    done (took 1.97929412 seconds)
  done (took 8.164983213 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.207785305 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.781327913 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.218010067 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.937106176 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.952481269 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.436018021 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.085963506 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.57424985 seconds)
  done (took 33.870946052 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.957999342 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.225418515 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.315689113 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.390726112 seconds)
  done (took 21.846230482 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.381023103 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.330388322 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.337603215 seconds)
    (4/4) benchmarking "different"...
    done (took 2.397712874 seconds)
  done (took 11.415379397 seconds)
done (took 93.763841985 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.937492668 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.249238237 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.954300836 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.112246234 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.988270875 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.017894332 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.941225838 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.951103673 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.941884617 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.940639154 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.950772222 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.943553666 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.953366143 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.980403132 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.958200512 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.958793883 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.199501523 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.500288568 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.962519629 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.682647421 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.300530543 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.951601942 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.957088719 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.001854516 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.341477593 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.968814121 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.359494846 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.955792172 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.536844569 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.953096474 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.940659979 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.949794974 seconds)
  done (took 210.221098773 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.938423283 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.721527375 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.766454398 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.947455453 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.26820968 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.298512373 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.792060547 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.291256904 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.942587548 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.968723117 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.910257443 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.948926851 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.003586005 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.491084023 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.970257375 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.940825228 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.818632031 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.697546239 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.983675277 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.864392263 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.940716204 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.476101133 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.458856726 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.739151983 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.953157092 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.971062606 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.973829454 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.946030005 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.424693347 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.78445492 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.955355231 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.962242606 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.117838601 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.170135836 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.94167658 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.950310744 seconds)
  done (took 183.218209686 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.17440183 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.948617078 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.985396419 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.050701902 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.940966783 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.880548705 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.73504633 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.944299227 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.938110483 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.9389536 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.9471209 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.941455698 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.009691652 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.012026656 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.11702557 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.94369509 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.947632636 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.380249687 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.949201289 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.945511534 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.942008988 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.065331954 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.285597307 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.274889352 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.945366985 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.956067816 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.049460099 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.949597495 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.94431045 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.053121977 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.942670478 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.070569726 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.052942099 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.954507866 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.001757099 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.951740562 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.13746204 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.943338076 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.943654374 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.948753531 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.988980704 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.945278048 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.996416846 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.045564243 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.943773603 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.958627023 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.389135425 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.533608523 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.954988571 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.941594325 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.941032953 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.943350257 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.940654404 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.132516583 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.944369674 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.974486547 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.487984062 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.945226762 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.944371141 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.942308803 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.939724036 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.946892069 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.948539081 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.987116232 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.552388483 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.612337574 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.295899335 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.679333492 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.946460785 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.624269181 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.011460096 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.944130982 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.120106024 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.951880998 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.942818697 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.941886684 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.940344246 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.036550748 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.964487302 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.948990455 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.050265901 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.947786811 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.951522881 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.943049699 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.411570247 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.092398894 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.955324675 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.964982797 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.006275471 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.945996819 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.941626491 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.950981378 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.863258308 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.948985057 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.942109272 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.949668489 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.283055514 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.979752476 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.438999996 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.338265381 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.041186984 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.366225981 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.858461924 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.988411764 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.960897872 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.958365693 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.961033294 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.951971437 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.943147291 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.957689752 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.944277989 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.942980344 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.94612607 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.946806623 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.943130193 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.948626828 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.969596766 seconds)
    (117/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.949355248 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.947470436 seconds)
  done (took 427.53968552 seconds)
done (took 825.10799536 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.615269198 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.71439622 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.517030102 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.567673048 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.523542399 seconds)
  done (took 14.817891277 seconds)
done (took 16.697642851 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.971890834 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.971626007 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.952753846 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.970965716 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.968530548 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.96316875 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.977414461 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.982769476 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.980161392 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.96838337 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.978382013 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.967905103 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.976567425 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.980526395 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.996318482 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.976848392 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.969378527 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.958326436 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.974658306 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.967670591 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.967694811 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.974987071 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.975810791 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.974662512 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.98720326 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.970046785 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.96392218 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.972271401 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.972225159 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.977862626 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.985341048 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.979610066 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.980533605 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.985441088 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.98466981 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.980788955 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.975306456 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.982201409 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.970084764 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.984328059 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.976147438 seconds)
  done (took 82.859335379 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.956298742 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.118642552 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.231418654 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.995640709 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.95792677 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.263202355 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.022037256 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.11073653 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.113254366 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.231400955 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.236947328 seconds)
  done (took 25.124073623 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.954534689 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.134937419 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.232550316 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.997821766 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.966872591 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.238908899 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.027157124 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.11110127 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.119548615 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.250749599 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.274448961 seconds)
  done (took 25.211398645 seconds)
done (took 135.091473136 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.496579861 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.008730336 seconds)
  done (took 6.394788122 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.949498595 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.966129896 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.13145284 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.956027278 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.950974399 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.953627323 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.952782299 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.956440285 seconds)
  done (took 17.700554711 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.951185747 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.949247514 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.949313041 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.950545347 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.95414831 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.950365136 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.949200861 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.950150155 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.949767294 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.955586281 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.958046183 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.953324151 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.952028192 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.950206655 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.955098289 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.950517255 seconds)
  done (took 33.117085248 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.950714069 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.94940771 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.956766943 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.94968006 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.951910642 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.959589028 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.954278109 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.956276179 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.953579851 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.951712686 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.952161551 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.950154628 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.953761083 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.953953233 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.951396552 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.950881102 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.95489809 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.958669121 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.955880378 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.951015258 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.950943393 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.950734803 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.963459799 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.953220705 seconds)
  done (took 48.771940452 seconds)
done (took 107.8868615 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.541345074 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.95557928 seconds)
  done (took 9.38092373 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.955394858 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.951156176 seconds)
  done (took 5.890434339 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.951044602 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.952141603 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.952715978 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.952164932 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.957062972 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.9531226 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.960011421 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.95496225 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.952075613 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.953667348 seconds)
  done (took 21.430639044 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.952367745 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.954312394 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.95203693 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.953536439 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.954450201 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.952014642 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.95458811 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.959480628 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.955898202 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.959290936 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.952744943 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.954229344 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.95257879 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.953775079 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.954116667 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.952952081 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.954456611 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.952752354 seconds)
  done (took 37.066570295 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.962051862 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.953646522 seconds)
  done (took 5.80821512 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.960986831 seconds)
    (2/7) benchmarking "second"...
    done (took 1.955948601 seconds)
    (3/7) benchmarking "month"...
    done (took 1.963786221 seconds)
    (4/7) benchmarking "year"...
    done (took 1.954934891 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.952802838 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.954520063 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.953221738 seconds)
  done (took 15.584499083 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.960795129 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.100316578 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.141273518 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.410238216 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.963326298 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.958559771 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.570042972 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.957342815 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.9612176 seconds)
  done (took 20.915345377 seconds)
done (took 117.96090334 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.786614785 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.001603996 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.557670771 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.064354979 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.019455464 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.315913202 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.971633109 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.488921025 seconds)
done (took 45.097038839 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.071995398 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.95433892 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.995543892 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.998607414 seconds)
  done (took 22.845629069 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.96690914 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.609398664 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.994919546 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.014829309 seconds)
  done (took 23.561961257 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.462083113 seconds)
    (2/2) benchmarking "read"...
    done (took 2.475781908 seconds)
  done (took 6.84325909 seconds)
done (took 62.214829987 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.955253669 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.954777542 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.954634539 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.958116237 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.96937552 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.956109948 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.957151849 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.955186034 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.955180077 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.956670436 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.956487269 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.956525844 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.956451246 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.955591059 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958689133 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.964586506 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.957231173 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.95786615 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.955140702 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.957806357 seconds)
    (21/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.960934926 seconds)
    (22/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.963890113 seconds)
    (23/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.957172314 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.957794551 seconds)
  done (took 48.881878443 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.962155893 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.959266741 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.967964613 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.960645727 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.960399293 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.962495194 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.957381797 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.956986308 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.957785595 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.956747537 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.962447085 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.957568746 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.956821702 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.962229561 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.961956308 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.963872542 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.959565568 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958070985 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.95757734 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.957686592 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.959354732 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.956986783 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.957721447 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.957806542 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.958648844 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.973221271 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.959431914 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.958497179 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.959266179 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.957585773 seconds)
  done (took 60.691195999 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.960548781 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.960965211 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.957474402 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.957019066 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.959473895 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.962706276 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.964163776 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.95851671 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.958298373 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.959767217 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.96214957 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.961883013 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.958175699 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.957402734 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.95970031 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.962065617 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.958938132 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.968318877 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.962087111 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.959790791 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.963151325 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.958094134 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.959328443 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.958162038 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.959849554 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.962423626 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.960551013 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.958284775 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.962239577 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.964447736 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.967810032 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.958935739 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.960216279 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.963813825 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.960151504 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.963761311 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.959291635 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.96378533 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.969589582 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.959222049 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.967847837 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.966211429 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.959465628 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.959959554 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.960027336 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.964989057 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.959574417 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.960849798 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.959873463 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.959424475 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.962743636 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.962605736 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.966703791 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.962983147 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.959882392 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.9631933 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.965863879 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.960395437 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.962410609 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.960396538 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.962028966 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.962887312 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.960565392 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.964266635 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.968003023 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.962457742 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.967476931 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.961765973 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.961303706 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.961750199 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.963690782 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.964158982 seconds)
  done (took 143.143344134 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.961604429 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.960970251 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.968431884 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.967153227 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.961498872 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.961939866 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.962413448 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.961617488 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.968444938 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.962338755 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.963632513 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.962306382 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.964675267 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.969413376 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.968467688 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.96514957 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.964503128 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.96204672 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.967769317 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.962185606 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.9636853 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.962621245 seconds)
  done (took 45.109018572 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.966768447 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.962109754 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.965685555 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.971407086 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.964492085 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.967911959 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.966457759 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.962760532 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963759485 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.963121823 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.965237804 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965616596 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.963880138 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965294867 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.97063992 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.967892195 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.968003447 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.963951063 seconds)
  done (took 37.280799438 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.963820061 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.965715333 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.965565175 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.965061589 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.9666614 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.967129153 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.96822681 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.975755296 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.964307219 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.96717591 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.964318883 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.965603785 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.968241106 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.964360256 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.964543969 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.964738812 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.9650056 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.969325559 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.971327205 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.969450716 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.964960077 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.96734852 seconds)
  done (took 45.166655323 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.96770759 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.966686682 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.9659912 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.965239066 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.967580707 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.964878775 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.966877975 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.975390574 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.967650252 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.975206215 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.966490681 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.965638263 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.967778769 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.966479215 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.970152931 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.965809903 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.966448244 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.966269087 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.968542917 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.977379209 seconds)
  done (took 41.2676855 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.965336235 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.96533364 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.965835177 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.968660128 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.970001714 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.964951863 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.966208604 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.964831762 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.968035971 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.97497222 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.968666554 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.967958964 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.965295381 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.966965146 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.968530199 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.965847613 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.966947986 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.969572453 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.969026578 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.972366311 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.970071621 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.973871702 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.969241921 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.968605355 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.969940057 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.966403336 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.967333319 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.970968505 seconds)
  done (took 57.011425235 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.969709614 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.967360097 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.966882919 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.975159329 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.97133923 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.975472796 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.969311239 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.968819134 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.967904951 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.968850961 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.971014253 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.968528519 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.969018238 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.968570612 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.96999497 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.97810379 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.968608683 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.970949701 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.969667814 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.968066986 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.978155774 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.968939599 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.969166563 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.969844125 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.968870711 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.972607775 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.975227294 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.976367992 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.969022121 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.968472893 seconds)
  done (took 61.022167642 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.992012474 seconds)
    (2/2) benchmarking "in"...
    done (took 1.994380208 seconds)
  done (took 5.890255414 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.968932319 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.972514346 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.970623711 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.969458034 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.977348769 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.970193379 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.970083193 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.97300057 seconds)
  done (took 17.673526937 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.970476761 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.972768732 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.969934994 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.971164515 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.96831685 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.978176329 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.975891336 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.980320831 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.981012456 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.972002737 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.973311637 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.975150989 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.9803116 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.977674949 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.969861069 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.972256531 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.971225788 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.975465983 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.979105037 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.971535527 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.98030423 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.977718126 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.971706698 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.974973121 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.970740232 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.973038053 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.981197574 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.971007559 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.975697855 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.972513073 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.986129408 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.971591633 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.971392121 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.97744218 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.969701429 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.971371076 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.978424502 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.969654335 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.975985216 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.972802716 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.973954826 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982098513 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.977934888 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.985619831 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.972686163 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.971787421 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.971114248 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.970553809 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.977779586 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.976572153 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.98161231 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.971981791 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.973871844 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.984095839 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.97572901 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.971091429 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.972105087 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.973796653 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.982901868 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.979194125 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.978605028 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.996571852 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.983519946 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.973023891 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.979443218 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.98776804 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.002899632 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.973447254 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.976681138 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.977392345 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.981052705 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.974147928 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.972979835 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.973756864 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.991048603 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.984926935 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.979585935 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.974660013 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.975098455 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.976239446 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.974197139 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.97306468 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.97376388 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.974585569 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.986522591 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.004604048 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.973020169 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.980726492 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.981327367 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.979237349 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.978218632 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.977296053 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.974257235 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.975674824 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.978861868 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.976762775 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.975230263 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.975710705 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.979731653 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.997037696 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.974682587 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.974286176 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.979964477 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.983959179 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.978214789 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.973527127 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.976691279 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.976437652 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.98386935 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.976533336 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.981332674 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.978276465 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.976890427 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.979685047 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.97902373 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.979843892 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.984060608 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.982690324 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.976605466 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.985074894 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.979014233 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.981709672 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.995441624 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.007665627 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.981530491 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.978555543 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.982264788 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.99010983 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.978580634 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.98150362 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.978346913 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.975720379 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.977175318 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.985385228 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.982978282 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.976727476 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.976613979 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.975421209 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.975765191 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.98043087 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.978892084 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.977308391 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.978997721 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.975838051 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.988180125 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.984339281 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.978450683 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.984844367 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.976834023 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.982873003 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.975751448 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.980689851 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.978951178 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.977293579 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.98012729 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.977371618 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.984759864 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.982150886 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.982386054 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.982803186 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.978651842 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.979246346 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.983278572 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.976693563 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.978149433 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.978648978 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.976290576 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.980597112 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.985690682 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.98144794 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.984117085 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.977777304 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.982025989 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.978548449 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.980577253 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.979620651 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.977984142 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.977728638 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.983028764 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.999150477 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.985695079 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.99003857 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.980194547 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.985978366 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.979810054 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.9834399 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.978701095 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.980000017 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.98025796 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.981928238 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.985441579 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.989629947 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.005684436 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.991218421 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.981164791 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.984090453 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.985770684 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.983584626 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.984532992 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.980370425 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.981848517 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.980978143 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.984923047 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.981560626 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.982001372 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.987985397 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.980375073 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.978628391 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.982859197 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.980033989 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.981703948 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.98119353 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.981758511 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.983780176 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.986305482 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.986306814 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.980892267 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.980142232 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.987383155 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.983968804 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.98306587 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.979951596 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.981869603 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.981131005 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.98132143 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.98920779 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.985153116 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.983026864 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.982352706 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.987838433 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.989266661 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.982489396 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.981947371 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.981187425 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.983411891 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.98750943 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.989710992 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.998149315 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.984788357 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.982797903 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.993271736 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.981757067 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.986467916 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.981435174 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.983745602 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.984868304 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.026551491 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.997142971 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.99635672 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.008250319 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.97998106 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.981367597 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.98126617 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.984158254 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.982274499 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.982390542 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.980024712 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.984001482 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.990046153 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.986876728 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.982468041 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.984968151 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.982951157 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.983120219 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.985191382 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.981666344 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.996030828 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.992493201 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.981116828 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.993042578 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.017999121 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.021163178 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.981959606 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.980587233 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.988893135 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.982678882 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.983725418 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.986256552 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.980602815 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.980850542 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.988766808 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.982779245 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.984982056 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.982857892 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.982913128 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.982641411 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.981358369 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.98327951 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.981283418 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.983928263 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.98667898 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.982197872 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.982493611 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.983042775 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.99121544 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.982698718 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.983175656 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.989493834 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.983401875 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.983134451 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.983753837 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.982435765 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.983094009 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.983436978 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.983131085 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.985279438 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.982832066 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.987751943 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.99591116 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.987615584 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.992600484 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.984843009 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.994884529 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.982163343 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.983631105 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.982557371 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.988609186 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.99332863 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.983982994 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.983624626 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.992037387 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.986182875 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.984871944 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.987675652 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.983919476 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.983242341 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.983562047 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.986621808 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.990307485 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.98703524 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.983682856 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.98339299 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.984605041 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.984353219 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.987403772 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.98556894 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.98579319 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.985325409 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.984346979 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.983886738 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.983510956 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.984374344 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.984075512 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.984667022 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.984567856 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.992583139 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.985012383 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.987223984 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.98909849 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.985662295 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.994687778 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.98524253 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.984949751 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.987495856 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.9865594 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.988994529 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.985747841 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.984701148 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.987321751 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.985980551 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.98836992 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.998284894 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.992849789 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.990510102 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.987398477 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.985234584 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.986929152 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.998202271 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.016778392 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.985956815 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.98861103 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.991283886 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.993273005 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.988418485 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.992584573 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.991295727 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.996163173 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.987952538 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.986963084 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.990731042 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002415655 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.985655358 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.987779308 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.987399167 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.991950497 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.989686892 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.987310754 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.989185665 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.99024791 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.989864676 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.99987842 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.98726008 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.992240069 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.987000674 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.987339301 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.986971691 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.987939413 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.988393912 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.98862801 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.987671271 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.987304556 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.989599612 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.993824349 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.988412715 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.992785811 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.999837774 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.987766042 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.988044397 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.991112398 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.987919162 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.990602954 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.988015556 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.988849746 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.99213417 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.988962022 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.990454886 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.992341628 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.000230644 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.990023562 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.989082463 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.989775087 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.992618896 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.989176215 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.988489675 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.991278552 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.998374245 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.99435096 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.003979354 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.000773527 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.98924174 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.991785744 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.998866872 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.998857949 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.988236193 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.990014305 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.989459912 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.998324243 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.992773536 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.990220409 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.988598684 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.991232333 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.997302842 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.989974441 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.991712655 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.000385527 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.053706913 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.066873609 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.10595358 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.114001122 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.11628073 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.074837556 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.018233224 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.028350564 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.089368769 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.086647205 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.112389167 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.034279255 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.052444971 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.084514279 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.026205594 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.022621949 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033354222 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.07254473 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.045810566 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.001298849 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.996930471 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.998099968 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.99646357 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.001212248 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.012383594 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.994282858 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.020553058 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.06655901 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.009401015 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.050070828 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.024419403 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.031694575 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.009147581 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.020981791 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.007706978 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.016173532 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.027839101 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.017179187 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.023262447 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.004304026 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.000041297 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.995175339 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.996311095 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.998655948 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.998966909 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.006670538 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.000642121 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.000799496 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.006742764 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.002001322 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.005044557 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.998362874 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.994624374 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.999713138 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.99870552 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.998164465 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.996392302 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.99814418 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.998369161 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.001298682 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.99503969 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.00528989 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.025618565 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.04261003 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.040337459 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.035989643 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.01530832 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.998803401 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.002084943 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.001340103 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.000351749 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.013910556 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.00037468 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.004323219 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.999493549 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.997112909 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.999878711 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.005633069 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.01286035 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.007445996 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.003898377 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.003195608 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.022034373 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.002358008 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.016987404 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.064449635 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.999977658 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.999891256 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.009239464 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.001063724 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.004631064 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.012450966 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.997943098 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.013121502 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.999423428 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.997055687 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.006910721 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.99886709 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.999835462 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.003577862 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.004854491 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.004280966 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.998559087 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.020342193 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.004173433 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.997540498 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.001439182 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.001369809 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.003302992 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.019144709 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.003182861 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.008240997 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.000412581 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.000037475 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.007301259 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.996923322 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.999116917 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.017070973 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.014787547 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.039880766 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.036890575 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.011767977 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.019833931 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.038942518 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.022362864 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.005851855 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.010259369 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.013979357 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.012062778 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.000126627 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.000926451 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.999116579 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.999973899 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.006602092 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.018400069 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.013351817 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.001274576 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.002635913 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.012496712 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.998966513 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.006747812 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.004645757 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.001254149 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.008633215 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.001518401 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.008360976 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.000469256 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.002161336 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.017386291 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.020246804 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.009335484 seconds)
  done (took 1189.182252887 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.011213465 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.015271872 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.01237596 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.014428054 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.019965799 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.011358189 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.018933731 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.007845975 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.999992503 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.000269422 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.001956401 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.001656883 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.001253616 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.999803613 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.000529753 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.004450693 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.006800344 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.003768646 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.000220721 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.000151357 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.999765121 seconds)
  done (took 44.076414331 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.002161592 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.999844806 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.000321245 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.001137648 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.004523015 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.00944434 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.007403181 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.00129923 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.000602959 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.006102584 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.002488271 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001006804 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.0044934 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.001327781 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.006173257 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.002415546 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.009102676 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.004344084 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.001473254 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.004857917 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.001908476 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.000656417 seconds)
  done (took 46.00992462 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.000257974 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.004821279 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.005482826 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.001777318 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.004010049 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.008981316 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.006770275 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.00582212 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.001530588 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.003839788 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.010501931 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.014690187 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.00230125 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.006631356 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.003731634 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.003205515 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.133383235 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.004668298 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.00442562 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.003707564 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.006351874 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.010564144 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.006522476 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.003228535 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.003139283 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.005372026 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.0031139 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.012112684 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.006522935 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.006438543 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.010228977 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.003371564 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.005516304 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.006386727 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.004422623 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.007974975 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.007837026 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.004952661 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.006217282 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.008920283 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.019608591 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.034634211 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.00552646 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.004737954 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.012310393 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.007759285 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.004540092 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.010318309 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.013595547 seconds)
  done (took 100.407895396 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.017521294 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.005298622 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.009781452 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.003777138 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.004261153 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.009516393 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.005440243 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.006246368 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.003141579 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.005157554 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.00851023 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.010950513 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.00974534 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.003644712 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.003510183 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.009072493 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.003737424 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.005981194 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.004052641 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.003686423 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.006873258 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.005585871 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.008386588 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.012686837 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.007323609 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.011026244 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.005099049 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.005759313 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.004354458 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.005264419 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.007309874 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.005018756 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.006854447 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.006680762 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.010867492 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.009514936 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.005742342 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.006617565 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.005842525 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.005685924 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.006875761 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.005567923 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.005740295 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.005694611 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.00451319 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.012588617 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.009395851 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.008509541 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.005696094 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.0054353 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.008907194 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.007194314 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.00686365 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.008005895 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.011095216 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.016739222 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.009579827 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.019054764 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.00792173 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.009006699 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.01756218 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.007528941 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.013627035 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.007170139 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.008479794 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.01028697 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.007408041 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.01089742 seconds)
  done (took 138.472842679 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.00879784 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.010651782 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.008429945 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008590845 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.006843981 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.006674397 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.00981637 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.006772722 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.006566089 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.006436859 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.013145812 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.01384331 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.007621601 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.006855893 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.007627095 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.009102768 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.012775309 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.007919252 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.008288536 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008014285 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.010088745 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.011373275 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.017531142 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.007721833 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.009222435 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.007640318 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.010613753 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.007542359 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.008073088 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.007944344 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.010610787 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.009889394 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.010127919 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.014137888 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.010592436 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.011113108 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.012011548 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.008700884 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.007826359 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.007949303 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.010516571 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.009571384 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.008287796 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.007771114 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.014821623 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.015125562 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.017556149 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.009326037 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.009483279 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.009020741 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.01200527 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.012750452 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.011785783 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.009338541 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.010197368 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.013502529 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.020159235 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.009293441 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.009860405 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.009255049 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.012752808 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.01623174 seconds)
  done (took 126.581158006 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.010054999 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.009804651 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.011942148 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.015365337 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.016457086 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.013592842 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.009871146 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.011579139 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.014852356 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.010123657 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.011105718 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.012277969 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.017235777 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.024440881 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.013272346 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017856496 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.017073107 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.013587819 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.014037477 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.012247259 seconds)
  done (took 42.219343898 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.01298294 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.012398483 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.014058203 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.011642792 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.011889217 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.014060481 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.02144425 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.015909375 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.012791559 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.011262111 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.013959504 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.01339421 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.014198628 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.0120429 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.011841243 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.012809143 seconds)
  done (took 34.15947204 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.022863952 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.014570867 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.01357461 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.014088295 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.013413462 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.018075803 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.01320918 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.013461663 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.014863664 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.017060853 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.014728615 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.018702412 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.016701748 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.012564013 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.014770477 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.016375902 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.014481579 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.013116979 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.014467658 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.014144275 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.014751987 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.014253343 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.015474785 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.022256323 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.017593754 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.015614843 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.014235762 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.013924306 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.014585264 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.014825246 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.013906832 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.015566324 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.016259851 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.019532093 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.028644493 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.015373134 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.015843903 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.013902697 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.017601365 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.020899723 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.013697298 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.017492889 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.013565377 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.018481188 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.016998629 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.021408551 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.018413354 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.018318655 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.017337051 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.020579978 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.01521579 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.014592838 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.014754527 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.017741052 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.016696895 seconds)
  done (took 112.843043791 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.018859363 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.021677482 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.017140605 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.019099524 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.015186818 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.016575206 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.01617264 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.01708997 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.021681488 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.017820418 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.015332729 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.01748251 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.025478329 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.027210237 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.016232448 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.019676006 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.015884835 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.017988609 seconds)
  done (took 38.28283658 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.016105402 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.015597647 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.015452863 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.01828605 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.026923622 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.019501612 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.017563124 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.017485064 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016348795 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.019494765 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.016806739 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.017263251 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.015382074 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.019096184 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.019101781 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.020321294 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.025161694 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.01903815 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.018593827 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.02275445 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.017155371 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.017792554 seconds)
  done (took 46.362105859 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.022379391 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.020502707 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.038118956 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.047166335 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.051776575 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.06512349 seconds)
  done (took 14.19546823 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016667708 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017590145 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.016663109 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020014017 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019526603 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.018752113 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.019497148 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018892603 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025477032 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.02272331 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018925281 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.018435493 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018518205 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021020066 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022114165 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018584803 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.01867764 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.019951949 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020516532 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028837934 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024016442 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019312601 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01992014 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022249768 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023295531 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0202694 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021617063 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020405423 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020114752 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.020006138 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021801466 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.026497272 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02248261 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023855296 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019343702 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020910837 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.020098156 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026306809 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023876957 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020933238 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.0203131 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021505516 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030797227 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028004715 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.020964752 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020781265 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021274007 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023376136 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023242126 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021382786 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021562457 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021508446 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024074192 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030261822 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022191091 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023235097 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020533535 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022082456 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024538792 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023308937 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.020446909 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020505859 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02301904 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025028244 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024657477 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028606715 seconds)
  done (took 135.402625286 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02261077 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.025797199 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022647566 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021309003 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020827141 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02257684 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022696609 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021769213 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024179291 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030978049 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024075264 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.026968317 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023565114 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02150291 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023105858 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024564892 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024108165 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021775825 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021768613 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023469335 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035466384 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027927677 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021557086 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022991105 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02278227 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023453773 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023223538 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022803237 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022175682 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022495218 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022731641 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031473793 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025228726 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.023128818 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022272372 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023826651 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.025984401 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023012367 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022225221 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023555024 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024932514 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027676577 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026678331 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029535651 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02474007 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026225855 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026781517 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023635706 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023172955 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023810572 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025657434 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023926923 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023029034 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024894118 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03182477 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028354779 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023371581 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0272499 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02464366 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02357207 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028391913 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02371137 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027189656 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024441433 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025000431 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033250699 seconds)
  done (took 135.587610223 seconds)
done (took 2768.81087062 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.050176935 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.150236856 seconds)
  done (took 16.158495889 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.165934349 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.136821479 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.181300455 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.123243882 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.051050218 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.079524878 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.041584583 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.042958985 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.121771359 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.02857403 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.080390623 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.031224667 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.034342412 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.035013824 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.03340059 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.030979604 seconds)
  done (took 55.220832309 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.038082475 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.066203271 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.054545431 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.040869514 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.062602105 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.127571667 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.067126184 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.045593763 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.053002111 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.082519126 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.059230256 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.044357667 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.045328656 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.041776729 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.133267316 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.088978174 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.103433784 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.124740484 seconds)
  done (took 39.234131008 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.133983305 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.04902253 seconds)
  done (took 11.15737131 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.036345437 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.037812162 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.033533777 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.058833525 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.044540672 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.055069469 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.043782325 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.038969495 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.05068936 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.041905576 seconds)
  done (took 72.429481546 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.035054482 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.032662733 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.395270196 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.045911845 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.044320116 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.064730849 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.033522925 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.067886032 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.034684954 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.027127295 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.044567722 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.406496653 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.052947508 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.032014477 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.466154999 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.049417864 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.03702201 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.068229098 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.072409075 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.036583961 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.038517322 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.039689294 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.286416408 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.772784797 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.035208116 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.046650975 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.039565384 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.027137039 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.027859168 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.035106386 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.04150216 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.033369684 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.042137634 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.038363433 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.048909244 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.039404564 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.679073267 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.057266257 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.043023715 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.126253477 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.094386342 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.040245263 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.029550746 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.040003647 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.033392497 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.049889385 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.762970894 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.101925037 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.033971469 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.205967081 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.624426225 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.053484679 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.167102668 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.183428537 seconds)
  done (took 142.934606203 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.032249582 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.475402166 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.177739721 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.032515029 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.38714705 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.254411505 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.832196704 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.083154982 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.032942451 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.242193561 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.195575279 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.160135035 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.034624315 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.034958049 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.037629319 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.040818478 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.202200836 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.098339415 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.037601818 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.03225983 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.056518797 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.267969418 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.157910941 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.034066461 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.052762472 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.249776943 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.082790367 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.157347628 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.441952432 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.036039312 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.096011944 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.033452273 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.034602158 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.034545633 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.089578097 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.143797397 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.135754232 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.035151485 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.717789773 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.03801536 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.64115456 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.237494397 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.146504736 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.165662047 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.273736704 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.243270518 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.705187073 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.03527688 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.757931792 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.200000866 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.249047264 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.247858347 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.133940263 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.036008617 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.493653541 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.034169413 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.036065214 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.265503275 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.190756695 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.158138508 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.033761935 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.038185632 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.038236773 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.268549083 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.038301845 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.148406772 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.035854004 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.038347088 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.149123513 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.158681417 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.197895059 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.262726447 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.067235338 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.365878362 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.002691968 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.242991172 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.106608051 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.269572946 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.046662853 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.036385287 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.135155914 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.500254986 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.191924123 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.27426315 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.349070118 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075170993 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.554194814 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.036429011 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.253963876 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.183965254 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.248966632 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.285778312 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.095841611 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.894173396 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.038604609 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.034660573 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.25240726 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.164398751 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.037487381 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.572626311 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.27701325 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.63547102 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.055698976 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.483764578 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.146138101 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.038574503 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.640725661 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.035862304 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.248552198 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.09019393 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.038487693 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.040155965 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.190433238 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.746451757 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.038490602 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.084724823 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.099661091 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.043145752 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.196719804 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.044275965 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.287397582 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.776345698 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.275433041 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.038169425 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.072787473 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.208707348 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.287062347 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.043430652 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.366126768 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.279292356 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.133022912 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.255780659 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.548173168 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.041057275 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.312051047 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.039993167 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.043105717 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.209839905 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.005708128 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.203004035 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.040405807 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.285377307 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.060477053 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.092013999 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.046625168 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.285455369 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.074583566 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.093469565 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.04359728 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.172041069 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.040690632 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.103201071 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.20142456 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.046907284 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.041259269 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.891033192 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.042086669 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.195504529 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.26677582 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.052949361 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.108745963 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.427737885 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.038643258 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.146362774 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.067688917 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.458323459 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.579724683 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.199973959 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.733488509 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.309602593 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.04481731 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.272068724 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.2153223 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.043298368 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.04586044 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.792239906 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.477387387 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.041639921 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.20175363 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.654683576 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.402206317 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.250206507 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.046512958 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.095209706 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.042526666 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.286840211 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.577731987 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.317850604 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.043331111 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.040797346 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.041748341 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.048189098 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.240252653 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.073374912 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.673392993 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.181548387 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.304532868 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.260339705 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.356325878 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.101882252 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.044416046 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.352933727 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.043996637 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.10400819 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.053052199 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.057495317 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.279689533 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.042068577 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.260945824 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.390216058 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.129152302 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.090222166 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.042284118 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.043867528 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.008344143 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.20862199 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.151097816 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.043269013 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.180448979 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.089382753 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.168165945 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.236304624 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.315802661 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.005949838 seconds)
  done (took 924.535929457 seconds)
done (took 1263.626407405 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.041794488 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.048105572 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.043802945 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.043405699 seconds)
  done (took 30.148720744 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.048054914 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.042152631 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.04471592 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.047497929 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.041101849 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.04323127 seconds)
  done (took 14.255508494 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.041982142 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.052858192 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.0434475 seconds)
  done (took 23.1090678 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.432359219 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.332782379 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.131481409 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.208298228 seconds)
  done (took 11.086786584 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.05028175 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.044533262 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.040080656 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.04218398 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.040634815 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.041592259 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.050712549 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.040997432 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.04961026 seconds)
  done (took 20.383774362 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.561752059 seconds)
done (took 107.517351195 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.203924124 seconds)
    (2/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.549670175 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.479313739 seconds)
    (4/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.617254494 seconds)
    (5/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.055725055 seconds)
    (6/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.245961204 seconds)
    (7/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.18720131 seconds)
    (8/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.495542244 seconds)
    (9/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.047476107 seconds)
    (10/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 5.286895532 seconds)
    (11/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.110285908 seconds)
    (12/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.212445834 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.565019822 seconds)
    (14/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.070178229 seconds)
    (15/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.487904381 seconds)
    (16/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.212004125 seconds)
    (17/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.270843084 seconds)
    (18/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.211288456 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.060839444 seconds)
    (20/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.186314141 seconds)
    (21/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.370799304 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.497813711 seconds)
    (23/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.595319008 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.064063874 seconds)
    (25/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.311624096 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.07449665 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.042318797 seconds)
    (28/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.049560735 seconds)
    (29/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.866777464 seconds)
    (30/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 9.058090184 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.128319092 seconds)
    (32/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.921405316 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.120485764 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.05791281 seconds)
    (35/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.393799241 seconds)
    (36/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.181940384 seconds)
    (37/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 3.995267618 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.061158247 seconds)
    (39/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.048127027 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.444378263 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.180191677 seconds)
    (42/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.046154196 seconds)
    (43/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 3.268990461 seconds)
    (44/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.512248262 seconds)
    (45/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.195893761 seconds)
    (46/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.977407905 seconds)
    (47/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.313740563 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.10508049 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.352238897 seconds)
    (50/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.051394063 seconds)
    (51/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 8.696263652 seconds)
    (52/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.051730287 seconds)
    (53/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.572207128 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.478350546 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.352830231 seconds)
    (56/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.324520041 seconds)
    (57/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.082814646 seconds)
    (58/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.253893024 seconds)
    (59/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.134409302 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.481511194 seconds)
    (61/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.90972801 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.286753738 seconds)
    (63/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.112839025 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.207181632 seconds)
    (65/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.585122086 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.372196567 seconds)
    (67/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.194509613 seconds)
    (68/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.21026873 seconds)
    (69/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.189803928 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.178666065 seconds)
    (71/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.116542521 seconds)
    (72/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.374247369 seconds)
    (73/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.517962366 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.071455448 seconds)
    (75/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.194580954 seconds)
    (76/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.207636165 seconds)
    (77/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.3691074 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.475898969 seconds)
    (79/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.357633749 seconds)
    (80/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.054622377 seconds)
    (81/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.481207596 seconds)
    (82/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.053802178 seconds)
    (83/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.72990663 seconds)
    (84/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.85396184 seconds)
    (85/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.351245958 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.472603372 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.068375005 seconds)
    (88/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.165971559 seconds)
    (89/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.051913587 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.190606151 seconds)
    (91/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.455375202 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.19460061 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.239163844 seconds)
    (94/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.084472194 seconds)
    (95/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.386461842 seconds)
    (96/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.332806482 seconds)
    (97/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.913109389 seconds)
    (98/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.176414505 seconds)
    (99/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.057099662 seconds)
    (100/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.524295365 seconds)
    (101/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.632283063 seconds)
    (102/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.174134293 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.041775379 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.048938767 seconds)
    (105/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 4.797957328 seconds)
    (106/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.122171538 seconds)
    (107/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.044328885 seconds)
    (108/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.451655413 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.179054349 seconds)
    (110/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.048155916 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.203751317 seconds)
    (112/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.406504901 seconds)
    (113/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.074390494 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.376656636 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.447353901 seconds)
    (116/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.35317934 seconds)
    (117/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.053838805 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.306466944 seconds)
    (119/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.208643537 seconds)
    (120/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.384204283 seconds)
    (121/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.061773344 seconds)
    (122/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.044634035 seconds)
    (123/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 4.368612093 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.225807005 seconds)
    (125/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.702610322 seconds)
    (126/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.374475278 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.19748104 seconds)
    (128/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.057615052 seconds)
    (129/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.364527421 seconds)
    (130/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.078556512 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.430472481 seconds)
    (132/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.981179629 seconds)
    (133/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.315736662 seconds)
    (134/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.062493202 seconds)
    (135/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.277888095 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.734884727 seconds)
    (137/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.11551519 seconds)
    (138/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.582385109 seconds)
    (139/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.461221979 seconds)
    (140/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.509584426 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.399339015 seconds)
    (142/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.423165812 seconds)
    (143/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.344465425 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.326514204 seconds)
    (145/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.113966657 seconds)
    (146/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.081215492 seconds)
    (147/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.749305325 seconds)
    (148/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.21181594 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.528616607 seconds)
    (150/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.083625676 seconds)
    (151/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.046418083 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.535373066 seconds)
    (153/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.413903184 seconds)
    (154/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.217155414 seconds)
    (155/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.181868117 seconds)
    (156/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.21971646 seconds)
    (157/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.182226074 seconds)
    (158/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.346540118 seconds)
    (159/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.205187053 seconds)
    (160/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.196600879 seconds)
    (161/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.873958523 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.491555599 seconds)
    (163/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.244991641 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.381116274 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 2.271510523 seconds)
    (166/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.945669835 seconds)
    (167/341) benchmarking ("sort", Int8, false)...
    done (took 5.704141381 seconds)
    (168/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.445566034 seconds)
    (169/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.406105573 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.182559464 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.268876146 seconds)
    (172/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.166574682 seconds)
    (173/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.523829815 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.068576305 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.066354903 seconds)
    (176/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.596183154 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 6.767876323 seconds)
    (178/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.369803223 seconds)
    (179/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.449224437 seconds)
    (180/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.438811758 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.197022689 seconds)
    (182/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.308909934 seconds)
    (183/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.127973838 seconds)
    (184/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.059466947 seconds)
    (185/341) benchmarking ("map", identity, Float64, true)...
    done (took 4.575301968 seconds)
    (186/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.28783637 seconds)
    (187/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.221275634 seconds)
    (188/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.212658314 seconds)
    (189/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.340020854 seconds)
    (190/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.065012916 seconds)
    (191/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.059735514 seconds)
    (192/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.063619749 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.066515886 seconds)
    (194/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.065918745 seconds)
    (195/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.180729428 seconds)
    (196/341) benchmarking ("sort", Float64, false)...
    done (took 6.853263155 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.18255679 seconds)
    (198/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.244421352 seconds)
    (199/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.586214413 seconds)
    (200/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.430195634 seconds)
    (201/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.058310602 seconds)
    (202/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 3.731621327 seconds)
    (203/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.061612871 seconds)
    (204/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.176978454 seconds)
    (205/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.185430619 seconds)
    (206/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.38826016 seconds)
    (207/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.054812239 seconds)
    (208/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.308295932 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.049819916 seconds)
    (210/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.062315602 seconds)
    (211/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.430691632 seconds)
    (212/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.071495624 seconds)
    (213/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.305814085 seconds)
    (214/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.2801233 seconds)
    (215/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.137873082 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.358149116 seconds)
    (217/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.169090618 seconds)
    (218/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.07384258 seconds)
    (219/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.572884187 seconds)
    (220/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.065919299 seconds)
    (221/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.346357919 seconds)
    (222/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.073890134 seconds)
    (223/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.257064896 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.718561542 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.204505513 seconds)
    (226/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.335699651 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.206559046 seconds)
    (228/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.051099172 seconds)
    (229/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.252261925 seconds)
    (230/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.183211209 seconds)
    (231/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.061358007 seconds)
    (232/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.052922871 seconds)
    (233/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.932620936 seconds)
    (234/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.239014953 seconds)
    (235/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.068542178 seconds)
    (236/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.051083771 seconds)
    (237/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.070841581 seconds)
    (238/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.052329264 seconds)
    (239/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 4.059723266 seconds)
    (240/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.177698456 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.712607114 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.543803552 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.428388508 seconds)
    (244/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.381637285 seconds)
    (245/341) benchmarking ("sort", Float32, false)...
    done (took 7.057625892 seconds)
    (246/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.084063733 seconds)
    (247/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.052597487 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.927552287 seconds)
    (249/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.166983169 seconds)
    (250/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.978487372 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.16746855 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.06445599 seconds)
    (253/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.681350081 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.860782674 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.481943661 seconds)
    (256/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.783869486 seconds)
    (257/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.065083312 seconds)
    (258/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 5.200375969 seconds)
    (259/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.217994531 seconds)
    (260/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.572215507 seconds)
    (261/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.191287306 seconds)
    (262/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.078165594 seconds)
    (263/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.449500242 seconds)
    (264/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.053164752 seconds)
    (265/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.065109923 seconds)
    (266/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.527394389 seconds)
    (267/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.065463441 seconds)
    (268/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.170797298 seconds)
    (269/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.144360188 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.945712195 seconds)
    (271/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.221711781 seconds)
    (272/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.063310845 seconds)
    (273/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.563687097 seconds)
    (274/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.142918996 seconds)
    (275/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.292062973 seconds)
    (276/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.532237266 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.525308655 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.205075467 seconds)
    (279/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.484971444 seconds)
    (280/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.745491964 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.211519105 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.021187387 seconds)
    (283/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.236360183 seconds)
    (284/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.067842328 seconds)
    (285/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.259715851 seconds)
    (286/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.073131048 seconds)
    (287/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.106294027 seconds)
    (288/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.546590252 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.065290449 seconds)
    (290/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.05448864 seconds)
    (291/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.065573115 seconds)
    (292/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.076154588 seconds)
    (293/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.170489214 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.07113138 seconds)
    (295/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.270284815 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.950086753 seconds)
    (297/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.085434862 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.055211286 seconds)
    (299/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.290567788 seconds)
    (300/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.187595035 seconds)
    (301/341) benchmarking ("sort", BigInt, false)...
    done (took 7.061430393 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.063595409 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 9.256151072 seconds)
    (304/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.061992146 seconds)
    (305/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 4.673174673 seconds)
    (306/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.484672228 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.376044103 seconds)
    (308/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.077910847 seconds)
    (309/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.401844977 seconds)
    (310/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.164223156 seconds)
    (311/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.619562589 seconds)
    (312/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.294625678 seconds)
    (313/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.068252441 seconds)
    (314/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 4.884302994 seconds)
    (315/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.579870054 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.214035666 seconds)
    (317/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.810894152 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.424020398 seconds)
    (319/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.619708008 seconds)
    (320/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.061875441 seconds)
    (321/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 3.84432836 seconds)
    (322/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.393152924 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.382960386 seconds)
    (324/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.309320689 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.059299828 seconds)
    (326/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.455432235 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.059704724 seconds)
    (328/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.064595322 seconds)
    (329/341) benchmarking ("map", identity, Int64, true)...
    done (took 4.274105478 seconds)
    (330/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.311062437 seconds)
    (331/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.204731783 seconds)
    (332/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.256591835 seconds)
    (333/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.382483336 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.065206064 seconds)
    (335/341) benchmarking ("map", abs, Float64, true)...
    done (took 4.040353156 seconds)
    (336/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.548588567 seconds)
    (337/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.151339846 seconds)
    (338/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.05844456 seconds)
    (339/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.159374142 seconds)
    (340/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.683683164 seconds)
    (341/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.424387071 seconds)
  done (took 1202.07056155 seconds)
done (took 1204.189368484 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.088472234 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.062871671 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.642752425 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.079131267 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.062872953 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.064418793 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.613925203 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.099308484 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.071899822 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.612795507 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.079722324 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.063032737 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.070833491 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.080117028 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.070305589 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.073694379 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.070031794 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.087561817 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.081175089 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.067637113 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.148799813 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.067396983 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.062326905 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.110480901 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.064569052 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.071065139 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.08646604 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.148821091 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.148576565 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.067207238 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.070650832 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.463830084 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.128023341 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.070458905 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.07053277 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.070850394 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.069062758 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.071875081 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.085786489 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.071081024 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.065264945 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.076176356 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.069070183 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.067659272 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.063871168 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.064018738 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.066861258 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.160121273 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.076298138 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.471405171 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.146112473 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.087454296 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.15117487 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.067009571 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.06772113 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.068471511 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.149983876 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.070464532 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.069382464 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.476954949 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.190978968 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.073905957 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.472089684 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.141896052 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.077379665 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.0760246 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.06461433 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.087355594 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.461706149 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.668363696 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.104243977 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.0884207 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.067020829 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.068120058 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.07750622 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.615832523 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.083744337 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.748012276 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.097514383 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.074216649 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.071083266 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.069240631 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.067194861 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.075265741 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.088189602 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.066772317 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.070786612 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.072005852 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.077842487 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.464723858 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.122443239 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.644985545 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.079951439 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.090002278 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.089317894 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.75436445 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.133512105 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.11194489 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.077744023 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.537998882 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.118176764 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.08929365 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.068335894 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.073218628 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.162568251 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.087963258 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.08856433 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.064912261 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.088964516 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.07322701 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.066376197 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.076964505 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.088884415 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.084535547 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.074549263 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.065830137 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.076723062 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.072102082 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.118534366 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.091147629 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.179386051 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.177064904 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.403683054 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.231016485 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.394937215 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.163426479 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.250092993 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.182968607 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.289496138 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.253407445 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.232359254 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.207793018 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.637098566 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.241602953 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.235585422 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.275696036 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.36116389 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.209793471 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.200629715 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.179134622 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.20208417 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.186951945 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.252879785 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.188131985 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.259940716 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.213182794 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.201176489 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.202790005 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.225071252 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.246779199 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.246531621 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.22800664 seconds)
done (took 331.631903655 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.265296207 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.74895233 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.483091957 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.075991726 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.150533254 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.134325899 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.288647433 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.314658686 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.346560844 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.5229434 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.076408286 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.106306175 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.502814979 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.117343235 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.179357573 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.178038299 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.096824428 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.343514286 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.077560958 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.165330078 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.123201528 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.122123383 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.099071871 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.52735461 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.097243208 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.137423245 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.25277956 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.107047175 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.379339648 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.137649653 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.118807608 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.378596833 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.161963288 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.109323203 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.102921412 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.101991861 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.176190597 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.106457787 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.170150639 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.25867097 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.330830228 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.287670856 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.203875049 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.223112897 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.246888648 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.162641197 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.198091787 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.192305229 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.198253642 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.198821649 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.425391541 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.132322936 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.167864738 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.17435871 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.155188435 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.200726021 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.204564419 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.143115396 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.18609795 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.145381718 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.195434133 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.580100963 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.593203643 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.145874101 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.240205988 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.131172772 seconds)
  done (took 170.08681717 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.241553368 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.206426698 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.237600091 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.185353095 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.223764546 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.251347938 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.238184706 seconds)
  done (took 17.711389665 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.180363853 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.136518637 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.17474096 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.216260295 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.195577695 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.340300471 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.134998401 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.156908502 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.206670132 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.166515388 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.551595085 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.217995662 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.171718729 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.192412333 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.190371213 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.184500763 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.188884083 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.173653259 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.297110071 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.241587612 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.186435693 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.153320629 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.149366713 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.130941269 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.14456197 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.179967184 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.214567765 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.15625162 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.189163112 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.142167847 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.1577254 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.182012559 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.126530663 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.119615265 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.214903215 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.241612139 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.172048865 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.201624802 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.155102417 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.564140068 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.116935578 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.122331751 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.131737942 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.201546317 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.210615278 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.17553051 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.161605166 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.163067245 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.181272635 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.229400796 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.298860318 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.141467054 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.203562135 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.287034005 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.212445803 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.194668585 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.086801921 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.171256174 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.183926214 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.114130019 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.099038016 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.21427926 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.159731615 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.151526481 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.254138271 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.198932455 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.111254476 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.097832516 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.098932268 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.132200258 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.098624071 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.132994604 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.133075265 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.224222013 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.107263584 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.278915897 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.125895552 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.099974628 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.104590448 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.120074744 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.263786765 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.216122172 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.191863459 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.240466578 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.171340604 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.107998191 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.168111985 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.190244393 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.140329839 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.120699481 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.182761679 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.138320081 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.087979754 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.169727716 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.120428693 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.500023113 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.200268416 seconds)
  done (took 216.96770806 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.1797538 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.188647191 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.225548376 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.257075467 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.221112091 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.221325271 seconds)
  done (took 15.411619745 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.209771062 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.21734519 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.219460996 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.222533297 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.289571776 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.327513598 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.198964926 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.186816536 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.207513671 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.183566288 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.20688709 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.217502401 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.205068301 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.232565862 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.208804082 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.191916855 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.206444212 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.227480144 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.235582115 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.222460921 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.439383216 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.216211627 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.189990067 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.321833441 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.352275656 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.34194217 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.347927285 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.171857538 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.08726694 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.09043741 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.1267158 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.278435343 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.220542484 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.253115364 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.089072604 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.093794632 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.113093247 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.11288457 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.114206104 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.107918755 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.115107944 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.105746389 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.127234795 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.230697152 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.08801617 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.109552083 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.092708293 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.115095736 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.112917464 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.111787579 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.110283772 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.105074106 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.113280274 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.111452579 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.120715258 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.116744033 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.115712695 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.135829473 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.109380619 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.22040471 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.088186661 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.086768871 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.100098416 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.117437744 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.114606701 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.113208675 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.117170255 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.11595118 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.108366809 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.113499562 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.110758237 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.120869175 seconds)
  done (took 158.379134962 seconds)
done (took 580.692043256 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.68461356 seconds)
  done (took 9.8913962 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.274831268 seconds)
  done (took 9.553974224 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.581753805 seconds)
  done (took 14.655794369 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.182699263 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.156632865 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.188612369 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.227885513 seconds)
  done (took 30.88618069 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.305587639 seconds)
  done (took 9.387715098 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.20358307 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.199575947 seconds)
  done (took 16.550291994 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.223218363 seconds)
  done (took 9.359567229 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.688170755 seconds)
  done (took 9.765384888 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.192251899 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.142696704 seconds)
  done (took 16.519206047 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.195338682 seconds)
  done (took 9.289815514 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.760440643 seconds)
  done (took 10.975749785 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.186492779 seconds)
  done (took 9.340969782 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.243121155 seconds)
  done (took 9.373495691 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.918798746 seconds)
  done (took 10.002559276 seconds)
done (took 177.665433567 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.148843704 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.216488761 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.158757577 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.122364198 seconds)
  done (took 30.754106562 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.161688873 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.234271261 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.211387867 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.187770609 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.144415589 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.181370753 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.230966935 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.174072172 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.186752256 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.207423262 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.236799607 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.193744703 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.186551654 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.203273277 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.206131088 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.246826204 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.214252916 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.238298605 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.170759448 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.183132687 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.203730779 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.275560611 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.211590587 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.135395329 seconds)
  done (took 54.895817094 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.337523232 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.229213451 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.313305961 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.243803328 seconds)
  done (took 11.195845484 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.15440106 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.254228751 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.289771025 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.336538979 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.214450436 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.347146311 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.343502903 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.358634683 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.436591827 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.290090271 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.171344876 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.166877473 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.146629047 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.197297186 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.303993834 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.124479786 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.128206962 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.341988924 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.319697691 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.363404061 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.113905132 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.167270469 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.16843421 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.165112297 seconds)
  done (took 56.006892352 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.105885983 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.12288324 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.123502096 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.109369779 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.111780816 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.107999772 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.124005698 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.109249901 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.140685444 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.108809734 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.109969258 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.134551267 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.232696159 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.257303342 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.233333429 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.229948951 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.27888253 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.142716134 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.111307483 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.182080763 seconds)
  done (took 45.115052528 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.149069341 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.126270922 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.610999085 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.35374588 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.188800824 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.180094204 seconds)
  done (took 35.756360948 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.194814012 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.223157599 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.1879057 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.243101278 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.24838372 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.208330342 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.267747969 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.410708821 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.195716315 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.276459754 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.210988204 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.196944079 seconds)
  done (took 28.994316291 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.18716428 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.190500633 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.176787185 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.184581283 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.119091048 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.098342736 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.097972392 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.084204923 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.103259752 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.110578288 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.095250337 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.106157316 seconds)
  done (took 47.667018987 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293803738 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.244947654 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.388818983 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.814223882 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.58500452 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.149087755 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.483749031 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.610178944 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.829293053 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.880366878 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.571705908 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.115911261 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.591882105 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.040109936 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085614709 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.362083394 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087889496 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.063032973 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.509739195 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.159809901 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094150053 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.087912253 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106867383 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.608692158 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.398189567 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.095010393 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.261962496 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122059455 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.084341341 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.306937677 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.13278384 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.103668253 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.26887031 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.38217052 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.592291011 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.167548483 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.167419896 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.167865214 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.182607585 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.137020312 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.100117043 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.102639393 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.084936925 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.099972376 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.334473379 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088614097 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.10076821 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.675623888 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.041486896 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.207632942 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.256376331 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.948806093 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.142937747 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.770676842 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222277189 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.361796916 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.09494342 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.146447977 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161316628 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.136946465 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.255212724 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.169377068 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.289208779 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.040486003 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.320087834 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269313088 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.089351977 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095273149 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.349744116 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.361985758 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.172547121 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.209705562 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.822582494 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.088248274 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.091746363 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.975801883 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202920245 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.090346739 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.818679291 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.596734053 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.041760341 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.192222342 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.656637809 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095919867 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.087902807 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.10016331 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.304033189 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.039503707 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.172136488 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.157279539 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.429426309 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.089366467 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.089783659 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.118701015 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091130748 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.043086626 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.767589118 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.16595659 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.040358368 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.64149915 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.143218642 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.042200275 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.142321142 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.095281803 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.458189974 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128551839 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.831094699 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.704871572 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.376939857 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.657495865 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096966526 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.090620669 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.173625391 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172099751 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089592675 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.790700921 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.158712737 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.18019238 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.262929297 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.090101121 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.04197894 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.104866272 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274540359 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1588433 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118358525 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.091537194 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.098744488 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.152399776 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.097627765 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.123465225 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115953624 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.587365997 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.197948728 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.092130381 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.033876141 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.100036084 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.566762355 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.256529687 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.137843515 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.510844885 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.67925378 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.562217424 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.054776567 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.961736187 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.538629914 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.193121489 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17598543 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.674474545 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.239116893 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.174562556 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090830024 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.244085801 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.099938099 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.095692721 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.090381997 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.682192344 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.764236884 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.139626339 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.090931279 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.046458984 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.158289546 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.322810434 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.735937544 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.13267752 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.099546857 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.178909876 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.254373781 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.091748311 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.043129766 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.426211945 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.310902341 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.593298676 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.314725388 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.732026734 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.178329801 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.10576168 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.266647389 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.176167183 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.749728154 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.716804268 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.402553222 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.600341702 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.095355849 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.093899037 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.17624274 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.50633951 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.173676829 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.88458291 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.173381858 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.606769819 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.129150001 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.659936248 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.048378543 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103759753 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.532513147 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.092094397 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.63601941 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.302818446 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125330086 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.097137273 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.096687663 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108117146 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.856838289 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214880576 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172549769 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173214318 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.049645217 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.560287195 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.143348156 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.099577863 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.095684966 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.489960968 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.302048681 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.114517356 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.096316884 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184587159 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.096892582 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.70082908 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.10102551 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.100963133 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.57207738 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.106615585 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.614479996 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.117493401 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.243669084 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134269567 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.145625391 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.214683776 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.614167622 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.198372146 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178858852 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.098182973 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106303915 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.366587654 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.11117962 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.369293531 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.57544602 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.698851711 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.759295915 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.195187165 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.716947571 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.119706403 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.098670236 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.656635035 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.134234202 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100233785 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282497001 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.794803577 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.231290253 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.249016552 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.186666844 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.098930778 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.546410644 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.686074497 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.20790786 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.026275784 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.206827426 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.099989803 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.272545333 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.985182064 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.102325085 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.606133052 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110051359 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.301450157 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.282693052 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.46261959 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.586900733 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.790812539 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.050657216 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.107570552 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.190945929 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.381961504 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.099419299 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.137655943 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.776742843 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.752983283 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.873641271 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.621098898 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.317744428 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.246133889 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.54375387 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.198224939 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.114273075 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.024413264 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.28808145 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.060965296 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23073124 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.050429492 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.143338651 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399529883 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.125159646 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.54714872 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.134882446 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.614848853 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.464264117 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.155185398 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.234277923 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.133336732 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.100160748 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.163316991 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.100472022 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.209328909 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.227985208 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.101527487 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.595797695 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150387907 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148936288 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.107970661 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.663640643 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131170146 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.106490904 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.639896105 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.129724095 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231291302 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185615204 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.178558402 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.132783761 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.181074121 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.129267564 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.672362039 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.551325543 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.187377009 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.656443071 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15914793 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.844507436 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.102676513 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.27817359 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.109810635 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.842543967 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15767511 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.465121211 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.099276144 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.307004171 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.390993614 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.190265141 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.110307715 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.055902921 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.675551812 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.184807374 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.586726332 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.121104042 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.901272115 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.627303685 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.233214227 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.635295768 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.082792032 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.106379026 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.512593761 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.780070172 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.917368226 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146396196 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106647847 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.249689587 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.291125773 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.212622745 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.857992485 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.147817593 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.13370951 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.278707174 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227721615 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.045552228 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.631040731 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.851570872 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.370065406 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.121708559 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.288274045 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.237583246 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.332956603 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148992297 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.181796389 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.845267099 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.55676266 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.203779176 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.055865346 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105698168 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.785963477 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.263345898 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.188981614 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37999375 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.505184157 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.147794763 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.147831207 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.264940055 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.395176711 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.839505995 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.796000566 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.408736867 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.586730559 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.674691022 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.849915615 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.845357204 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.282420306 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.222459067 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.47613868 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.988929297 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.477714168 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.388419219 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.114195996 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.058126571 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.291863357 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.110633586 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.177102784 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.766249999 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.397218603 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.181722928 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.901057096 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.689770849 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.177449755 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137108419 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.69158826 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133174507 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.12983664 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.107346316 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.631704812 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.497623783 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124171094 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.063547691 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.858019286 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.058878179 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.282517979 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.190831453 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.154629573 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.926390791 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.185497964 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.258755707 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.625793487 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262299062 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.154422333 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.059376574 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.166669777 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.089828603 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.766274954 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.883291618 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133760466 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.112089641 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.291537903 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.092714702 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15530316 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.116333822 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.394653547 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.548730782 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.561292915 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.272829979 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.440356388 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.381245777 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.831793047 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.206381184 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.337173576 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.060901404 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.109815309 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.18161346 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.159747177 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1838439 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109884569 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.114708856 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.348905224 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.247198869 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.266458369 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.183798979 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.206891948 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.135144983 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.24991101 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.247324402 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.113224689 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.118912006 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.110274902 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.386626509 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.119840388 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.067680415 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.285657873 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193022001 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.493349785 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.187966314 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.700791201 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.118525308 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.834591989 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.261122543 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.615994026 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111961762 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.903975696 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.179490801 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.112683963 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.562029569 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.776306283 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.295414521 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.790468697 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.057126323 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.189590318 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.165008152 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.115278427 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.124960766 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.706706012 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.480284093 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.111486807 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.564009972 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.184694224 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.121785239 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.872312839 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.5905019 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.112658276 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.173656985 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.148962369 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.595689067 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.365820851 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.316043664 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.119449382 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.117939166 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.065437563 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.113407295 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.194899888 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.617833106 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.117282951 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.628753852 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.253007502 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.248288659 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112682426 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.114302095 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.116471851 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.288554923 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.293901638 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137830102 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.399582676 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297371435 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.120597099 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.639618622 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.784756266 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.295032877 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.165907556 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.180103317 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.451993901 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.893660013 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.196070524 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.655053802 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.277461628 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.115950454 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.341202933 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.364045362 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.115391437 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.315836987 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114956 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453394583 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.251322566 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.652465846 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.215719688 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.233496326 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.439537507 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.137171454 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.639391988 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.561887874 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.19843816 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114754079 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127823721 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.114480387 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.888528872 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.691693028 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28313785 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.26000146 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.034796938 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.633396181 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.117781238 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.068480718 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.115492132 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.142581169 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.118965453 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.066226392 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.891645821 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.93789599 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.311004865 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.434165181 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.06644905 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.300165719 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.106332263 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.06946371 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.594742697 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.11764439 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.453350917 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.06728297 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157164331 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.105073968 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.269852661 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.249827949 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.51570472 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.199730308 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.168642687 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.395678994 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.390228386 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.398677816 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.207664898 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.129925403 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368410054 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.573923916 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.34985936 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.27548531 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.938219717 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.180638778 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.085802044 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1622587 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.928648803 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.699725893 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.271465554 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.344515311 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.940870813 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.149735319 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.686542855 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183796794 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.866378598 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.173787239 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.177527545 seconds)
  done (took 2424.158579625 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.209911871 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.21170033 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.306875284 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.214050128 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.196813619 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.244496159 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.185653473 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.183532008 seconds)
  done (took 59.88417294 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.159317037 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.136290799 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.169189188 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.150161255 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.144365931 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.160589221 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.37049904 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.188376041 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.137551637 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.159244825 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.17708674 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.151789984 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.149887729 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.176426636 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.132574168 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.481024429 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.18958401 seconds)
  done (took 82.357707509 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.179507714 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.732505748 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.155844065 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.412848746 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.142229706 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.355333397 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.154680631 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.169877361 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.822607796 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.879938279 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.350233218 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.187804264 seconds)
  done (took 91.631880958 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.16638637 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.192160121 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.158261179 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.17500341 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.188006607 seconds)
  done (took 12.969246709 seconds)
done (took 2983.636093738 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.466276888 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.34137226 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.294310034 seconds)
  done (took 6.69415167 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.268103598 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.267038348 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.412394339 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.26975767 seconds)
  done (took 11.334501695 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.422403056 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.683218767 seconds)
  done (took 7.248253029 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.683534336 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.223392928 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.789854194 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.22888613 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.232130671 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.242012771 seconds)
  done (took 23.871309868 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.244043582 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.218516101 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.217329712 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.228511151 seconds)
  done (took 11.049777076 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.397714398 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.249852042 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.205476726 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.228183396 seconds)
  done (took 23.24060594 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.30009851 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.361599484 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.868269258 seconds)
  done (took 9.691089871 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.926673248 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.497739285 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.916217808 seconds)
  done (took 10.389186384 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.067254001 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.139207427 seconds)
  done (took 8.25527569 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.276038033 seconds)
  done (took 4.324646573 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.60185319 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.600710306 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.966345233 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.965315556 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.129279025 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.431636574 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.479996948 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.43997804 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.78176458 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.619242193 seconds)
  done (took 29.064212052 seconds)
done (took 162.442074973 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.124888444 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.523201313 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.31207082 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.793107157 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.219729135 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.311930652 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.197559582 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.577089062 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.392548953 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.389516943 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.156057073 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.218527946 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.201816932 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.518735851 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.190614525 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.46648166 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.53056484 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.101145804 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.098541163 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.634742394 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.207345003 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.663406232 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.840518196 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.668471489 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.534576877 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.263279798 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.262588606 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.477199022 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.383723136 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.295267585 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.267072832 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.933128474 seconds)
  done (took 185.80584833 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.123454667 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.205266539 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.155617604 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.21548999 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.096871074 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.166236436 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.18742979 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.232488627 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.954824255 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.973185228 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.2377476 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.119112347 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.248766739 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.247089567 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.245369926 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.211723471 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.126227958 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.233269335 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.232598439 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.304978651 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.226984793 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.008768005 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.238985934 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.000894253 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.041825268 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.130321748 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.128390867 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.12833897 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.12852925 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.128187958 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.129395788 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.128333919 seconds)
  done (took 223.002122573 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.125126849 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.128828736 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.126913952 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.129593639 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.130416861 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.129664966 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.128507204 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.129858115 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.12901365 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.130067877 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.130491092 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.130967691 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.131985919 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.129205483 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.13000024 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.130052533 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.129004999 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.127624316 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.128420773 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.128414378 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.129221503 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.129378509 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.13027396 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.132300921 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.133877335 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.136910757 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.154201069 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.126678613 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.128153565 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.130226649 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.129224864 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.129483269 seconds)
  done (took 230.238923571 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.424342026 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.127516921 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.129443121 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.899800968 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.129577413 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.127993424 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.896403119 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.426695561 seconds)
  done (took 23.227061963 seconds)
done (took 664.33886907 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.821842366 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.983351661 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.298781933 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.159594908 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.773536458 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.225080059 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.150243919 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.244355177 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.914157533 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.268585178 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.635590686 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.164659894 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.015163649 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.191954102 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.302215331 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.227744443 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.562074988 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.864125896 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.329606509 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.981537797 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.396567396 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.156509498 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.265442421 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.971182403 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.687097637 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.193121991 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.266646552 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.568553741 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.16016885 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.419842708 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.211055296 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.560586045 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.180250448 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.160509128 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.219585987 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.208077573 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.471057627 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.176428748 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.296163005 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.93337255 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.976750648 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.787761663 seconds)
  done (took 114.436029831 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.137916154 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.135121484 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.135770497 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.135534246 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.136519627 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.136303739 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.136294287 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.136580565 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.136149306 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.135675892 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.135535901 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.137001164 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.136308861 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.136547852 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.136018785 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.135839545 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.136465177 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.136950324 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.136429279 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.136761362 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.136038376 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.136845113 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.131539945 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.138264041 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.13711222 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.13621357 seconds)
  done (took 57.623031672 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.131026445 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.352506381 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.488216432 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.183201917 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.140600295 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.159608197 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.210800694 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.144118391 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.135241608 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.135018011 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.265565654 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.139174183 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.148332056 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.476913062 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.168676176 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.132877864 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.131860385 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.13312035 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.36105042 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.155165367 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.175319696 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.14429192 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.17441139 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.154728537 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.136269396 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.133894911 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.137180444 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.612289189 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.14878778 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.265415492 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.183364928 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.182178974 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.542942133 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.491709417 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.212875148 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.143218222 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.133497088 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.3157515 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.149711357 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.135012723 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.174595835 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.145852749 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.478773644 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.72869057 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.15693395 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.134620451 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.612046485 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.327814462 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.192695579 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.150574125 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.48592131 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.173232054 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.134610575 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.13577176 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.177709552 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.187817057 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.185459336 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.437816981 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.153214837 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.192790257 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.191819679 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.142257678 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.367078362 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.149206468 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.35591256 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.150909101 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.144909277 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.138128351 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.481329061 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.174344636 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.722841974 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.159604761 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.135686481 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.26586392 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.36188759 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.646798096 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.156284191 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.368251671 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.570815432 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.189326277 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.18661753 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.642738913 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.1956703 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.151103752 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.136829223 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.135887514 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.135386794 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.181628479 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.175246522 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.647933069 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.727547658 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.456530752 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.191783047 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.154876234 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.137377428 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.433844506 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.1500034 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.136592513 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.475755452 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.749921542 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.161579333 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.145855975 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.703804303 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.16141484 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.178150157 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.153417744 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.492176759 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.176433026 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.184596043 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.137513667 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.145750794 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.141160962 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.179148167 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.152562483 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.137142374 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.697116686 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.342747174 seconds)
  done (took 266.561727093 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.143343115 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.139932096 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.136685695 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.13991153 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.13719757 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.138554465 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.136631021 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.136359512 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.138675137 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.136528795 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.135952281 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.136428399 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.139041628 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.146605054 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.169007138 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.140966752 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.753433872 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.137851984 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.139386735 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.14138475 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.970157259 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.144842115 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.137606286 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.142972151 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.140710423 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.138287565 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.149206014 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.1658599 seconds)
  done (took 175.488146923 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.139091748 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.207956603 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.153315151 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.208264314 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.154227938 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.14013144 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.170458997 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.16475656 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.149306474 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.139430943 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.14025242 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.180114501 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.151790039 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.24343924 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.187100748 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.183000745 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.250594203 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.152403745 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.140763273 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.140647842 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.208915271 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.161137799 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.181240869 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.220842745 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.155667299 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.209521053 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.160948533 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.140808004 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.14053394 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.267281839 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.167753441 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.180998174 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.192111013 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.169298074 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.275333753 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.270502615 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.258076854 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.184485062 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.148702163 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.142250363 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.141813406 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.14737015 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.210357256 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.156140291 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.143574396 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.274776269 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.168908003 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.142873369 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.165793036 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.1417536 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.159504979 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.167260546 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.190497097 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.281366225 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.209422399 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.174536797 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.173779674 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.163521703 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.143474317 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.245650398 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.159701871 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.267895931 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.169761374 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.147891009 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.144262448 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.147090126 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.212060099 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.188574885 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.254295684 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.156453725 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.246646002 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.224714245 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.158062882 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.144150456 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.144028071 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.212117451 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.262049402 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.225286108 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.23015267 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.192745068 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.160742145 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.143596757 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.149118514 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.183740265 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.155059863 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.269474345 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.273733164 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.155984062 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.144214701 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.144943368 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.14448015 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.178833242 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.225941023 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.198501041 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.266394034 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.196158322 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.195596529 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.155748799 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.161603723 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.153090573 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.188117516 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.156227637 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.162923208 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.504359141 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.197964749 seconds)
  done (took 231.661252297 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.548712025 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.204390497 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.230572928 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.414804751 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.552840798 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.401830334 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.2023068 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.211852396 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.206970637 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.343491303 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.278050207 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.262243619 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.199716096 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.177443676 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.204852292 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.208853655 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.237818238 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.58285367 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.320813411 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.226634927 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.203064334 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.512056167 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.532535639 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.618592991 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.249261261 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.654193137 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.857097229 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.306595063 seconds)
  done (took 71.034963993 seconds)
done (took 918.859575403 seconds)
SAVING RESULT...
DONE!
