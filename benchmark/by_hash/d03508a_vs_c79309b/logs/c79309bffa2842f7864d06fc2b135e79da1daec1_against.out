cset: moving following pidspec: 2048935
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.75862875 seconds)
loading group "shootout"... done (took 1.16362488 seconds)
loading group "string"... done (took 0.654747284 seconds)
loading group "linalg"... done (took 8.49792906 seconds)
loading group "parallel"... done (took 0.16207977 seconds)
loading group "find"... done (took 2.978461119 seconds)
loading group "tuple"... done (took 2.04609926 seconds)
loading group "union"... done (took 14.269640908 seconds)
loading group "dates"... done (took 1.413468261 seconds)
loading group "micro"... done (took 0.210312187 seconds)
loading group "simd"... done (took 4.616862472 seconds)
loading group "io"... done (took 1.370321414 seconds)
loading group "random"... done (took 9.495854152 seconds)
loading group "problem"... done (took 1.583985525 seconds)
loading group "array"... done (took 25.00838014 seconds)
loading group "misc"... done (took 1.825897312 seconds)
loading group "scalar"... done (took 41.912697302 seconds)
loading group "sort"... done (took 3.192319957 seconds)
loading group "sparse"... done (took 12.73952153 seconds)
loading group "collection"... done (took 18.290963753 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.436938512 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113504423 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161433962 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109711284 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.230028431 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123924611 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132155194 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087551193 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.058012815 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.141028936 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135664714 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.421301892 seconds)
done (took 5.570191098 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.306049571 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.240378151 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161384776 seconds)
  done (took 1.55996672 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091215211 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057969473 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064555598 seconds)
  done (took 1.369799469 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063104122 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138836443 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063906091 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064337082 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064213258 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063959955 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063822646 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063768129 seconds)
  done (took 1.680850439 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072188868 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065747396 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063376817 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065148236 seconds)
  done (took 1.42301353 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065925633 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118549026 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062360854 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062206824 seconds)
  done (took 1.462861794 seconds)
done (took 9.028551556 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.158061002 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.756934654 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.848969237 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144792757 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.312629625 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.343185289 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119800975 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.200018134 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112970598 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074761137 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.162735839 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079611736 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.479602798 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.475432172 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070812612 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.185402686 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.614537029 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084287078 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112073301 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.186043192 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.081388554 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08190288 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086793154 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071076606 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.107054641 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.175392072 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.612198037 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098724371 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06793068 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.193635068 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070040688 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074266392 seconds)
  done (took 10.429474894 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.115038738 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110752319 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066560337 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.100703967 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093211937 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067616061 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072792751 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066366199 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085667841 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.129328977 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089537051 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.122708965 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06617725 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067376972 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097556976 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159831621 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082241274 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080632985 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06657867 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.07973562 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092849426 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078630381 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076766195 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076240592 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.111341391 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.132161978 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.085888496 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.1097129 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066496565 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078885288 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093301178 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.106410837 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067073637 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064806369 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.1072669 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083886243 seconds)
  done (took 4.440216817 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.024076846 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.093210728 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.10470216 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099453248 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10433655 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092817278 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.14629964 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120642478 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098770336 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067070818 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.180037663 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.674423867 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.068245563 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070846104 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.145209583 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.36181903 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.897747647 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072312428 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067389887 seconds)
    (19/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.093321074 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096500951 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068983414 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.138500816 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065721572 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176096663 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.641380796 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072329197 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.193300442 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096164173 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064158932 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139187028 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092896722 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068126115 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.578344707 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065641308 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06287527 seconds)
    (36/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.106862868 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.083494139 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06693441 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091232293 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066058614 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076486285 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064070555 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.1142959 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079255928 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.54860895 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068672937 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.629026473 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.331732581 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072891469 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071201181 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101174088 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066440302 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067133187 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.620673552 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.150920734 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066560882 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.283747372 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069988427 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06749689 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068269867 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099349374 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066672921 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067644487 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072010059 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.083759128 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.085952066 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066382503 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.148915267 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.084805156 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067982756 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.420426073 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077045842 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069865152 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070578514 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.096494 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.136211842 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06695006 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066325637 seconds)
    (79/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064160117 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.252984303 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.092770633 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088620304 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068754992 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065907924 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064771477 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.532015579 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.959897168 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069341337 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069445781 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.50199085 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064122396 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065142583 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066614542 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087115579 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065958684 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062589739 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063328215 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099305604 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067959944 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.594144409 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066705214 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.484374484 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069405936 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097240036 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122340415 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06673044 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.105557466 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066863796 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.0642553 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072528044 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064861434 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06379272 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068618653 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065002182 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065610527 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067946654 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067658043 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066732098 seconds)
  done (took 23.282580342 seconds)
done (took 40.324622529 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.461510828 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077672558 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077302082 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07703262 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076916684 seconds)
  done (took 1.970491975 seconds)
done (took 3.26815606 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.255315584 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076975908 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062908392 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.204755913 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087621564 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.178364625 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.21926947 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.292855742 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.090448763 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089141241 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089854081 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.223084107 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.234286043 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090652764 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.162289298 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.235903859 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091789293 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064624971 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.090039799 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.091388709 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.092284976 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064451278 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089902392 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.0912722 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162103463 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.08938403 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063469077 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.163999956 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.09241657 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.169232693 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092343003 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.091466808 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.092147924 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163994083 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092618048 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.164112377 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064409753 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.092119444 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.092630364 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.097324527 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.09424725 seconds)
  done (took 6.389622655 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07692001 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079629408 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081094547 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060300337 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069347197 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079492028 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060349232 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079088075 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100103035 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079813189 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079471512 seconds)
  done (took 2.148621871 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071028411 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080262374 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081442535 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059815017 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070896386 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080519391 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060189717 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079896768 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082777014 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080526127 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080620637 seconds)
  done (took 2.065370404 seconds)
done (took 11.815897453 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190687292 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.088132488 seconds)
  done (took 1.496688072 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.256560335 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.500150844 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.260996059 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.12278448 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.102559534 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.117893441 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.234430508 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099371197 seconds)
  done (took 7.092924939 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.124148268 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.06636042 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065837258 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066927426 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067761007 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066352162 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066668649 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065519924 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067405868 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065794733 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066446207 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066004352 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065463302 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.06751405 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067946701 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066026289 seconds)
  done (took 2.482035984 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101023368 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067500171 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096195106 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060076259 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070050181 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061823823 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069975741 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070259602 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068025452 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.068450941 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069876501 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068425311 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069329598 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069290451 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070226924 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071742565 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072038675 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068777057 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071540485 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072606109 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.071216716 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072299538 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07327896 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070558726 seconds)
  done (took 3.078074484 seconds)
done (took 15.378054045 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177920723 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07312808 seconds)
  done (took 1.481830241 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.09358211 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091474512 seconds)
  done (took 1.437981516 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073502606 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058535155 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075740381 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067956772 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059261901 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058816112 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074793521 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059383586 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059170049 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059200667 seconds)
  done (took 1.902344679 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063474116 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06575864 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063854883 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062273587 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064570543 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06023891 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062628539 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060470561 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.066254164 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059446566 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06323007 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080890758 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062892649 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081305249 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062781458 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063413003 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065219349 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063757319 seconds)
  done (took 2.429318926 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061932256 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.05957083 seconds)
  done (took 1.382171092 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064970293 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059653933 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061540007 seconds)
    (4/7) benchmarking "year"...
    done (took 0.061195521 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059547076 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058977193 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059670815 seconds)
  done (took 1.679179412 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42710878 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192991455 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.426017631 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068161975 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081794241 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267194589 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063091986 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067536899 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067539443 seconds)
  done (took 2.957363143 seconds)
done (took 14.521453953 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084027272 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180626388 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110231491 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.416177031 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.078252128 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065632668 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093671931 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.210390072 seconds)
done (took 2.507410574 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.284215904 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.207174853 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.25647008 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146561675 seconds)
  done (took 2.876378316 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.4186836 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.165832358 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074989505 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065444808 seconds)
  done (took 2.000502104 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066187571 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069724664 seconds)
  done (took 1.409538782 seconds)
done (took 7.839900345 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074178031 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.094596967 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059330231 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059483981 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.05937778 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.061189226 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061468799 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.06109479 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060692297 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.066258915 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061521288 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059511102 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.061482288 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.061444184 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061432844 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061249666 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061291748 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061524577 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061829654 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062110642 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062235642 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062593127 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061682981 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062204829 seconds)
  done (took 2.812824591 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080281572 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063708536 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064291248 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064183305 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064856637 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064644005 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064657093 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063669598 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064713242 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063403564 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064951165 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064948486 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063404221 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065037242 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063438653 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065122849 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064940307 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063774954 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063604941 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065181237 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064625184 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064204702 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065875795 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065512118 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066005296 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066064857 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064483088 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06481416 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065762442 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.066125015 seconds)
  done (took 3.238836522 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06743006 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058032557 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058183463 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.06792742 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057698884 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058013368 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058757178 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057860878 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058274603 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059104286 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058584932 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05791347 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.05887516 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058008675 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058140047 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058647993 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063189382 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078365097 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058341114 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058161591 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062721038 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058331846 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058178721 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058103461 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058695865 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058558374 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058324114 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059050462 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058739368 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059574732 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058880444 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063386186 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06498457 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058750112 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069163673 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06401431 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058950258 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065624216 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.05990172 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.05885796 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.05881764 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058784533 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.05886726 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059009601 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069409877 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059180341 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060131186 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062333482 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059200217 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.05873933 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058916811 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060628718 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064671716 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060156841 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058722373 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060070079 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058745485 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.05961051 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058891291 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058737595 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058787805 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063028067 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060526765 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.05967998 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079877412 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060241192 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069328112 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059140397 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.05944273 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063123175 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059735374 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07818229 seconds)
  done (took 5.679633184 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072999197 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069323906 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076857288 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068082339 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062539829 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059235964 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062596911 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059119719 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068302506 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062673519 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059051044 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062163314 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068168072 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062550703 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060031121 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068120662 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062687805 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062032469 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059327454 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063227251 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060609845 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062999509 seconds)
  done (took 2.715567007 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.145554964 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064482537 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106471308 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068417937 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066855943 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068094419 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064652135 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064469814 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064511558 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065070385 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064941648 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064649674 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066740296 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065141041 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06520456 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065051493 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065153997 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065426206 seconds)
  done (took 2.586749714 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07795576 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064131681 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090655905 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063734891 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064166989 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063888122 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067662563 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068173855 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064094339 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064275859 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067866073 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063906638 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063861224 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064164624 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063846658 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064270372 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06470782 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065508096 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068020159 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067980717 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068539283 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068768734 seconds)
  done (took 2.767669388 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079246361 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063125204 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.079000056 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064469086 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058083118 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058774699 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.06529804 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063541638 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064970494 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063046451 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063641638 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058633116 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065455317 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063639598 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065906272 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063740134 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063279695 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063562647 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063261129 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058677983 seconds)
  done (took 2.5802281 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098226124 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061023136 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060834005 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065429028 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06096941 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06109068 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065931371 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072625557 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06099649 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084852936 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061056964 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061146762 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06603985 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064195244 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061209959 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065902356 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065973478 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066341649 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061650062 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061510275 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085751334 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061943648 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.067017553 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062041027 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061758046 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061753371 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061802637 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06494737 seconds)
  done (took 3.14503491 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065671757 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061751421 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061833097 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061737648 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061646179 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061495548 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061816821 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064856755 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061751523 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061939423 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061698908 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061629751 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061628428 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061580758 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06177221 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061599918 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061547353 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061908457 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061960655 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061880546 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061634374 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061517091 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061522011 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06190285 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06186493 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061601536 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062310981 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062414331 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06206865 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062176511 seconds)
  done (took 3.162528962 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074061864 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069209006 seconds)
  done (took 1.440685475 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062668119 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075659914 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057553593 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070497341 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066445694 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062188704 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067180841 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066925581 seconds)
  done (took 1.81961209 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092617305 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.114807506 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061236656 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060482261 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089419452 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126254104 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.099562389 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072040311 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074040295 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062755704 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060185083 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099685803 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059507869 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073495833 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061052547 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069565184 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068046078 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078581574 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073642038 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058796015 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073420954 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061271715 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060027766 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061476768 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061166268 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067935205 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076850273 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073316174 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069549721 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058463491 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080003723 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.05950297 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06039313 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069361279 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092107828 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059605272 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097507277 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059801774 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064434557 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058964375 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072171772 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080987846 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074306659 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078104034 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060997338 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061419992 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.05900091 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061184953 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063435079 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.06910242 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059321414 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067435401 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.05872165 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060862075 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070563498 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059812108 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064509379 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069187025 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073723374 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070727428 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072140971 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075477564 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068805463 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068419951 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060361597 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079987185 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061385385 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073600144 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075282048 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060978079 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073644717 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059381619 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058749826 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059643555 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094784256 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061716794 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06095628 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059996773 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060152629 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06256894 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071391234 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066811379 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069046134 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064727706 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077892275 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07109148 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061245421 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069798662 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080501238 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065210643 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06144005 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079292663 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065265992 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060810575 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080695704 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072393711 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063915612 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062955719 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065756192 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076747837 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063839955 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060915399 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07135852 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064194662 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.250207477 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064071953 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068009473 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059105895 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.06982494 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064359839 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060259471 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057572284 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063410964 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.05934897 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057403295 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068276216 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058607797 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073402391 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065604135 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073465864 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074001058 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069518522 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074709531 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058471294 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060185522 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076780449 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068207991 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059648106 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076756188 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057942596 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069404346 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057797459 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059828056 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068185979 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057487521 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.05995705 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058269705 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063945136 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059644098 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059945026 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064625693 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067515234 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070875062 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059446032 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067813333 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058752405 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074882012 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069245878 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063975241 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062087202 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059914975 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071660555 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066681272 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069397011 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059136522 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060430768 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059773061 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07072505 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069749994 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061292073 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068138933 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064713103 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060300009 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059942185 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060735435 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063644329 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062983125 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060274884 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067855597 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068865011 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074126619 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067050579 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069169711 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058630193 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059128256 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061230382 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.05898523 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064415486 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069392935 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075764399 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071574769 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081244147 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059748551 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.06991673 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061192901 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076851837 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073466936 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060850018 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064875456 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058984125 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061726894 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070021766 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072404615 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075973058 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076848368 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066213976 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065991886 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060760543 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076915126 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061582181 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070270116 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071082622 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067946146 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061341862 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062852823 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070788891 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065965375 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06179824 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077855071 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070474542 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061522926 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077059536 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062248646 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073421671 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061528076 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065819699 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067489701 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064418655 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072623574 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.235132358 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058351666 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059673366 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075140933 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060645117 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060257932 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067348178 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074393908 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063614465 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066920836 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06945634 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068938065 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063438306 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068656872 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059232827 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068203197 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061282915 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07038929 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058335552 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076781286 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057388733 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073960222 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058747517 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069826985 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059063546 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068221802 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059438872 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076069491 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060069909 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.05931847 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.07046623 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057447947 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068196725 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058018239 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064112919 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065613689 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068282099 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060256974 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068316387 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060105228 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068061663 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063705981 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067175438 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068443121 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063973809 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.05890295 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068312466 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070953096 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068022787 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060731555 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060927227 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059923898 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069304715 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061157489 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060879214 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068370036 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064711846 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065966759 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061191203 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061525779 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061315821 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068663724 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06963543 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081260437 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068784765 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067547489 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069256443 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059141891 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075686871 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059718178 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.06760548 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058597649 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066741958 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069316947 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059770996 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079456702 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061110292 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06801183 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072417577 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068831617 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063913655 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078353437 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062988035 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068662987 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068499538 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064990995 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067222597 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062104885 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069163471 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070018558 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071200393 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061402051 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069183118 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07089844 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063125998 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071625808 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063210066 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070285797 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063301212 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060259513 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066305349 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073601145 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066494211 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066719338 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061490855 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060086569 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062001447 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.071677503 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067129566 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071360971 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078576715 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060907136 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063204049 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061899284 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066357142 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081884923 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.232615203 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068129895 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064365695 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058257357 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060332268 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060408571 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059058095 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061722056 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057996636 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058222425 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069610548 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060044912 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063241114 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058780515 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059563855 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068866213 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062578234 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058967212 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065539814 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058178015 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064006357 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057635576 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059801167 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063484131 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057889433 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062601762 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069350922 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075369697 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065567623 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068077173 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.05951977 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067164645 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074652233 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066315116 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059741642 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068378071 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.05777368 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077599901 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068323079 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067632479 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068994405 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059510247 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075647972 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063521517 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.06928782 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075412594 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060532998 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067240172 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.05894877 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07572628 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06442333 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05898103 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067972008 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067802676 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065557041 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071561763 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060226719 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06826035 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065072611 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063640751 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061401377 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061317831 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069119604 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076442774 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060503577 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065540206 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068112802 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068622782 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064594752 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072336479 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068343124 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060875829 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.06147 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063715122 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060523201 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072294604 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06024555 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064691987 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064606999 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059195679 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066865248 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076819759 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069569177 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069859171 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059334119 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058985855 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078635339 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064352666 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063670249 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068876426 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070685788 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07308803 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070057401 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078304033 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062012468 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067641586 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074279139 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06240162 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061300041 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06536269 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062992028 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071216324 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071816934 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069291667 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063604349 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071331117 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075541755 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063163378 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067244541 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069310311 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063114253 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07322392 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070736497 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07155095 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064102329 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061978666 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.224428504 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069267105 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067261074 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068599489 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059829265 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066015734 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072707638 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06670111 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061499636 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.0582321 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061426467 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068053928 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063662292 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.05815212 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063644112 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062800554 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065641271 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068140382 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063452184 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058053194 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075687845 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067017161 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068380884 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060261197 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060325764 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059195794 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058152585 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07009429 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058144365 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060030962 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063775623 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059944435 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076578435 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067326966 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074942749 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059647446 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.06370257 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058233151 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0685822 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063794493 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058862277 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069559445 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057968374 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074463432 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07140068 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065844172 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059178354 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065219929 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06817901 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075210774 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069760034 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068921866 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06290562 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069624019 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061224696 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070959192 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059160753 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058476583 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070021571 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068888597 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072671555 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059430425 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070353737 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061748733 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068498564 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068402939 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061454615 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061474289 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061565388 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0698225 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064784004 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069610739 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065006502 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077324942 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060872966 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071301198 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069301998 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071222622 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074473454 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072712588 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068468803 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060575714 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067950974 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068560265 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061167131 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065530513 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063602202 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08320163 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062393939 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061821494 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075693959 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068467443 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060560306 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069454221 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066618486 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072346488 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062644253 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072695468 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067731199 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062608617 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066530197 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066645124 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06029387 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060919003 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061396271 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071952228 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066618587 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062395003 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082723237 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063953262 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071444908 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074662799 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069750336 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.223674398 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059066011 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060304027 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072861737 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074997698 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062718268 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068265251 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060235964 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068297484 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057675751 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.06778687 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067099872 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067688624 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058199102 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058898288 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073995872 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074468081 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063668333 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074900714 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068146793 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059811825 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080546304 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068427078 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059705275 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070002808 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060766951 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058473535 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057887616 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060160702 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070515037 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058341582 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060767621 seconds)
  done (took 41.847560024 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.103390555 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060016019 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061325665 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058544129 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066090566 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059905512 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058859323 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059947813 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059872391 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060938844 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058689236 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058666683 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064319284 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073922737 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066716158 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062525795 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058805563 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059911665 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058851407 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060295197 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065543483 seconds)
  done (took 2.734201436 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065400776 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062642467 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062092744 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062352471 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061792521 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058869983 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062539106 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05899718 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06303861 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059297985 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063008155 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05906774 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059467831 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059367702 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059426135 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060383648 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06296556 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062071658 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059005731 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062420948 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060719555 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062975962 seconds)
  done (took 2.728584422 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063446025 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059548574 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067986314 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058043741 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057902788 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061194593 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058275028 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06349283 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063463464 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063336716 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068088851 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.05937785 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058316111 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064901532 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058201484 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059508276 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103806964 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059762264 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.05968518 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058414301 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061339113 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068350071 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.05865228 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059053185 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063876197 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062119938 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058923514 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061552664 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059695499 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064039231 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060210087 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058637313 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068653735 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068032872 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063934754 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063929794 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060766275 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060054387 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058921287 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059005638 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068073346 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060443871 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059121013 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060429878 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068592708 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058954496 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.05867038 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068733135 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058674885 seconds)
  done (took 4.45126008 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07409619 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.10929862 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064684118 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091625142 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071143135 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064164748 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064692892 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.092275476 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059939165 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060202898 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071641916 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071891584 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06138921 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.0625682 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065678966 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061383022 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062462131 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061132661 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064278225 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061375953 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064324906 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066274885 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071643703 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072090707 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062794091 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061173561 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061396877 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062961255 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071679279 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064701427 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063123218 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063705783 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072051663 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.06693265 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061445035 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061578918 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072889858 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.06245755 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062052853 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060641134 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061877871 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063553834 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066769208 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073466077 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062407187 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067342878 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06275288 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060171259 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072435573 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061993263 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065818614 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073550466 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063219926 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065291518 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063620603 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072754326 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062351856 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061992688 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062295535 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072223069 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060607723 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063184732 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.073257785 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061863894 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065419837 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073377479 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067364688 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063375931 seconds)
  done (took 6.061804841 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071577027 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093722003 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073456952 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073483096 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069134375 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069275802 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069265671 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069133431 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068928862 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071737641 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068993521 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131995256 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066140133 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070839519 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069245914 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069915182 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069691056 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069858734 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069659064 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069646502 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069769198 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074500798 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069770636 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074620667 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074475045 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066341486 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069594601 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069759379 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07475198 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069764693 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074363255 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069719316 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069761186 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074770453 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074387764 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069912396 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06046158 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070111679 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070360513 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070361961 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066625626 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07535119 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070220654 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06672334 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070316046 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07023734 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075441599 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.075101487 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072161736 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073361145 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070452753 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075555699 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070443256 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070367717 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075338049 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078579785 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075662824 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075833571 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070702037 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075664629 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076229786 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078916083 seconds)
  done (took 5.938671708 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076863813 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064597851 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077413823 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058622259 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058625784 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068233127 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058713074 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058614633 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06483714 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064713726 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066283087 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068049474 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069893591 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066433672 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067999361 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069930262 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068043026 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068562981 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065373957 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06866889 seconds)
  done (took 2.757444372 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063761863 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063818654 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.059100257 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074497663 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059234887 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066936216 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059609959 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059491176 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059424162 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059440218 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063976046 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064717218 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059371454 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067191635 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062915948 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06680809 seconds)
  done (took 2.411223404 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064978796 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066872873 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092780526 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060271048 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061875994 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059211499 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060100649 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058955779 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061324535 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073235966 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060292336 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062129725 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060065418 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059194176 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059263857 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061950634 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06104527 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060029372 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059954578 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094357986 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068672441 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06102837 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062665158 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061045315 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062163839 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068531844 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061990274 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062318081 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060420456 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062731554 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062270178 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071310408 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062283792 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063950609 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059460886 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060145532 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060475358 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062727499 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062765501 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060516755 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059401394 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062299498 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060553052 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060994818 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061732664 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062725347 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061785147 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070888351 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060887668 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062880244 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060938849 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062524256 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061582057 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072307574 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063255688 seconds)
  done (took 4.901753507 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079799712 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064278555 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058439432 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058355023 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063640649 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064593397 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064340293 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064350498 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064777491 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058634821 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064671886 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063773297 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064666375 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064365767 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064678862 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064435018 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058757834 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064396365 seconds)
  done (took 2.578784879 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069122573 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063987631 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.0641391 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060061137 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060286655 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064855812 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058803223 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060166837 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060187087 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060500485 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060284577 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060080955 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060058431 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06010216 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064173188 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060396006 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060174335 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058980839 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060327566 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058688269 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065278919 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059327266 seconds)
  done (took 2.759656646 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.1178964 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082580396 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157371626 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079027504 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089107347 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070482587 seconds)
  done (took 2.008025633 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095703949 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096394326 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063920311 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063784502 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068259673 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066851009 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06676613 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066744279 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069927032 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072480142 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066972226 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070201643 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069873365 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071636139 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06846203 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068453529 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067298481 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067340362 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064517548 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075230306 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067581774 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070966817 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067623759 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067437036 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067538627 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072559111 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070915597 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073683435 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067820749 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071192684 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069477207 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067794957 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07123537 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073658756 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064852186 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071051279 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067807409 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075839877 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070027156 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073390963 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065150009 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070198802 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071778746 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071323477 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071662013 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068380174 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071352867 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068383215 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068464822 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080215058 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070375364 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073341216 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070213436 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071922633 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071668221 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08014512 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074595711 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073690968 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070440982 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074690758 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073805391 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070445567 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07385922 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074797447 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071341572 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076085151 seconds)
  done (took 6.120791929 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105968462 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064761141 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06964865 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07238222 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071833381 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067152273 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067195584 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067368558 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067138485 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064550889 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10272427 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067401509 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071945207 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071893404 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067206345 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067043785 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067667376 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072464092 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065093454 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079213484 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067724579 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072713624 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072667762 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072764078 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07379733 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069599177 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067827221 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067733931 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067840807 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067729526 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070710495 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067888462 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072609529 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065203248 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072693695 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067781363 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0677655 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0708092 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068071324 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070050602 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073441451 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076542375 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068260189 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068076805 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074282235 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06831946 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068183091 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065585088 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068318354 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065680596 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074330349 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074536005 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074450838 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07339345 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068432641 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06845772 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068368778 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068422203 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06850859 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070313328 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073581817 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068385928 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080613004 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068793556 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068629391 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073999987 seconds)
  done (took 6.133926805 seconds)
done (took 126.639533104 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.260037526 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.221734147 seconds)
  done (took 1.881946875 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075339816 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.267511158 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076247839 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072613177 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.13251308 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132415149 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.106897555 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070490862 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072567134 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070124993 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.16913762 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107635591 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070504232 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070114151 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070086966 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.093610717 seconds)
  done (took 3.086969346 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121864603 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.20755572 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080182517 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068165586 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151260137 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07641798 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07124643 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074811569 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.344802497 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070598882 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.117447923 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083112387 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073860165 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074957433 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071107446 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073416153 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074580782 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075767239 seconds)
  done (took 3.343099365 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104292769 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.112311885 seconds)
  done (took 1.650694198 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.161168276 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107511831 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145400149 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.353635883 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.141244347 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141705918 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.146011121 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.141482651 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.115605896 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.139466228 seconds)
  done (took 3.021226784 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106785305 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102921999 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30578806 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101081165 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080497473 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075190512 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072919957 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078045403 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072952555 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074853885 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120426755 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073275057 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070430849 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122531546 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098194379 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105004632 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069514988 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077039395 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078441044 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069220204 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074154301 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078547072 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178461514 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07792788 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.101136221 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073885374 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075594867 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072854049 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072722151 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076781864 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077441052 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101228432 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077574435 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083217323 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075235353 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097208741 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07053708 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099757016 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073315208 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07102582 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073589332 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077562006 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070948525 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079580617 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073803058 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076360866 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079418729 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.06988526 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074115722 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073503891 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071416745 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075027786 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074856002 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07598471 seconds)
  done (took 6.148974573 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123836421 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.110235485 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068270451 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117602491 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109277549 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068659271 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124378677 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104299502 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122465571 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067987399 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06808546 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067259009 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075077099 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079208221 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120101894 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.11402229 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070369326 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068588799 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112684973 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113230848 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067459568 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124823963 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.116138367 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112457153 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067424484 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068610604 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067225996 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067806366 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076001962 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07588769 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067804257 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078446683 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08014915 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075327556 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067051039 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067215533 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067152007 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075776231 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077399572 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077332095 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074369918 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066767214 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067128402 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067656795 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068129607 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066728447 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077529898 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076384295 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077830352 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068508736 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068041691 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.0674344 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068960379 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075411787 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074552418 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075850781 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078955977 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068665614 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067952032 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069345009 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079776199 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076771686 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07630819 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069001275 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077594824 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.0679575 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078613522 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080854247 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067990582 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068404303 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068142452 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068264661 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06853262 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075146132 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07522971 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06864257 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069782432 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069099137 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078782029 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077255776 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069510535 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079357343 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068844404 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069355077 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069706547 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070769921 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.081728085 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079516614 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070813827 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071313884 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070688412 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07044729 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069638078 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.235994635 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075595938 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074693678 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076159759 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067335264 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076448742 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075023672 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067360516 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07318394 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066655034 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066985714 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066889799 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07308159 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072882389 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074464875 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06661496 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066189526 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074578176 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076447933 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066747457 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072884068 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07565443 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073425015 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066164117 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076434787 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066782873 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075821173 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06679037 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075258198 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06698566 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073441748 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066964769 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066055631 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066730311 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076327911 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067118766 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066555534 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066922632 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066489233 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073431629 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077176654 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067478075 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074486146 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074720877 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068020985 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07681413 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067543246 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077021586 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067806518 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067915411 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066922717 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079225641 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06770856 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068634509 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070565482 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077331448 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067765222 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076958888 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074432062 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067235949 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077939519 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076924589 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074471043 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077591696 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068548379 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068004395 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067677525 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06795198 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077405817 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078858513 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070297049 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068955459 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07442596 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077969396 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067608343 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074900089 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074965024 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075570768 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068440529 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068352333 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078535464 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.08100841 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077456043 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080495168 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078388351 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069451787 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076985371 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080405238 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069526163 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083280501 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069412741 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081757878 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081929118 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078098631 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.082372573 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.237556696 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076783537 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075811824 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077712505 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066507354 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066598873 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073110441 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066621832 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066623822 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072616028 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066990815 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067823118 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.07958791 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067078373 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075828847 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066223709 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073328081 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065958865 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066932144 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078028361 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066743854 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067111315 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073968393 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066675924 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072916808 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075798725 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072987038 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066505556 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067048447 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076386849 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077285494 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067466928 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06647694 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066971649 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075323262 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075920299 seconds)
  done (took 18.564855196 seconds)
done (took 39.134458684 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170482677 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112650743 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224431588 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203511596 seconds)
  done (took 2.24110579 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101791499 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06365134 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106474296 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.116380249 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06371472 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.102420573 seconds)
  done (took 2.02211842 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202313957 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17592831 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251361241 seconds)
  done (took 2.093609555 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.368408985 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151129073 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.258943114 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.51525212 seconds)
  done (took 2.85910052 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.135482581 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132269135 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.076136913 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.14603852 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.083110914 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060588405 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.146411853 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068200752 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.0985249 seconds)
  done (took 2.474945589 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.14146352 seconds)
done (took 13.289876422 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.316590395 seconds)
    (2/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.293247532 seconds)
    (3/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.347701163 seconds)
    (4/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.10668632 seconds)
    (5/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.271725614 seconds)
    (6/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.294358259 seconds)
    (7/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.163829368 seconds)
    (8/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.281320705 seconds)
    (9/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073387208 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.224344933 seconds)
    (11/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074125689 seconds)
    (12/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268838208 seconds)
    (13/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.202126225 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.201452565 seconds)
    (15/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07394024 seconds)
    (16/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.119472085 seconds)
    (17/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.273130129 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075384264 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.124266565 seconds)
    (20/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.140952492 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074436803 seconds)
    (22/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.08167318 seconds)
    (23/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074697042 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078882276 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.074685262 seconds)
    (26/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.195692868 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.157689236 seconds)
    (28/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.158464491 seconds)
    (29/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064606983 seconds)
    (30/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.304923241 seconds)
    (31/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.106529115 seconds)
    (32/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.182714208 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074179827 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.201747727 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.249340658 seconds)
    (36/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073957157 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072282119 seconds)
    (38/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.277447616 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.086227171 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153537215 seconds)
    (41/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.084872796 seconds)
    (42/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.088821047 seconds)
    (43/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.091591421 seconds)
    (44/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.272176609 seconds)
    (45/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079178116 seconds)
    (46/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.187002845 seconds)
    (47/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.190241072 seconds)
    (48/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.153780374 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074532098 seconds)
    (50/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.191574079 seconds)
    (51/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070783935 seconds)
    (52/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.196682044 seconds)
    (53/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066250315 seconds)
    (54/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083872192 seconds)
    (55/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07367544 seconds)
    (56/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071883295 seconds)
    (57/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.214569783 seconds)
    (58/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073229168 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.190728669 seconds)
    (60/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.141818498 seconds)
    (61/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.178785428 seconds)
    (62/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069102741 seconds)
    (63/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.086925748 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.254241387 seconds)
    (65/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.130696877 seconds)
    (66/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.107969355 seconds)
    (67/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066274288 seconds)
    (68/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.132577091 seconds)
    (69/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065199526 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066368496 seconds)
    (71/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064276536 seconds)
    (72/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.069761171 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072080554 seconds)
    (74/341) benchmarking ("sort", Float32, false)...
    done (took 0.136304793 seconds)
    (75/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.18101894 seconds)
    (76/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.072110602 seconds)
    (77/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.207388965 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.086525632 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.08761054 seconds)
    (80/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.076690136 seconds)
    (81/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.224930338 seconds)
    (82/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.068398063 seconds)
    (83/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064122317 seconds)
    (84/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.063333324 seconds)
    (85/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.146912251 seconds)
    (86/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.138552359 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064938186 seconds)
    (88/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064667213 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063673471 seconds)
    (90/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072225891 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145538541 seconds)
    (92/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073332586 seconds)
    (93/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064366118 seconds)
    (94/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.139061778 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.09461782 seconds)
    (96/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.199939976 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091358004 seconds)
    (98/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073440821 seconds)
    (99/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092938863 seconds)
    (100/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.207396894 seconds)
    (101/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156493806 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.246855009 seconds)
    (103/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.127070494 seconds)
    (104/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.171997364 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.077804359 seconds)
    (106/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064926334 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.07544451 seconds)
    (108/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06548211 seconds)
    (109/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.227538822 seconds)
    (110/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073663052 seconds)
    (111/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.180126998 seconds)
    (112/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066979631 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072122806 seconds)
    (114/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.065237492 seconds)
    (115/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065107646 seconds)
    (116/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.070352176 seconds)
    (117/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.068840063 seconds)
    (118/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.162614568 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.226387354 seconds)
    (120/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065723215 seconds)
    (121/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.173883513 seconds)
    (122/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093888188 seconds)
    (123/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065423715 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068979168 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075114535 seconds)
    (126/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.065258607 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.087726934 seconds)
    (128/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.159950799 seconds)
    (129/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076413292 seconds)
    (130/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.132478176 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.12071935 seconds)
    (132/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067008244 seconds)
    (133/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071966941 seconds)
    (134/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091096886 seconds)
    (135/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065401549 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074366573 seconds)
    (137/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.089124618 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134000783 seconds)
    (139/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.151651015 seconds)
    (140/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068183352 seconds)
    (141/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.174565119 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071601363 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075479194 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088338123 seconds)
    (145/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.19719917 seconds)
    (146/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075234547 seconds)
    (147/341) benchmarking ("sort", Bool, false)...
    done (took 0.14474596 seconds)
    (148/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078720973 seconds)
    (149/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072399676 seconds)
    (150/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.203154687 seconds)
    (151/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069696376 seconds)
    (152/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.216755628 seconds)
    (153/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.179730989 seconds)
    (154/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.068035452 seconds)
    (155/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.08820461 seconds)
    (156/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.359287707 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.07626354 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075389519 seconds)
    (159/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.070769171 seconds)
    (160/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.149940033 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065331807 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 0.066319524 seconds)
    (163/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065040763 seconds)
    (164/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06502873 seconds)
    (165/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066180232 seconds)
    (166/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.171194252 seconds)
    (167/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.206202345 seconds)
    (168/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078821405 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.148752798 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064571318 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.06450615 seconds)
    (172/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074679531 seconds)
    (173/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.06560755 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120320251 seconds)
    (175/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064124019 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063393847 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063766556 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06459733 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.138210435 seconds)
    (180/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.081161876 seconds)
    (181/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.070972992 seconds)
    (182/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.071130133 seconds)
    (183/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.13983294 seconds)
    (184/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067467011 seconds)
    (185/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063564508 seconds)
    (186/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.137189571 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073185195 seconds)
    (188/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.06651348 seconds)
    (189/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.14211631 seconds)
    (190/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.069018258 seconds)
    (191/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.173513399 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.1414472 seconds)
    (193/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.090764583 seconds)
    (194/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.06453518 seconds)
    (195/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.137594422 seconds)
    (196/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.080855298 seconds)
    (197/341) benchmarking ("sort", Float64, false)...
    done (took 0.136057352 seconds)
    (198/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.071512874 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108592768 seconds)
    (200/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.088037312 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064702435 seconds)
    (202/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.069010166 seconds)
    (203/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064820546 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.156439102 seconds)
    (205/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065518142 seconds)
    (206/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069209302 seconds)
    (207/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.06883331 seconds)
    (208/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094870939 seconds)
    (209/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.21097306 seconds)
    (210/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.206742328 seconds)
    (211/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.159932131 seconds)
    (212/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.07214493 seconds)
    (213/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067293397 seconds)
    (214/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.081434701 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071777086 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08466803 seconds)
    (217/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.197845051 seconds)
    (218/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.187753889 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070656618 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071778463 seconds)
    (221/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065039938 seconds)
    (222/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065778519 seconds)
    (223/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.272555756 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067810725 seconds)
    (225/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067351853 seconds)
    (226/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150661432 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065749598 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065077414 seconds)
    (229/341) benchmarking ("sort", Int8, false)...
    done (took 0.155210359 seconds)
    (230/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.080481342 seconds)
    (231/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065336053 seconds)
    (232/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069014869 seconds)
    (233/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066704404 seconds)
    (234/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06577951 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093281641 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075916677 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077460964 seconds)
    (238/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065371722 seconds)
    (239/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.212282005 seconds)
    (240/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.06751147 seconds)
    (241/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072449396 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065382008 seconds)
    (243/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065738827 seconds)
    (244/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.200808176 seconds)
    (245/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073135233 seconds)
    (246/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.07027865 seconds)
    (247/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068131728 seconds)
    (248/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.086163767 seconds)
    (249/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06785055 seconds)
    (250/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.076585644 seconds)
    (251/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.071825602 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.095418435 seconds)
    (253/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.06739534 seconds)
    (254/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074090829 seconds)
    (255/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.06752202 seconds)
    (256/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.262037344 seconds)
    (257/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067617184 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089918626 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065096415 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.069836606 seconds)
    (261/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.067440419 seconds)
    (262/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.207400339 seconds)
    (263/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067017906 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064810398 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086420213 seconds)
    (266/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064348607 seconds)
    (267/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079764908 seconds)
    (268/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065102779 seconds)
    (269/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.06527108 seconds)
    (270/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064686672 seconds)
    (271/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065407845 seconds)
    (272/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06405849 seconds)
    (273/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064261406 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094752645 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063399145 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.185985424 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085055152 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.071100046 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089165126 seconds)
    (280/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071705854 seconds)
    (281/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068280829 seconds)
    (282/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.083740453 seconds)
    (283/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066177898 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064938765 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084050962 seconds)
    (286/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.064645666 seconds)
    (287/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064127348 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.082123706 seconds)
    (289/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085096413 seconds)
    (290/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.069999347 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.158884058 seconds)
    (292/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.213293827 seconds)
    (293/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078497617 seconds)
    (294/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064740483 seconds)
    (295/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07329753 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.189084392 seconds)
    (297/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.066958931 seconds)
    (298/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.071283072 seconds)
    (299/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064623983 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082436047 seconds)
    (301/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064789638 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092050796 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12018784 seconds)
    (304/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07218035 seconds)
    (305/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.065360111 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113155421 seconds)
    (307/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07331077 seconds)
    (308/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.06526534 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064659593 seconds)
    (310/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070648813 seconds)
    (311/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065157745 seconds)
    (312/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069260907 seconds)
    (313/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072583243 seconds)
    (314/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065175979 seconds)
    (315/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067401606 seconds)
    (316/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064824541 seconds)
    (317/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065273034 seconds)
    (318/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.072395281 seconds)
    (319/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.0674606 seconds)
    (320/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069065525 seconds)
    (321/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.06537362 seconds)
    (322/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066185517 seconds)
    (323/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064394856 seconds)
    (324/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064865214 seconds)
    (325/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.065240872 seconds)
    (326/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065012307 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076418237 seconds)
    (328/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067016742 seconds)
    (329/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065628512 seconds)
    (330/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.217312034 seconds)
    (331/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067229895 seconds)
    (332/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065234151 seconds)
    (333/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067300861 seconds)
    (334/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.064591764 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065050924 seconds)
    (336/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06592568 seconds)
    (337/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071524325 seconds)
    (338/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.070052526 seconds)
    (339/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069128631 seconds)
    (340/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065428966 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.069244269 seconds)
  done (took 38.71024218 seconds)
done (took 40.183690278 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.124692785 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07814015 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075630455 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072483436 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076402617 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076705862 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076265465 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073902382 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078403119 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075150472 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106603221 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063633643 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071269843 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080656449 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072652111 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079272583 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078963605 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078723387 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064539704 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078994051 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.0895741 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077310386 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072950863 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.07899783 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064883712 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072880905 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120066136 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084289868 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069049359 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07399372 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071725758 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080305391 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071894377 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071524422 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074121614 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069515819 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074488061 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070808381 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.120612849 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069660632 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064857336 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077010465 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071506104 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072314785 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072651279 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076334208 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069562321 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080094198 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064078761 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075481379 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120379612 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070103303 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069231599 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072785721 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069535864 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074078783 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069033257 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075876785 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069352096 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07596942 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.07382224 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07237962 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064317189 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073069151 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071347537 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071706546 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063122662 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06971151 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064082558 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064400504 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063793937 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07329115 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071471172 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069187624 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063644396 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064429277 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063814117 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.07628907 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071697143 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073647224 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065026324 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069938839 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069433424 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065146587 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070240619 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076480248 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064030893 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065203576 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064136037 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079778059 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071484961 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065001997 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077079889 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070556358 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07049072 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064954898 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064388643 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070494653 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073088368 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065184283 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063859017 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070720487 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069916162 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075240717 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066562599 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071656163 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071680485 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.06500421 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075299626 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073220364 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075841161 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079755836 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076003366 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.08047795 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067532687 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065802407 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076988016 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.22942433 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070180951 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07182456 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.0690014 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071750585 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064202923 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06279962 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069175671 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069288704 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063776889 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063898872 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063828 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072232039 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070506877 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062325415 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063569664 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073121042 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072109782 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062714601 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062581399 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071943922 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063795522 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069156077 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068363639 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072009487 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062816756 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063747549 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062504329 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062881741 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062545114 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068447118 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069032249 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06393342 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072087458 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070580494 seconds)
done (took 12.756850057 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068643066 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107577088 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115355852 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109603151 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077778031 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065728314 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068192345 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084532066 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067703707 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089824784 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089724153 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086003589 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128433485 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063309541 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064572151 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065107042 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062798523 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07672055 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113626851 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088718069 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107623944 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064574993 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081225107 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085077116 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077842562 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084236088 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066330825 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06567345 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067780414 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082561068 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090854 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064781693 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065920776 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084171795 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081098234 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07382179 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065778854 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.0719033 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065698264 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064718631 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066817338 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083694728 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072051176 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072276488 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065835545 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.0658319 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065028303 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072720053 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079121711 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071239212 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077780084 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082114504 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066486326 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064843129 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063158587 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072892255 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064887111 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065737349 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065568265 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.0648369 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065331375 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067742929 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070583819 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.0757173 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069017312 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072539022 seconds)
  done (took 6.5798583 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084020236 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092747558 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078632553 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078790399 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063986664 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064891898 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.06489921 seconds)
  done (took 2.145039088 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068654749 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104544085 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111019197 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.11187336 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121084978 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.109832128 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065687656 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097809402 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064185446 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106186482 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.11902379 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.113790717 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068156738 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077107666 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065651919 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.113988925 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066027095 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072335934 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.109833544 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.115612691 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069935631 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095751288 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078873662 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066189246 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.115068304 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106847982 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067822434 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066226715 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067734392 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06514723 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064921796 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088231037 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106533246 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.08014765 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065972784 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064603869 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104564588 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066245559 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103521186 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072698499 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.103721567 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067432785 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067741106 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065355922 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066383463 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.108606623 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066487099 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065191731 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064958035 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.108054098 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064938018 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106926737 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067729541 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070278874 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072602516 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07204319 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073022182 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065920079 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.110099223 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076052004 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067673328 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.119066179 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117756394 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105735744 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117794176 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075133663 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109461016 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106318948 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065885382 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065772143 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066473595 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119075157 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069546602 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068641437 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071054914 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073736289 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113026518 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124347495 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.126400285 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082161159 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070407688 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067684779 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.240441962 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119795571 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070067144 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064816193 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065606338 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064320086 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069459926 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066502105 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069582929 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064427181 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074572548 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067137963 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06658525 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.111491847 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064843453 seconds)
  done (took 9.934799953 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070240559 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067294748 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065799686 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065657767 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065917914 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065831447 seconds)
  done (took 2.03483617 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092924677 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065853713 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077465009 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.06846732 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087586086 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108584973 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107360734 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067484483 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081844642 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076864815 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.108080029 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.109677163 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.109919919 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067178186 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107534872 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067256386 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.108914839 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069582093 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077065283 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067804437 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079889696 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067503535 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067584288 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116566475 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068579843 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067224738 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067060153 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.085453198 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077187277 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067708838 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067434916 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068555464 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075457659 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067795698 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110895362 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075687623 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066792878 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07100637 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068321547 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068454332 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112519782 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068087821 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070410253 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071080955 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067605587 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075271862 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070855405 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070313624 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110569537 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071133731 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070862988 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066783468 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06834659 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070883373 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075132632 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067415202 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070828143 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110824296 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067847996 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.0756368 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066627856 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068691203 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067810295 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068551386 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072010004 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071479653 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075728507 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068258649 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068190693 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066961569 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071336519 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.0671086 seconds)
  done (took 7.207801678 seconds)
done (took 29.475039247 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552942769 seconds)
  done (took 2.144612878 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.96720096 seconds)
  done (took 2.605723461 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.161173003 seconds)
  done (took 11.803515055 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.392554845 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.478558235 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.760214232 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136374116 seconds)
  done (took 3.433389096 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.876943213 seconds)
  done (took 2.522529473 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239976662 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226199663 seconds)
  done (took 2.129672646 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.45064582 seconds)
  done (took 2.084637836 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.209407358 seconds)
  done (took 2.847807645 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236819711 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162131288 seconds)
  done (took 2.042577889 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.625569103 seconds)
  done (took 2.261333814 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.751520254 seconds)
  done (took 6.39096365 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.326089854 seconds)
  done (took 2.021608315 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.241390842 seconds)
  done (took 1.88344266 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.599284957 seconds)
  done (took 4.235586237 seconds)
done (took 50.04519665 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.0866661 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084197432 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083891913 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079315258 seconds)
  done (took 1.947071309 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075923107 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069029033 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071467514 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071832388 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069083522 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.071058764 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071761542 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067999274 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069412547 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068567297 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066856331 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068466777 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070900017 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068008876 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070449437 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072039456 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068413783 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068656899 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070369808 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067925141 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071729262 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068341105 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066350513 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067913184 seconds)
  done (took 3.310722593 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079648764 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070423454 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073318554 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069077092 seconds)
  done (took 1.93861254 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077988522 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074717729 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083228282 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087846525 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.074040482 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074929923 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081987624 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08212186 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063701433 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085010867 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066164269 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064891248 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064954824 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083645832 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081304079 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060487965 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061685171 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075109961 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074190118 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077143326 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066658942 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063624809 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074214126 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075415461 seconds)
  done (took 3.419379077 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083722026 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064166781 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080343341 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089149581 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090454059 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063980594 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.07848632 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090622863 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126909777 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064136504 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072663971 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063846492 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103443146 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064048393 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079445473 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108633931 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111841023 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067921414 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096874779 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063964616 seconds)
  done (took 3.318717295 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078774182 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068847039 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068608018 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06381043 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074616087 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070600222 seconds)
  done (took 2.083550799 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069865643 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066545427 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065629123 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070347232 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065944431 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065950294 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065462498 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06460998 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.06451273 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065233101 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065321105 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065696855 seconds)
  done (took 2.443860181 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215688461 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071006212 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068822279 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066302163 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.066008027 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065238347 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.07882731 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067098253 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087801422 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065294427 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065300315 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067605238 seconds)
  done (took 2.635921404 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106590717 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109793718 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142490592 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114304552 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115387652 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094215962 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.16364966 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09265105 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159472536 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137311802 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116265596 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09344269 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086019808 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068472957 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099509592 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119773243 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138766583 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071828466 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112546282 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.207824165 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132527274 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135392366 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147845052 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116283538 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092225938 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147654666 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095925874 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101963088 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124873953 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127735307 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118805844 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097390798 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07076808 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069840569 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151244763 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108937944 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124399133 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092783626 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106359451 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088900975 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109264713 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069301688 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083255332 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112996963 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086383188 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134799448 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093918703 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11838866 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083388684 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.314559213 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126158779 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13458803 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084281326 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103320229 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135031489 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110052077 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132089442 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103785264 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08029128 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116131177 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103800285 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097557722 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105679155 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077770124 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174364063 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087197531 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109963919 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109874835 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094023757 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094016461 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104628827 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135078115 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127538291 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127326467 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140199492 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095529504 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120333667 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101232256 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128627761 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104403328 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071921794 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.123285632 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130282362 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101033583 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102263455 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133798267 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09325818 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077727026 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102496028 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120602002 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080558567 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115998852 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081475572 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111514332 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141088133 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100973588 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11586102 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125036176 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.255325448 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15250063 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106580583 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071270927 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114354306 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110073864 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153356661 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09291059 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074263824 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098503565 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100768659 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150712593 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105341944 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077656681 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106969591 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137443456 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091796516 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.2152487 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093465884 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140954557 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108469365 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085219865 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07347711 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088782669 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113040615 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107835863 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111839326 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093755318 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083565828 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085848186 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114988032 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093277014 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080130555 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114020667 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098893141 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.0743591 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087854514 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075537876 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142831979 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07799028 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139193865 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127320583 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077038469 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108722772 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099371329 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110097502 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098362945 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121022219 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144741706 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116736009 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092101194 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097273158 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112381507 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.154285423 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135864405 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.26993013 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076035412 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099287318 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110420297 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095809465 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124672247 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093800079 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104785105 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100694974 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137932717 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140651132 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096020926 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098514014 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105004698 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119633696 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074717529 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153630452 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101839636 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116519118 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082927646 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139111689 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11017535 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088141335 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086011789 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099220608 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105218039 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10758019 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144644048 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09548042 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071846185 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092806191 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145543213 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076982236 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110024391 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091126403 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092267509 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119275152 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.095139722 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080947256 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067837958 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129752059 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.162590077 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070163912 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116448224 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110480367 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105120619 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125800995 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069795487 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124845942 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146306053 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123954387 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.328803712 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166486341 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116745128 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116757565 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111159575 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103424363 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077257213 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122710637 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131965219 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093405428 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092782982 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132695295 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116580358 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.13318768 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114740525 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116142734 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102957611 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107197757 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10090984 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103037216 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142500553 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121576078 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.12372212 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085231006 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105410909 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119754969 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137315659 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08127768 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14252451 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.085001592 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12071543 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078156423 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124635461 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077037209 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.10824076 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078879528 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101897677 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069243335 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074054722 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145561496 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114707916 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109494292 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102922277 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141721669 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.14004509 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079279313 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109095806 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119237742 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103642887 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121426459 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113931836 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.268712033 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094139588 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107106949 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08346908 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079841573 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113154704 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091788297 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122259134 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082006387 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072793725 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136820705 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10197056 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092557313 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07624883 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1052615 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120839819 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090537952 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084503425 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115687631 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103240317 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138772718 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089125944 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095472003 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122295317 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078132375 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090345292 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067711526 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084161405 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074817992 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128336188 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075183344 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117506674 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067990351 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131252229 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087903865 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09244089 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102021626 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109985086 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128118741 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09392588 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141539786 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089448202 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121454302 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108837538 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095331919 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089882056 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104416031 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101530065 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.125455367 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096813776 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126356744 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14855924 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10524263 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146749494 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093217727 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129496348 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114167884 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.306353867 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11091699 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165068296 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13593988 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109643014 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109968397 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073213977 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093428595 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102693046 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109915784 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170854849 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123336272 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07063363 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105648355 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092097275 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106314947 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102012279 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080212202 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142651722 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100444226 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086305567 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110843911 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089995857 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103235493 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075714627 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100079805 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104935273 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095139182 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097609465 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118234159 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130232789 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113603795 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145471598 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100659496 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091686443 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118822431 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111294026 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110391953 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086183503 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086571741 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141559523 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124519007 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129350753 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102783182 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111361096 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115440919 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102631862 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129174934 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110823528 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.136211163 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084716461 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.255038562 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067810038 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070969402 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121961493 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105662851 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1095793 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096174029 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070464873 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101069792 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103944858 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070047727 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085516139 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091505368 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093362104 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.090006111 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104710939 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.110094994 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089172487 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101889321 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097256382 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144156107 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099495581 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086458471 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141448562 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147486826 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086411756 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091433679 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070389101 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077899646 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111437347 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150899401 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153790908 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07848571 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086821402 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086085439 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086796754 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.071005251 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089054144 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088574252 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105908896 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101458994 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113700913 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10582784 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075387003 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103452871 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100176366 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093304224 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109229125 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123814326 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.130013925 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.145897726 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116734161 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110081963 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076685374 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081285523 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07622009 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080370723 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103616135 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080345957 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078831032 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.320001754 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090823165 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103252165 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106349114 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085909487 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073712669 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134147534 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067848141 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131922713 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069519537 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079749453 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079843679 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076734592 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091113121 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134782169 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108851809 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109256168 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105753479 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102053038 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158720077 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15570503 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079542426 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141318034 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074440976 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075092421 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074501331 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109926171 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089226139 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115671969 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143425626 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090558955 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10190267 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077833329 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144703643 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099704655 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104640378 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086067922 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078803578 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144760738 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079536757 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.082301455 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090216405 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11294117 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072608045 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105054738 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085641484 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079803063 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168426051 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.712870286 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091380373 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076131666 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097325772 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147162635 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138511705 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103122452 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.288532998 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117941188 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099442122 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094559649 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105739398 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187674471 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07268287 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092401556 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101683103 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095295738 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099588325 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096631876 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086197773 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090181702 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084969252 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077348278 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105446179 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086082991 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09443138 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108832238 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081437688 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.086181666 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128501451 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101966519 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080780391 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086226269 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10339598 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085872095 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101313133 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068817112 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113510334 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091054102 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118829343 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098847334 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108251579 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129040285 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094235032 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138648052 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108202015 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12340905 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087220436 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078266942 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128810084 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.091118854 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077838016 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148610385 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098849152 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091821073 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10537823 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097262664 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115438546 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120027686 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116212808 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10022692 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080923461 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10667631 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.283342142 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086166564 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077849542 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072879928 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074857334 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105059722 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084278735 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081762222 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11250482 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086747438 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100731612 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101315389 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120238102 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085847199 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099617308 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109264336 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08951909 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107707824 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099197772 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126088612 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170978364 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122361072 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127037495 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132136931 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076482817 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074535203 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067499244 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114980732 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078405904 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088436345 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080473829 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135051174 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082237582 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113304773 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243721351 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080460048 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094868833 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09684575 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069222823 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083359456 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108179544 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086825478 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079861636 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120184222 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083176593 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.13006924 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112883112 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100811873 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097212123 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081693578 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116729118 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10535596 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132216891 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09950283 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.07628244 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12760325 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105626198 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145476056 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07589969 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085186481 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.312520338 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103093449 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129456105 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078275302 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14694484 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141644161 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098694085 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131485772 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069390646 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086139785 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0879834 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124474066 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082186059 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108901516 seconds)
  done (took 68.634718066 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.145358736 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.174826686 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.122683213 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.133349427 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.290684787 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299942991 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.15256366 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123692178 seconds)
  done (took 3.249243431 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070597536 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082241203 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079738795 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.243412275 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097069402 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066832782 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072201262 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080950986 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066220066 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065875885 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100161721 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066156348 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066369692 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.524887608 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06571709 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071967171 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066207041 seconds)
  done (took 3.691497681 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.351668272 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.504242525 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.321021788 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.742081243 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166835412 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.721990368 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074865414 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08208932 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.926710682 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.210907052 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.159383452 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087859459 seconds)
  done (took 21.153838801 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078257869 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.119228866 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.118056038 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073187224 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072656905 seconds)
  done (took 2.265556021 seconds)
done (took 121.742339785 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085712308 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17147684 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067522192 seconds)
  done (took 2.068927551 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120925376 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.116467829 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.116070205 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117661038 seconds)
  done (took 2.273688884 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076483305 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075020278 seconds)
  done (took 1.954311673 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227857513 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.21438911 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090134364 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085461373 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078597897 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.07908417 seconds)
  done (took 2.054857163 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073193021 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069924789 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069890556 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070044132 seconds)
  done (took 2.079525101 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170014373 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065916841 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068035005 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069958719 seconds)
  done (took 2.17216994 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087319047 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085692966 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115061437 seconds)
  done (took 2.094712569 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085471986 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083343601 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077710179 seconds)
  done (took 2.051004495 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111164664 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095318113 seconds)
  done (took 2.006134263 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081134584 seconds)
  done (took 1.885309197 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093388829 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097230734 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.182963202 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.14802834 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.184397138 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170698645 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076062352 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076519926 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072141054 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070929179 seconds)
  done (took 2.971762771 seconds)
done (took 26.009094582 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086156157 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.194632886 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.43960695 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085409632 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.653209861 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.43673519 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.732309077 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088754642 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098317452 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067202789 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083797497 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.632036563 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.731139208 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.148369565 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.716862124 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.13887407 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.560252226 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067350196 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066386442 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066988415 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.716721195 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066763432 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067183636 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067500434 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558697284 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.453674669 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068132731 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.140118682 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066936618 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073989076 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.436713553 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068170107 seconds)
  done (took 14.656656716 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077278363 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.14505888 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071990366 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082671109 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068987153 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068740677 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070939556 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06785229 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109725062 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067469063 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084300492 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066803819 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071925112 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068542413 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087719483 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067351712 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069543718 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06789434 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067240173 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068007984 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085955223 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066957444 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067819783 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067777696 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067484974 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081151108 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068492157 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067190134 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067527016 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071446948 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072392031 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068950881 seconds)
  done (took 4.222721 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129512955 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12942881 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072538078 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107146395 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115930789 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06988018 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150307481 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089789424 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11319762 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067831403 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084552104 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067179538 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102948239 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069113167 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088162782 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067520665 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069684984 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067736039 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067026053 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06762397 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086473458 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066942401 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067748492 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068025754 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067998803 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083366866 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068564511 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06744437 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06734776 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071611206 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07333597 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068638352 seconds)
  done (took 4.476223255 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071098625 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.06993082 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075867019 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078798276 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064923153 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067149175 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068121575 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065266185 seconds)
  done (took 2.38500984 seconds)
done (took 27.540059044 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080583544 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066569151 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068979048 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085817029 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072177794 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.109679611 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063595777 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073066836 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069795617 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069861208 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071404793 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066075075 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06843418 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063229984 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070263873 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064351776 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112256055 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068787715 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.109017684 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.110387153 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066850733 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069900784 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072837448 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.110321122 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.109649052 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.109710873 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073412927 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070332851 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064999015 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067766378 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.169799646 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.183612283 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074324557 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116375548 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065276771 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064844959 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069116998 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067474708 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.11352674 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073906352 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067219886 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073623883 seconds)
  done (took 5.306908935 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189974706 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.192995441 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.185277049 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079058312 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091448512 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078598773 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192191795 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076120764 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074319046 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.190995289 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070412537 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074436532 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076695902 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067541106 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074222279 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070505058 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075743429 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068568875 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074104517 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074041968 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190840335 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.0682007 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079007412 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075784582 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069917044 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075776406 seconds)
  done (took 4.481563151 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075152202 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087575475 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091004002 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145318539 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109199116 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081886761 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080963612 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092498415 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10037616 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067005302 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07068318 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097644283 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095232273 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073613849 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106037713 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084680476 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078723934 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068158024 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073308791 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100646991 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089169044 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084908804 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.09916715 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.08641016 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065713559 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075853149 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073704081 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08227956 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074158923 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079029961 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070766062 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070015824 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067073045 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078340996 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071096045 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064807519 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089797114 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079997386 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081941397 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107085458 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077337704 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068722352 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.1442287 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131957627 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066887854 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069478839 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071234963 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079776255 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068549418 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09775235 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082823892 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066895458 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086143638 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068625865 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068560409 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083222236 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068990345 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069082953 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078775511 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073201355 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087897258 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072491475 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088070502 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066930347 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078598475 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068586236 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068875841 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06572226 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101153384 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074632311 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117525214 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068340289 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064965327 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079472766 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078592542 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074009639 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066670075 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086310615 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07913 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07085405 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078028203 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069734042 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070230758 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103471774 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065820421 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.0648579 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06481069 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069222904 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070691703 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.06802012 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080324264 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066780809 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070939163 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082556095 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067510041 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067938388 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069627555 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068341841 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066788404 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077982918 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071905724 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069504762 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080558007 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.06887585 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07105938 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082866108 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076854104 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067190134 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068925729 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071419602 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071220402 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073977825 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072731335 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071196672 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074242899 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077037622 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076203097 seconds)
  done (took 11.086267932 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.208215337 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.193065798 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068311223 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.189627758 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07588429 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.123668266 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.191098573 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.130317482 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067685458 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068388888 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066672821 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.137977986 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.132550853 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.143266362 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.114751632 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067897967 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093967368 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.143753973 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.195736175 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.190293257 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093432877 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075553909 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070082255 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069030828 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068871403 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07683666 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083491011 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076386519 seconds)
  done (took 5.113583641 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076489656 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082721437 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070617256 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091273291 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083716732 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067029062 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069211311 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068127741 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084091841 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072704873 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066819573 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071489046 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07011064 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067536973 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06779043 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073356755 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07355385 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06558028 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07025551 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071197842 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077849234 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154883196 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071618415 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070165306 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069221629 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06710526 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073547462 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075211426 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06649231 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100107793 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063980848 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071253277 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081445342 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067924178 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06716975 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068047235 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067315168 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067292654 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067769223 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065298407 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065334042 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073236428 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066084565 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.07245421 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081727285 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076238113 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068876415 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069718324 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069624956 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064215222 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070616125 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070791115 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07017226 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076025134 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.0710488 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069749794 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068988552 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098176486 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073451474 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067065757 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067402292 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065651508 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068926598 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075418705 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084175087 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069185145 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065692501 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067483063 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075087911 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082240734 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066975166 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072836843 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064228115 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067465748 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069598028 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070370871 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069109475 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065738327 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067450425 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067779583 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068401786 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067129782 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067793543 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070384462 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065277155 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065871729 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06830586 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069152131 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073018025 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066183151 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070118158 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069249593 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066617434 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070696687 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073815587 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070862376 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088061975 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076053184 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06820244 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065548853 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082802561 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06957555 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066948597 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071262361 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072475824 seconds)
  done (took 9.470919759 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098822096 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068274591 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086906321 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098522337 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076970131 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071785685 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081145109 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.06754504 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088482468 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065703693 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07543257 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064687611 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080311942 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076001553 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068130856 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077168715 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069198999 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08789948 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081667778 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.06513759 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075944228 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079248173 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079251233 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085192473 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084623548 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085651859 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079035462 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069247674 seconds)
  done (took 4.0881046 seconds)
done (took 41.340516803 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.911716887 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.094587295 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.912406463 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.411513193 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.983808342 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.014654293 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.980819139 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.881970219 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.519130153 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.976323732 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.648860117 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.521991404 seconds)
done (took 68.746656199 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.00440775 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.039470103 seconds)
    (2/2) benchmarking "String"...
    done (took 2.140487247 seconds)
  done (took 6.048848965 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.325664281 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.882171465 seconds)
    (3/3) benchmarking "different"...
    done (took 1.922087894 seconds)
  done (took 7.941008944 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.213918448 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.881795558 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.1608094 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.881273355 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.890509589 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.368050916 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.058454792 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.523516695 seconds)
  done (took 33.586022219 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.885397946 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.272532106 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.253576653 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.328098326 seconds)
  done (took 21.634796083 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.32525767 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.206560298 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.206406472 seconds)
    (4/4) benchmarking "different"...
    done (took 2.353110912 seconds)
  done (took 10.999219547 seconds)
done (took 92.396861639 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.886362661 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.032753673 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.888895911 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.060943309 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.900749098 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.970534293 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.89159652 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.419957251 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.888243598 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.893760777 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.809362085 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.890235216 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.885068992 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.932391565 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.887673669 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.933519634 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.020694491 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.887048664 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.917597634 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.403262003 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.22929493 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.887028175 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.896062262 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.944228089 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.06246675 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.930905113 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.158096866 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.891193782 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.486141593 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.903917144 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.891342623 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.890210464 seconds)
  done (took 207.38504498 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.885024193 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.666849061 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.665185578 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.901393118 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.16577932 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.227735792 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.682190035 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.186975145 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.889244153 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.894238727 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.871081675 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.886506849 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.849980215 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.409338804 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.920330213 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.941400331 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.704248714 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.638759907 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.926802211 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.745670073 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.893367626 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.312071273 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.321185769 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.637324026 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.891794354 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.892244498 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.043000536 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.896953649 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.344119187 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.706481724 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.909102164 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.900438819 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.356907381 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.117707356 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.890131949 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.894439916 seconds)
  done (took 180.891319825 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.136832104 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.911680394 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.934111405 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.998070983 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.620693278 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.540962866 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.889386657 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.884637333 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.885352299 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.891984685 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.88728165 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.950584866 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.244787801 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.9106888 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.889916277 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.88550086 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.201828399 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.894417737 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.884942713 seconds)
    (19/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.885369941 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.885118562 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.979709503 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.23116262 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.995744574 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.888658845 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.895769601 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.99524329 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.895692881 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.885683272 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.994391566 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.889674859 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.010931754 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.998861669 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.896736733 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.941197717 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.895883502 seconds)
    (36/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.886231107 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.976700508 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.890176351 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.886195187 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.887344352 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.927872937 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.89056946 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.673885968 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.988448507 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.889504715 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.90440306 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.448938493 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.474454319 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.892376927 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.886944602 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.886173825 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.885895226 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.886461633 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.223760474 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.890195875 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.920430724 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.804433087 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.890925703 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.886579039 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.890492324 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.886622468 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.887766046 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.893445841 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.92484533 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.453331077 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.152591688 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.890865093 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.239130655 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.477375305 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.89123945 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.071184636 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.948675349 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.893238298 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.050009054 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.891377528 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.887994575 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.8875465 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.887248358 seconds)
    (79/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.88797164 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.74912976 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.837841507 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.893338468 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.997522156 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.892492969 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.88820718 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.927282668 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.192295214 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.896494874 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.907137185 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.947015901 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.890059257 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.888289344 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.895177402 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.823161423 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.893826582 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.888705362 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.888852478 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.071103352 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.893492316 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.940336314 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.253574141 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.981017575 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.288335723 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.677819857 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.894699304 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.888973562 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.90702651 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.891128372 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.889048223 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.899819186 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.890012266 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.889426554 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.89301082 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.890175081 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.889591738 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.890787106 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.907494057 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.89123334 seconds)
  done (took 417.009538379 seconds)
done (took 809.318800335 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.546494982 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.604727644 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.467786243 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.520133307 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.473911681 seconds)
  done (took 14.434291873 seconds)
done (took 16.255354065 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.919354423 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.914036183 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.906150672 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.916163979 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.913012744 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.910127009 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.920051852 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.929289609 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.92158264 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.908451365 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.917955409 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.911848335 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.921611875 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.924141337 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.924518145 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.922802525 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.913390444 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.905048737 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.92057021 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.912717833 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.913270396 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.912352914 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.912192526 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.918474375 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.924674151 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.914117519 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.910273564 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.917984014 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.915033568 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.921015123 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.930826009 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.924941381 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.923825745 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.922796274 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.922608967 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.925883772 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.916305312 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.92839869 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.914204003 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.927995577 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.922128584 seconds)
  done (took 80.473991914 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.903607356 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.068116359 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.182156504 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.943515088 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.904801599 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.178078506 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.969819636 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.081751543 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.064478929 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.180337047 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.194997803 seconds)
  done (took 24.497799832 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.901893724 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.072027741 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.17962984 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.946297988 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.906881663 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.220220761 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.975586404 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.066881543 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.070836065 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.190691509 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.200296971 seconds)
  done (took 24.574000496 seconds)
done (took 131.370059022 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.439316048 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.954657405 seconds)
  done (took 6.217697932 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.898612404 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.914962065 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.07299842 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.89455032 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.896982964 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.89691283 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.896887689 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.897101331 seconds)
  done (took 17.192889032 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.895388459 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.89546772 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.895660715 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.896326405 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.895122565 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.895895319 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.896195126 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.895283376 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.895574365 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.895363098 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.896381008 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.896247372 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.89555636 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.89584016 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.895813747 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.896014908 seconds)
  done (took 32.156374936 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.896256462 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.896000928 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.895643444 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.895813538 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.896251758 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.895656841 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.898947677 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.896904458 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.896119783 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.896643267 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.896754443 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.896249514 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.896986601 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.896479386 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.896683423 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.896618824 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.896868658 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.897092774 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.899303716 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.896935812 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.897078108 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.896990762 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.905596739 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.897354723 seconds)
  done (took 47.356502711 seconds)
done (took 104.767033925 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.498879254 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.899336704 seconds)
  done (took 9.223863119 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.901062961 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.897521246 seconds)
  done (took 5.72121135 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.897193332 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.89749633 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.897717913 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.897356254 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.89750305 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.897619515 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.897529302 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.897620313 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.897139195 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.897496092 seconds)
  done (took 20.800349722 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.897951064 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.89801137 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.897708786 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.897165889 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.897505215 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.897743596 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.897709103 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.898016412 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.898567631 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.897827152 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.897665835 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.898077838 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.898809532 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.898620072 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.898157215 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.898181022 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.898506896 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.89868696 seconds)
  done (took 35.991713231 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.898401437 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.899158487 seconds)
  done (took 5.624722401 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.898848447 seconds)
    (2/7) benchmarking "second"...
    done (took 1.898900779 seconds)
    (3/7) benchmarking "month"...
    done (took 1.898744591 seconds)
    (4/7) benchmarking "year"...
    done (took 1.898800757 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.898492147 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.899291302 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.899328031 seconds)
  done (took 15.119656415 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.899739461 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.045559566 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.086230026 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.365007413 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.900128692 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.902272191 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.542150611 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.901747504 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.903560538 seconds)
  done (took 20.374219997 seconds)
done (took 114.681591696 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.669246701 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.905757087 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.728657129 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.055236689 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.973194608 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.237982238 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.917429538 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.440752009 seconds)
done (took 44.757279238 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.9297619 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.898649635 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.940767769 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.940218439 seconds)
  done (took 22.608621973 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.911836605 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.552234144 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.93589285 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.002052673 seconds)
  done (took 23.321431898 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.414445731 seconds)
    (2/2) benchmarking "read"...
    done (took 2.311945964 seconds)
  done (took 6.569037356 seconds)
done (took 61.260327138 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.900512111 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.900316876 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.900856361 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.900521927 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.900548129 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 1.900918909 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.900051617 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 1.900951308 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.901616202 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.901495986 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.90113651 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.901596229 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.901337982 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.901973503 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.900874824 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.901656869 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.901588744 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.902025327 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.901630899 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.901035376 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.902038124 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.902696611 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.901685641 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.902152407 seconds)
  done (took 47.460558975 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.902681891 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.901788593 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.902688114 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.901700243 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.902648687 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.902633684 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.902444379 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.90199585 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.902222402 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.90258467 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.902216555 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.903163053 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.902832181 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.902965873 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.902615761 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.903134391 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.903646264 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.903888478 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.902953403 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.903291929 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.90269719 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.903258125 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.903264125 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.903261522 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.903392249 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.903443521 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.903270547 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.903615042 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.903207199 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.903500163 seconds)
  done (took 58.918011387 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.903130894 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.903229184 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.903686643 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.903180427 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.904025176 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.903689503 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.904056427 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.904053425 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.903932577 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.903939158 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.904054381 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.906704395 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.904398683 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.904398856 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.903964552 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.903892628 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.904126774 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.904616204 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.903962429 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.904245451 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.905044117 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.904754139 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.904332904 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.90455024 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.904090812 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.904804491 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.904131832 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.90451658 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.905218573 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.904612638 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.904569298 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.904853133 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.905147729 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.904931491 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.905512758 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.905748031 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.905041568 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.910080432 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.9152751 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.90500148 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.905121328 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.904810877 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.905293746 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.905933736 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.905888893 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.905423415 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.905716624 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.905844892 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.905572899 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.905605681 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.905583541 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.905956444 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.905496496 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.905964302 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.905948541 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.905852538 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.905988104 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.906403419 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.906409433 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.90624191 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.906324153 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.906214681 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.906275861 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.906468931 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.907435359 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.907112231 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.906659025 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.907109081 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.906224105 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.907077168 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.906852778 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.906933821 seconds)
  done (took 139.022685786 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.906834582 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.906904769 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.906812084 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.906754771 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.906445255 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.907109458 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.907170809 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.907707024 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.90794084 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.906874548 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.907010536 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.906696971 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.908466781 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.906819185 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.907243075 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.908074471 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.907931874 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.907242374 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.907940294 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.907667874 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.907316741 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.90768112 seconds)
  done (took 43.796563915 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.907275405 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.906970773 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.907293993 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.907842796 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.907897246 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.907569261 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.908246045 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.908416397 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.907952419 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.908121195 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.907578287 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.908293206 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.908255328 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.907852175 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.907630404 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.908947912 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.908145492 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.908653576 seconds)
  done (took 36.178699551 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.908410422 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.908441662 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.907900674 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.908180021 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.908661552 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.908779873 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.908841453 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.908400104 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.908914985 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.908603883 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.911012009 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.908262549 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.90881485 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.908817722 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.908853253 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.909526393 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.908974899 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.908951729 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.908956538 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.909048497 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.909546173 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.909462917 seconds)
  done (took 43.831978068 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.909611224 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.909148604 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.908955338 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.909339241 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.909115868 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.910705706 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.909146955 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.909759312 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.908913831 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.909013397 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.909794318 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.909217151 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.909717439 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.91012451 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.909398978 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.909456133 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.9096139 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.90979604 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.909783871 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.909569873 seconds)
  done (took 40.027865451 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.912984869 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.912577033 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.912813521 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.912665698 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.91339045 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.9127133 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.913849359 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.913423357 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.914096281 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.914787472 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.913252637 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.91386419 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.913153504 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.91376631 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.913906943 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.914056447 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.913635924 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.913688126 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.913335944 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.913523239 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.915379263 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.913998022 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.914335865 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.914640673 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.914248626 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.913983988 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.914574606 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.91444431 seconds)
  done (took 55.423510391 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.91184655 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.911728902 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.91226487 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.911955885 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.91217023 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.912092182 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.912209655 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.912477119 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.912894102 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.91168628 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.912342348 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.91221704 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.912438277 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.912544025 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.912361007 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.912211567 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.912486185 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.912737896 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.912484887 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.911919266 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.91308394 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.912315567 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.913098993 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.912615492 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.912275725 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.91261874 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.912977005 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.913229819 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.913203128 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.913287452 seconds)
  done (took 59.213667452 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.936663155 seconds)
    (2/2) benchmarking "in"...
    done (took 1.933953337 seconds)
  done (took 5.711245136 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.912781922 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.914128158 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.91244137 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.91318051 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.913696536 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.914200457 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.913581177 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.913437516 seconds)
  done (took 17.148554165 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.913716791 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.919973299 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.913334262 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.913538284 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.916622143 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.924758639 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.915307424 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.917314324 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.919025025 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.915762812 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.921189879 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.922303939 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.926924739 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.921968065 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.914523892 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.915399904 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.919239822 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.920801095 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.918952515 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.914314691 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.919964757 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.917281765 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.914315134 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.917217067 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.914881258 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.920873507 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.92935057 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.919026821 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.91949278 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.914662852 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.926099707 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.915458286 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.91830784 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.919947399 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.91861685 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.91539422 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.925507584 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.919267953 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.918326347 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.915535527 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.920161116 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.921219034 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.922558661 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.927223015 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.918562946 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.915778589 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.91570135 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.919476235 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.916528899 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.923782942 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.926292034 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.920309071 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.916131685 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.916494012 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.922500871 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.919549067 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.91928113 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.92211526 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.926903006 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.926442605 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.923981445 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.943334295 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.930755033 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.919534957 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.919325966 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.931903091 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.950327242 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.921504698 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.922012172 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.917966284 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.928242364 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.916465421 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.916611062 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.917050338 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.935156593 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.929746688 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.920247687 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.91715389 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.916873518 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.920210235 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.922333807 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.920871965 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.921085389 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.920054295 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.933467084 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.951897176 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.920657214 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.920819781 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.922807089 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.920107608 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.925648098 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.923823085 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.918828209 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.918155205 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.922666484 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.922069817 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.921106427 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.920690803 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.918220378 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.931066331 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.918686127 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.918253101 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.925962914 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.931155489 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.918010359 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.921461969 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.923067373 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.921525054 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.9305012 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.922053245 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.921821705 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.91852523 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.920861665 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.927040292 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.919049541 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.926558438 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.93123299 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.930648345 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.921582552 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.926851625 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.92670052 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.926445284 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.935502921 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.952604981 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.91935029 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.926756397 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.92983673 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.9376345 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.927209019 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.919764821 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.925882782 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.919374263 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.920148407 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.925954089 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.920124445 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.922944624 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.919854543 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.922794852 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.920280927 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.923239426 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.923733275 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.925191594 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.926067078 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.923455569 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.927717501 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.92343672 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.926412701 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.931287552 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.921694198 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.924305356 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.920891052 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.926350595 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.923368837 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.925791011 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.921162291 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.921209265 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.923592808 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.922461557 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.929878783 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.924581141 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.921276168 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.923962744 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.92660829 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.923985076 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.923831715 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.922900092 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.924470096 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.924700721 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.926923159 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.925944311 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.927853633 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.924327194 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.929903254 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.921962686 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.921365507 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.924756983 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.921997423 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.922402058 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.92963241 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.938169208 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.929930248 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.936345918 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.921812317 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.933702189 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.922631722 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.927510695 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.926768753 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.92562384 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.92578771 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.922664534 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.923272604 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.930753324 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.951032179 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.939157523 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.928540872 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.925834997 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.93024622 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.92765225 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.932239044 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.923686951 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.926889688 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.928470741 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.92644418 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.926398154 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.923516166 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.929747961 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.924549303 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.923100628 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.931241462 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.926118951 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.92319373 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.928188636 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.924325144 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.929679463 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.923893103 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.924093804 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.925046418 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.924061867 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.935851367 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.930167969 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.924294288 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.927659426 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.930323833 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.92695503 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.924812287 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.929127566 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.931093476 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.924691372 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.928522489 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.935492705 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.92618339 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.925297566 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.925083985 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.92467891 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.929930952 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.925249187 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.932343097 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.934713881 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.931098884 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.924933002 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.933496768 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.924706293 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.931090416 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.92790458 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.929393326 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.927677332 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.930448196 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.92818658 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.924760705 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.936173079 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.925563987 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.929834054 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.925185112 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.929853619 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.92780793 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.931861468 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.92820947 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.932569816 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.938340233 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.935671237 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.927446046 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.92961988 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.931787922 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.928128818 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.930789773 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.930378132 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.944458225 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.941551822 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.926139919 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.926414302 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.928171722 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.932138413 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.926832722 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.930117985 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.938233907 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.928359259 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.929678984 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.931581352 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.929422486 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.930537263 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.937022091 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.931513456 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.93369804 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.931546232 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.931729193 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.932062002 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.927070573 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.932493306 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.929686199 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.932664187 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.932180515 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.927365199 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.931556691 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.927757032 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.94032946 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.928317196 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.931341295 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.93921694 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.932619476 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.928903634 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.931956685 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.928182447 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.932698683 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.932925113 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.928923026 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.930716657 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.931475807 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.936220698 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.944853328 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.935932927 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.941799728 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.934021524 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.943283267 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.931235941 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.928729598 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.931518507 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.937390333 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.942377833 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.92834462 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.929295304 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.940199101 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.930262827 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.930697388 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.93691918 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.928792902 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.932351901 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.932063057 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.931759057 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.938561913 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.936257172 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.928915556 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.932602294 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.929668673 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.930640771 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.936516764 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.934915232 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.934306117 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.93204114 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.929825164 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.932430303 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.933061753 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.932256403 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.933187256 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.929768137 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.929936058 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.941257991 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.93364007 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.932837053 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.938141308 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.930656858 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.943185622 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.933595154 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.933735856 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.933136532 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.930361118 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.934195085 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.930032251 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.933745881 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.93148069 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.930620582 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.933735317 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.946955762 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.942422032 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.935282057 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.93656264 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.934253157 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.935701851 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.947144266 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.961562572 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.934254349 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.93748067 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.936118501 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.942456338 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.937540141 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.941761076 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.939026033 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.944737553 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.936632816 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.932068512 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.940210044 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.950732753 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.934887143 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.931432751 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.931777776 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.941121312 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.935437891 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.932512709 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.934273326 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.939180173 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.934888762 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.948512537 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.932492376 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.934909938 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.93531736 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.933094253 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.935730683 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.932880556 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.937625056 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.937729582 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.93591568 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.935946957 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.939278418 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.942232441 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.933194633 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.940883925 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.947961502 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.935580644 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.935986811 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.936151199 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.935962882 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.939578321 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.93670162 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.933170916 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.936435638 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.933162038 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.936100813 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.940396297 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.947361229 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.938801173 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.933573005 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.93403663 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.941032244 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.935026191 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.937079442 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.93952885 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.946679018 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.942069865 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.952318006 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.948889817 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.936986067 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.936479573 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.946836526 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.947429273 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.937867449 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.934983712 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.937959757 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.94101114 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.940481356 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.939324907 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.93813566 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.936840896 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.945013866 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.935774017 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.936969103 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.938340795 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.93502381 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.941694431 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.941480505 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.945554931 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.935177298 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.935788 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.935218654 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.940009544 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.940373426 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.941418709 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.938248654 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.936208386 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.941051235 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.94161462 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.940960499 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.93561535 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.936418955 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.940935325 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.936579731 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.936405499 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.937187129 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.937644341 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.936780156 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.944251835 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.946781364 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.936171545 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.941337141 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.938899309 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.944514923 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.940356624 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.940350062 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.93958062 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.936665318 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.948361154 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.93714349 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.940013365 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.938460898 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.936540778 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.946200653 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.94244962 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.945780216 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.940013369 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.938540606 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.93675008 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.945589538 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.950074458 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.945493254 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.944830527 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.947011014 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.945673725 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.943592357 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.937985745 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.937703987 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.93922713 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.939987125 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.945674263 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.942800961 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.944337417 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.94144785 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.943413288 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.942470008 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.943880339 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.938487391 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.938384422 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.946329816 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.952600975 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.950556808 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.938559533 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.94417988 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.941550872 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.947062911 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.952784905 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.941521968 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.942013751 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.941746465 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.943709956 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.941580298 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.951655582 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.950275182 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.947106235 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.942550328 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.949310308 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.966596282 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.944596415 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.954338804 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.980495048 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.941945958 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.942855324 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.94326051 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.941787356 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.942765442 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.944132975 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.943599752 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.950428372 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.942954937 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.939870723 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.951416041 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.939682521 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.940176341 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.943038456 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.943127329 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.951125153 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.943100914 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.951254237 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.94353836 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.939930172 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.942012994 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.943948377 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.940875788 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.940534929 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.940513091 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.946541283 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.940818453 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.944016385 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.953626755 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.944022381 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.94680575 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.958552264 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.955189857 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.943926323 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.941210929 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.944357781 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.951034994 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.948199726 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.940967922 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.950193254 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.951861581 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.948868793 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.951914975 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.94631993 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.946608561 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.946086948 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.941761843 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.944417916 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.959550577 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.95877513 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.943965012 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.943997427 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.95327421 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.942926984 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.952741907 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.952321161 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.945647553 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.94803149 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.945834021 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.942529499 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.94181943 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.942837767 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.949787411 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.95220805 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.945731996 seconds)
  done (took 1153.913409126 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.943606315 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.942738438 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.943842237 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.943183421 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.94327672 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.942862897 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.943224924 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.942644623 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.942810848 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.943242794 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.9431687 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.943206177 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.943290435 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.943825872 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.943476206 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.942776509 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.943231994 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.943115013 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.943965394 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.943903684 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.943217292 seconds)
  done (took 42.679045783 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.943468667 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.943298883 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.943728079 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.943670752 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.943597244 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.944078517 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.944044534 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.944546843 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.943992791 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.944093798 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.944179283 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944567987 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.945434139 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.9438819 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.944171524 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.944525041 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.944093003 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.944389778 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.944426129 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.944688832 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.944823552 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.94508544 seconds)
  done (took 44.643382015 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.947972169 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.947706149 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.948798998 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.944856545 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.94512227 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.948283897 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.945454461 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.947689364 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.945770154 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.947276658 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.958490338 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.955387991 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.945077895 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.949529346 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.94496227 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.949757162 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.069817858 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.948566152 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.949035475 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.94544648 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.949206698 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.95607092 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.945617769 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.9462682 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.947008397 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.949560539 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.946116042 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.946407365 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.946455034 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.948945042 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.954483881 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.946051817 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.950706905 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.952987873 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.947634079 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.948555535 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.954935097 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.949395826 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.946573835 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.94659636 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.961911626 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.977291862 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.946611397 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.950012872 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.958103229 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.946437038 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.947289594 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.955529701 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.95696311 seconds)
  done (took 97.537274565 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.946953977 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.948795866 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.947574588 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.947581084 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.948210134 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.947188126 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.947621955 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.947639312 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.948025162 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.948199174 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.948450943 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.948937873 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.947701082 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.948439346 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.949145677 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.948035563 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.948323679 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.948224826 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.948444968 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.947688168 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.948743499 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.948318144 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.948524057 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.949009481 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.948811717 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.948964585 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.948421709 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.949309287 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.949463631 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.949063882 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.948628155 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.949134935 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.949613239 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.949452407 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.948698795 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.948705769 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.949539174 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.949214306 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.949388994 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.949074183 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.949625757 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.949617287 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.949335557 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.949785461 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.949327269 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.949909284 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.949949685 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.949858696 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.949822289 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.949952568 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.949429275 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.950879918 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.950239018 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.950371206 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.949807349 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.950472304 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.950209716 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.950003709 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.951619425 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.950525543 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.950629572 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.950746418 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.951320959 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.951132497 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.951555471 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.951532872 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.95089835 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.951294633 seconds)
  done (took 134.426707457 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.95348657 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.954376679 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.95423688 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.955239362 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.954688255 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.954555097 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.95511495 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.955074429 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.954729601 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.955270747 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.95566028 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.952532899 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.955278639 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.95205382 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.955116232 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.955469274 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.954994955 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.954970093 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.954709699 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.956527343 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.955248706 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.955725179 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.955558693 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.956223268 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.956418578 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.955189369 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.956437959 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.955539551 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.956469314 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.95623244 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.956285687 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.956388939 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.956036132 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.956403439 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.956417884 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.956123954 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.956143689 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.956504079 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.956554711 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.956557074 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.956464509 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.956687695 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.956725804 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.956261695 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.956661109 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.956142273 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.957204281 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.956715972 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.954178009 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.957475369 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.956455964 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.957734205 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.956972625 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.957721857 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.957176569 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.954299664 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.957080629 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.958003246 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.956938865 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.957961074 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.957735038 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.955224245 seconds)
  done (took 123.143805743 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.953467212 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.953998813 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.954273029 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.953379761 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.953972958 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.954389628 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.953813106 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.954318 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.953813167 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.954366425 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954257785 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.954606974 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.955973177 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.954361384 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.955056148 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.956133909 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.954917175 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.954813962 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.955915174 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.955841187 seconds)
  done (took 40.971940414 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.954507078 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.954889408 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.955129806 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.955724987 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.955529905 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.956106422 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.954969138 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.955825037 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.954919015 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955437409 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.955752256 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.955399865 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955091887 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.955736847 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.955572533 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.956270247 seconds)
  done (took 33.168487129 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.955524113 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.955638864 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.959037727 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.958933689 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.955907805 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.955851982 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.956477413 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.956405451 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.95656707 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.95703381 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.956845664 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.95698516 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.957013573 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.959703532 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.957236783 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.95689122 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.956734188 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.956823465 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.957805642 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.959848084 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.958198365 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.957462828 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.956903274 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.957345558 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.957191923 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.958374676 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.957464754 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.957334089 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.957285532 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.957405488 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.957449626 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.958414729 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.957441605 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.957126212 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.960118235 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.95749512 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.957634726 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.957699326 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.958097062 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.958577004 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.957720108 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.96122416 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.958530518 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.95891256 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.957986468 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.957940904 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.958604396 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.959458748 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.958508176 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.958350578 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.959325766 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.961035166 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.958941729 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.959226938 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.958725289 seconds)
  done (took 109.565988 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.958761831 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.959004223 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.95910923 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.959009278 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.958897535 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.958884597 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.959674412 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.959348973 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.959196215 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.959385652 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.959359299 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.958745559 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.959378331 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.959257392 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.959842105 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.959392569 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.9593125 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.959872097 seconds)
  done (took 37.151218005 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.959291816 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.960160078 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.959805429 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.959513413 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.959478296 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.95989051 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.960496644 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.959898879 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.959728402 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.960020372 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.960017876 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.960307448 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.95995545 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.960100763 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.959876688 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.960021498 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.959839778 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.960336093 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.959536516 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.960943155 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.959962964 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.960070965 seconds)
  done (took 45.004899393 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.961489716 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.962049738 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.979881334 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.988872334 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.987539137 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.007963245 seconds)
  done (took 13.774440759 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.960771877 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.961096666 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.960900155 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.960916366 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.960860779 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.961098223 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.961611305 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.962139754 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96084994 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.961723109 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.961296817 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.961395149 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.961273126 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.961756439 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.961633947 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.961675143 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.962937718 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.961644348 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.961709134 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96156043 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.962085454 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.962380716 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.961333431 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96160053 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.961964267 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.962740102 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.963133317 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.962592209 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.962735488 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.962658315 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.962700947 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.962722553 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962902962 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963073207 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.962712121 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963281803 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.962123951 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.963523708 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.963272367 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.962705832 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.962717446 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.963215522 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962707011 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963498674 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.963115778 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963583686 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963469651 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963637943 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.963224657 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964164326 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.963465293 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.964125348 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964070735 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.963319225 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963741903 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963684452 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.963585165 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963764798 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964049445 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964134851 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963942279 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964071301 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964207547 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.964149276 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964586816 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963684969 seconds)
  done (took 131.426238151 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965116752 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.964344884 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965850014 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.964870927 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964449226 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964731033 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964771001 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96442575 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964372923 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964715452 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965228081 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964660796 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.96539761 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965428515 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.964781658 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965716256 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965210552 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965060114 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965021262 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966634818 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965850066 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965093541 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965639083 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965326082 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.96650567 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965402965 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966227832 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965807182 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965973669 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965653408 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965774045 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966275436 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965677735 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.965637093 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966339497 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966009086 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966496106 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966058104 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966434414 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.96640388 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96626421 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966708676 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966157849 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966532617 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965812647 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966657274 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96588679 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966361875 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966250597 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966654594 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96654906 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96705227 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967260547 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966731709 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966299113 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966687772 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966656588 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967008287 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967607644 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.96653997 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967156313 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966631955 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967527319 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96763336 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967640316 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967364954 seconds)
  done (took 131.646788098 seconds)
done (took 2687.618051322 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.022550853 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.02737121 seconds)
  done (took 15.942701929 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.103591417 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.016336576 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.119421591 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.062588675 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.003416593 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.973373991 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.972081732 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.968172273 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.05596632 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.968754874 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.058220003 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.972020268 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.968314353 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.968428604 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.968783125 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.96944243 seconds)
  done (took 54.088286773 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.972459985 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.974158774 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.970011333 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.969843029 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.993418727 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.065504659 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.997729674 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.975948209 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.989782848 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.021299268 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.997554147 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.978330044 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.984147632 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.978495761 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.077989288 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.028633179 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.040891759 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.063016705 seconds)
  done (took 37.972863574 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.071001521 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.98238525 seconds)
  done (took 10.955762731 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.994336115 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.992556173 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.970588632 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.994650527 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.981943779 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.98663324 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.99411711 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.996451479 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.993348019 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.971408246 seconds)
  done (took 71.800487721 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.97514348 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.975070591 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.324516826 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.986260814 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.982932825 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.004561408 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.974988403 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.006484817 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.978121637 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.969017922 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.984917241 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.330951768 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.987243095 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.972914325 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.396504325 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.991960091 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.980223803 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.009155605 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.012782079 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.978718296 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.980369069 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.976975779 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.2194327 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.843323749 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.974439706 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.987622711 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.981744762 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.970559185 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.97134376 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.973248948 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.976656796 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.971578749 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.976681299 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.976957686 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.990745753 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.980179004 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.634063732 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.995465065 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.982551144 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.060942591 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.030043219 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.981754423 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.971604221 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.998426175 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.983327073 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.10239051 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.934800468 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.075530193 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.011245726 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.157952436 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.445579101 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.030368764 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.157058648 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.148135811 seconds)
  done (took 140.181944386 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.004074621 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.451726166 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.154102995 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.008762103 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.384369436 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.215907155 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.793864013 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.031078929 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.979001031 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.185017315 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.140734687 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.096432449 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.973968456 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.974561959 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.97363404 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.972066639 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.142584467 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.041469115 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.973405771 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.971568937 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.995533164 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.214841508 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.096804976 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.975913734 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.996432715 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.19050947 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.024034475 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.112782819 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.411778684 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.997053315 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.036531618 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.975351744 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.975674755 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.973229131 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.015760641 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.0862171 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.077358768 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.975957165 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.602808223 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.973355653 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.61765744 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.176900564 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.087832719 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.101119674 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.213714968 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.187284449 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.670503779 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.973384539 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.697139779 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.137445039 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.18473837 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.186416107 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.071726042 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.977529788 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.413928478 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.974520449 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.973799658 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.204742574 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.138040693 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.099296085 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.977505049 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.976359297 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.975011213 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.209878355 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.977148496 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.085727672 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.977897167 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.977289266 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.088040772 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.101311792 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.132164396 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.198603661 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.008921306 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.285452947 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.939762973 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.182988892 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.041228814 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.205547266 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.980603512 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.975904036 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.073895742 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.429007462 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.130130523 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.214602793 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.283603986 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.012471346 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.467453217 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.974625569 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.18671634 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.119200979 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.195456206 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.227664372 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.03027683 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.831649341 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.975450803 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.97644512 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.838275261 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.095191045 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.979059674 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.508856664 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.217750991 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.558601243 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.997483082 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.4247155 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.082434226 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.980726992 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.599234665 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.976282416 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.188684716 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.021999031 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.978580518 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.97783442 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.121228019 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.724329939 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.976321329 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.03465136 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.038975727 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.982437357 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.133828414 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.979681101 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.227298574 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.688345249 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.213230548 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.979928378 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.011099428 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.148889241 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.233869386 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.980770185 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.311363338 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.222732946 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.073575567 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.191673446 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.485725455 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.978862618 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.320378266 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.981332961 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.979031227 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.14465491 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.700202976 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.142538483 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.982460532 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.225573257 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.000810507 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.033088343 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.982215366 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.22845781 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.013826779 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.028811011 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.982398601 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.108410616 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.980434819 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.023339922 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.139385519 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.979895472 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.979127726 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.837815763 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.981483108 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.13202478 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.210865702 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.994557341 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.050713631 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.349986954 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.978986736 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.078458572 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.005506522 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.400798428 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.48644236 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.138817454 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.626744723 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.250769527 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.979778274 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.212929793 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.15575932 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.983262116 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.981865018 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.748550522 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.220806792 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.980082849 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.134305608 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.696755409 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.162844577 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.190567381 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.984330381 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.032523676 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.985160972 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.226820421 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.512662405 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.082184237 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.980013868 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.981575219 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.980591387 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.983375689 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.183549155 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.014582378 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.612426622 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.121230522 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.247120067 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.202320707 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.289071603 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.041466172 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.983662218 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.295082313 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.98320573 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.044917527 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.984828807 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.991544955 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.219799417 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.983872678 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.189409857 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.328902195 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.056114141 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.026863068 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.984580038 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.983700626 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.956607175 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.151949991 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.093866103 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.985238857 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.183436764 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.023863801 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.10267184 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.180570188 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.073873234 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.947096576 seconds)
  done (took 909.940968231 seconds)
done (took 1242.776599648 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.981928455 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.985124015 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.984727372 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.984570723 seconds)
  done (took 29.844105738 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.984051877 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.984804858 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.985559085 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.983121517 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.983845389 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.986347401 seconds)
  done (took 13.822677944 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.981629467 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.985044611 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.984756809 seconds)
  done (took 22.859670598 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.385370632 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.282322014 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.072092672 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.140824008 seconds)
  done (took 10.7923934 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.987672351 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.987771305 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.986679321 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.986861086 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.986100547 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.987650407 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.985084008 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.986816512 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.984559118 seconds)
  done (took 19.797979565 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.524068307 seconds)
done (took 105.550053909 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.438283134 seconds)
    (2/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.996811375 seconds)
    (3/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.608358815 seconds)
    (4/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.289630193 seconds)
    (5/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.382506242 seconds)
    (6/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.259255614 seconds)
    (7/341) benchmarking ("map", abs, BigInt, true)...
    done (took 6.98746073 seconds)
    (8/341) benchmarking ("collect", "all", Float64, true)...
    done (took 4.080873609 seconds)
    (9/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.112838263 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.983701667 seconds)
    (11/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.006856668 seconds)
    (12/341) benchmarking ("sort", BigInt, false)...
    done (took 6.984077382 seconds)
    (13/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.252013747 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.402941265 seconds)
    (15/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.827193191 seconds)
    (16/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.146539909 seconds)
    (17/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.115489886 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.005712689 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.388531354 seconds)
    (20/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.31536259 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.006417828 seconds)
    (22/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.332512542 seconds)
    (23/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.897799445 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.152638455 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.122541181 seconds)
    (26/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.323449322 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.946624278 seconds)
    (28/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.242119149 seconds)
    (29/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.354877522 seconds)
    (30/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.060555798 seconds)
    (31/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.988088613 seconds)
    (32/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.027668809 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.995188466 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.130903382 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.113313993 seconds)
    (36/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 1.998719345 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.294461769 seconds)
    (38/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.257230379 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.048991267 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.016759792 seconds)
    (41/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.718998233 seconds)
    (42/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.118527072 seconds)
    (43/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.786821796 seconds)
    (44/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.627246016 seconds)
    (45/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.419780176 seconds)
    (46/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 6.986898607 seconds)
    (47/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 8.702054165 seconds)
    (48/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.520889048 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.031050859 seconds)
    (50/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.748698865 seconds)
    (51/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.016863789 seconds)
    (52/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.132478308 seconds)
    (53/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.341829836 seconds)
    (54/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.306518561 seconds)
    (55/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.996836107 seconds)
    (56/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.135515391 seconds)
    (57/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.987527658 seconds)
    (58/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.147216615 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.987494601 seconds)
    (60/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.225099559 seconds)
    (61/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.237866756 seconds)
    (62/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.167433691 seconds)
    (63/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.105708935 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.326282009 seconds)
    (65/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.331390216 seconds)
    (66/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.99594369 seconds)
    (67/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.986864541 seconds)
    (68/341) benchmarking ("collect", "all", Int8, true)...
    done (took 3.249294381 seconds)
    (69/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.914959264 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.960890934 seconds)
    (71/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.113087569 seconds)
    (72/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.111174652 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.002651727 seconds)
    (74/341) benchmarking ("sort", Float32, false)...
    done (took 6.986787535 seconds)
    (75/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.603074314 seconds)
    (76/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.003856114 seconds)
    (77/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.490639145 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.414900813 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.994781653 seconds)
    (80/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 8.574254013 seconds)
    (81/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.421043295 seconds)
    (82/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.26764327 seconds)
    (83/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.423614009 seconds)
    (84/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.122022978 seconds)
    (85/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.264721972 seconds)
    (86/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.293486493 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.994817466 seconds)
    (88/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 4.41099475 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.396840099 seconds)
    (90/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.919555741 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.182063799 seconds)
    (92/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.003631094 seconds)
    (93/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.530657033 seconds)
    (94/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.103372724 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.132340936 seconds)
    (96/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.523618971 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.911018933 seconds)
    (98/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.014865126 seconds)
    (99/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.028527936 seconds)
    (100/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.921058737 seconds)
    (101/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 6.996457105 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.155585909 seconds)
    (103/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.119153467 seconds)
    (104/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.201808132 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.237206138 seconds)
    (106/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.142006655 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.991855728 seconds)
    (108/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.613267885 seconds)
    (109/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.00022758 seconds)
    (110/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.005530893 seconds)
    (111/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.188043533 seconds)
    (112/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.151421428 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.999436443 seconds)
    (114/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.989384624 seconds)
    (115/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 9.043200456 seconds)
    (116/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.296379482 seconds)
    (117/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.120850971 seconds)
    (118/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.992900503 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.998127781 seconds)
    (120/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.414209954 seconds)
    (121/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.29775608 seconds)
    (122/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.001638233 seconds)
    (123/341) benchmarking ("map", abs, Int8, true)...
    done (took 4.902662517 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.316947383 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.428025137 seconds)
    (126/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.991304664 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.504816077 seconds)
    (128/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.480232752 seconds)
    (129/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 6.990677312 seconds)
    (130/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 4.310880774 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.148793428 seconds)
    (132/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.99112638 seconds)
    (133/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.009531017 seconds)
    (134/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.009135515 seconds)
    (135/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.092740704 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.016234451 seconds)
    (137/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.468288591 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.150758559 seconds)
    (139/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.43872721 seconds)
    (140/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.003082389 seconds)
    (141/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 4.445142462 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.088426848 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.311532524 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.649319814 seconds)
    (145/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.138407732 seconds)
    (146/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.310364903 seconds)
    (147/341) benchmarking ("sort", Bool, false)...
    done (took 2.21558424 seconds)
    (148/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.991425208 seconds)
    (149/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.159554893 seconds)
    (150/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.522438997 seconds)
    (151/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.871858664 seconds)
    (152/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.340869572 seconds)
    (153/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.378725881 seconds)
    (154/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.400946009 seconds)
    (155/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.269895133 seconds)
    (156/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.999109021 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.015527945 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.00861493 seconds)
    (159/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.14137927 seconds)
    (160/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.322432309 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.225661864 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 6.993700381 seconds)
    (163/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.12700106 seconds)
    (164/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.417343536 seconds)
    (165/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.003825415 seconds)
    (166/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.161821495 seconds)
    (167/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.542582084 seconds)
    (168/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.850115461 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.147200585 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.479936746 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.161351584 seconds)
    (172/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.996972631 seconds)
    (173/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.109330025 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.491007075 seconds)
    (175/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 9.027458134 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.282653918 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.339969698 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.266878189 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.162909186 seconds)
    (180/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.098460661 seconds)
    (181/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.332575855 seconds)
    (182/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.448567762 seconds)
    (183/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.136641054 seconds)
    (184/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.070114044 seconds)
    (185/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.304204099 seconds)
    (186/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.004396071 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.012594318 seconds)
    (188/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.196486253 seconds)
    (189/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.525332356 seconds)
    (190/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.121622814 seconds)
    (191/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.121648195 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.154548602 seconds)
    (193/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 6.996496851 seconds)
    (194/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.970792405 seconds)
    (195/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.133214359 seconds)
    (196/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.132542535 seconds)
    (197/341) benchmarking ("sort", Float64, false)...
    done (took 6.790322661 seconds)
    (198/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.151624554 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.124162671 seconds)
    (200/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.600657179 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.477326332 seconds)
    (202/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.152488107 seconds)
    (203/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.995787194 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.099863211 seconds)
    (205/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.008534033 seconds)
    (206/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.219644118 seconds)
    (207/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.119360025 seconds)
    (208/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.994693102 seconds)
    (209/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.383158209 seconds)
    (210/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.904491647 seconds)
    (211/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.425768816 seconds)
    (212/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.155164639 seconds)
    (213/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.798294377 seconds)
    (214/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.187709954 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.026296395 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.295559643 seconds)
    (217/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.273184972 seconds)
    (218/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.205848922 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.25386234 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.015394261 seconds)
    (221/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.833036922 seconds)
    (222/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.409202926 seconds)
    (223/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.211936379 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.679630628 seconds)
    (225/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.228934469 seconds)
    (226/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.006172508 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.525554279 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.456270952 seconds)
    (229/341) benchmarking ("sort", Int8, false)...
    done (took 5.656972395 seconds)
    (230/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.056594573 seconds)
    (231/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.394930436 seconds)
    (232/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.069415838 seconds)
    (233/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.996486378 seconds)
    (234/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.420310491 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.980019163 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.44604331 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.796676695 seconds)
    (238/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.213373182 seconds)
    (239/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.999748698 seconds)
    (240/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.005309498 seconds)
    (241/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.159463276 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.309875194 seconds)
    (243/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.326803626 seconds)
    (244/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.268994225 seconds)
    (245/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.01886292 seconds)
    (246/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.087391657 seconds)
    (247/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.896964086 seconds)
    (248/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.311475223 seconds)
    (249/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.444817285 seconds)
    (250/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.229281454 seconds)
    (251/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.081024387 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.152478655 seconds)
    (253/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.522745878 seconds)
    (254/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.018757671 seconds)
    (255/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.407131945 seconds)
    (256/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.743806093 seconds)
    (257/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.050810828 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.165379266 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.407624853 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.159209399 seconds)
    (261/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.147409996 seconds)
    (262/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.99763952 seconds)
    (263/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.005565035 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 3.303697345 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.530489251 seconds)
    (266/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.448101265 seconds)
    (267/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.109559393 seconds)
    (268/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.93633332 seconds)
    (269/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.554067496 seconds)
    (270/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.178310982 seconds)
    (271/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.284279094 seconds)
    (272/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.505428033 seconds)
    (273/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.342555202 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.392123172 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.063362225 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.008874513 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 5.923428449 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.037503941 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.166447669 seconds)
    (280/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.028926062 seconds)
    (281/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.547859617 seconds)
    (282/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.559805382 seconds)
    (283/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.154050302 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 6.999616466 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.801574847 seconds)
    (286/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.530328053 seconds)
    (287/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.349730614 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.15002278 seconds)
    (289/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.030169771 seconds)
    (290/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.002988001 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 6.999779151 seconds)
    (292/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.006625997 seconds)
    (293/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.036798813 seconds)
    (294/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.256843463 seconds)
    (295/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.023805392 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.139494682 seconds)
    (297/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.272120928 seconds)
    (298/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.022227058 seconds)
    (299/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.164326574 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.20486464 seconds)
    (301/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.150375255 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.902708866 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.012932811 seconds)
    (304/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.12067428 seconds)
    (305/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.551784949 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.137298025 seconds)
    (307/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.003883838 seconds)
    (308/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.570137772 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.281352569 seconds)
    (310/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.013888739 seconds)
    (311/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.198412338 seconds)
    (312/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.150267458 seconds)
    (313/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.011100828 seconds)
    (314/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.001127094 seconds)
    (315/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 4.716574463 seconds)
    (316/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.449168692 seconds)
    (317/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.544255241 seconds)
    (318/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.221532025 seconds)
    (319/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.067027448 seconds)
    (320/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.293363865 seconds)
    (321/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.464702944 seconds)
    (322/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.43966605 seconds)
    (323/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.257174615 seconds)
    (324/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.568704438 seconds)
    (325/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.007368748 seconds)
    (326/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.417870592 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.166831037 seconds)
    (328/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.201324842 seconds)
    (329/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.896253896 seconds)
    (330/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.007055019 seconds)
    (331/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.0081696 seconds)
    (332/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 3.933087177 seconds)
    (333/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.156679016 seconds)
    (334/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.054034114 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.392996269 seconds)
    (336/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.546525593 seconds)
    (337/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.019914739 seconds)
    (338/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.084263415 seconds)
    (339/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.124961281 seconds)
    (340/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.13554194 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.130965464 seconds)
  done (took 1181.095177206 seconds)
done (took 1183.148402418 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.072308539 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.025998711 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.599415792 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.042877126 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.026128535 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.027742197 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.575421806 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.0633074 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.03498288 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.574781422 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.043135999 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.026168672 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.03484189 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.042904278 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.033594642 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.036700534 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.032008126 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.05115137 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.043554531 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.031431084 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.085185741 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.03067571 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.025857806 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.073006464 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.026991963 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.035269366 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.069560475 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.073468067 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.072428175 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.0280227 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.033409551 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.42284623 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.095584828 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.033371682 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.034332089 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.034963297 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.031713793 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.035098472 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.069285842 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.034432301 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.028063218 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.038888195 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.03222971 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.029841471 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.027297748 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.026337769 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.030102512 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.12292375 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.038752824 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.431730436 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.129319138 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.070149282 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.074879532 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.030041183 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.030180188 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.030527532 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.074298946 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.034420845 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.032822505 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.433878137 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.123836601 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.037168936 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.431888049 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.110250348 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.039477559 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.039159065 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.028040271 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.070914812 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.427952147 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.635340192 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.067922293 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.052072753 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.0293795 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.031308073 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.039951958 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.57842742 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.048630688 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.707793077 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.06286724 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.03880284 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.033672029 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.032254208 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.030818515 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.038009618 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.077177097 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.02882462 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.034082807 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.035081111 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.040708381 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.425300643 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.090145456 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.602916385 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.04369668 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.073305621 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.077095994 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.709868659 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.064330236 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.071907407 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.033000498 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.42775114 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.087902383 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.073591507 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.032591564 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.037135436 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.126626532 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.07271619 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.073887738 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.031986168 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.053677171 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.037137482 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.030599987 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.042285914 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.053939609 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.048130502 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.039129821 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.030383134 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.041121738 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.036494262 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.072281882 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.040882288 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.038419691 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.037715211 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.031813385 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.078202228 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.079283165 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.039324549 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.126923416 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.036006978 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.127867695 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.03954154 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.038489661 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.030208577 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.438163326 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.092489366 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.055806966 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.036214887 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.056675842 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.0547592 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.03966505 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.034164975 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.039383205 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.034814168 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.079195242 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.032176531 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.056948079 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.079977697 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.042615874 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.038642379 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.073796438 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.050022075 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.05534025 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.037514702 seconds)
done (took 321.209797478 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.060794121 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.378514392 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.077791195 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.012251185 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.085870041 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.067596061 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.012591235 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.012592096 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.012161476 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.434701222 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.012181187 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.013338729 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.390256749 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.012492592 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.063671563 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.012392195 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.012579719 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.300431309 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.016386811 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.073630756 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.025296252 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.013100954 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.012889183 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.430822986 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.011337019 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.018463942 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.073661458 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.013293856 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.278554395 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.017281798 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.027410865 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.277943973 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.073572374 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.01645021 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.01467699 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.014729891 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.087590822 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.020503883 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.064162651 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.064004848 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.078264169 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.022812443 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.019991351 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.042586175 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.018547831 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.017956714 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.014185878 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.0195662 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.012085184 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.015244588 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.276171334 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.015347557 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.015847673 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.015096233 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.014406461 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.020876632 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.015262486 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.018030698 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.07565071 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.018560029 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.064706442 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.432765166 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.474097361 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.01465781 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.030215083 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.015293413 seconds)
  done (took 160.332189639 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.098592112 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.112234468 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.104394406 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.022774097 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.076275338 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.098760884 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.021084614 seconds)
  done (took 16.471543071 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.022499029 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.013872196 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.046782766 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.040943764 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.017589406 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.189804268 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.02872503 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.017403776 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.043983476 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.016918856 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.380011752 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.043409723 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.016114767 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.021991443 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.028405557 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.057272334 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.017569648 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.018102332 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.122789835 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.091009532 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.016588325 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.016320567 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.05087675 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.028636495 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.015442033 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.017954003 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.018551726 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.023330003 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.015777144 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.016445988 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.015320957 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.031124387 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.017038034 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.005030099 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.015807756 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.018271448 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.019713174 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.016603617 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.017135089 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.403538823 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.016795625 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.01638776 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.016586277 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.016730973 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.01684038 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.041964791 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.016636087 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.016475684 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.017054645 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.017643058 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.052314765 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.017511595 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.016788439 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.017754664 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.053514452 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.018571977 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.020562113 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.017626506 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.018382028 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.017845844 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.017708465 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.093611816 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.045520562 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.016978569 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.046924171 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.057736073 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.018888715 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.018220411 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.017735024 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.048875323 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.017839762 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.050266834 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.017288545 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.108351553 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.017934222 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.196305558 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.043590701 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.022041659 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.021936088 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.981940979 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.025878921 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.018500685 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.020595143 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.025743332 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.019407817 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.018120218 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.018537787 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.020860557 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.026364266 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.019016181 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.070715797 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.017928415 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.022107676 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.110541254 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.018786879 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.127096364 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.048712747 seconds)
  done (took 202.888216795 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.025066076 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.02191019 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.036958227 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.021363851 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.01940207 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.024972033 seconds)
  done (took 14.091578887 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.023204489 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.02463526 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.019729448 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.019691326 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.023074871 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.023653036 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.020092577 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.022291077 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.027318837 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.019682358 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.023388295 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.020418442 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.022185273 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.023434089 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.020537112 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.020021334 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.020750964 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.020550009 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.020524456 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.02307803 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.220565391 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.022906885 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.023239319 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.024714442 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.029007476 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.020820713 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.029748958 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.020787226 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.020838622 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.029386177 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.027978244 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.02437937 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.02462751 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.029562131 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.026127311 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.024907596 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.02659987 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.021063902 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.020943906 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.024541372 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.02181423 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.024521313 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.021805577 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.021657994 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.025514298 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.031035275 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.027440233 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.031063262 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.021839784 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.021769409 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.022867669 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.02174782 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.02493141 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.022509485 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.028739342 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.028793571 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.026833254 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.022137052 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.025078003 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.02584113 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.027673857 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.025030189 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.026190999 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.028273631 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.022629026 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.023175423 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.025965208 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.030135493 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.025485564 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.022506947 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.022837321 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.023036508 seconds)
  done (took 147.876994591 seconds)
done (took 543.594287221 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.068650154 seconds)
  done (took 9.013665914 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.195294677 seconds)
  done (took 9.276093031 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.352980166 seconds)
  done (took 14.310256111 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.07705792 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.06346852 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.042959926 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.032678177 seconds)
  done (took 30.187151548 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.244672062 seconds)
  done (took 9.194009242 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.043106469 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.025459831 seconds)
  done (took 16.111436326 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.182868509 seconds)
  done (took 9.139083318 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.336534657 seconds)
  done (took 9.301644368 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.049410706 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.02671387 seconds)
  done (took 16.060956962 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.02575426 seconds)
  done (took 8.972615405 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.626468076 seconds)
  done (took 10.663584115 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.037843918 seconds)
  done (took 9.018584119 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.099237719 seconds)
  done (took 9.046466491 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.766109371 seconds)
  done (took 9.714018342 seconds)
done (took 171.955989444 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.038430466 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.026457023 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.026262572 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.023756507 seconds)
  done (took 30.061772954 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.06524498 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.065067595 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.068033654 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.07193487 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.054520822 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.055337493 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.06523434 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.065452386 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.054745833 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.071275602 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.065732769 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.084369852 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.071516835 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.068693759 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.06873962 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.082014852 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.072515856 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.065507098 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.055164338 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.069036712 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.084886603 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.084839756 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.026142949 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.025894075 seconds)
  done (took 51.514499454 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.233178866 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.099163468 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.193301042 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.081355832 seconds)
  done (took 10.555631558 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.026034714 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.10058714 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.085289867 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.07154647 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.086209273 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.193089295 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.08596785 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.232880811 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.204248475 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.204667933 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.031357454 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.042710251 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.044490927 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.086223181 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.193292591 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.026760571 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.027048986 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.205116009 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.101854872 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.224920858 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.027555279 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.086903807 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.08688303 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.086741512 seconds)
  done (took 52.511529629 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.028732286 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.040545602 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.039047143 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.028354935 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.029175508 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.028348472 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.039407125 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.02937678 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.057513824 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.031819443 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.028578886 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.02837049 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.029430325 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.029281068 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.033352357 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.048147346 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.047557027 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.030920975 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.033572298 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.042082068 seconds)
  done (took 42.654049208 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.028731809 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.028935042 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.234444702 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.192895856 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.030084893 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.032286053 seconds)
  done (took 34.498675968 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.075256182 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.082777305 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.102039454 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.145705222 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.151271942 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.104555547 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.178141922 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.252111867 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.047089022 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.142892845 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.353081405 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.322558987 seconds)
  done (took 27.927294734 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.354411491 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.373438415 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.120606723 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.121253806 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.065494301 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.041259446 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.044438152 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.07081603 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.049976836 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.062514194 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.045962239 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.050047716 seconds)
  done (took 47.640837467 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.235959308 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.213625271 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.369498896 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.755334948 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.549341577 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.105525594 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.447968291 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.602880433 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.889200971 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.883067725 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.570228615 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.133670671 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.667771151 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.131819546 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.285096311 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.501968636 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186648276 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.14080139 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.578796389 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.134649457 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108029704 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.05464584 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.057679505 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.574928432 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.366822145 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.186278323 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.403507241 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.281337898 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113001396 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.319936826 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.156340217 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.102424467 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.244512499 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.371589731 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.590034135 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.166157768 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.164462523 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.091555786 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.120083681 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.106435627 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.084770658 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.094446746 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.60116379 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.100126801 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3236307 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067626105 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.092669799 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.663624154 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.018405542 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.243346504 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.419337079 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.900443769 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.357054096 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.190080699 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.496822222 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.608923939 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405452865 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.518065685 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184640858 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.140051537 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.528419831 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.29946875 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.529598845 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.182403507 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.770739139 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.528989348 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.265283445 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.246644892 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.536256974 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.509349118 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.359152658 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.333951151 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.928141804 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.176908978 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157556821 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.172637784 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211460226 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.233214346 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.872237759 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.635288861 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.072625431 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197514241 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.768720729 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083880756 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.064300169 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095769636 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.92728551 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.116981679 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.202910343 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.151562375 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.54360017 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.146467082 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.103354942 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.095345205 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063296909 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.013051 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.740170165 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.14749803 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.024685467 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.611488781 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.14021272 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.004952208 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.119064511 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.05755639 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.44515108 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107883845 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.792974106 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.636012082 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.333368352 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.622047478 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057266562 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.878108429 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.125515341 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124095102 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035284301 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.87926452 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.009370003 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.131028834 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.213040882 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.036837093 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.990044348 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.051169729 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.205285321 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096030738 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.063494941 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.036796901 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.049064225 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.034568546 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.043691571 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068277165 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062818469 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.538205645 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.150074787 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.039061522 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.979667979 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.04756342 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.514333759 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.164656704 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.085375908 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.457409464 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.631301497 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.79281776 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.00816024 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.876310204 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.490008653 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.144563184 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121322516 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.176373732 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.200702269 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.122935361 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.036501183 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.194003008 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.049017312 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.045868865 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.037721416 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.779940382 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.765026102 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.0895063 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.03882001 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.997276319 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.008516722 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.255411923 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.676048367 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077189094 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.048591421 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.126530363 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.218076262 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.044891665 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.991225203 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.402009066 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.281538084 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.55070249 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.403227922 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.682938422 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.13198003 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052619949 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.222730786 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.126627961 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.711114862 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.24752253 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.369718541 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.544583681 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.034561999 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039132081 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.129231591 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.433920722 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062850517 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.783835621 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.028183398 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.992573002 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.075070671 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.024738301 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.989853635 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.04607633 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.492196905 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.047457934 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.591180383 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.336865395 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064236924 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.040299175 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.040768775 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047858525 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.2925771 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161979991 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.113402486 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.117835753 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.992809601 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.688316922 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.087188938 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.043127699 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.040418316 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.406962919 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.260203943 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.06342971 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.039241451 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126420351 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.127982378 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.645413951 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.044937914 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.045577263 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.511526177 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.049915428 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.556652953 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.054707686 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.190095084 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.080900161 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.079824261 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.898691045 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.560573997 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.14843979 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.122463032 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.040429544 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.04054048 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.307097634 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.054184834 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.305716718 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.52173271 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.649530192 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.730003525 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.143381526 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.630293658 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.063192832 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.042966861 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.689239728 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.080992064 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.043839546 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.210300982 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.643753365 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.14908624 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.198238384 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.12677702 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.041708195 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.492796138 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.633271243 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.127075104 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.979310777 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.154960046 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.043398859 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.246578737 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.797075627 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.04430297 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.042588524 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051642673 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.232839963 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.212559663 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.429461515 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.546131315 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.383999005 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.994181755 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.051173362 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.14091737 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.323976157 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.043902369 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.08013914 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.699894073 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.685682322 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.824017437 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.567880768 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.256650177 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.661102871 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.490034046 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.147329891 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.059886266 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.97890858 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.238914539 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.006968658 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174495235 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.995453476 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.812726902 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.34657356 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.0697144 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.494536215 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.084365291 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.55502983 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.411093297 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.074105468 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.18315094 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.076968937 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.045177069 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.112723064 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.044758786 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.997310429 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.173273091 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.055490605 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.483446782 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094608792 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.09213653 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.05314213 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.600040093 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.078167881 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.049898791 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.788964145 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.075101405 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175115186 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130405221 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.108533371 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.177678465 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.048330559 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.061550803 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.615927197 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.495468567 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.136111813 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.614582298 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114585013 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.790383768 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.047599444 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.229805737 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.0544407 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.71315301 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101915756 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.440365848 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.055212023 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.238824924 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.358543788 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.161594435 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.05418154 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.001298163 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.618093022 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.178136253 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.526861593 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.050651797 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.804783691 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.514661894 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.063847492 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.555580778 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.028928048 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.050103815 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.405524464 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.727295547 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.800068907 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089803763 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.050234923 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157157617 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.235118351 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.116960342 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.774912012 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.060159333 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.074738568 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.231676186 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172464857 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.99017299 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.57586094 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.796816649 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.312880343 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.065473949 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.217756724 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.147218147 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.205014532 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.092352405 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.125895955 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.793068683 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.498135798 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151434378 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.000453117 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.049029711 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.304020673 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.51648217 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.133061204 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.328483316 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.473458879 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.165156924 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.051557763 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.188092256 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.511382699 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.768877787 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.737231133 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374369976 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.555296684 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.505441473 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.049999552 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.792204786 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.234132399 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.166006134 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.440534445 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.967351128 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.430300964 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.330294304 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.057124794 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.001994676 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.221450649 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.0641819 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.124459101 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.85083341 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.336121972 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.097909066 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.85657239 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.630376156 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.040759549 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.080707004 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.085236788 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.076237083 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.072983569 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.051669439 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.579875358 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.438330979 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.068406683 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.007478708 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.802506641 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.002585694 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.23510008 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.036737163 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.097757456 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.856813917 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.094073063 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.203708079 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.571512099 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.118521467 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.097636233 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.004007444 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.099253625 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.035311164 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.689279908 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.831719077 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077969591 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.056020701 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.22153162 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.037471223 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.099439216 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.060723892 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.360616223 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.502573642 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.508603591 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217896527 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.408142691 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.335261359 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.957975874 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.151808675 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.281329973 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.004973097 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.160679447 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.033819021 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.103134757 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.129511039 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.054129606 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.05942915 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.293507093 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148899096 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.209195202 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.129301962 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.151639358 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.080103474 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.143233505 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.191629514 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.057134761 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.062544624 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.054314 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.318266109 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.075878751 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.011802577 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.239293451 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136304855 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.440905235 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.131541019 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.940764874 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.062555071 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.958772347 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.205825005 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.560457487 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.056659406 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.840312841 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.125387742 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.055802378 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.508547887 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.69329283 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.224309132 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.310031798 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.979436895 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.052626749 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.108503928 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.060607603 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.073515014 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.654549146 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.431747238 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.055437398 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.509341679 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.129604835 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.064728805 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.809830137 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.53445845 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.057084072 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.105835568 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.01482109 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.529308503 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.312048742 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.069623229 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196609621 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.061620511 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.009898099 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.057402541 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.140988927 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.563623457 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.061321764 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.579359444 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.172415075 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193294079 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06189954 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.0589191 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.063601751 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.240880805 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.238437683 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.082063299 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.351981022 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.226913241 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.063510011 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.583674227 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.742004052 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.21201643 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.108827218 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.047456693 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.418935938 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.895666962 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.058436699 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.597564744 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237845335 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.060181156 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.285215046 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.307057049 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.058805231 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.249828982 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.058400728 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399355744 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.361495032 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.609215304 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.160763223 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.036372143 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.222725196 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.060931847 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.582713678 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.505759006 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143179772 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.058363641 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.072223148 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.059245474 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.10960011 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.650786745 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235579609 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.160694916 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.243751863 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.569724187 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.062012942 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.012387891 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.058990052 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.087121985 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.063297534 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.010492014 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.096180455 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.914686718 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.260197495 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.383068539 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.010667611 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.228855227 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.048785834 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.014372573 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.537684121 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.059995963 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.367190555 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.0125715 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064028072 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.014953513 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.123370615 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.194986809 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.433779917 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.062211278 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.752153401 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.069431859 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.060352879 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.060437892 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.149269878 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.062135427 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.304761012 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.511990356 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.253026339 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.218560357 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.919661512 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.094291286 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.030926784 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.106386389 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.878548781 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.61414316 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.13309965 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.250716981 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.817387258 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.040847877 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.586091456 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087078722 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.767491578 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.069742615 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.065950002 seconds)
  done (took 2408.746611296 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.142669059 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.136772458 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.143435752 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.15249977 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.115809208 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.123081582 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.102630277 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.084893701 seconds)
  done (took 58.986580342 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.062122452 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.043272466 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.079524296 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.065926073 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.066905403 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.07349429 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.276771535 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.1038031 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.064770477 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.074216335 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.065007206 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.071588956 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.064589341 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.066595024 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.074185594 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.313760808 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.089632214 seconds)
  done (took 80.694104895 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.086491687 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.718358172 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.069120615 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.282421384 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.137503932 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.294914901 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.069567293 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.06621102 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.714045932 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.338888538 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.142483237 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.075038822 seconds)
  done (took 91.442846142 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.069150656 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.065869128 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.065973705 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.065577616 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.065261264 seconds)
  done (took 12.327601887 seconds)
done (took 2951.644706838 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.29093312 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.216151977 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.163850392 seconds)
  done (took 6.366623563 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.122150579 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.196441318 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.269000234 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.20223239 seconds)
  done (took 10.787621723 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.344630599 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.541516582 seconds)
  done (took 6.871995985 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.603655741 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.118787178 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.624010445 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.068734901 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.066754205 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.068420899 seconds)
  done (took 23.205459195 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.065610944 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.065181072 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.065536447 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.065204442 seconds)
  done (took 10.254558195 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.064196325 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.054584341 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.067774323 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.082110451 seconds)
  done (took 22.254538413 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.426272696 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.311624249 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.820212252 seconds)
  done (took 9.54392629 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.878466369 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.440720573 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.85751744 seconds)
  done (took 10.162751705 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.331872694 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.97629795 seconds)
  done (took 8.294576267 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.2190451 seconds)
  done (took 4.20583844 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.542363686 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.54374523 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.901257465 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.922489511 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.058199569 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.377622862 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.430480277 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.456097866 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.735954028 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.576152601 seconds)
  done (took 28.530783683 seconds)
done (took 157.101882711 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.068140063 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.479633924 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.253092905 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.735970793 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.165337622 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.255397935 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.142533432 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.515014786 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.645657443 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.64825827 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.735463069 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.163142787 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.133118747 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.474204109 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.133024839 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.424287826 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.474549882 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.044874133 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.656166841 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.58100724 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.150430518 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.329860596 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.431962858 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.331311612 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.481523561 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.206933143 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.25931685 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.431948656 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.930217145 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.310090474 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.211849886 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.915427764 seconds)
  done (took 182.708133568 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.067585846 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.069799851 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.072219363 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.070977465 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.985406953 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.072278523 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.070132831 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.071139333 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.883273769 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.883948626 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.071381283 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.980525876 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.071820188 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.07154171 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.073665973 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.071564822 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.011483022 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.072366233 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.071637268 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.070638038 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.0736384 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.755455031 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.072777519 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.778403806 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.013286075 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.07277249 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.072563184 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.072203774 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.072433738 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.073160944 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.071057048 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.073147772 seconds)
  done (took 219.014874717 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.069534582 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.072374994 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.075999669 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.073640444 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.072958876 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.073348923 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.075892956 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.073719484 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.073038202 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.073814955 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.073479187 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.07343178 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.077062063 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.074157255 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.074682528 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.07352278 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.075046109 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.074292624 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.07386928 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.07303744 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.076741464 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.074118781 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.074081367 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.074342303 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.073290115 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.074939064 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.073801996 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.078013733 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.074857913 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.073403352 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.075632804 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.074442673 seconds)
  done (took 228.376603922 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.367823581 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.071823114 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.073376976 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.448555764 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.073701184 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.072935121 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.428483013 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.370688865 seconds)
  done (took 21.909621899 seconds)
done (took 654.013646002 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.778887402 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.954954534 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.253009413 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.102292387 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.714465017 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.169411278 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.093456478 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.193769343 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.860322559 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.216187071 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.582849301 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.108597956 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.979278947 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.136336853 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.250994932 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.178620827 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.503227868 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.811255319 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.273679903 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.907065409 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.332402683 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.111416029 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.217793552 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.912150665 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.600351884 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.140920025 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.219149083 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.513732825 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.104797353 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.381469951 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.128450642 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.499097368 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.126262259 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.104763574 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.17153113 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.155108036 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.417954387 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.120616496 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.239528811 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.88679364 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.925704138 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.733338178 seconds)
  done (took 112.105025558 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.084398485 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.08156512 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.081591409 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.081393375 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.081952747 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.082265138 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.081165407 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.081906197 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.081084645 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.081579386 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.081836475 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.082489491 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.081826347 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.083248257 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.081709132 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.082116256 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.082073801 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.082280603 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.081806799 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.082416302 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.081618956 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.082285167 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.079050445 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.08296876 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.081935242 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.083019741 seconds)
  done (took 56.150499605 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.075263437 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.288341274 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.438683519 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.117537648 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.077330654 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.080064052 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.117348889 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.088184608 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.079241712 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.079242886 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.20688429 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.083380421 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.093418631 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.431845345 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.114234457 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.076708397 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.076779536 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.07788785 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.300495752 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.100313541 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.120573224 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.087733556 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.118932525 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.098794459 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.08049336 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.079022969 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.082167925 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.569447971 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.092866327 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.208169981 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.180111007 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.129290659 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.546212874 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.447146901 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.157054782 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.086456892 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.078374997 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.258453352 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.094890998 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.079339857 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.118484658 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.090072835 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.435239 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.725018523 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.101434779 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.077962801 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.564226815 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.269595117 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.136568966 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.095119272 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.441733881 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.118204746 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.079292541 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.08064545 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.122602406 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.091077738 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.080375456 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.42156356 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.096772503 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.12031637 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.089900756 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.081167433 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.305165439 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.094077403 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.293157093 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.093820736 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.088198259 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.081288897 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.438594922 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.119643487 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.714730154 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.102911891 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.079644849 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.209907032 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.29937755 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.600181956 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.100193243 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.306028939 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.568372647 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.133100177 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.094842331 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.551444721 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.135443477 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.095281475 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.079893913 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.080534053 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.080761342 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.128724281 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.120858561 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.637014567 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.726659566 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.448700857 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.135176682 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.098063342 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.082420089 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.422607874 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.093981288 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.080883651 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.432964411 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.745513363 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.105585755 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.090594903 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.697545948 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.106219093 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.123472435 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.098297198 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.448540587 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.120039626 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.129631918 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.082582559 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.09036622 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.086320436 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.124098379 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.096368491 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.082263864 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.691841616 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.285794696 seconds)
  done (took 260.396064605 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.087080202 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.083436638 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.082950676 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.083841221 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.080467429 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.082728207 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.080636079 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.080342313 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.082171038 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.080249012 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.079806014 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.083482965 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.084571197 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.090250008 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.112584067 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.083590083 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.695807041 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.082183868 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.081829448 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.087025354 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.915100783 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.091237884 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.083240362 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.086870772 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.085277529 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.081948382 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.093967506 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.10975593 seconds)
  done (took 173.863962058 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.083708865 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.151778437 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.100192845 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.152933165 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.098352815 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.084521766 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.11619899 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.108327722 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.094295214 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.084204117 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.084124433 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.124407948 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.095241988 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.188351033 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.129418574 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.127470428 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.195580688 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.096007194 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.084076894 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.084549908 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.15321811 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.10593791 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.124009246 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.164318086 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.099621292 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.154415524 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.105720492 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.084619063 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.084764587 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.210695176 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.110545995 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.124849166 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.135825414 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.112315437 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.218387711 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.214996122 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.201681705 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.128685794 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.092187743 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.084795553 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.084960893 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.091167624 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.155156264 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.099759707 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.087259438 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.219938929 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.111867725 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.085841204 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.107500781 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.085038583 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.10268109 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.110815696 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.134218928 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.225657521 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.152444822 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.11489318 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.117844291 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.109858284 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.08901523 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.190282889 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.10334532 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.214131339 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.11400358 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.092278856 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.087302453 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.091998635 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.157938847 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.132346554 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.199574749 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.099427398 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.192207498 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.169571985 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.100923951 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.086916843 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.087013733 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.158410386 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.207571133 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.169476577 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.172683584 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.136400983 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.10520499 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.086821509 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.093900451 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.126590512 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.098098 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.216005425 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.219338083 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.098273963 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.087408509 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.087529989 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.088047492 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.122449293 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.171022204 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.143131899 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.213144995 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.139218095 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.138713632 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.098537152 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.105664429 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.096015132 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.131773596 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.099039219 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.105692398 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.46352382 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.143455826 seconds)
  done (took 225.732816796 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.493022895 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.1504412 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.173447148 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.364148334 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.501591576 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.338460101 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.145314613 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.159440802 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.15036334 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.292808297 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.197901548 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.213829738 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.142154796 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.120625509 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.150681888 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.151914596 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.185605449 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.499740573 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.268830536 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.076168762 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.147103934 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.427703083 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.468684678 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.54287177 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.191116697 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.629296194 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.790736045 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.248875869 seconds)
  done (took 69.243619256 seconds)
done (took 899.48541784 seconds)
SAVING RESULT...
DONE!
